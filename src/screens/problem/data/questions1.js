const QUESTIONS = {
  559: (
    <div class="elfjS" data-track-load="description_content">
      <p>Given a n-ary tree, find its maximum depth.</p>

      <p>
        The maximum depth is the number of nodes along the longest path from the
        root node down to the farthest leaf node.
      </p>

      <p>
        <em>
          Nary-Tree input serialization is represented in their level order
          traversal, each group of children is separated by the null value (See
          examples).
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png"
          style={{ width: "100%", maxWidth: 300 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root = [1,null,3,2,4,null,5,6] <br />
        <strong>Output:</strong> 3
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png"
          style={{ width: 296, height: 241 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root =
        [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
        <br /> <strong>Output:</strong> 5
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The total number of nodes is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          The depth of the n-ary tree is less than or equal to <code>1000</code>
          .
        </li>
      </ul>
    </div>
  ),
  1245: (
    <div class="markdown-body div-width">
      <p>
        Given an undirected tree, return&nbsp;its diameter: the number of{" "}
        <strong>edges</strong> in a longest path in that tree.
      </p>

      <p>
        The tree is given as an array&nbsp;of&nbsp;<code>edges</code>&nbsp;where{" "}
        <code>edges[i] = [u, v]</code> is a bidirectional edge between
        nodes&nbsp;<code>u</code> and <code>v</code>.&nbsp; Each node
        has&nbsp;labels in the set <code>{`{0, 1, ..., edges.length}`}</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/06/14/1397_example_1.PNG"
          style={{ width: 226, height: 233 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> edges = [[0,1],[0,2]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation: </strong> <br />A longest path of the tree is the
        path 1 - 0 - 2.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/06/14/1397_example_2.PNG"
          style={{ width: 350, height: 316 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation: </strong>
        <br />A longest path of the tree is the path 3 - 2 - 1 - 4 - 5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= edges.length &lt;&nbsp;10^4</code>
        </li>
        <li>
          <code>edges[i][0] != edges[i][1]</code>
        </li>
        <li>
          <code>0 &lt;= edges[i][j] &lt;= edges.length</code>
        </li>
        <li>The given edges form an undirected tree.</li>
      </ul>
    </div>
  ),
  1506: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            Given all the nodes of an&nbsp;
            <a
              aria-describedby="sk-tooltip-12056"
              data-sk="tooltip_parent"
              data-stringify-link="https://leetcode.com/articles/introduction-to-n-ary-trees"
              delay="150"
              href="https://slack-redir.net/link?url=https%3A%2F%2Fleetcode.com%2Farticles%2Fintroduction-to-n-ary-trees"
              rel="noopener noreferrer"
              target="_blank"
            >
              N-ary tree
            </a>
            &nbsp;as an array &nbsp;<code>Node[] tree</code>&nbsp;where
            each&nbsp;node has a&nbsp;<strong>unique value</strong>.
          </p>

          <p>
            Find and return the <strong>root</strong> of the N-ary tree.
          </p>

          <p>
            <em>
              Nary-Tree input serialization&nbsp;is represented in their level
              order traversal, each group of children is separated by the null
              value (See examples).
            </em>
          </p>

          <p>
            <strong>Follow up:</strong> Can you find the root of the tree with
            O(1) additional memory space?
          </p>

          <p>
            <strong>Notes:</strong>
          </p>

          <ol>
            <li>The following input is only given to testing purposes.</li>
            <li>
              You will receive as input a list of all nodes of the n-ary tree in
              any order.
            </li>
          </ol>

          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>

          <p>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png"
              style={{ width: "100%", maxWidth: 300 }}
            />
          </p>

          <pre>
            <strong>Input:</strong> [1,null,3,2,4,null,5,6]
            <br />
            <strong>Output:</strong> [1,null,3,2,4,null,5,6]
          </pre>

          <p>
            <strong>Example 2:</strong>
          </p>

          <p>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png"
              style={{ width: 296, height: 241 }}
            />
          </p>

          <pre>
            <strong>Input:</strong>{" "}
            [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]{" "}
            <br />
            <strong>Output:</strong>{" "}
            [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
          </pre>

          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              The total number of nodes is between <code>[1,&nbsp;5*10^4]</code>
              .
            </li>
            <li>Each&nbsp;node has a unique value.</li>
          </ul>
        </div>
      </div>
    </div>
  ),
  1522: (
    <div>
      <p>
        Given a&nbsp;<code>root</code>&nbsp;of an{" "}
        <a href="https://leetcode.com/articles/introduction-to-n-ary-trees/">
          N-ary tree
        </a>
        ,&nbsp;you need to compute the length of the diameter of the tree.
      </p>

      <p>
        The diameter of an N-ary tree is the length of the&nbsp;
        <strong>longest</strong>&nbsp;path between any two nodes in
        the&nbsp;tree. This path may or may not pass through the root.
      </p>

      <p>
        (
        <em>
          Nary-Tree input serialization&nbsp;is represented in their level order
          traversal, each group of children is separated by the null value.)
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/07/19/sample_2_1897.png"
          style={{ width: 324, height: 173 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root = [1,null,3,2,4,null,5,6] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation: </strong>Diameter is shown in red color.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/07/19/sample_1_1897.png"
            style={{ width: 253, height: 246 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1,null,2,null,3,4,null,5,null,6] <br />
        <strong>Output:</strong> 4
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/07/19/sample_3_1897.png"
          style={{ width: 369, height: 326 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root =
        [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]{" "}
        <br />
        <strong>Output:</strong> 7
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The depth of the n-ary tree is less than or equal to <code>1000</code>
          .
        </li>
        <li>
          The total number of nodes is between <code>[0,&nbsp;10^4]</code>.
        </li>
      </ul>
    </div>
  ),
  1719: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>pairs</code>, where{" "}
        <code>
          pairs[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>
        , and:
      </p>

      <ul>
        <li>There are no duplicates.</li>
        <li>
          <code>
            x<sub>i</sub> &lt; y<sub>i</sub>
          </code>
        </li>
      </ul>

      <p>
        Let <code>ways</code> be the number of rooted trees that satisfy the
        following conditions:
      </p>

      <ul>
        <li>
          The tree consists of nodes whose values appeared in <code>pairs</code>
          .
        </li>
        <li>
          A pair{" "}
          <code>
            [x<sub>i</sub>, y<sub>i</sub>]
          </code>{" "}
          exists in <code>pairs</code> <strong>if and only if</strong>{" "}
          <code>
            x<sub>i</sub>
          </code>{" "}
          is an ancestor of{" "}
          <code>
            y<sub>i</sub>
          </code>{" "}
          or{" "}
          <code>
            y<sub>i</sub>
          </code>{" "}
          is an ancestor of{" "}
          <code>
            x<sub>i</sub>
          </code>
          .
        </li>
        <li>
          <strong>Note:</strong> the tree does not have to be a binary tree.
        </li>
      </ul>

      <p>
        Two ways are considered to be different if there is at least one node
        that has different parents in both ways.
      </p>

      <p>Return:</p>

      <ul>
        <li>
          <code>0</code> if <code>ways == 0</code>
        </li>
        <li>
          <code>1</code> if <code>ways == 1</code>
        </li>
        <li>
          <code>2</code> if <code>ways &gt; 1</code>
        </li>
      </ul>

      <p>
        A <strong>rooted tree</strong> is a tree that has a single root node,
        and all edges are oriented to be outgoing from the root.
      </p>

      <p>
        An <strong>ancestor</strong> of a node is any node on the path from the
        root to that node (excluding the node itself). The root has no
        ancestors.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/03/trees2.png"
        style={{ width: 208, height: 221 }}
      />
      <pre>
        <strong>Input:</strong> pairs = [[1,2],[2,3]] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> There is exactly one valid rooted tree,
        which is shown in the above figure.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/03/tree.png"
        style={{ width: 234, height: 241 }}
      />
      <pre>
        <strong>Input:</strong> pairs = [[1,2],[2,3],[1,3]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> There are multiple valid rooted trees.
        Three of them are shown in the above figures.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> pairs = [[1,2],[2,3],[2,4],[1,5]] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There are no valid rooted trees.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= pairs.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= x<sub>i </sub>&lt; y<sub>i</sub> &lt;= 500
          </code>
        </li>
        <li>
          The elements in <code>pairs</code> are unique.
        </li>
      </ul>
    </div>
  ),
  3067: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an unrooted weighted tree with <code>n</code> vertices
        representing servers numbered from <code>0</code> to <code>n - 1</code>,
        an array <code>edges</code> where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>, weight<sub>i</sub>]
        </code>{" "}
        represents a bidirectional edge between vertices{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        of weight{" "}
        <code>
          weight<sub>i</sub>
        </code>
        . You are also given an integer <code>signalSpeed</code>.
      </p>

      <p>
        Two servers <code>a</code> and <code>b</code> are{" "}
        <strong>connectable</strong> through a server <code>c</code> if:
      </p>

      <ul>
        <li>
          <code>a &lt; b</code>, <code>a != c</code> and <code>b != c</code>.
        </li>
        <li>
          The distance from <code>c</code> to <code>a</code> is divisible by{" "}
          <code>signalSpeed</code>.
        </li>
        <li>
          The distance from <code>c</code> to <code>b</code> is divisible by{" "}
          <code>signalSpeed</code>.
        </li>
        <li>
          The path from <code>c</code> to <code>b</code> and the path from{" "}
          <code>c</code> to <code>a</code> do not share any edges.
        </li>
      </ul>

      <p>
        Return <em>an integer array</em> <code>count</code> <em>of length</em>{" "}
        <code>n</code> <em>where</em> <code>count[i]</code>{" "}
        <em>
          is the <strong>number</strong> of server pairs that are{" "}
          <strong>connectable</strong> through
        </em>{" "}
        <em>the server</em> <code>i</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2024/01/21/example22.png"
        style={{
          width: 438,
          height: 243,
          padding: 10,
          background: "rgb(255, 255, 255)",
          borderRadius: "0.5rem;",
        }}
      />
      <pre>
        <strong>Input:</strong> edges =
        [[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]], signalSpeed = 1 <br />
        <strong>Output:</strong> [0,4,6,6,4,0] <br />
        <strong>Explanation:</strong> Since signalSpeed is 1, count[c] is equal
        to the number of pairs of paths that start at c and do not share any
        edges. <br />
        In the case of the given path graph, count[c] is equal to the number of
        servers to the left of c multiplied by the servers to the right of c.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2024/01/21/example11.png"
        style={{
          width: 438,
          height: 243,
          padding: 10,
          background: "rgb(255, 255, 255)",
          borderRadius: "0.5rem;",
        }}
      />
      <pre>
        <strong>Input:</strong> edges =
        [[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]], signalSpeed = 3{" "}
        <br />
        <strong>Output:</strong> [2,0,0,0,0,0,2] <br />
        <strong>Explanation:</strong> Through server 0, there are 2 pairs of
        connectable servers: (4, 5) and (4, 6). <br />
        Through server 6, there are 2 pairs of connectable servers: (4, 5) and
        (0, 5). <br />
        It can be shown that no two servers are connectable through servers
        other than 0 and 6.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>edges[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            edges[i] = [a<sub>i</sub>, b<sub>i</sub>, weight<sub>i</sub>]
          </code>
        </li>
        <li>
          <code>
            1 &lt;= weight<sub>i</sub> &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= signalSpeed &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          The input is generated such that <code>edges</code> represents a valid
          tree.
        </li>
      </ul>
    </div>
  ),
  3203: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There exist two <strong>undirected </strong>trees with <code>n</code>{" "}
        and <code>m</code> nodes, numbered from <code>0</code> to{" "}
        <code>n - 1</code> and from <code>0</code> to <code>m - 1</code>,
        respectively. You are given two 2D integer arrays <code>edges1</code>{" "}
        and <code>edges2</code> of lengths <code>n - 1</code> and{" "}
        <code>m - 1</code>, respectively, where{" "}
        <code>
          edges1[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        in the first tree and{" "}
        <code>
          edges2[i] = [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        in the second tree.
      </p>

      <p>
        You must connect one node from the first tree with another node from the
        second tree with an edge.
      </p>

      <p>
        Return the <strong>minimum </strong>possible <strong>diameter </strong>
        of the resulting tree.
      </p>

      <p>
        The <strong>diameter</strong> of a tree is the length of the{" "}
        <em>longest</em> path between any two nodes in the tree.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2024/04/22/example11-transformed.png"
        />
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            edges1 = [[0,1],[0,2],[0,3]], edges2 = [[0,1]]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          We can obtain a tree of diameter 3 by connecting node 0 from the first
          tree with any node from the second tree.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2024/04/22/example211.png"
      />
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            edges1 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], edges2 =
            [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]
          </span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">5</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          We can obtain a tree of diameter 5 by connecting node 0 from the first
          tree with node 0 from the second tree.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n, m &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges1.length == n - 1</code>
        </li>
        <li>
          <code>edges2.length == m - 1</code>
        </li>
        <li>
          <code>edges1[i].length == edges2[i].length == 2</code>
        </li>
        <li>
          <code>
            edges1[i] = [a<sub>i</sub>, b<sub>i</sub>]
          </code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            edges2[i] = [u<sub>i</sub>, v<sub>i</sub>]
          </code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; m
          </code>
        </li>
        <li>
          The input is generated such that <code>edges1</code> and{" "}
          <code>edges2</code> represent valid trees.
        </li>
      </ul>
    </div>
  ),
  207: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are a total of <code>numCourses</code> courses you have to take,
        labeled from <code>0</code> to <code>numCourses - 1</code>. You are
        given an array <code>prerequisites</code> where{" "}
        <code>
          prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that you <strong>must</strong> take course{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        first if you want to take course{" "}
        <code>
          a<sub>i</sub>
        </code>
        .
      </p>

      <ul>
        <li>
          For example, the pair <code>[0, 1]</code>, indicates that to take
          course <code>0</code> you have to first take course <code>1</code>.
        </li>
      </ul>

      <p>
        Return <code>true</code> if you can finish all courses. Otherwise,
        return <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> There are a total of 2 courses to take.{" "}
        <br />
        To take course 1 you should have finished course 0. So it is possible.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numCourses = 2, prerequisites = [[1,0],[0,1]]{" "}
        <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> There are a total of 2 courses to take.{" "}
        <br />
        To take course 1 you should have finished course 0, and to take course 0
        you should also have finished course 1. So it is impossible.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= numCourses &lt;= 2000</code>
        </li>
        <li>
          <code>0 &lt;= prerequisites.length &lt;= 5000</code>
        </li>
        <li>
          <code>prerequisites[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses
          </code>
        </li>
        <li>
          All the pairs prerequisites[i] are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  210: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are a total of <code>numCourses</code> courses you have to take,
        labeled from <code>0</code> to <code>numCourses - 1</code>. You are
        given an array <code>prerequisites</code> where{" "}
        <code>
          prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that you <strong>must</strong> take course{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        first if you want to take course{" "}
        <code>
          a<sub>i</sub>
        </code>
        .
      </p>

      <ul>
        <li>
          For example, the pair <code>[0, 1]</code>, indicates that to take
          course <code>0</code> you have to first take course <code>1</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>the ordering of courses you should take to finish all courses</em>.
        If there are many valid answers, return <strong>any</strong> of them. If
        it is impossible to finish all courses, return{" "}
        <strong>an empty array</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]] <br />
        <strong>Output:</strong> [0,1] <br />
        <strong>Explanation:</strong> There are a total of 2 courses to take. To
        take course 1 you should have finished course 0. So the correct course
        order is [0,1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numCourses = 4, prerequisites =
        [[1,0],[2,0],[3,1],[3,2]] <br />
        <strong>Output:</strong> [0,2,1,3] <br />
        <strong>Explanation:</strong> There are a total of 4 courses to take. To
        take course 3 you should have finished both courses 1 and 2. Both
        courses 1 and 2 should be taken after you finished course 0. <br />
        So one correct course order is [0,1,2,3]. Another correct ordering is
        [0,2,1,3].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numCourses = 1, prerequisites = [] <br />
        <strong>Output:</strong> [0]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= numCourses &lt;= 2000</code>
        </li>
        <li>
          <code>
            0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)
          </code>
        </li>
        <li>
          <code>prerequisites[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          All the pairs{" "}
          <code>
            [a<sub>i</sub>, b<sub>i</sub>]
          </code>{" "}
          are <strong>distinct</strong>.
        </li>
      </ul>
    </div>
  ),
  269: (
    <div class="markdown-body div-width">
      <p>
        There is a new alien language which uses the latin alphabet. However,
        the order among letters are unknown to you. You receive a list of{" "}
        <b>non-empty</b> words from the dictionary, where
        <b>
          words are sorted lexicographically by the rules of this new language
        </b>
        . Derive the order of letters in this language.
      </p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        <strong>Input:</strong>
        {`[
      "wrt",
      "wrf",
      "er",
      "ett",
      "rftt"
    ]`}
        <br />
        <strong>Output: </strong>
        <code>"wertf"</code>
      </pre>
      <br />

      <p>
        <b>Example 2:</b>
      </p>
      <br />

      <pre>
        <strong>Input:</strong>
        {`[
      "z",
      "x"
    ]`}
        <br />

        <strong>Output: </strong>
        <code>"zx"</code>
      </pre>
      <br />

      <p>
        <b>Example 3:</b>
      </p>
      <br />

      <pre>
        <strong>Input:</strong>
        {`[
      "z",
      "x",
      "z"
    ]`}
        <br />
        <strong>Output:</strong> <code>""</code>&nbsp;
        <br />
        <strong>Explanation:</strong> The order is invalid, so return{" "}
        <code>""</code>.
      </pre>

      <p>
        <b>Note:</b>
      </p>

      <ul>
        <li>You may assume all letters are in lowercase.</li>
        <li>
          You may assume that if a is a prefix of b, then a must appear before b
          in the given dictionary.
        </li>
        <li>If the order is invalid, return an empty string.</li>
        <li>
          There may be multiple valid order of letters, return any one of them
          is fine.
        </li>
      </ul>
    </div>
  ),
  444: (
    <div class="markdown-body div-width">
      <p>
        Check whether the original sequence <code>org</code> can be uniquely
        reconstructed from the sequences in <code>seqs</code>. The{" "}
        <code>org</code> sequence is a permutation of the integers from 1 to n,
        with 1 ≤ n ≤ 10<sup>4</sup>. Reconstruction means building a shortest
        common supersequence of the sequences in <code>seqs</code> (i.e., a
        shortest sequence so that all sequences in <code>seqs</code> are
        subsequences of it). Determine whether there is only one sequence that
        can be reconstructed from <code>seqs</code> and it is the{" "}
        <code>org</code> sequence.
      </p>

      <p>
        <b>Example 1:</b>
      </p>
      <pre>
        <b>Input:</b> <br />
        org: [1,2,3], seqs: [[1,2],[1,3]]
        <br />
        <b>Output:</b> <br />
        false
        <br />
        <b>Explanation:</b> <br />
        [1,2,3] is not the only one sequence that can be reconstructed, because
        [1,3,2] is also a valid sequence that can be reconstructed.
      </pre>
      <p></p>
      <br />
      <p>
        <b>Example 2:</b> <br />
      </p>
      <pre>
        <b>Input:</b> <br />
        org: [1,2,3], seqs: [[1,2]]
        <br />
        <b>Output:</b> <br />
        false
        <br />
        <b>Explanation:</b> <br />
        The reconstructed sequence can only be [1,2].
      </pre>
      <p></p>

      <p>
        <b>Example 3:</b> <br />
      </p>
      <pre>
        <b>Input:</b> <br />
        org: [1,2,3], seqs: [[1,2],[1,3],[2,3]]
        <br />
        <b>Output:</b> <br />
        true <br />
        <b>Explanation:</b> <br />
        The sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the
        original sequence [1,2,3]. <br />
      </pre>
      <p></p>

      <p>
        <b>Example 4:</b>
      </p>
      <pre>
        <b>Input:</b> <br />
        org: [4,1,5,2,6,3], seqs: [[5,2,6,3],[4,1,5,2]]
        <br />
        <b>Output:</b> <br />
        true <br />
      </pre>
      <p></p>

      <p>
        <b>
          <font color="red">UPDATE (2017/1/8):</font>
        </b>
        <br /> <br />
        The <i>seqs</i> parameter had been changed to a list of list of strings
        (instead of a 2d <br />
        array of strings). Please reload the code definition to get the latest
        changes.
      </p>
    </div>
  ),
  913: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A game on an <strong>undirected</strong> graph is played by two players,
        Mouse and Cat, who alternate turns.
      </p>

      <p>
        The graph is given as follows: <code>graph[a]</code> is a list of all
        nodes <code>b</code> such that <code>ab</code> is an edge of the graph.
      </p>

      <p>
        The mouse starts at node <code>1</code> and goes first, the cat starts
        at node <code>2</code> and goes second, and there is a hole at node{" "}
        <code>0</code>.
      </p>

      <p>
        During each player's turn, they <strong>must</strong> travel along
        one&nbsp;edge of the graph that meets where they are.&nbsp; For example,
        if the Mouse is at node 1, it <strong>must</strong> travel to any node
        in <code>graph[1]</code>.
      </p>

      <p>
        Additionally, it is not allowed for the Cat to travel to the Hole (node{" "}
        <code>0</code>).
      </p>

      <p>Then, the game can end in three&nbsp;ways:</p>

      <ul>
        <li>
          If ever the Cat occupies the same node as the Mouse, the Cat wins.
        </li>
        <li>If ever the Mouse reaches the Hole, the Mouse wins.</li>
        <li>
          If ever a position is repeated (i.e., the players are in the same
          position as a previous turn, and&nbsp;it is the same player's turn to
          move), the game is a draw.
        </li>
      </ul>

      <p>
        Given a <code>graph</code>, and assuming both players play optimally,
        return
      </p>

      <ul>
        <li>
          <code>1</code>&nbsp;if the mouse wins the game,
        </li>
        <li>
          <code>2</code>&nbsp;if the cat wins the game, or
        </li>
        <li>
          <code>0</code>&nbsp;if the game is a draw.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/17/cat1.jpg"
        style={{ width: 300, height: 300 }}
      />
      <pre>
        <strong>Input:</strong> graph =
        [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/17/cat2.jpg"
        style={{ width: 200, height: 200 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[1,3],[0],[3],[0,2]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>3 &lt;= graph.length &lt;= 50</code>
        </li>
        <li>
          <code>1&nbsp;&lt;= graph[i].length &lt; graph.length</code>
        </li>
        <li>
          <code>0 &lt;= graph[i][j] &lt; graph.length</code>
        </li>
        <li>
          <code>graph[i][j] != i</code>
        </li>
        <li>
          <code>graph[i]</code> is unique.
        </li>
        <li>The mouse and the cat can always move.&nbsp;</li>
      </ul>
    </div>
  ),
  1059: (
    <div class="markdown-body div-width">
      <p>
        Given the <code>edges</code> of a directed graph, and two nodes{" "}
        <code>source</code> and
        <code>destination</code> of this graph, determine whether or not all
        paths starting from
        <code>source</code> eventually end at <code>destination</code>, that is:
      </p>

      <ul>
        <li>
          At least one path exists from the <code>source</code> node to the
          <code>destination</code> node
        </li>
        <li>
          If a path exists from the <code>source</code> node to a node with no
          outgoing edges, then that node is equal to <code>destination</code>.
        </li>
        <li>
          The number of possible paths from <code>source</code> to{" "}
          <code>destination</code> is a finite number.
        </li>
      </ul>

      <p>
        Return <code>true</code> if and only if all roads from{" "}
        <code>source</code> lead to <code>destination</code>.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <img src="https://leetcode.ca/all/img/1059_1.jpg" alt="" />
      </p>

      <pre>
        <strong>Input: </strong>n = 3, edges ={" "}
        <span id="example-input-1-2">[[0,1],[0,2]]</span>, source ={" "}
        <span id="example-input-1-3">0</span>, destination = 2
        <br />
        <strong>Output: </strong>
        <span id="example-output-1">false</span>
        <br />
        <strong>Explanation: </strong>It is possible to reach and get stuck on
        both node 1 and node 2.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <img src="https://leetcode.ca/all/img/1059_2.jpg" alt="" />
      </p>

      <pre>
        <strong>Input: </strong>n = <span id="example-input-2-1">4</span>, edges
        = <span id="example-input-2-2">[[0,1],[0,3],[1,2],[2,1]]</span>, source
        = <span id="example-input-2-3">0</span>, destination ={" "}
        <span id="example-input-2-4">3</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-2">false</span>
        <br />
        <strong>Explanation: </strong>We have two possibilities: to end at node
        3, or to loop over node 1 and node 2 indefinitely.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <p>
        <img src="https://leetcode.ca/all/img/1059_3.jpg" alt="" />
      </p>

      <pre>
        <strong>Input: </strong>n = <span id="example-input-3-1">4</span>, edges
        = <span id="example-input-3-2">[[0,1],[0,2],[1,3],[2,3]]</span>, source
        = <span id="example-input-3-3">0</span>, destination ={" "}
        <span id="example-input-3-4">3</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-3">true</span>
        <br />
      </pre>

      <p>
        <strong>Example 4:</strong>
      </p>

      <p>
        <img src="https://leetcode.ca/all/img/1059_4.jpg" alt="" />
      </p>

      <pre>
        <strong>Input: </strong>n = <span id="example-input-4-1">3</span>, edges
        = <span id="example-input-4-2">[[0,1],[1,1],[1,2]]</span>, source ={" "}
        <span id="example-input-4-3">0</span>, destination ={" "}
        <span id="example-input-4-4">2</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-4">false</span>
        <br />
        <strong>Explanation: </strong>All paths from the source node end at the
        destination node, but there are an infinite number of paths, such as
        0-1-2, 0-1-1-2, 0-1-1-1-2, 0-1-1-1-1-2, and so on.
      </pre>

      <p>
        <strong>Example 5:</strong>
      </p>

      <p>
        <img src="https://leetcode.ca/all/img/1059_5.jpg" alt="" />
      </p>

      <pre>
        <strong>Input: </strong>n = <span id="example-input-5-1">2</span>, edges
        = <span id="example-input-5-2">[[0,1],[1,1]]</span>, source ={" "}
        <span id="example-input-5-3">0</span>, destination ={" "}
        <span id="example-input-5-4">1</span>
        <br /> <strong>Output: </strong>
        <span id="example-output-5">false</span> <br />
        <strong>Explanation: </strong>There is infinite self-loop at destination
        node.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          <italic>
            The given graph may have self loops and parallel edges.
          </italic>
        </li>
        <li>
          The number of nodes <code>n</code> in the graph is between{" "}
          <code>1</code> and <code>10000</code>
        </li>
        <li>
          The number of edges in the graph is between <code>0</code> and{" "}
          <code>10000</code>
        </li>
        <li>
          <code>0 &lt;= edges.length &lt;= 10000</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>0 &lt;= source &lt;= n - 1</code>
        </li>
        <li>
          <code>0 &lt;= destination &lt;= n - 1</code>
        </li>
      </ul>
    </div>
  ),
  1136: (
    <div class="markdown-body div-width">
      <p>
        There are <code>N</code> courses, labelled from 1 to <code>N</code>.
      </p>

      <p>
        We are given&nbsp;<code>relations[i] = [X, Y]</code>, representing a
        prerequisite relationship between course <code>X</code> and course{" "}
        <code>Y</code>:&nbsp;course
        <code>X</code>&nbsp;has to be studied before course <code>Y</code>.
      </p>

      <p>
        In one semester you can study any number of courses as long as you have
        studied all the prerequisites for the course you are studying.
      </p>

      <p>
        Return the minimum number of semesters needed to study all
        courses.&nbsp; If there is no way to study all the courses, return{" "}
        <code>-1</code>.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <strong>
          <img src="https://leetcode.ca/all/img/1136_1.png" alt="" />
        </strong>
      </p>

      <pre>
        <strong>Input: </strong>N = <span id="example-input-1-1">3</span>,
        relations = <span id="example-input-1-2">[[1,3],[2,3]]</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-1">2</span> <br />
        <strong>Explanation: </strong>
        <br />
        In the first semester, courses 1 and 2 are studied. In the second
        semester, course 3 is studied.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <strong>
          <img src="https://leetcode.ca/all/img/1136_2.png" alt="" />
        </strong>
      </p>

      <pre>
        <strong>Input: </strong>N = <span id="example-input-2-1">3</span>,
        relations = <span id="example-input-2-2">[[1,2],[2,3],[3,1]]</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-2">-1</span>
        <br />
        <strong>Explanation: </strong>
        <br />
        No course can be studied because they depend on each other.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>
          <span>Note:</span>
        </strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= N &lt;= 5000</code>
        </li>
        <li>
          <code>1 &lt;= relations.length &lt;= 5000</code>
        </li>
        <li>
          <code>relations[i][0] != relations[i][1]</code>
        </li>
        <li>There are no repeated relations in the input.</li>
      </ul>
    </div>
  ),
  1462: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are a total of <code>numCourses</code> courses you have to take,
        labeled from <code>0</code> to <code>numCourses - 1</code>. You are
        given an array <code>prerequisites</code> where{" "}
        <code>
          prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that you <strong>must</strong> take course{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        first if you want to take course{" "}
        <code>
          b<sub>i</sub>
        </code>
        .
      </p>

      <ul>
        <li>
          For example, the pair <code>[0, 1]</code> indicates that you have to
          take course <code>0</code> before you can take course <code>1</code>.
        </li>
      </ul>

      <p>
        Prerequisites can also be <strong>indirect</strong>. If course{" "}
        <code>a</code> is a prerequisite of course <code>b</code>, and course{" "}
        <code>b</code> is a prerequisite of course <code>c</code>, then course{" "}
        <code>a</code> is a prerequisite of course <code>c</code>.
      </p>

      <p>
        You are also given an array <code>queries</code> where{" "}
        <code>
          queries[j] = [u<sub>j</sub>, v<sub>j</sub>]
        </code>
        . For the{" "}
        <code>
          j<sup>th</sup>
        </code>{" "}
        query, you should answer whether course{" "}
        <code>
          u<sub>j</sub>
        </code>{" "}
        is a prerequisite of course{" "}
        <code>
          v<sub>j</sub>
        </code>{" "}
        or not.
      </p>

      <p>
        Return <i>a boolean array </i>
        <code>answer</code>
        <i>, where </i>
        <code>answer[j]</code>
        <i> is the answer to the </i>
        <code>
          j<sup>th</sup>
        </code>
        <i> query.</i>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/01/courses4-1-graph.jpg"
        style={{ width: 222, height: 62 }}
      />
      <pre>
        <strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]], queries
        = [[0,1],[1,0]] <br />
        <strong>Output:</strong> [false,true] <br />
        <strong>Explanation:</strong> The pair [1, 0] indicates that you have to
        take course 1 before you can take course 0. <br />
        Course 0 is not a prerequisite of course 1, but the opposite is true.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numCourses = 2, prerequisites = [], queries =
        [[1,0],[0,1]] <br />
        <strong>Output:</strong> [false,false] <br />
        <strong>Explanation:</strong> There are no prerequisites, and each
        course is independent.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/01/courses4-3-graph.jpg"
        style={{ width: 222, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> numCourses = 3, prerequisites =
        [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]] <br />
        <strong>Output:</strong> [true,true]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= numCourses &lt;= 100</code>
        </li>
        <li>
          <code>
            0 &lt;= prerequisites.length &lt;= (numCourses * (numCourses - 1) /
            2)
          </code>
        </li>
        <li>
          <code>prerequisites[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= numCourses - 1
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          All the pairs{" "}
          <code>
            [a<sub>i</sub>, b<sub>i</sub>]
          </code>{" "}
          are <strong>unique</strong>.
        </li>
        <li>The prerequisites graph has no cycles.</li>
        <li>
          <code>
            1 &lt;= queries.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= numCourses - 1
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
      </ul>
    </div>
  ),
  1857: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a <strong>directed graph</strong> of <code>n</code> colored
        nodes and <code>m</code> edges. The nodes are numbered from{" "}
        <code>0</code> to <code>n - 1</code>.
      </p>

      <p>
        You are given a string <code>colors</code> where <code>colors[i]</code>{" "}
        is a lowercase English letter representing the <strong>color</strong> of
        the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        node in this graph (<strong>0-indexed</strong>). You are also given a 2D
        array <code>edges</code> where{" "}
        <code>
          edges[j] = [a<sub>j</sub>, b<sub>j</sub>]
        </code>{" "}
        indicates that there is a <strong>directed edge</strong> from node{" "}
        <code>
          a<sub>j</sub>
        </code>{" "}
        to node{" "}
        <code>
          b<sub>j</sub>
        </code>
        .
      </p>

      <p>
        A valid <strong>path</strong> in the graph is a sequence of nodes{" "}
        <code>
          x<sub>1</sub> -&gt; x<sub>2</sub> -&gt; x<sub>3</sub> -&gt; ... -&gt;
          x<sub>k</sub>
        </code>{" "}
        such that there is a directed edge from{" "}
        <code>
          x<sub>i</sub>
        </code>{" "}
        to{" "}
        <code>
          x<sub>i+1</sub>
        </code>{" "}
        for every <code>1 &lt;= i &lt; k</code>. The{" "}
        <strong>color value</strong> of the path is the number of nodes that are
        colored the <strong>most frequently</strong> occurring color along that
        path.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>largest color value</strong> of any valid path in the
          given graph, or{" "}
        </em>
        <code>-1</code>
        <em> if the graph contains a cycle</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/04/21/leet1.png"
          style={{ width: 400, height: 182 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> colors = "abaca", edges =
        [[0,1],[0,2],[2,3],[3,4]] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The path 0 -&gt; 2 -&gt; 3 -&gt; 4
        contains 3 nodes that are colored{" "}
        <code>"a" (red in the above image)</code>.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/04/21/leet2.png"
          style={{ width: 85, height: 85 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> colors = "a", edges = [[0,0]] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> There is a cycle from 0 to 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == colors.length</code>
        </li>
        <li>
          <code>m == edges.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= m &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>colors</code> consists of lowercase English letters.
        </li>
        <li>
          <code>
            0 &lt;= a<sub>j</sub>, b<sub>j</sub>&nbsp;&lt; n
          </code>
        </li>
      </ul>
    </div>
  ),
  2360: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>directed</strong> graph of <code>n</code> nodes
        numbered from <code>0</code> to <code>n - 1</code>, where each node has{" "}
        <strong>at most one</strong> outgoing edge.
      </p>

      <p>
        The graph is represented with a given <strong>0-indexed</strong> array{" "}
        <code>edges</code> of size <code>n</code>, indicating that there is a
        directed edge from node <code>i</code> to node <code>edges[i]</code>. If
        there is no outgoing edge from node <code>i</code>, then{" "}
        <code>edges[i] == -1</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the length of the <strong>longest</strong> cycle in the graph
        </em>
        . If no cycle exists, return <code>-1</code>.
      </p>

      <p>
        A cycle is a path that starts and ends at the <strong>same</strong>{" "}
        node.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/06/08/graph4drawio-5.png"
        style={{ width: 335, height: 191 }}
      />
      <pre>
        <strong>Input:</strong> edges = [3,3,4,2,3] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The longest cycle in the graph is the
        cycle: 2 -&gt; 4 -&gt; 3 -&gt; 2. <br />
        The length of this cycle is 3, so 3 is returned.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-1.png"
        style={{ width: 171, height: 161 }}
      />
      <pre>
        <strong>Input:</strong> edges = [2,-1,3,1] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> There are no cycles in this graph.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == edges.length</code>
        </li>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>-1 &lt;= edges[i] &lt; n</code>
        </li>
        <li>
          <code>edges[i] != i</code>
        </li>
      </ul>
    </div>
  ),
  2: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two <strong>non-empty</strong> linked lists representing
        two non-negative integers. The digits are stored in{" "}
        <strong>reverse order</strong>, and each of their nodes contains a
        single digit. Add the two numbers and return the sum&nbsp;as a linked
        list.
      </p>

      <p>
        You may assume the two numbers do not contain any leading zero, except
        the number 0 itself.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg"
        style={{ width: 483, height: 342 }}
      />
      <pre>
        <strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4] <br />
        <strong>Output:</strong> [7,0,8] <br />
        <strong>Explanation:</strong> 342 + 465 = 807.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> l1 = [0], l2 = [0] <br />
        <strong>Output:</strong> [0]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] <br />
        <strong>Output:</strong> [8,9,9,9,0,0,0,1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in each linked list is in the range{" "}
          <code>[1, 100]</code>.
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 9</code>
        </li>
        <li>
          It is guaranteed that the list represents a number that does not have
          leading zeros.
        </li>
      </ul>
    </div>
  ),
  24: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a&nbsp;linked list, swap every two adjacent nodes and return its
        head. You must solve the problem without&nbsp;modifying the values in
        the list's nodes (i.e., only nodes themselves may be changed.)
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">head = [1,2,3,4]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[2,1,4,3]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg"
            style={{ width: 422, height: 222 }}
          />
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">head = []</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[]</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">head = [1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1]</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 4:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">head = [1,2,3]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[2,1,3]</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the&nbsp;list&nbsp;is in the range{" "}
          <code>[0, 100]</code>.
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  138: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A linked list of length <code>n</code> is given such that each node
        contains an additional random pointer, which could point to any node in
        the list, or <code>null</code>.
      </p>

      <p>
        Construct a{" "}
        <a
          href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy"
          target="_blank"
          rel="noreferrer"
        >
          <strong>deep copy</strong>
        </a>{" "}
        of the list. The deep copy should consist of exactly <code>n</code>{" "}
        <strong>brand new</strong> nodes, where each new node has its value set
        to the value of its corresponding original node. Both the{" "}
        <code>next</code> and <code>random</code> pointer of the new nodes
        should point to new nodes in the copied list such that the pointers in
        the original list and copied list represent the same list state.{" "}
        <strong>
          None of the pointers in the new list should point to nodes in the
          original list
        </strong>
        .
      </p>

      <p>
        For example, if there are two nodes <code>X</code> and <code>Y</code> in
        the original list, where <code>X.random --&gt; Y</code>, then for the
        corresponding two nodes <code>x</code> and <code>y</code> in the copied
        list, <code>x.random --&gt; y</code>.
      </p>

      <p>
        Return <em>the head of the copied linked list</em>.
      </p>

      <p>
        The linked list is represented in the input/output as a list of{" "}
        <code>n</code> nodes. Each node is represented as a pair of{" "}
        <code>[val, random_index]</code> where:
      </p>

      <ul>
        <li>
          <code>val</code>: an integer representing <code>Node.val</code>
        </li>
        <li>
          <code>random_index</code>: the index of the node (range from{" "}
          <code>0</code> to <code>n-1</code>) that the <code>random</code>{" "}
          pointer points to, or <code>null</code> if it does not point to any
          node.
        </li>
      </ul>

      <p>
        Your code will <strong>only</strong> be given the <code>head</code> of
        the original linked list.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/12/18/e1.png"
        style={{ width: 700, height: 142 }}
      />
      <pre>
        <strong>Input:</strong> head = [[7,null],[13,0],[11,4],[10,2],[1,0]]{" "}
        <br />
        <strong>Output:</strong> [[7,null],[13,0],[11,4],[10,2],[1,0]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/12/18/e2.png"
        style={{ width: 700, height: 114 }}
      />
      <pre>
        <strong>Input:</strong> head = [[1,1],[2,1]] <br />
        <strong>Output:</strong> [[1,1],[2,1]]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/12/18/e3.png"
            style={{ width: 700, height: 122 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [[3,null],[3,0],[3,null]] <br />
        <strong>Output:</strong> [[3,null],[3,0],[3,null]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>Node.random</code> is <code>null</code> or is pointing to some
          node in the linked list.
        </li>
      </ul>
    </div>
  ),
  160: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the heads of two singly linked-lists <code>headA</code> and{" "}
        <code>headB</code>, return{" "}
        <em>the node at which the two lists intersect</em>. If the two linked
        lists have no intersection at all, return <code>null</code>.
      </p>
      <p>
        For example, the following two linked lists begin to intersect at node{" "}
        <code>c1</code>:
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/05/160_statement.png"
        style={{ width: 500, height: 162 }}
      />
      <p>
        The test cases are generated such that there are no cycles anywhere in
        the entire linked structure.
      </p>
      <p>
        <strong>Note</strong> that the linked lists must{" "}
        <strong>retain their original structure</strong> after the function
        returns.
      </p>
      <p>
        <strong>Custom Judge:</strong>
      </p>
      <p>
        The inputs to the <strong>judge</strong> are given as follows (your
        program is <strong>not</strong> given these inputs):
      </p>
      <ul>
        <li>
          <code>intersectVal</code> - The value of the node where the
          intersection occurs. This is <code>0</code> if there is no intersected
          node.
        </li>
        <li>
          <code>listA</code> - The first linked list.
        </li>
        <li>
          <code>listB</code> - The second linked list.
        </li>
        <li>
          <code>skipA</code> - The number of nodes to skip ahead in{" "}
          <code>listA</code> (starting from the head) to get to the intersected
          node.
        </li>
        <li>
          <code>skipB</code> - The number of nodes to skip ahead in{" "}
          <code>listB</code> (starting from the head) to get to the intersected
          node.
        </li>
      </ul>
      <p>
        The judge will then create the linked structure based on these inputs
        and pass the two heads, <code>headA</code> and <code>headB</code> to
        your program. If you correctly return the intersected node, then your
        solution will be <strong>accepted</strong>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png"
        style={{ width: 500, height: 162 }}
      />
      <pre>
        <strong>Input:</strong> intersectVal = 8, listA = [4,1,8,4,5], listB =
        [5,6,1,8,4,5], skipA = 2, skipB = 3<br />
        <strong>Output:</strong> Intersected at '8'
        <br />
        <strong>Explanation:</strong> The intersected node's value is 8 (note
        that this must not be 0 if the two lists intersect).
        <br />
        From the head of A, it reads as [4,1,8,4,5]. From the head of B, it
        reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in
        A; There are 3 nodes before the intersected node in B.
        <br />- Note that the intersected node's value is not 1 because the
        nodes with value 1 in A and B (2<sup>nd</sup> node in A and 3
        <sup>rd</sup> node in B) are different node references. In other words,
        they point to two different locations in memory, while the nodes with
        value 8 in A and B (3<sup>rd</sup> node in A and 4<sup>th</sup> node in
        B) point to the same location in memory.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png"
        style={{ width: 500, height: 194 }}
      />
      <pre>
        <strong>Input:</strong> intersectVal = 2, listA = [1,9,1,2,4], listB =
        [3,2,4], skipA = 3, skipB = 1 <br />
        <strong>Output:</strong> Intersected at '2' <br />
        <strong>Explanation:</strong> The intersected node's value is 2 (note
        that this must not be 0 if the two lists intersect). <br />
        From the head of A, it reads as [1,9,1,2,4]. From the head of B, it
        reads as [3,2,4]. There are 3 nodes before the intersected node in A;
        There are 1 node before the intersected node in B.
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/05/160_example_3.png"
        style={{ width: 300, height: 189 }}
      />
      <pre>
        <strong>Input:</strong> intersectVal = 0, listA = [2,6,4], listB =
        [1,5], skipA = 3, skipB = 2 <br />
        <strong>Output:</strong> No intersection <br />
        <strong>Explanation:</strong> From the head of A, it reads as [2,6,4].
        From the head of B, it reads as [1,5]. Since the two lists do not
        intersect, intersectVal must be 0, while skipA and skipB can be
        arbitrary values. <br />
        Explanation: The two lists do not intersect, so return null.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes of <code>listA</code> is in the <code>m</code>.
        </li>
        <li>
          The number of nodes of <code>listB</code> is in the <code>n</code>.
        </li>
        <li>
          <code>
            1 &lt;= m, n &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= skipA &lt;= m</code>
        </li>
        <li>
          <code>0 &lt;= skipB &lt;= n</code>
        </li>
        <li>
          <code>intersectVal</code> is <code>0</code> if <code>listA</code> and{" "}
          <code>listB</code> do not intersect.
        </li>
        <li>
          <code>intersectVal == listA[skipA] == listB[skipB]</code> if{" "}
          <code>listA</code> and <code>listB</code> intersect.
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you write a solution that runs in{" "}
      <code>O(m + n)</code> time and use only <code>O(1)</code> memory?
    </div>
  ),
  206: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a singly linked list, reverse the list,
        and return <em>the reversed list</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg"
        style={{ width: 542, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5] <br />
        <strong>Output:</strong> [5,4,3,2,1]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg"
        style={{ width: 182, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2] <br />
        <strong>Output:</strong> [2,1]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is the range <code>[0, 5000]</code>.
        </li>
        <li>
          <code>-5000 &lt;= Node.val &lt;= 5000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> A linked list can be reversed either
        iteratively or recursively. Could you implement both?
      </p>
    </div>
  ),
  234: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a singly linked list, return{" "}
        <code>true</code>
        <em> if it is a </em>
        <span
          data-keyword="palindrome-sequence"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rh6:"
              >
                <div>
                  <em>palindrome</em>
                </div>
              </div>
            </div>
          </div>
        </span>
        <em> or </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg"
        style={{ width: 422, height: 62 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,2,1] <br />
        <strong>Output:</strong> true
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg"
        style={{ width: 182, height: 62 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2] <br />
        <strong>Output:</strong> false
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the list is in the range{" "}
          <code>
            [1, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 9</code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you do it in <code>O(n)</code> time and{" "}
      <code>O(1)</code> space?
    </div>
  ),
  328: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a singly linked list, group all the nodes
        with odd indices together followed by the nodes with even indices, and
        return <em>the reordered list</em>.
      </p>

      <p>
        The <strong>first</strong> node is considered <strong>odd</strong>, and
        the <strong>second</strong> node is <strong>even</strong>, and so on.
      </p>

      <p>
        Note that the relative order inside both the even and odd groups should
        remain as it was in the input.
      </p>

      <p>
        You must solve the problem&nbsp;in <code>O(1)</code>&nbsp;extra space
        complexity and <code>O(n)</code> time complexity.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/10/oddeven-linked-list.jpg"
        style={{ width: 300, height: 123 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5] <br />
        <strong>Output:</strong> [1,3,5,2,4]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/10/oddeven2-linked-list.jpg"
        style={{ width: 500, height: 142 }}
      />
      <pre>
        <strong>Input:</strong> head = [2,1,3,5,6,4,7] <br />
        <strong>Output:</strong> [2,3,6,7,1,5,4]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the linked list is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>6</sup> &lt;= Node.val &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1474: (
    <div>
      <p>
        Given the&nbsp;<code>head</code>&nbsp;of a linked list and two integers
        <code>m</code> and <code>n</code>. Traverse the linked list and remove
        some nodes&nbsp;in the following way:
      </p>

      <ul>
        <li>Start with the head as the current node.</li>
        <li>
          Keep the first <code>m</code> nodes starting with the current node.
        </li>
        <li>
          Remove the next <code>n</code> nodes
        </li>
        <li>
          Keep repeating steps 2 and 3 until you reach the end of the list.
        </li>
      </ul>

      <p>
        Return the head of the modified list after removing the mentioned nodes.
      </p>

      <p>
        <strong>Follow up question:</strong> How can you solve this problem by
        modifying the list in-place?
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/06/06/sample_1_1848.png"
            style={{ width: 620, height: 95 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5,6,7,8,9,10,11,12,13], m = 2, n
        = 3 <br />
        <strong>Output:</strong> [1,2,6,7,11,12] <br />
        <strong>Explanation: </strong>Keep the first (m = 2) nodes starting from
        the head of the linked List (1 -&gt;2) show in black nodes. <br />
        Delete the next (n = 3) nodes (3 -&gt; 4 -&gt; 5) show in read nodes.{" "}
        <br />
        Continue with the same procedure until reaching the tail of the Linked
        List. <br />
        Head of linked list after removing nodes is returned.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/06/06/sample_2_1848.png"
            style={{ width: 620, height: 123 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5,6,7,8,9,10,11], m = 1, n = 3{" "}
        <br />
        <strong>Output:</strong> [1,5,9] <br />
        <strong>Explanation:</strong> Head of linked list after removing nodes
        is returned.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5,6,7,8,9,10,11], m = 3, n = 1{" "}
        <br />
        <strong>Output:</strong> [1,2,3,5,6,7,9,10,11]
      </pre>

      <p>
        <strong>Example 4:</strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [9,3,7,7,9,10,8,2], m = 1, n = 2 <br />
        <strong>Output:</strong> [9,7,8]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The given linked list will contain between&nbsp;<code>1</code>
          &nbsp;and&nbsp;<code>10^4</code>&nbsp;nodes.
        </li>
        <li>
          The value of each node in the linked list will be in the range
          <code>&nbsp;[1, 10^6]</code>.
        </li>
        <li>
          <code>1 &lt;= m,n &lt;=&nbsp;1000</code>
        </li>
      </ul>
    </div>
  ),
  2058: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>critical point</strong> in a linked list is defined as{" "}
        <strong>either</strong> a <strong>local maxima</strong> or a{" "}
        <strong>local minima</strong>.
      </p>

      <p>
        A node is a <strong>local maxima</strong> if the current node has a
        value <strong>strictly greater</strong> than the previous node and the
        next node.
      </p>

      <p>
        A node is a <strong>local minima</strong> if the current node has a
        value <strong>strictly smaller</strong> than the previous node and the
        next node.
      </p>

      <p>
        Note that a node can only be a local maxima/minima if there exists{" "}
        <strong>both</strong> a previous node and a next node.
      </p>

      <p>
        Given a linked list <code>head</code>, return{" "}
        <em>an array of length 2 containing </em>
        <code>[minDistance, maxDistance]</code>
        <em> where </em>
        <code>minDistance</code>
        <em>
          {" "}
          is the <strong>minimum distance</strong> between{" "}
          <strong>any&nbsp;two distinct</strong> critical points and{" "}
        </em>
        <code>maxDistance</code>
        <em>
          {" "}
          is the <strong>maximum distance</strong> between{" "}
          <strong>any&nbsp;two distinct</strong> critical points. If there are{" "}
          <strong>fewer</strong> than two critical points, return{" "}
        </em>
        <code>[-1, -1]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/10/13/a1.png"
        style={{ width: 148, height: 55 }}
      />
      <pre>
        <strong>Input:</strong> head = [3,1] <br />
        <strong>Output:</strong> [-1,-1] <br />
        <strong>Explanation:</strong> There are no critical points in [3,1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/10/13/a2.png"
        style={{ width: 624, height: 46 }}
      />
      <pre>
        <strong>Input:</strong> head = [5,3,1,2,5,1,2] <br />
        <strong>Output:</strong> [1,3] <br />
        <strong>Explanation:</strong> There are three critical points: <br />-
        [5,3,
        <strong>
          <u>1</u>
        </strong>
        ,2,5,1,2]: The third node is a local minima because 1 is less than 3 and
        2. <br />- [5,3,1,2,
        <u>
          <strong>5</strong>
        </u>
        ,1,2]: The fifth node is a local maxima because 5 is greater than 2 and
        1. <br />- [5,3,1,2,5,
        <u>
          <strong>1</strong>
        </u>
        ,2]: The sixth node is a local minima because 1 is less than 5 and 2.{" "}
        <br />
        The minimum distance is between the fifth and the sixth node.
        minDistance = 6 - 5 = 1. <br />
        The maximum distance is between the third and the sixth node.
        maxDistance = 6 - 3 = 3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/10/14/a5.png"
        style={{ width: 624, height: 39 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,3,2,2,3,2,2,2,7] <br />
        <strong>Output:</strong> [3,3] <br />
        <strong>Explanation:</strong> There are two critical points: <br />- [1,
        <u>
          <strong>3</strong>
        </u>
        ,2,2,3,2,2,2,7]: The second node is a local maxima because 3 is greater
        than 1 and 2. <br />- [1,3,2,2,
        <u>
          <strong>3</strong>
        </u>
        ,2,2,2,7]: The fifth node is a local maxima because 3 is greater than 2
        and 2. <br />
        Both the minimum and maximum distances are between the second and the
        fifth node. <br />
        Thus, minDistance and maxDistance is 5 - 2 = 3. <br />
        Note that the last node is not considered a local maxima because it does
        not have a next node.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is in the range{" "}
          <code>
            [2, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2487: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>head</code> of a linked list.
      </p>

      <p>
        Remove every node which has a node with a greater value anywhere to the
        right side of it.
      </p>

      <p>
        Return <em>the </em>
        <code>head</code>
        <em> of the modified linked list.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/02/drawio.png"
        style={{ width: 631, height: 51 }}
      />
      <pre>
        <strong>Input:</strong> head = [5,2,13,3,8]
        <br />
        <strong>Output:</strong> [13,8]
        <br />
        <strong>Explanation:</strong> The nodes that should be removed are 5, 2
        and 3.
        <br />
        - Node 13 is to the right of node 5. <br />
        - Node 13 is to the right of node 2.
        <br />- Node 8 is to the right of node 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [1,1,1,1] <br />
        <strong>Output:</strong> [1,1,1,1] <br />
        <strong>Explanation:</strong> Every node has value 1, so no nodes are
        removed.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of the nodes in the given list is in the range{" "}
          <code>
            [1, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2674: (
    <article role="main" class="blog-post">
      <p>
        Given a <strong>circular linked list</strong> <code>list</code> of
        positive integers, your task is to split it into 2{" "}
        <strong>circular linked lists</strong> so that the first one contains
        the <strong>first half</strong> of the nodes in <code>list</code>{" "}
        (exactly <code>ceil(list.length / 2)</code> nodes) in the same order
        they appeared in <code>list</code>, and the second one contains{" "}
        <strong>the rest</strong> of the nodes in <code>list</code> in the same
        order they appeared in <code>list</code>.
      </p>

      <p>
        Return{" "}
        <em>
          an array answer of length 2 in which the first element is a{" "}
          <strong>circular linked list</strong> representing the{" "}
          <strong>first half</strong> and the second element is a{" "}
          <strong>circular linked list</strong> representing the{" "}
          <strong>second half</strong>.
        </em>
      </p>

      <div>
        A <strong>circular linked list</strong> is a normal linked list with the
        only difference being that the last node's next node, is the first node.
      </div>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,5,7] <br />
        <strong>Output:</strong> [[1,5],[7]] <br />
        <strong>Explanation:</strong> The initial list has 3 nodes so the first
        half would be the first 2 elements since ceil(3 / 2) = 2 and the rest
        which is 1 node is in the second half.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,6,1,5] <br />
        <strong>Output:</strong> [[2,6],[1,5]] <br />
        <strong>Explanation:</strong> The initial list has 4 nodes so the first
        half would be the first 2 elements since ceil(4 / 2) = 2 and the rest
        which is 2 nodes are in the second half.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in <code>list</code>&nbsp;is in the range{" "}
          <code>
            [2, 10<sup>5</sup>]
          </code>
        </li>
        <li>
          <code>
            0 &lt;= Node.val &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <font face="monospace">
            <code>LastNode.next = FirstNode</code>
          </font>{" "}
          where <code>LastNode</code> is the last node of the list and{" "}
          <code>FirstNode</code> is the first one
        </li>
      </ul>
    </article>
  ),
  3217: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of integers <code>nums</code> and the{" "}
        <code>head</code> of a linked list. Return the <code>head</code> of the
        modified linked list after <strong>removing</strong> all nodes from the
        linked list that have a value that exists in <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,2,3], head = [1,2,3,4,5]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[4,5]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <strong>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample0.png"
              style={{ width: 400, height: 66 }}
            />
          </strong>
        </p>
        <p>Remove the nodes with values 1, 2, and 3.</p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1], head = [1,2,1,2,1,2]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[2,2,2]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample1.png"
            style={{ height: 62, width: 450 }}
          />{" "}
        </p>
        <p>Remove the nodes with value 1.</p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [5], head = [1,2,3,4]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1,2,3,4]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <strong>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample2.png"
              style={{ width: 400, height: 83 }}
            />
          </strong>
        </p>
        <p>No node has value 5.</p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          All elements in <code>nums</code> are unique.
        </li>
        <li>
          The number of nodes in the given list is in the range{" "}
          <code>
            [1, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          The input is generated such that there is at least one node in the
          linked list that has a value not present in <code>nums</code>.
        </li>
      </ul>
    </div>
  ),
  3062: (
    <article role="main" class="blog-post">
      <p>
        You are given the <code>head</code> of a linked list of{" "}
        <strong>even</strong> length containing integers.
      </p>

      <p>
        Each <strong>odd-indexed</strong> node contains an odd integer and each{" "}
        <strong>even-indexed</strong> node contains an even integer.
      </p>

      <p>
        We call each even-indexed node and its next node a <strong>pair</strong>
        , e.g., the nodes with indices <code>0</code> and <code>1</code> are a
        pair, the nodes with indices <code>2</code> and <code>3</code> are a
        pair, and so on.
      </p>

      <p>
        For every <strong>pair</strong>, we compare the values of the nodes in
        the pair:
      </p>

      <ul>
        <li>
          If the odd-indexed node is higher, the <code>"Odd"</code> team gets a
          point.
        </li>
        <li>
          If the even-indexed node is higher, the <code>"Even"</code> team gets
          a point.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the name of the team with the <strong>higher</strong> points, if the
          points are equal, return
        </em>{" "}
        <code>"Tie"</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1: </strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io"> head = [2,1] </span>
        </p>
        <br />
        <p>
          <strong>Output: </strong> <span class="example-io"> "Even" </span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong> There is only one pair in this linked
          list and that is <code>(2,1)</code>. Since <code>2 &gt; 1</code>, the
          Even team gets the point.
        </p>
        <br />

        <p>
          Hence, the answer would be <code>"Even"</code>.
        </p>
      </div>

      <p>
        <strong class="example">Example 2: </strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io"> head = [2,5,4,7,20,5] </span>
        </p>
        <br />

        <p>
          <strong>Output: </strong> <span class="example-io"> "Odd" </span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong> There are <code>3</code> pairs in this
          linked list. Let's investigate each pair individually:
        </p>
        <br />

        <p>
          <code>(2,5)</code> -&gt; Since <code>2 &lt; 5</code>, The Odd team
          gets the point.
        </p>
        <br />

        <p>
          <code>(4,7)</code> -&gt; Since <code>4 &lt; 7</code>, The Odd team
          gets the point.
        </p>
        <br />

        <p>
          <code>(20,5)</code> -&gt; Since <code>20 &gt; 5</code>, The Even team
          gets the point.
        </p>
        <br />

        <p>
          The Odd team earned <code>2</code> points while the Even team got{" "}
          <code>1</code> point and the Odd team has the higher points.
        </p>
        <br />

        <p>
          Hence, the answer would be <code>"Odd"</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3: </strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io"> head = [4,5,2,1] </span>
        </p>

        <p>
          <strong>Output: </strong> <span class="example-io"> "Tie" </span>
        </p>

        <p>
          <strong>Explanation: </strong> There are <code>2</code> pairs in this
          linked list. Let's investigate each pair individually:
        </p>

        <p>
          <code>(4,5)</code> -&gt; Since <code>4 &lt; 5</code>, the Odd team
          gets the point.
        </p>

        <p>
          <code>(2,1)</code> -&gt; Since <code>2 &gt; 1</code>, the Even team
          gets the point.
        </p>

        <p>
          Both teams earned <code>1</code> point.
        </p>

        <p>
          Hence, the answer would be <code>"Tie"</code>.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is in the range <code>[2, 100]</code>.
        </li>
        <li>The number of nodes in the list is even.</li>
        <li>
          <code>1 &lt;= Node.val &lt;= 100</code>
        </li>
        <li>The value of each odd-indexed node is odd.</li>
        <li>The value of each even-indexed node is even.</li>
      </ul>
    </article>
  ),
  25: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a linked list, reverse the nodes of the
        list <code>k</code> at a time, and return <em>the modified list</em>.
      </p>

      <p>
        <code>k</code> is a positive integer and is less than or equal to the
        length of the linked list. If the number of nodes is not a multiple of{" "}
        <code>k</code> then left-out nodes, in the end, should remain as it is.
      </p>

      <p>
        You may not alter the values in the list's nodes, only nodes themselves
        may be changed.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg"
        style={{ width: 542, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5], k = 2 <br />
        <strong>Output:</strong> [2,1,4,3,5]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg"
        style={{ width: 542, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5], k = 3 <br />
        <strong>Output:</strong> [3,2,1,4,5]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is <code>n</code>.
        </li>
        <li>
          <code>1 &lt;= k &lt;= n &lt;= 5000</code>
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow-up:</strong> Can you solve the problem in{" "}
        <code>O(1)</code> extra memory space?
      </p>
    </div>
  ),
  50: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Implement{" "}
        <a
          rel="noreferrer"
          href="http://www.cplusplus.com/reference/valarray/pow/"
          target="_blank"
        >
          pow(x, n)
        </a>
        , which calculates <code>x</code> raised to the power <code>n</code>{" "}
        (i.e.,{" "}
        <code>
          x<sup>n</sup>
        </code>
        ).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 2.00000, n = 10 <br />
        <strong>Output:</strong> 1024.00000
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 2.10000, n = 3 <br />
        <strong>Output:</strong> 9.26100
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 2.00000, n = -2 <br />
        <strong>Output:</strong> 0.25000 <br />
        <strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 =
        0.25
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>-100.0 &lt; x &lt; 100.0</code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup>-1
          </code>
        </li>
        <li>
          <code>n</code> is an integer.
        </li>
        <li>
          Either <code>x</code> is not zero or <code>n &gt; 0</code>.
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  247: (
    <div class="markdown-body div-width">
      <p>
        A strobogrammatic number is a number that looks the same when rotated
        180 degrees (looked at upside down).
      </p>

      <p>Find all strobogrammatic numbers that are of length = n.</p>

      <p>
        <b>Example:</b>
      </p>

      <pre>
        <b>Input:</b> n = 2 <br />
        <b>Output:</b> <code>["11","69","88","96"]</code>
      </pre>
    </div>
  ),
  273: (
    <div class="markdown-body div-width">
      <p>
        Convert a non-negative integer to its english words representation.
        Given input is guaranteed to be less than 2<sup>31</sup> - 1.
      </p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        <b>Input:</b> 123 <br />
        <b>Output:</b> "One Hundred Twenty Three"
      </pre>

      <p>
        <b>Example 2:</b>
      </p>

      <pre>
        <b>Input:</b> 12345 <br />
        <b>Output:</b> "Twelve Thousand Three Hundred Forty Five"
      </pre>

      <p>
        <b>Example 3:</b>
      </p>

      <pre>
        <b>Input:</b> 1234567 <br />
        <b>Output:</b> "One Million Two Hundred Thirty Four Thousand Five
        Hundred Sixty Seven"
      </pre>

      <p>
        <b>Example 4:</b>
      </p>

      <pre>
        <b>Input:</b> 1234567891 <br />
        <b>Output:</b> "One Billion Two Hundred Thirty Four Million Five Hundred
        Sixty Seven Thousand Eight Hundred Ninety One"
      </pre>
    </div>
  ),
  390: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have a list <code>arr</code> of all integers in the range{" "}
        <code>[1, n]</code> sorted in a strictly increasing order. Apply the
        following algorithm on <code>arr</code>:
      </p>

      <ul>
        <li>
          Starting from left to right, remove the first number and every other
          number afterward until you reach the end of the list.
        </li>
        <li>
          Repeat the previous step again, but this time from right to left,
          remove the rightmost number and every other number from the remaining
          numbers.
        </li>
        <li>
          Keep repeating the steps again, alternating left to right and right to
          left, until a single number remains.
        </li>
      </ul>

      <p>
        Given the integer <code>n</code>, return{" "}
        <em>the last number that remains in</em> <code>arr</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 9 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> <br />
        arr = [<u>1</u>, 2, <u>3</u>, 4, <u>5</u>, 6, <u>7</u>, 8, <u>9</u>]{" "}
        <br />
        arr = [2, <u>4</u>, 6, <u>8</u>] <br />
        arr = [<u>2</u>, 6] <br />
        arr = [6]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  779: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        We build a table of <code>n</code> rows (<strong>1-indexed</strong>). We
        start by writing <code>0</code> in the{" "}
        <code>
          1<sup>st</sup>
        </code>{" "}
        row. Now in every subsequent row, we look at the previous row and
        replace each occurrence of <code>0</code> with <code>01</code>, and each
        occurrence of <code>1</code> with <code>10</code>.
      </p>

      <ul>
        <li>
          For example, for <code>n = 3</code>, the{" "}
          <code>
            1<sup>st</sup>
          </code>{" "}
          row is <code>0</code>, the{" "}
          <code>
            2<sup>nd</sup>
          </code>{" "}
          row is <code>01</code>, and the{" "}
          <code>
            3<sup>rd</sup>
          </code>{" "}
          row is <code>0110</code>.
        </li>
      </ul>

      <p>
        Given two integer <code>n</code> and <code>k</code>, return the{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        (<strong>1-indexed</strong>) symbol in the{" "}
        <code>
          n<sup>th</sup>
        </code>{" "}
        row of a table of <code>n</code> rows.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1, k = 1 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> row 1: <u>0</u>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, k = 1 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong>
        row 1: 0 row 2: <u>0</u>1
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, k = 2 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong>
        row 1: 0 row 2: 0<u>1</u>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 30</code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 2<sup>n - 1</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1106: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>boolean expression</strong> is an expression that evaluates to
        either <code>true</code> or <code>false</code>. It can be in one of the
        following shapes:
      </p>

      <ul>
        <li>
          <code>'t'</code> that evaluates to <code>true</code>.
        </li>
        <li>
          <code>'f'</code> that evaluates to <code>false</code>.
        </li>
        <li>
          <code>'!(subExpr)'</code> that evaluates to{" "}
          <strong>the logical NOT</strong> of the inner expression{" "}
          <code>subExpr</code>.
        </li>
        <li>
          <code>
            '&amp;(subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr
            <sub>n</sub>)'
          </code>{" "}
          that evaluates to <strong>the logical AND</strong> of the inner
          expressions{" "}
          <code>
            subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub>
          </code>{" "}
          where <code>n &gt;= 1</code>.
        </li>
        <li>
          <code>
            '|(subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr
            <sub>n</sub>)'
          </code>{" "}
          that evaluates to <strong>the logical OR</strong> of the inner
          expressions{" "}
          <code>
            subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub>
          </code>{" "}
          where <code>n &gt;= 1</code>.
        </li>
      </ul>

      <p>
        Given a string <code>expression</code> that represents a{" "}
        <strong>boolean expression</strong>, return{" "}
        <em>the evaluation of that expression</em>.
      </p>

      <p>
        It is <strong>guaranteed</strong> that the given expression is valid and
        follows the given rules.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> expression = "&amp;(|(f))" <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> <br />
        First, evaluate |(f) --&gt; f. The expression is now "&amp;(f)".
        <br />
        Then, evaluate &amp;(f) --&gt; f. The expression is now "f".
        <br />
        Finally, return false.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> expression = "|(f,f,f,t)" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The evaluation of (false OR false OR false
        OR true) is true.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> expression = "!(&amp;(f,t))" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> <br />
        First, evaluate &amp;(f,t) --&gt; (false AND true) --&gt; false --&gt;
        f. The expression is now "!(f)". <br />
        Then, evaluate !(f) --&gt; NOT false --&gt; true. We return true.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= expression.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          expression[i] is one following characters: <code>'('</code>,{" "}
          <code>')'</code>, <code>'&amp;'</code>, <code>'|'</code>,{" "}
          <code>'!'</code>, <code>'t'</code>, <code>'f'</code>, and{" "}
          <code>','</code>.
        </li>
      </ul>
    </div>
  ),
  1922: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A digit string is <strong>good</strong> if the digits{" "}
        <strong>(0-indexed)</strong> at <strong>even</strong> indices are{" "}
        <strong>even</strong> and the digits at <strong>odd</strong> indices are{" "}
        <strong>prime</strong> (<code>2</code>, <code>3</code>, <code>5</code>,
        or <code>7</code>).
      </p>

      <ul>
        <li>
          For example, <code>"2582"</code> is good because the digits (
          <code>2</code> and <code>8</code>) at even positions are even and the
          digits (<code>5</code> and <code>2</code>) at odd positions are prime.
          However, <code>"3245"</code> is <strong>not</strong> good because{" "}
          <code>3</code> is at an even index but is not even.
        </li>
      </ul>

      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          the <strong>total</strong> number of good digit strings of length{" "}
        </em>
        <code>n</code>. Since the answer may be large,{" "}
        <strong>return it modulo </strong>
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>
        A <strong>digit string</strong> is a string consisting of digits{" "}
        <code>0</code> through <code>9</code> that may contain leading zeros.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The good numbers of length 1 are "0", "2",
        "4", "6", "8".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> 400
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 50 <br />
        <strong>Output:</strong> 564908303
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>15</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2550: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a regular convex polygon with <code>n</code> vertices. The
        vertices are labeled from <code>0</code> to <code>n - 1</code> in a
        clockwise direction, and each vertex has{" "}
        <strong>exactly one monkey</strong>. The following figure shows a convex
        polygon of <code>6</code> vertices.
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/01/22/hexagon.jpg"
        style={{ width: 300, height: 293 }}
      />
      <br />
      <p>
        Simultaneously, each monkey moves to a neighboring vertex. A{" "}
        <strong>collision</strong> happens if at least two monkeys reside on the
        same vertex after the movement or intersect on an edge.
      </p>

      <p>
        Return the number of ways the monkeys can move so that at least{" "}
        <strong>one collision</strong> happens. Since the answer may be very
        large, return it modulo{" "}
        <code>
          10<sup>9 </sup>+ 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">6</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          There are 8 total possible movements.
          <br /> <br />
          Two ways such that they collide at some point are:
        </p>{" "}
        <br />
        <ul>
          <li>
            Monkey 1 moves in a clockwise direction; monkey 2 moves in an
            anticlockwise direction; monkey 3 moves in a clockwise direction.
            Monkeys 1 and 2 collide.
          </li>
          <li>
            Monkey 1 moves in an anticlockwise direction; monkey 2 moves in an
            anticlockwise direction; monkey 3 moves in a clockwise direction.
            Monkeys 1 and 3 collide.
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 4</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">14</span>
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  204: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return{" "}
        <em>the number of prime numbers that are strictly less than</em>{" "}
        <code>n</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 10 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> There are 4 prime numbers less than 10,
        they are 2, 3, 5, 7.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 0 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= n &lt;= 5 * 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  258: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>num</code>, repeatedly add all its digits until
        the result has only one digit, and return it.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 38 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The process is <br />
        38 --&gt; 3 + 8 --&gt; 11 <br />
        11 --&gt; 1 + 1 --&gt; 2 <br />
        Since 2 has only one digit, return it.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 0 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= num &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you do it without any loop/recursion
        in <code>O(1)</code> runtime?
      </p>
    </div>
  ),
  1250: (
    <div>
      <div class="elfjS" data-track-load="description_content">
        <p>
          Given an array <code>nums</code> of&nbsp;positive integers. Your task
          is to select some subset of <code>nums</code>, multiply each element
          by an integer and add all these numbers.&nbsp;The array is said to
          be&nbsp;<strong>good&nbsp;</strong>if you can obtain a sum of&nbsp;
          <code>1</code>&nbsp;from the array by any possible subset and
          multiplicand.
        </p>

        <p>
          Return&nbsp;<code>True</code>&nbsp;if the array is{" "}
          <strong>good&nbsp;</strong>otherwise&nbsp;return&nbsp;
          <code>False</code>.
        </p>

        <p>&nbsp;</p>
        <p>
          <strong class="example">Example 1:</strong>
        </p>

        <pre>
          <strong>Input:</strong> nums = [12,5,7,23] <br />
          <strong>Output:</strong> true <br />
          <strong>Explanation:</strong> Pick numbers 5 and 7. <br />
          5*3 + 7*(-2) = 1
        </pre>

        <p>
          <strong class="example">Example 2:</strong>
        </p>

        <pre>
          <strong>Input:</strong> nums = [29,6,10] <br />
          <strong>Output:</strong> true <br />
          <strong>Explanation:</strong> Pick numbers 29, 6 and 10. <br />
          29*1 + 6*(-3) + 10*(-1) = 1
        </pre>

        <p>
          <strong class="example">Example 3:</strong>
        </p>

        <pre>
          <strong>Input:</strong> nums = [3,6] <br />
          <strong>Output:</strong> false
        </pre>

        <p>&nbsp;</p>
        <p>
          <strong>Constraints:</strong>
        </p>

        <ul>
          <li>
            <code>1 &lt;= nums.length &lt;= 10^5</code>
          </li>
          <li>
            <code>1 &lt;= nums[i] &lt;= 10^9</code>
          </li>
        </ul>
      </div>
    </div>
  ),
  1492: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two positive integers <code>n</code> and <code>k</code>. A
        factor of an integer <code>n</code> is defined as an integer{" "}
        <code>i</code> where <code>n % i == 0</code>.
      </p>

      <p>
        Consider a list of all factors of <code>n</code> sorted in{" "}
        <strong>ascending order</strong>, return <em>the </em>
        <code>
          k<sup>th</sup>
        </code>
        <em> factor</em> in this list or return <code>-1</code> if{" "}
        <code>n</code> has less than <code>k</code> factors.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 12, k = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Factors list is [1, 2, 3, 4, 6, 12], the 3
        <sup>rd</sup> factor is 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 7, k = 2 <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> Factors list is [1, 7], the 2<sup>nd</sup>{" "}
        factor is 7.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4, k = 4 <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> Factors list is [1, 2, 4], there is only 3
        factors. We should return -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= n &lt;= 1000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <p>Could you solve this problem in less than O(n) complexity?</p>
    </div>
  ),
  1952: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return <code>true</code>
        <em> if </em>
        <code>n</code>
        <em>
          {" "}
          has <strong>exactly three positive divisors</strong>. Otherwise,
          return{" "}
        </em>
        <code>false</code>.
      </p>

      <p>
        An integer <code>m</code> is a <strong>divisor</strong> of{" "}
        <code>n</code> if there exists an integer <code>k</code> such that{" "}
        <code>n = k * m</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> false <br />
        <strong>Explantion:</strong> 2 has only two divisors: 1 and 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> true <br />
        <strong>Explantion:</strong> 4 has three divisors: 1, 2, and 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1979: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return<strong> </strong>
        <em>
          the <strong>greatest common divisor</strong> of the smallest number
          and largest number in{" "}
        </em>
        <code>nums</code>.
      </p>

      <p>
        The <strong>greatest common divisor</strong> of two numbers is the
        largest positive integer that evenly divides both numbers.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,5,6,9,10] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        The smallest number in nums is 2.
        <br />
        The largest number in nums is 10.
        <br />
        The greatest common divisor of 2 and 10 is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [7,5,6,8,3]
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong>
        <br />
        The smallest number in nums is 3.
        <br />
        The largest number in nums is 8.
        <br />
        The greatest common divisor of 3 and 8 is 1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,3]
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong>
        <br />
        The smallest number in nums is 3.
        <br />
        The largest number in nums is 3.
        <br />
        The greatest common divisor of 3 and 3 is 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  2413: (
    <div class="elfjS" data-track-load="description_content">
      Given a <strong>positive</strong> integer <code>n</code>, return{" "}
      <em>
        the smallest positive integer that is a multiple of{" "}
        <strong>both</strong>{" "}
      </em>
      <code>2</code>
      <em> and </em>
      <code>n</code>.<p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 5 <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation:</strong> The smallest multiple of both 5 and 2 is
        10.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 6 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The smallest multiple of both 6 and 2 is
        6. Note that a number is a multiple of itself.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= n &lt;= 150</code>
        </li>
      </ul>
    </div>
  ),
  2427: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two positive integers <code>a</code> and <code>b</code>, return{" "}
        <em>
          the number of <strong>common</strong> factors of{" "}
        </em>
        <code>a</code>
        <em> and </em>
        <code>b</code>.
      </p>

      <p>
        An integer <code>x</code> is a <strong>common factor</strong> of{" "}
        <code>a</code> and <code>b</code> if <code>x</code> divides both{" "}
        <code>a</code> and <code>b</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 12, b = 6 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The common factors of 12 and 6 are 1, 2,
        3, 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 25, b = 30 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The common factors of 25 and 30 are 1, 5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= a, b &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  2614: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a 0-indexed two-dimensional integer array{" "}
        <code>nums</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the largest <strong>prime</strong> number that lies on at least one of
          the <b>diagonals</b> of{" "}
        </em>
        <code>nums</code>. In case, no prime is present on any of the diagonals,
        return<em> 0.</em>
      </p>

      <p>Note that:</p>

      <ul>
        <li>
          An integer is <strong>prime</strong> if it is greater than{" "}
          <code>1</code> and has no positive integer divisors other than{" "}
          <code>1</code> and itself.
        </li>
        <li>
          An integer <code>val</code> is on one of the{" "}
          <strong>diagonals</strong> of <code>nums</code> if there exists an
          integer <code>i</code> for which <code>nums[i][i] = val</code> or an{" "}
          <code>i</code> for which{" "}
          <code>nums[i][nums.length - i - 1] = val</code>.
        </li>
      </ul>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2023/03/06/screenshot-2023-03-06-at-45648-pm.png"
          style={{ width: 181, height: 121 }}
        />
      </p>

      <p>
        In the above diagram, one diagonal is <strong>[1,5,9]</strong> and
        another diagonal is<strong> [3,5,7]</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [[1,2,3],[5,6,7],[9,10,11]] <br />
        <strong>Output:</strong> 11 <br />
        <strong>Explanation:</strong> The numbers 1, 3, 6, 9, and 11 are the
        only numbers present on at least one of the diagonals. Since 11 is the
        largest prime, we return 11.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [[1,2,3],[5,17,7],[9,11,10]] <br />
        <strong>Output:</strong> 17 <br />
        <strong>Explanation:</strong> The numbers 1, 3, 9, 10, and 17 are all
        present on at least one of the diagonals. 17 is the largest prime, so we
        return 17.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 300</code>
        </li>
        <li>
          <code>
            nums.length == nums<sub>i</sub>.length
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums<span>[i][j]</span>&nbsp;&lt;= 4*10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2862: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>1</strong>
        <strong>-indexed</strong> array <code>nums</code>. Your task is to
        select a <strong>complete subset</strong> from <code>nums</code> where
        every pair of selected indices multiplied is a{" "}
        <span
          data-keyword="perfect-square"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r73:"
              >
                <div>perfect square,</div>
              </div>
            </div>
          </div>
        </span>
        . i. e. if you select{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          a<sub>j</sub>
        </code>
        , <code>i * j</code> must be a perfect square.
      </p>

      <p>
        Return the <em>sum</em> of the complete subset with the{" "}
        <em>maximum sum</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [8,7,3,5,7,2,4,9]</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">16</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          We select elements at indices 2 and 8 and <code>2 * 8</code> is a
          perfect square.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [8,10,3,8,1,13,7,9,4]</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">20</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>
          We select elements at indices 1, 4, and 9. <code>1 * 4</code>,{" "}
          <code>1 * 9</code>, <code>4 * 9</code> are perfect squares.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n == nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3012: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> containing <strong>positive</strong> integers.
      </p>

      <p>
        Your task is to <strong>minimize</strong> the length of{" "}
        <code>nums</code> by performing the following operations{" "}
        <strong>any</strong> number of times (including zero):
      </p>

      <ul>
        <li>
          Select <strong>two</strong> <strong>distinct</strong> indices{" "}
          <code>i</code> and <code>j</code> from <code>nums</code>, such that{" "}
          <code>nums[i] &gt; 0</code> and <code>nums[j] &gt; 0</code>.
        </li>
        <li>
          Insert the result of <code>nums[i] % nums[j]</code> at the end of{" "}
          <code>nums</code>.
        </li>
        <li>
          Delete the elements at indices <code>i</code> and <code>j</code> from{" "}
          <code>nums</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          an integer denoting the <strong>minimum</strong>{" "}
          <strong>length</strong> of{" "}
        </em>
        <code>nums</code>
        <em> after performing the operation any number of times.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,4,3,1]
        <strong>Output:</strong> 1<strong>Explanation:</strong> One way to
        minimize the length of the array is as follows: <br />
        Operation 1: Select indices 2 and 1, insert nums[2] % nums[1] at the end
        and it becomes [1,4,3,1,3], then delete elements at indices 2 and 1.{" "}
        <br />
        nums becomes [1,1,3]. <br />
        Operation 2: Select indices 1 and 2, insert nums[1] % nums[2] at the end
        and it becomes [1,1,3,1], then delete elements at indices 1 and 2.{" "}
        <br />
        nums becomes [1,1]. <br />
        Operation 3: Select indices 1 and 0, insert nums[1] % nums[0] at the end
        and it becomes [1,1,0], then delete elements at indices 1 and 0. <br />
        nums becomes [0]. <br />
        The length of nums cannot be reduced further. Hence, the answer is 1.{" "}
        <br />
        It can be shown that 1 is the minimum achievable length.{" "}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,5,5,10,5]
        <strong>Output:</strong> 2<strong>Explanation:</strong> One way to
        minimize the length of the array is as follows: <br />
        Operation 1: Select indices 0 and 3, insert nums[0] % nums[3] at the end
        and it becomes [5,5,5,10,5,5], then delete elements at indices 0 and 3.{" "}
        <br />
        nums becomes [5,5,5,5]. <br />
        Operation 2: Select indices 2 and 3, insert nums[2] % nums[3] at the end
        and it becomes [5,5,5,5,0], then delete elements at indices 2 and 3.{" "}
        <br />
        nums becomes [5,5,0]. <br />
        Operation 3: Select indices 0 and 1, insert nums[0] % nums[1] at the end
        and it becomes [5,5,0,0], then delete elements at indices 0 and 1.{" "}
        <br />
        nums becomes [0,0]. <br />
        The length of nums cannot be reduced further. Hence, the answer is 2.{" "}
        <br />
        It can be shown that 2 is the minimum achievable length.{" "}
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,4] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> One way to minimize the length of the
        array is as follows: <br />
        Operation 1: Select indices 1 and 2, insert nums[1] % nums[2] at the end
        and it becomes [2,3,4,3], then delete elements at indices 1 and 2.{" "}
        <br />
        nums becomes [2,3]. <br />
        Operation 2: Select indices 1 and 0, insert nums[1] % nums[0] at the end
        and it becomes [2,3,1], then delete elements at indices 1 and 0. <br />
        nums becomes [1]. <br />
        The length of nums cannot be reduced further. Hence, the answer is 1.{" "}
        <br />
        It can be shown that 1 is the minimum achievable length.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3115: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>.
      </p>

      <p>
        Return an integer that is the <strong>maximum</strong> distance between
        the <strong>indices</strong> of two (not necessarily different) prime
        numbers in <code>nums</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [4,2,9,5,3]</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong> <code>nums[1]</code>,{" "}
          <code>nums[3]</code>, and <code>nums[4]</code> are prime. So the
          answer is <code>|4 - 1| = 3</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [4,8,2,8]</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong> <code>nums[2]</code> is prime. Because
          there is just one prime number, the answer is <code>|2 - 2| = 0</code>
          .
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 3 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
        <li>
          The input is generated such that the number of prime numbers in the{" "}
          <code>nums</code> is at least one.
        </li>
      </ul>
    </div>
  ),
  261: (
    <div class="markdown-body div-width">
      <p>
        Given <code>n</code> nodes labeled from <code>0</code> to{" "}
        <code>n-1</code> and a list of undirected edges (each edge is a pair of
        nodes), write a function to check whether these edges make up a valid
        tree.
      </p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <code>n = 5</code>, and{" "}
        <code>edges = [[0,1], [0,2], [0,3], [1,4]]</code> <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <code>n = 5, </code>and{" "}
        <code>edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]</code> <br />
        <strong>Output:</strong> false
      </pre>

      <p>
        <b>Note</b>: you can assume that no duplicate edges will appear in{" "}
        <code>edges</code>. Since all edges are undirected, <code>[0,1]</code>{" "}
        is the same as <code>[1,0]</code> and thus will not appear together in{" "}
        <code>edges</code>.
      </p>
    </div>
  ),
  323: (
    <div class="markdown-body div-width">
      <p>
        Given <code>n</code> nodes labeled from <code>0</code> to{" "}
        <code>n - 1</code> and a list of undirected edges (each edge is a pair
        of nodes), write a function to find the number of connected components
        in an undirected graph.
      </p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        <strong>Input: </strong>
        <code>n = 5</code> and <code>edges = [[0, 1], [1, 2], [3, 4]]</code>{" "}
        <br />
        <br />
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0323.Number%20of%20Connected%20Components%20in%20an%20Undirected%20Graph/images/conn1-graph.jpg"
          style={{ width: 382, height: 222 }}
        />
        <br />
        <strong>Output: </strong>2
      </pre>

      <p>
        <b>Example 2:</b>
      </p>

      <pre>
        <strong>Input: </strong>
        <code>n = 5</code> and{" "}
        <code>edges = [[0, 1], [1, 2], [2, 3], [3, 4]]</code> <br /> <br />
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0323.Number%20of%20Connected%20Components%20in%20an%20Undirected%20Graph/images/conn2-graph.jpg"
          style={{ width: 382, height: 222 }}
        />
        <br />
        <strong>Output:&nbsp;&nbsp;</strong>1
      </pre>

      <p>
        <b>Note:</b>
        <br />
        You can assume that no duplicate edges will appear in <code>edges</code>
        . Since all edges are undirected, <code>[0, 1]</code> is the same as{" "}
        <code>[1, 0]</code> and thus will not appear together in{" "}
        <code>edges</code>.
      </p>
    </div>
  ),
  547: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> cities. Some of them are connected, while some
        are not. If city <code>a</code> is connected directly with city{" "}
        <code>b</code>, and city <code>b</code> is connected directly with city{" "}
        <code>c</code>, then city <code>a</code> is connected indirectly with
        city <code>c</code>.
      </p>

      <p>
        A <strong>province</strong> is a group of directly or indirectly
        connected cities and no other cities outside of the group.
      </p>

      <p>
        You are given an <code>n x n</code> matrix <code>isConnected</code>{" "}
        where <code>isConnected[i][j] = 1</code> if the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        city and the{" "}
        <code>
          j<sup>th</sup>
        </code>{" "}
        city are directly connected, and <code>isConnected[i][j] = 0</code>{" "}
        otherwise.
      </p>

      <p>
        Return{" "}
        <em>
          the total number of <strong>provinces</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg"
        style={{ width: 222, height: 142 }}
      />
      <pre>
        <strong>Input:</strong> isConnected = [[1,1,0],[1,1,0],[0,0,1]] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/24/graph2.jpg"
        style={{ width: 222, height: 142 }}
      />
      <pre>
        <strong>Input:</strong> isConnected = [[1,0,0],[0,1,0],[0,0,1]] <br />
        <strong>Output:</strong> 3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 200</code>
        </li>
        <li>
          <code>n == isConnected.length</code>
        </li>
        <li>
          <code>n == isConnected[i].length</code>
        </li>
        <li>
          <code>isConnected[i][j]</code> is <code>1</code> or <code>0</code>.
        </li>
        <li>
          <code>isConnected[i][i] == 1</code>
        </li>
        <li>
          <code>isConnected[i][j] == isConnected[j][i]</code>
        </li>
      </ul>
    </div>
  ),
  684: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        In this problem, a tree is an <strong>undirected graph</strong> that is
        connected and has no cycles.
      </p>

      <p>
        You are given a graph that started as a tree with <code>n</code> nodes
        labeled from <code>1</code> to <code>n</code>, with one additional edge
        added. The added edge has two <strong>different</strong> vertices chosen
        from <code>1</code> to <code>n</code>, and was not an edge that already
        existed. The graph is represented as an array <code>edges</code> of
        length <code>n</code> where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        in the graph.
      </p>

      <p>
        Return{" "}
        <em>
          an edge that can be removed so that the resulting graph is a tree of{" "}
        </em>
        <code>n</code>
        <em> nodes</em>. If there are multiple answers, return the answer that
        occurs last in the input.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/02/reduntant1-1-graph.jpg"
        style={{ width: 222, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> edges = [[1,2],[1,3],[2,3]] <br />
        <strong>Output:</strong> [2,3]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/02/reduntant1-2-graph.jpg"
        style={{ width: 382, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> edges = [[1,2],[2,3],[3,4],[1,4],[1,5]] <br />
        <strong>Output:</strong> [1,4]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == edges.length</code>
        </li>
        <li>
          <code>3 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt;= edges.length
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>There are no repeated edges.</li>
        <li>The given graph is connected.</li>
      </ul>
    </div>
  ),
  685: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        In this problem, a rooted tree is a <b>directed</b> graph such that,
        there is exactly one node (the root) for which all other nodes are
        descendants of this node, plus every node has exactly one parent, except
        for the root node which has no parents.
      </p>
      <p>
        The given input is a directed graph that started as a rooted tree with{" "}
        <code>n</code> nodes (with distinct values from <code>1</code> to{" "}
        <code>n</code>), with one additional directed edge added. The added edge
        has two different vertices chosen from <code>1</code> to <code>n</code>,
        and was not an edge that already existed.
      </p>
      <p>
        The resulting graph is given as a 2D-array of <code>edges</code>. Each
        element of <code>edges</code> is a pair{" "}
        <code>
          [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        that represents a <b>directed</b> edge connecting nodes{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>
        , where{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        is a parent of child{" "}
        <code>
          v<sub>i</sub>
        </code>
        .
      </p>
      <p>
        Return{" "}
        <em>
          an edge that can be removed so that the resulting graph is a rooted
          tree of
        </em>{" "}
        <code>n</code> <em>nodes</em>. If there are multiple answers, return the
        answer that occurs last in the given 2D-array.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/20/graph1.jpg"
        style={{ width: 222, height: 222 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> edges = [[1,2],[1,3],[2,3]] <br />
        <strong>Output:</strong> [2,3]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/20/graph2.jpg"
        style={{ width: 222, height: 382 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> edges = [[1,2],[2,3],[3,4],[4,1],[1,5]] <br />
        <strong>Output:</strong> [4,1]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>n == edges.length</code>
        </li>
        <li>
          <code>3 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
      </ul>
    </div>
  ),
  721: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a list of <code>accounts</code> where each element{" "}
        <code>accounts[i]</code> is a list of strings, where the first element{" "}
        <code>accounts[i][0]</code> is a name, and the rest of the elements are{" "}
        <strong>emails</strong> representing emails of the account.
      </p>

      <p>
        Now, we would like to merge these accounts. Two accounts definitely
        belong to the same person if there is some common email to both
        accounts. Note that even if two accounts have the same name, they may
        belong to different people as people could have the same name. A person
        can have any number of accounts initially, but all of their accounts
        definitely have the same name.
      </p>

      <p>
        After merging the accounts, return the accounts in the following format:
        the first element of each account is the name, and the rest of the
        elements are emails <strong>in sorted order</strong>. The accounts
        themselves can be returned in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> accounts =
        [["John","johnsmith@mail.com","john_newyork@mail.com"],["John","johnsmith@mail.com","john00@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]
        <br /> <strong>Output:</strong>{" "}
        [["John","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]
        <br /> <strong>Explanation:</strong> <br />
        The first and second John's are the same person as they have the common
        email "johnsmith@mail.com". <br />
        The third John and Mary are different people as none of their email
        addresses are used by other accounts. <br />
        We could return these lists in any order, for example the answer
        [['Mary', 'mary@mail.com'], <br /> ['John', 'johnnybravo@mail.com'],
        <br /> ['John', 'john00@mail.com', 'john_newyork@mail.com',
        'johnsmith@mail.com']] would still be accepted. <br />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> accounts =
        [["Gabe","Gabe0@m.co","Gabe3@m.co","Gabe1@m.co"],["Kevin","Kevin3@m.co","Kevin5@m.co","Kevin0@m.co"],{" "}
        <br />
        ["Ethan","Ethan5@m.co","Ethan4@m.co","Ethan0@m.co"],["Hanzo","Hanzo3@m.co","Hanzo1@m.co","Hanzo0@m.co"],["Fern","Fern5@m.co","Fern1@m.co","Fern0@m.co"]]
        <br /> <strong>Output:</strong>{" "}
        [["Ethan","Ethan0@m.co","Ethan4@m.co","Ethan5@m.co"], <br />
        ["Gabe","Gabe0@m.co","Gabe1@m.co","Gabe3@m.co"],["Hanzo","Hanzo0@m.co","Hanzo1@m.co","Hanzo3@m.co"],["Kevin","Kevin0@m.co","Kevin3@m.co","Kevin5@m.co"],["Fern","Fern0@m.co","Fern1@m.co","Fern5@m.co"]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= accounts.length &lt;= 1000</code>
        </li>
        <li>
          <code>2 &lt;= accounts[i].length &lt;= 10</code>
        </li>
        <li>
          <code>1 &lt;= accounts[i][j].length &lt;= 30</code>
        </li>
        <li>
          <code>accounts[i][0]</code> consists of English letters.
        </li>
        <li>
          <code>accounts[i][j] (for j &gt; 0)</code> is a valid email.
        </li>
      </ul>
    </div>
  ),
  924: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a network of <code>n</code> nodes represented as an{" "}
        <code>n x n</code> adjacency matrix <code>graph</code>, where the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        node is directly connected to the{" "}
        <code>
          j<sup>th</sup>
        </code>{" "}
        node if <code>graph[i][j] == 1</code>.
      </p>

      <p>
        Some nodes <code>initial</code> are initially infected by malware.
        Whenever two nodes are directly connected, and at least one of those two
        nodes is infected by malware, both nodes will be infected by malware.
        This spread of malware will continue until no more nodes can be infected
        in this manner.
      </p>

      <p>
        Suppose <code>M(initial)</code> is the final number of nodes infected
        with malware in the entire network after the spread of malware stops. We
        will remove <strong>exactly one node</strong> from <code>initial</code>.
      </p>

      <p>
        Return the node that, if removed, would minimize <code>M(initial)</code>
        . If multiple nodes could be removed to minimize <code>M(initial)</code>
        , return such a node with <strong>the smallest index</strong>.
      </p>

      <p>
        Note that if a node was removed from the <code>initial</code> list of
        infected nodes, it might still be infected later due to the malware
        spread.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> graph = [[1,1,0],[1,1,0],[0,0,1]], initial =
        [0,1] <br />
        <strong>Output:</strong> 0 <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> graph = [[1,0,0],[0,1,0],[0,0,1]], initial =
        [0,2] <br />
        <strong>Output:</strong> 0 <br />
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> graph = [[1,1,1],[1,1,1],[1,1,1]], initial =
        [1,2] <br />
        <strong>Output:</strong> 1
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == graph.length</code>
        </li>
        <li>
          <code>n == graph[i].length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 300</code>
        </li>
        <li>
          <code>graph[i][j]</code> is <code>0</code> or <code>1</code>.
        </li>
        <li>
          <code>graph[i][j] == graph[j][i]</code>
        </li>
        <li>
          <code>graph[i][i] == 1</code>
        </li>
        <li>
          <code>1 &lt;= initial.length &lt;= n</code>
        </li>
        <li>
          <code>0 &lt;= initial[i] &lt;= n - 1</code>
        </li>
        <li>
          All the integers in <code>initial</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  1061: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two strings of the same length <code>s1</code> and{" "}
        <code>s2</code> and a string <code>baseStr</code>.
      </p>

      <p>
        We say <code>s1[i]</code> and <code>s2[i]</code> are equivalent
        characters.
      </p>

      <ul>
        <li>
          For example, if <code>s1 = "abc"</code> and <code>s2 = "cde"</code>,
          then we have <code>'a' == 'c'</code>, <code>'b' == 'd'</code>, and{" "}
          <code>'c' == 'e'</code>.
        </li>
      </ul>

      <p>
        Equivalent characters follow the usual rules of any equivalence
        relation:
      </p>

      <ul>
        <li>
          <strong>Reflexivity:</strong> <code>'a' == 'a'</code>.
        </li>
        <li>
          <strong>Symmetry:</strong> <code>'a' == 'b'</code> implies{" "}
          <code>'b' == 'a'</code>.
        </li>
        <li>
          <strong>Transitivity:</strong> <code>'a' == 'b'</code> and{" "}
          <code>'b' == 'c'</code> implies <code>'a' == 'c'</code>.
        </li>
      </ul>

      <p>
        For example, given the equivalency information from{" "}
        <code>s1 = "abc"</code> and <code>s2 = "cde"</code>, <code>"acd"</code>{" "}
        and <code>"aab"</code> are equivalent strings of{" "}
        <code>baseStr = "eed"</code>, and <code>"aab"</code> is the
        lexicographically smallest equivalent string of <code>baseStr</code>.
      </p>

      <p>
        Return <em>the lexicographically smallest equivalent string of </em>
        <code>baseStr</code>
        <em> by using the equivalency information from </em>
        <code>s1</code>
        <em> and </em>
        <code>s2</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "parker", s2 = "morris", baseStr = "parser"{" "}
        <br />
        <strong>Output:</strong> "makkek" <br />
        <strong>Explanation:</strong> Based on the equivalency information in s1
        and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i].{" "}
        <br />
        The characters in each group are equivalent and sorted in
        lexicographical order. <br />
        So the answer is "makkek".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "hello", s2 = "world", baseStr = "hold"{" "}
        <br />
        <strong>Output:</strong> "hdld" <br />
        <strong>Explanation: </strong>Based on the equivalency information in s1
        and s2, we can group their characters as [h,w], [d,e,o], [l,r]. <br />
        So only the second letter 'o' in baseStr is changed to 'd', the answer
        is "hdld".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "leetcode", s2 = "programs", baseStr =
        "sourcecode" <br />
        <strong>Output:</strong> "aauaaaaada" <br />
        <strong>Explanation:</strong> We group the equivalent characters in s1
        and s2 as [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in
        baseStr except 'u' and 'd' are transformed to 'a', the answer is
        "aauaaaaada".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s1.length, s2.length, baseStr &lt;= 1000</code>
        </li>
        <li>
          <code>s1.length == s2.length</code>
        </li>
        <li>
          <code>s1</code>, <code>s2</code>, and <code>baseStr</code> consist of
          lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  1627: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        We have <code>n</code> cities labeled from <code>1</code> to{" "}
        <code>n</code>. Two different cities with labels <code>x</code> and{" "}
        <code>y</code> are directly connected by a bidirectional road if and
        only if <code>x</code> and <code>y</code> share a common divisor{" "}
        <strong>strictly greater</strong> than some <code>threshold</code>. More
        formally, cities with labels <code>x</code> and <code>y</code> have a
        road between them if there exists an integer <code>z</code> such that
        all of the following are true:
      </p>

      <ul>
        <li>
          <code>x % z == 0</code>,
        </li>
        <li>
          <code>y % z == 0</code>, and
        </li>
        <li>
          <code>z &gt; threshold</code>.
        </li>
      </ul>

      <p>
        Given the two integers, <code>n</code> and <code>threshold</code>, and
        an array of <code>queries</code>, you must determine for each{" "}
        <code>
          queries[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        if cities{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        are connected directly or indirectly.&nbsp;(i.e. there is some path
        between them).
      </p>

      <p>
        Return <em>an array </em>
        <code>answer</code>
        <em>, where </em>
        <code>answer.length == queries.length</code>
        <em> and </em>
        <code>answer[i]</code>
        <em> is </em>
        <code>true</code>
        <em> if for the </em>
        <code>
          i<sup>th</sup>
        </code>
        <em> query, there is a path between </em>
        <code>
          a<sub>i</sub>
        </code>
        <em> and </em>
        <code>
          b<sub>i</sub>
        </code>
        <em>, or </em>
        <code>answer[i]</code>
        <em> is </em>
        <code>false</code>
        <em> if there is no path.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/09/ex1.jpg"
        style={{ width: 382, height: 181 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, threshold = 2, queries =
        [[1,4],[2,5],[3,6]] <br />
        <strong>Output:</strong> [false,false,true] <br />
        <strong>Explanation:</strong> The divisors for each number: <br />
        1: 1 <br />
        2: 1, 2 <br />
        3: 1, <u>3</u> <br />
        4: 1, 2, <u>4</u> <br />
        5: 1, <u>5</u> <br />
        6: 1, 2, <u>3</u>, <u>6</u> <br />
        Using the underlined divisors above the threshold, only cities 3 and 6
        share a common divisor, so they are the <br />
        only ones directly connected. The result of each query: <br />
        [1,4] 1 is not connected to 4 <br />
        [2,5] 2 is not connected to 5 <br />
        [3,6] 3 is connected to 6 through path 3--6
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/10/tmp.jpg"
        style={{ width: 532, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, threshold = 0, queries =
        [[4,5],[3,4],[3,2],[2,6],[1,3]] <br />
        <strong>Output:</strong> [true,true,true,true,true] <br />
        <strong>Explanation:</strong> The divisors for each number are the same
        as the previous example. However, since the threshold is 0, all divisors
        can be used. Since all numbers share 1 as a divisor, all cities are
        connected.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/17/ex3.jpg"
        style={{ width: 282, height: 282 }}
      />
      <pre>
        <strong>Input:</strong> n = 5, threshold = 1, queries =
        [[4,5],[4,5],[3,2],[2,3],[3,4]] <br />
        <strong>Output:</strong> [false,false,false,false,false] <br />
        <strong>Explanation:</strong> Only cities 2 and 4 share a common divisor
        2 which is strictly greater than the threshold 1, so they are the only
        ones directly connected. Please notice that there can be multiple
        queries for the same pair of nodes [x, y], and that the query [x, y] is
        equivalent to the query [y, x].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= threshold &lt;= n</code>
        </li>
        <li>
          <code>
            1 &lt;= queries.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>queries[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= cities
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
      </ul>
    </div>
  ),
  1971: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a <strong>bi-directional</strong> graph with <code>n</code>{" "}
        vertices, where each vertex is labeled from <code>0</code> to{" "}
        <code>n - 1</code> (<strong>inclusive</strong>). The edges in the graph
        are represented as a 2D integer array <code>edges</code>, where each{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        denotes a bi-directional edge between vertex{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and vertex{" "}
        <code>
          v<sub>i</sub>
        </code>
        . Every vertex pair is connected by <strong>at most one</strong> edge,
        and no vertex has an edge to itself.
      </p>

      <p>
        You want to determine if there is a <strong>valid path</strong> that
        exists from vertex <code>source</code> to vertex{" "}
        <code>destination</code>.
      </p>

      <p>
        Given <code>edges</code> and the integers <code>n</code>,{" "}
        <code>source</code>, and <code>destination</code>, return{" "}
        <code>true</code>
        <em>
          {" "}
          if there is a <strong>valid path</strong> from{" "}
        </em>
        <code>source</code>
        <em> to </em>
        <code>destination</code>
        <em>, or </em>
        <code>false</code>
        <em> otherwise</em>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/14/validpath-ex1.png"
        style={{ width: 141, height: 121 }}
      />
      <pre>
        <strong>Input:</strong> n = 3, edges = [[0,1],[1,2],[2,0]], source = 0,
        destination = 2 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> There are two paths from vertex 0 to
        vertex 2: <br />
        - 0 → 1 → 2 <br />- 0 → 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/14/validpath-ex2.png"
        style={{ width: 281, height: 141 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]],
        source = 0, destination = 5 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> There is no path from vertex 0 to vertex
        5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= edges.length &lt;= 2 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
        <li>
          <code>0 &lt;= source, destination &lt;= n - 1</code>
        </li>
        <li>There are no duplicate edges.</li>
        <li>There are no self edges.</li>
      </ul>
    </div>
  ),
  2421: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a tree (i.e. a connected, undirected graph with no cycles)
        consisting of <code>n</code> nodes numbered from <code>0</code> to{" "}
        <code>n - 1</code> and exactly <code>n - 1</code> edges.
      </p>

      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>vals</code> of length <code>n</code> where <code>vals[i]</code>{" "}
        denotes the value of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        node. You are also given a 2D integer array <code>edges</code> where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        denotes that there exists an <strong>undirected</strong> edge connecting
        nodes{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>
        .
      </p>

      <p>
        A <strong>good path</strong> is a simple path that satisfies the
        following conditions:
      </p>

      <ol>
        <li>
          The starting node and the ending node have the <strong>same</strong>{" "}
          value.
        </li>
        <li>
          All nodes between the starting node and the ending node have values{" "}
          <strong>less than or equal to</strong> the starting node (i.e. the
          starting node's value should be the maximum value along the path).
        </li>
      </ol>

      <p>
        Return <em>the number of distinct good paths</em>.
      </p>

      <p>
        Note that a path and its reverse are counted as the{" "}
        <strong>same</strong> path. For example, <code>0 -&gt; 1</code> is
        considered to be the same as <code>1 -&gt; 0</code>. A single node is
        also considered as a valid path.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/08/04/f9caaac15b383af9115c5586779dec5.png"
        style={{ width: 400, height: 333 }}
      />
      <pre>
        <strong>Input:</strong> vals = [1,3,2,1,3], edges =
        [[0,1],[0,2],[2,3],[2,4]] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> There are 5 good paths consisting of a
        single node. <br />
        There is 1 additional good path: 1 -&gt; 0 -&gt; 2 -&gt; 4. <br />
        (The reverse path 4 -&gt; 2 -&gt; 0 -&gt; 1 is treated as the same as 1
        -&gt; 0 -&gt; 2 -&gt; 4.) <br />
        Note that 0 -&gt; 2 -&gt; 3 is not a good path because vals[2] &gt;
        vals[0].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/08/04/149d3065ec165a71a1b9aec890776ff.png"
        style={{ width: 273, height: 350 }}
      />
      <pre>
        <strong>Input:</strong> vals = [1,1,2,2,3], edges =
        [[0,1],[1,2],[2,3],[2,4]] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> There are 5 good paths consisting of a
        single node. <br />
        There are 2 additional good paths: 0 -&gt; 1 and 2 -&gt; 3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/08/04/31705e22af3d9c0a557459bc7d1b62d.png"
        style={{ width: 100, height: 88 }}
      />
      <pre>
        <strong>Input:</strong> vals = [1], edges = [] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The tree consists of only one node, so
        there is one good path.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == vals.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= vals[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          <code>edges</code> represents a valid tree.
        </li>
      </ul>
    </div>
  ),
  3108: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an undirected weighted graph with <code>n</code> vertices
        labeled from <code>0</code> to <code>n - 1</code>.
      </p>

      <p>
        You are given the integer <code>n</code> and an array <code>edges</code>
        , where{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between vertices{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        with a weight of{" "}
        <code>
          w<sub>i</sub>
        </code>
        .
      </p>

      <p>
        A walk on a graph is a sequence of vertices and edges. The walk starts
        and ends with a vertex, and each edge connects the vertex that comes
        before it and the vertex that comes after it. It's important to note
        that a walk may visit the same edge or vertex more than once.
      </p>

      <p>
        The <strong>cost</strong> of a walk starting at node <code>u</code> and
        ending at node <code>v</code> is defined as the bitwise <code>AND</code>{" "}
        of the weights of the edges traversed during the walk. In other words,
        if the sequence of edge weights encountered during the walk is{" "}
        <code>
          w<sub>0</sub>, w<sub>1</sub>, w<sub>2</sub>, ..., w<sub>k</sub>
        </code>
        , then the cost is calculated as{" "}
        <code>
          w<sub>0</sub> &amp; w<sub>1</sub> &amp; w<sub>2</sub> &amp; ... &amp;
          w<sub>k</sub>
        </code>
        , where <code>&amp;</code> denotes the bitwise <code>AND</code>{" "}
        operator.
      </p>

      <p>
        You are also given a 2D array <code>query</code>, where{" "}
        <code>
          query[i] = [s<sub>i</sub>, t<sub>i</sub>]
        </code>
        . For each query, you need to find the minimum cost of the walk starting
        at vertex{" "}
        <code>
          s<sub>i</sub>
        </code>{" "}
        and ending at vertex{" "}
        <code>
          t<sub>i</sub>
        </code>
        . If there exists no such walk, the answer is <code>-1</code>.
      </p>

      <p>
        Return <em>the array </em>
        <code>answer</code>
        <em>, where </em>
        <code>answer[i]</code>
        <em>
          {" "}
          denotes the <strong>minimum</strong> cost of a walk for query{" "}
        </em>
        <code>i</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 5, edges = [[0,1,7],[1,3,7],[1,2,1]], query = [[0,3],[3,4]]
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">[1,-1]</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2024/01/31/q4_example1-1.png"
          style={{
            padding: 10,
            background: "rgb(255, 255, 255)",
            borderRadius: "0.5rem",
            width: 351,
            height: 141,
          }}
        />
        <p>
          To achieve the cost of 1 in the first query, we need to move on the
          following edges: <code>0-&gt;1</code> (weight 7), <code>1-&gt;2</code>{" "}
          (weight 1), <code>2-&gt;1</code> (weight 1), <code>1-&gt;3</code>{" "}
          (weight 7).
        </p>
        <br />
        <p>
          In the second query, there is no walk between nodes 3 and 4, so the
          answer is -1.
        </p>

        <p>
          <strong class="example">Example 2:</strong>
        </p>
      </div>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 3, edges = [[0,2,7],[0,1,15],[1,2,6],[1,2,1]], query = [[1,2]]
          </span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">[0]</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2024/01/31/q4_example2e.png"
          style={{
            padding: 10,
            background: "rgb(255, 255, 255)",
            borderRadius: "0.5rem",
            width: 211,
            height: 181,
          }}
        />
        <p>
          To achieve the cost of 0 in the first query, we need to move on the
          following edges: <code>1-&gt;2</code> (weight 1), <code>2-&gt;1</code>{" "}
          (weight 6), <code>1-&gt;2</code> (weight 1).
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= edges.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= w<sub>i</sub> &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= query.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>query[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= s<sub>i</sub>, t<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            s<sub>i</sub> !=&nbsp;t<sub>i</sub>
          </code>
        </li>
      </ul>
    </div>
  ),
  102: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>the level order traversal of its nodes' values</em>. (i.e., from
        left to right, level by level).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg"
        style={{ width: 277, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> [[3],[9,20],[15,7]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> [[1]]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 2000]</code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  103: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>the zigzag level order traversal of its nodes' values</em>. (i.e.,
        from left to right, then right to left for the next level and alternate
        between).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg"
        style={{ width: 277, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> [[3],[20,9],[15,7]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> [[1]]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 2000]</code>
          .
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  104: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>its maximum depth</em>.
      </p>
      <p>
        A binary tree's <strong>maximum depth</strong>&nbsp;is the number of
        nodes along the longest path from the root node down to the farthest
        leaf node.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg"
        style={{ width: 400, height: 277 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> 3
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> root = [1,null,2] <br />
        <strong>Output:</strong> 2
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  107: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>the bottom-up level order traversal of its nodes' values</em>.
        (i.e., from left to right, level by level from leaf to root).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg"
        style={{ width: 277, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> [[15,7],[9,20],[3]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> [[1]]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 2000]</code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  111: (
    <div class="elfjS" data-track-load="description_content">
      <p>Given a binary tree, find its minimum depth.</p>

      <p>
        The minimum depth is the number of nodes along the shortest path from
        the root node down to the nearest leaf node.
      </p>

      <p>
        <strong>Note:</strong>&nbsp;A leaf is a node with no children.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg"
        style={{ width: 432, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [2,null,3,null,4,null,5,null,6] <br />
        <strong>Output:</strong> 5
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [0, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  226: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, invert the tree, and
        return <em>its root</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg"
        style={{ width: 500, height: 165 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,2,7,1,3,6,9] <br />
        <strong>Output:</strong> [4,7,2,9,6,3,1]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg"
        style={{ width: 500, height: 120 }}
      />
      <pre>
        <strong>Input:</strong> root = [2,1,3] <br />
        <strong>Output:</strong> [2,3,1]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 100]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  286: (
    <div class="markdown-body div-width">
      <p>
        You are given a <i>m x n</i> 2D grid initialized with these three
        possible values.
      </p>

      <ul>
        <li>
          <code>-1</code> - A wall or an obstacle.
        </li>
        <li>
          <code>0</code> - A gate.
        </li>
        <li>
          <code>INF</code> - Infinity means an empty room. We use the value{" "}
          <code>
            2<sup>31</sup> - 1 = 2147483647
          </code>{" "}
          to represent <code>INF</code> as you may assume that the distance to a
          gate is less than <code>2147483647</code>.
        </li>
      </ul>

      <p>
        Fill each empty room with the distance to its <i>nearest</i> gate. If it
        is impossible to reach a gate, it should be filled with <code>INF</code>
        .
      </p>

      <p>
        <strong>Example:&nbsp;</strong>
      </p>

      <p>Given the 2D grid:</p>

      <pre>
        {`INF  -1  0  INF
    INF INF INF  -1
    INF  -1 INF  -1
      0  -1 INF INF`}
      </pre>

      <p>After running your function, the 2D grid should be:</p>

      <pre>
        {`  3  -1   0   1
      2   2   1  -1
      1  -1   2  -1
      0  -1   3   4`}
      </pre>
    </div>
  ),
  934: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>n x n</code> binary matrix <code>grid</code>{" "}
        where <code>1</code> represents land and <code>0</code> represents
        water.
      </p>

      <p>
        An <strong>island</strong> is a 4-directionally connected group of{" "}
        <code>1</code>'s not connected to any other <code>1</code>'s. There are{" "}
        <strong>exactly two islands</strong> in <code>grid</code>.
      </p>

      <p>
        You may change <code>0</code>'s to <code>1</code>'s to connect the two
        islands to form <strong>one island</strong>.
      </p>

      <p>
        Return <em>the smallest number of </em>
        <code>0</code>
        <em>'s you must flip to connect the two islands</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[0,1],[1,0]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[0,1,0],[0,0,0],[0,0,1]] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid =
        [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == grid.length == grid[i].length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
        <li>
          There are exactly two islands in <code>grid</code>.
        </li>
      </ul>
    </div>
  ),
  1129: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code>, the number of nodes in a
        directed graph where the nodes are labeled from <code>0</code> to{" "}
        <code>n - 1</code>. Each edge is red or blue in this graph, and there
        could be self-edges and parallel edges.
      </p>

      <p>
        You are given two arrays <code>redEdges</code> and{" "}
        <code>blueEdges</code> where:
      </p>

      <ul>
        <li>
          <code>
            redEdges[i] = [a<sub>i</sub>, b<sub>i</sub>]
          </code>{" "}
          indicates that there is a directed red edge from node{" "}
          <code>
            a<sub>i</sub>
          </code>{" "}
          to node{" "}
          <code>
            b<sub>i</sub>
          </code>{" "}
          in the graph, and
        </li>
        <li>
          <code>
            blueEdges[j] = [u<sub>j</sub>, v<sub>j</sub>]
          </code>{" "}
          indicates that there is a directed blue edge from node{" "}
          <code>
            u<sub>j</sub>
          </code>{" "}
          to node{" "}
          <code>
            v<sub>j</sub>
          </code>{" "}
          in the graph.
        </li>
      </ul>

      <p>
        Return an array <code>answer</code> of length <code>n</code>, where each{" "}
        <code>answer[x]</code> is the length of the shortest path from node{" "}
        <code>0</code> to node <code>x</code> such that the edge colors
        alternate along the path, or <code>-1</code> if such a path does not
        exist.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, redEdges = [[0,1],[1,2]], blueEdges = []{" "}
        <br />
        <strong>Output:</strong> [0,1,-1]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]{" "}
        <br />
        <strong>Output:</strong> [0,1,-1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= redEdges.length,&nbsp;blueEdges.length &lt;= 400</code>
        </li>
        <li>
          <code>redEdges[i].length == blueEdges[j].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub>, u<sub>j</sub>, v<sub>j</sub>{" "}
            &lt; n
          </code>
        </li>
      </ul>
    </div>
  ),
  1236: (
    <div class="markdown-body div-width">
      <p>
        Given a url <code>startUrl</code> and an interface{" "}
        <code>HtmlParser</code>, implement a web crawler to crawl all links that
        are under the&nbsp;<strong>same hostname</strong> as&nbsp;
        <code>startUrl</code>.&nbsp;
      </p>

      <p>Returns all urls obtained by your web crawler in any order. </p>

      <p>Your crawler should:</p>

      <ul>
        <li>
          Start from the page: <code>startUrl</code>
        </li>
        <li>
          Call <code>HtmlParser.getUrls(url)</code> to get all urls from a
          webpage of given url.
        </li>
        <li>Do not crawl the same link twice.</li>
        <li>
          Only the links that are under the <strong>same hostname</strong> as
          startUrl&nbsp;should be explored by the crawler
        </li>
      </ul>

      <p>
        <img alt="" src="img/1236_1.png" />
      </p>

      <p>
        As shown in the example url above, the hostname is{" "}
        <code>example.org</code>. For simplicity sake, you may assume
        all&nbsp;urls use <strong>http protocol</strong> without any&nbsp;
        <strong>port</strong> specified.
      </p>

      <p>The function interface is defined like this:&nbsp;</p>

      <p>
        <code>{`interface HtmlParser {
            public:
            &nbsp; // Returns a list of urls contained in <em>url</em> .
            &nbsp; public List&lt;String&gt; getUrls(String url);
            }`}</code>
      </p>

      <p>
        Below there are two examples explaining the functionality of the
        problem, for custom testing purposes you'll have 3 variables&nbsp;
        <code data-stringify-type="code">urls</code>,&nbsp;
        <code data-stringify-type="code">edges</code>&nbsp;and&nbsp;
        <code data-stringify-type="code">startUrl</code>. Notice that you will
        only have access to&nbsp;
        <code data-stringify-type="code">startUrl</code>, while&nbsp;
        <code data-stringify-type="code">urls</code>&nbsp;and&nbsp;
        <code data-stringify-type="code">edges</code>&nbsp;are secret to you on
        the rest of the testcases.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <img alt="" src="https://leetcode.ca/all/img/1236_1.png" />
      </p>

      <pre>
        <strong>Input:</strong>urls = [ <br />
        &nbsp; "http://news.yahoo.com", <br />
        &nbsp; "http://news.yahoo.com/news", <br />
        &nbsp; "http://news.yahoo.com/news/topics/", <br />
        &nbsp; "http://news.google.com", <br />
        &nbsp; "http://news.yahoo.com/us" <br />
        ] <br />
        edges = [[2,0],[2,1],[3,2],[3,1],[0,4]] <br />
        startUrl = "http://news.yahoo.com/news/topics/" <br />
        <strong>Output:</strong> [ <br />
        &nbsp; "http://news.yahoo.com", <br />
        &nbsp; "http://news.yahoo.com/news", <br />
        &nbsp; "http://news.yahoo.com/news/topics/", <br />
        &nbsp; "http://news.yahoo.com/us" <br />]
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/10/23/sample_3_1497.png"
            style={{ width: 540, height: 270 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong>
        urls = [ <br />
        &nbsp; "http://news.yahoo.com", <br />
        &nbsp; "http://news.yahoo.com/news", <br />
        &nbsp; "http://news.yahoo.com/news/topics/", <br />
        &nbsp; "http://news.google.com" <br />
        ] <br />
        edges = [[0,2],[2,1],[3,2],[3,1],[3,0]] <br />
        startUrl = "http://news.google.com" <br />
        <strong>Output:</strong> ["http://news.google.com"] <br />
        <strong>Explanation: </strong>The startUrl links to all other pages that
        do not share the same hostname.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= urls.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= urls[i].length &lt;= 300</code>
        </li>
        <li>
          <code>startUrl</code>&nbsp;is one of the <code>urls</code>.
        </li>
        <li>
          Hostname label must be from 1 to 63 characters long, including the
          dots, may contain only the ASCII letters from 'a' to&nbsp;'z',
          digits&nbsp; from '0' to '9' and the&nbsp;hyphen-minus&nbsp;character
          ('-').
        </li>
        <li>
          The hostname may not start or end with&nbsp;the hyphen-minus character
          ('-').&nbsp;
        </li>
        <li>
          See:&nbsp;&nbsp;
          <a href="https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames">
            https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames
          </a>
        </li>
        <li>You may assume there're&nbsp;no duplicates in url library.</li>
      </ul>
    </div>
  ),
  1609: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A binary tree is named <strong>Even-Odd</strong> if it meets the
        following conditions:
      </p>

      <ul>
        <li>
          The root of the binary tree is at level index <code>0</code>, its
          children are at level index <code>1</code>, their children are at
          level index <code>2</code>, etc.
        </li>
        <li>
          For every <strong>even-indexed</strong> level, all nodes at the level
          have <strong>odd</strong> integer values in{" "}
          <strong>strictly increasing</strong> order (from left to right).
        </li>
        <li>
          For every <b>odd-indexed</b> level, all nodes at the level have{" "}
          <b>even</b> integer values in <strong>strictly decreasing</strong>{" "}
          order (from left to right).
        </li>
      </ul>

      <p>
        Given the <code>root</code> of a binary tree, <em>return </em>
        <code>true</code>
        <em>
          {" "}
          if the binary tree is <strong>Even-Odd</strong>, otherwise return{" "}
        </em>
        <code>false</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/15/sample_1_1966.png"
        style={{ width: 362, height: 229 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,10,4,3,null,7,9,12,8,6,null,null,2]{" "}
        <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The node values on each level are: <br />
        Level 0: [1] <br />
        Level 1: [10,4] <br />
        Level 2: [3,7,9] <br />
        Level 3: [12,8,6,2] <br />
        Since levels 0 and 2 are all odd and increasing and levels 1 and 3 are
        all even and decreasing, the tree is Even-Odd.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/15/sample_2_1966.png"
        style={{ width: 363, height: 167 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,4,2,3,3,7] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The node values on each level are: <br />
        Level 0: [5] <br />
        Level 1: [4,2] <br />
        Level 2: [3,3,7] <br />
        Node values in level 2 must be in strictly increasing order, so the tree
        is not Even-Odd.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/22/sample_1_333_1966.png"
        style={{ width: 363, height: 167 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,9,1,3,5,7] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Node values in the level 1 should be even
        integers.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1631: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are a hiker preparing for an upcoming hike. You are given{" "}
        <code>heights</code>, a 2D array of size <code>rows x columns</code>,
        where <code>heights[row][col]</code> represents the height of cell{" "}
        <code>(row, col)</code>. You are situated in the top-left cell,{" "}
        <code>(0, 0)</code>, and you hope to travel to the bottom-right cell,{" "}
        <code>(rows-1, columns-1)</code> (i.e.,&nbsp;<strong>0-indexed</strong>
        ). You can move <strong>up</strong>, <strong>down</strong>,{" "}
        <strong>left</strong>, or <strong>right</strong>, and you wish to find a
        route that requires the minimum <strong>effort</strong>.
      </p>

      <p>
        A route's <strong>effort</strong> is the{" "}
        <strong>maximum absolute difference</strong>
        <strong> </strong>in heights between two consecutive cells of the route.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum <strong>effort</strong> required to travel from the
          top-left cell to the bottom-right cell.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/10/04/ex1.png"
          style={{ width: 300, height: 300 }}
        />{" "}
      </p>

      <pre>
        <strong>Input:</strong> heights = [[1,2,2],[3,8,2],[5,3,5]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The route of [1,3,5,3,5] has a maximum
        absolute difference of 2 in consecutive cells. <br />
        This is better than the route of [1,2,2,2,5], where the maximum absolute
        difference is 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/10/04/ex2.png"
          style={{ width: 300, height: 300 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> heights = [[1,2,3],[3,8,4],[5,3,5]] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The route of [1,2,3,4,5] has a maximum
        absolute difference of 1 in consecutive cells, which is better than
        route [1,3,5,3,5].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/04/ex3.png"
        style={{ width: 300, height: 300 }}
      />
      <pre>
        <strong>Input:</strong> heights =
        [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> This route does not require any effort.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>rows == heights.length</code>
        </li>
        <li>
          <code>columns == heights[i].length</code>
        </li>
        <li>
          <code>1 &lt;= rows, columns &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= heights[i][j] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2492: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a positive integer <code>n</code> representing{" "}
        <code>n</code> cities numbered from <code>1</code> to <code>n</code>.
        You are also given a <strong>2D</strong> array <code>roads</code> where{" "}
        <code>
          roads[i] = [a<sub>i</sub>, b<sub>i</sub>, distance<sub>i</sub>]
        </code>{" "}
        indicates that there is a <strong>bidirectional </strong>road between
        cities{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        with a distance equal to{" "}
        <code>
          distance<sub>i</sub>
        </code>
        . The cities graph is not necessarily connected.
      </p>

      <p>
        The <strong>score</strong> of a path between two cities is defined as
        the <strong>minimum </strong>distance of a road in this path.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum </strong>possible score of a path between cities{" "}
        </em>
        <code>1</code>
        <em> and </em>
        <code>n</code>.
      </p>

      <p>
        <strong>Note</strong>:
      </p>

      <ul>
        <li>A path is a sequence of roads between two cities.</li>
        <li>
          It is allowed for a path to contain the same road{" "}
          <strong>multiple</strong> times, and you can visit cities{" "}
          <code>1</code> and <code>n</code> multiple times along the path.
        </li>
        <li>
          The test cases are generated such that there is{" "}
          <strong>at least</strong> one path between <code>1</code> and{" "}
          <code>n</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/12/graph11.png"
        style={{ width: 190, height: 231 }}
      />
      <pre>
        <strong>Input:</strong> n = 4, roads = [[1,2,9],[2,3,6],[2,4,5],[1,4,7]]{" "}
        <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The path from city 1 to 4 with the minimum
        score is: 1 -&gt; 2 -&gt; 4. The score of this path is min(9,5) = 5. It
        can be shown that no other path has less score.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/12/graph22.png"
        style={{ width: 190, height: 231 }}
      />
      <pre>
        <strong>Input:</strong> n = 4, roads = [[1,2,2],[1,3,4],[3,4,7]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The path from city 1 to 4 with the minimum
        score is: 1 -&gt; 2 -&gt; 1 -&gt; 3 -&gt; 4. The score of this path is
        min(2,2,4,7) = 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= roads.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>roads[i].length == 3</code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= distance<sub>i</sub> &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>There are no repeated edges.</li>
        <li>
          There is at least one path between <code>1</code> and <code>n</code>.
        </li>
      </ul>
    </div>
  ),
  3157: (
    <>
      <p>
        Given the root of a binary tree <code>root</code> where each node has a
        value, return the level of the tree that has the{" "}
        <strong>minimum</strong> sum of values among all the levels (in case of
        a tie, return the <strong>lowest</strong> level).
      </p>

      <p>
        <strong>Note</strong> that the root of the tree is at level 1 and the
        level of any other node is its distance from the root + 1.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [50,6,2,30,80,7]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/3100-3199/3157.Find%20the%20Level%20of%20Tree%20with%20Minimum%20Sum/images/image_2024-05-17_16-15-46.png"
            style={{
              padding: 10,
              background: "rgb(255, 255, 255)",
              borderRadius: "0.5rem",
              width: 265,
              height: 129,
            }}
          />
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [36,17,10,null,null,24]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/3100-3199/3157.Find%20the%20Level%20of%20Tree%20with%20Minimum%20Sum/images/image_2024-05-17_16-14-18.png"
            style={{
              padding: 10,
              background: "rgb(255, 255, 255)",
              borderRadius: "0.5rem",
              width: 170,
              height: 135,
            }}
          />
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [5,null,5,null,5]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/3100-3199/3157.Find%20the%20Level%20of%20Tree%20with%20Minimum%20Sum/images/image_2024-05-19_19-07-20.png"
          />
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </>
  ),
  199: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, imagine yourself standing
        on the <strong>right side</strong> of it, return{" "}
        <em>the values of the nodes you can see ordered from top to bottom</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [1,2,3,null,5,null,4]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1,3,4]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/11/24/tmpd5jn43fs-1.png"
            style={{ width: 400, height: 207 }}
          />
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [1,2,3,4,null,null,null,5]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1,3,4,5]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/11/24/tmpkpe40xeh-1.png"
            style={{ width: 400, height: 214 }}
          />
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [1,null,3]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1,3]</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 4:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">root = []</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[]</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 100]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  294: (
    <div class="markdown-body div-width">
      <p>
        You are playing the following Flip Game with your friend: Given a string
        that contains only these two characters: <code>+</code> and{" "}
        <code>-</code>, you and your friend take turns to flip two{" "}
        <b>consecutive</b> <code>"++"</code> into <code>"--"</code>. The game
        ends when a person can no longer make a move and therefore the other
        person will be the winner.
      </p>

      <p>
        Write a function to determine if the starting player can guarantee a
        win.
      </p>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <code>s = "++++"</code> <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation: </strong>The starting player can guarantee a win by
        flipping the middle <code>"++"</code> to become <code>"+--+"</code>.
      </pre>
    </div>
  ),
  375: (
    <div class="elfjS" data-track-load="description_content">
      <p>We are playing the Guessing Game. The game will work as follows:</p>

      <ul>
        <li>
          I pick a number between&nbsp;<code>1</code>&nbsp;and&nbsp;
          <code>n</code>.
        </li>
        <li>You guess a number.</li>
        <li>
          If you guess the right number, <strong>you win the game</strong>.
        </li>
        <li>
          If you guess the wrong number, then I will tell you whether the number
          I picked is <strong>higher or lower</strong>, and you will continue
          guessing.
        </li>
        <li>
          Every time you guess a wrong number&nbsp;<code>x</code>, you will
          pay&nbsp;<code>x</code>&nbsp;dollars. If you run out of money,{" "}
          <strong>you lose the game</strong>.
        </li>
      </ul>

      <p>
        Given a particular&nbsp;<code>n</code>, return&nbsp;
        <em>
          the minimum amount of money you need to&nbsp;
          <strong>guarantee a win regardless of what number I pick</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/10/graph.png"
        style={{ width: 505, height: 388 }}
      />
      <pre>
        <strong>Input:</strong> n = 10 <br />
        <strong>Output:</strong> 16 <br />
        <strong>Explanation:</strong> The winning strategy is as follows: <br />
        - The range is [1,10]. Guess 7. <br />
        &nbsp; - If this is my number, your total is $0. Otherwise, you pay $7.{" "}
        <br />
        &nbsp; - If my number is higher, the range is [8,10]. Guess 9. <br />
        &nbsp; - If this is my number, your total is $7. Otherwise, you pay $9.{" "}
        <br />
        &nbsp; - If my number is higher, it must be 10. Guess 10. Your total is
        $7 + $9 = $16. <br />
        &nbsp; - If my number is lower, it must be 8. Guess 8. Your total is $7
        + $9 = $16.
        <br />
        &nbsp; - If my number is lower, the range is [1,6]. Guess 3.
        <br />
        &nbsp; - If this is my number, your total is $7. Otherwise, you pay $3.
        <br />
        &nbsp; - If my number is higher, the range is [4,6]. Guess 5.
        <br />
        &nbsp; - If this is my number, your total is $7 + $3 = $10. Otherwise,
        you pay $5.
        <br />
        &nbsp; - If my number is higher, it must be 6. Guess 6. Your total is $7
        + $3 + $5 = $15.
        <br />
        &nbsp; - If my number is lower, it must be 4. Guess 4. Your total is $7
        + $3 + $5 = $15.
        <br />
        &nbsp; - If my number is lower, the range is [1,2]. Guess 1.
        <br />
        &nbsp; - If this is my number, your total is $7 + $3 = $10. Otherwise,
        you pay $1.
        <br />
        &nbsp; - If my number is higher, it must be 2. Guess 2. Your total is $7
        + $3 + $1 = $11.
        <br />
        The worst case in all these scenarios is that you pay $16. Hence, you
        only need $16 to guarantee a win.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1<br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong>&nbsp;There is only one possible number, so
        you can guess 1 and not have to pay anything.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2<br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong>&nbsp;There are two possible numbers, 1 and
        2.
        <br />
        - Guess 1.
        <br />
        &nbsp; - If this is my number, your total is $0. Otherwise, you pay $1.
        <br />
        &nbsp; - If my number is higher, it must be 2. Guess 2. Your total is
        $1.
        <br />
        The worst case is that you pay $1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 200</code>
        </li>
      </ul>
    </div>
  ),
  486: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>. Two players are
        playing a game with this array: player 1 and player 2.
      </p>

      <p>
        Player 1 and player 2 take turns, with player 1 starting first. Both
        players start the game with a score of <code>0</code>. At each turn, the
        player takes one of the numbers from either end of the array (i.e.,{" "}
        <code>nums[0]</code> or <code>nums[nums.length - 1]</code>) which
        reduces the size of the array by <code>1</code>. The player adds the
        chosen number to their score. The game ends when there are no more
        elements in the array.
      </p>

      <p>
        Return <code>true</code> if Player 1 can win the game. If the scores of
        both players are equal, then player 1 is still the winner, and you
        should also return <code>true</code>. You may assume that both players
        are playing optimally.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,5,2] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Initially, player 1 can choose between 1
        and 2. <br />
        If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If
        player 2 chooses 5, then player 1 will be left with 1 (or 2). <br />
        So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. <br />
        Hence, player 1 will never be the winner and you need to return false.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,5,233,7] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Player 1 first chooses 1. Then player 2
        has to choose between 5 and 7. No matter which number player 2 choose,
        player 1 can choose 233. <br />
        Finally, player 1 has more score (234) than player 2 (12), so you need
        to return True representing player1 can win.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 20</code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>7</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  877: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice and Bob play a game with piles of stones. There are an{" "}
        <strong>even</strong> number of piles arranged in a row, and each pile
        has a <strong>positive</strong> integer number of stones{" "}
        <code>piles[i]</code>.
      </p>

      <p>
        The objective of the game is to end with the most stones. The{" "}
        <strong>total</strong> number of stones across all the piles is{" "}
        <strong>odd</strong>, so there are no ties.
      </p>

      <p>
        Alice and Bob take turns, with <strong>Alice starting first</strong>.
        Each turn, a player takes the entire pile of stones either from the{" "}
        <strong>beginning</strong> or from the <strong>end</strong> of the row.
        This continues until there are no more piles left, at which point the
        person with the <strong>most stones wins</strong>.
      </p>

      <p>
        Assuming Alice and Bob play optimally, return <code>true</code>
        <em> if Alice wins the game, or </em>
        <code>false</code>
        <em> if Bob wins</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> piles = [5,3,4,5] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> <br />
        Alice starts first, and can only take the first 5 or the last 5. <br />
        Say she takes the first 5, so that the row becomes [3, 4, 5]. <br />
        If Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with
        10 points. <br />
        If Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to
        win with 9 points. <br />
        This demonstrated that taking the first 5 was a winning move for Alice,
        so we return true.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> piles = [3,7,2,3] <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= piles.length &lt;= 500</code>
        </li>
        <li>
          <code>piles.length</code> is <strong>even</strong>.
        </li>
        <li>
          <code>1 &lt;= piles[i] &lt;= 500</code>
        </li>
        <li>
          <code>sum(piles[i])</code> is <strong>odd</strong>.
        </li>
      </ul>
    </div>
  ),
  1140: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice and Bob continue their games with piles of stones. There are a
        number of piles <strong>arranged in a row</strong>, and each pile has a
        positive integer number of stones <code>piles[i]</code>. The objective
        of the game is to end with the most stones.
      </p>

      <p>Alice and Bob take turns, with Alice starting first.</p>

      <p>
        On each player's turn, that player can take{" "}
        <strong>all the stones</strong> in the <strong>first</strong>{" "}
        <code>X</code> remaining piles, where <code>1 &lt;= X &lt;= 2M</code>.
        Then, we set <code>M = max(M, X)</code>. Initially, M = 1.
      </p>

      <p>The game continues until all the stones have been taken.</p>

      <p>
        Assuming Alice and Bob play optimally, return the maximum number of
        stones Alice can get.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">piles = [2,7,9,4,4]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">10</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <ul>
          <li>
            If Alice takes one pile at the beginning, Bob takes two piles, then
            Alice takes 2 piles again. Alice can get <code>2 + 4 + 4 = 10</code>{" "}
            stones in total.
          </li>
          <li>
            If Alice takes two piles at the beginning, then Bob can take all
            three piles left. In this case, Alice get <code>2 + 7 = 9</code>{" "}
            stones in total.
          </li>
        </ul>
        <br />
        <p>So we return 10 since it's larger.</p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">piles = [1,2,3,4,5,100]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">104</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= piles.length &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= piles[i]&nbsp;&lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1406: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice and Bob continue their games with piles of stones. There are
        several stones <strong>arranged in a row</strong>, and each stone has an
        associated value which is an integer given in the array{" "}
        <code>stoneValue</code>.
      </p>

      <p>
        Alice and Bob take turns, with Alice starting first. On each player's
        turn, that player can take <code>1</code>, <code>2</code>, or{" "}
        <code>3</code> stones from the <strong>first</strong> remaining stones
        in the row.
      </p>

      <p>
        The score of each player is the sum of the values of the stones taken.
        The score of each player is <code>0</code> initially.
      </p>

      <p>
        The objective of the game is to end with the highest score, and the
        winner is the player with the highest score and there could be a tie.
        The game continues until all the stones have been taken.
      </p>

      <p>
        Assume Alice and Bob <strong>play optimally</strong>.
      </p>

      <p>
        Return <code>"Alice"</code>
        <em> if Alice will win, </em>
        <code>"Bob"</code>
        <em> if Bob will win, or </em>
        <code>"Tie"</code>
        <em> if they will end the game with the same score</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stoneValue = [1,2,3,7] <br />
        <strong>Output:</strong> "Bob" <br />
        <strong>Explanation:</strong> Alice will always lose. Her best move will
        be to take three piles and the score become 6. Now the score of Bob is 7
        and Bob wins.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stoneValue = [1,2,3,-9] <br />
        <strong>Output:</strong> "Alice" <br />
        <strong>Explanation:</strong> Alice must choose all the three piles at
        the first move to win and leave Bob with negative score.
        <br /> If Alice chooses one pile her score will be 1 and the next move
        Bob's score becomes 5. In the next move, Alice will take the pile with
        value = -9 and lose.
        <br /> If Alice chooses two piles her score will be 3 and the next move
        Bob's score becomes 3. In the next move, Alice will take the pile with
        value = -9 and also lose.
        <br /> Remember that both play optimally so here Alice will choose the
        scenario that makes her win.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stoneValue = [1,2,3,6] <br />
        <strong>Output:</strong> "Tie" <br />
        <strong>Explanation:</strong> Alice cannot win this game. She can end
        the game in a draw if she decided to choose all the first three piles,
        otherwise she will lose.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= stoneValue.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>-1000 &lt;= stoneValue[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1510: (
    <div class="elfjS" data-track-load="description_content">
      <p>Alice and Bob take turns playing a game, with Alice starting first.</p>

      <p>
        Initially, there are <code>n</code> stones in a pile. On each player's
        turn, that player makes a <em>move</em> consisting of removing{" "}
        <strong>any</strong> non-zero <strong>square number</strong> of stones
        in the pile.
      </p>

      <p>Also, if a player cannot make a move, he/she loses the game.</p>

      <p>
        Given a positive integer <code>n</code>, return <code>true</code> if and
        only if Alice wins the game otherwise return <code>false</code>,
        assuming both players play optimally.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation: </strong>Alice can remove 1 stone winning the game
        because Bob doesn't have any moves.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation: </strong>Alice can only remove 1 stone, after that
        Bob removes the last one winning the game (2 -&gt; 1 -&gt; 0).
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> n is already a perfect square, Alice can
        win with one move, removing 4 stones (4 -&gt; 0).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1686: (
    <div class="elfjS" data-track-load="description_content">
      <p>Alice and Bob take turns playing a game, with Alice starting first.</p>

      <p>
        There are <code>n</code> stones in a pile. On each player's turn, they
        can <strong>remove</strong> a stone from the pile and receive points
        based on the stone's value. Alice and Bob may{" "}
        <strong>value the stones differently</strong>.
      </p>

      <p>
        You are given two integer arrays of length <code>n</code>,{" "}
        <code>aliceValues</code> and <code>bobValues</code>. Each{" "}
        <code>aliceValues[i]</code> and <code>bobValues[i]</code> represents how
        Alice and Bob, respectively, value the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        stone.
      </p>

      <p>
        The winner is the person with the most points after all the stones are
        chosen. If both players have the same amount of points, the game results
        in a draw. Both players will play <strong>optimally</strong>.&nbsp;Both
        players know the other's values.
      </p>

      <p>Determine the result of the game, and:</p>

      <ul>
        <li>
          If Alice wins, return <code>1</code>.
        </li>
        <li>
          If Bob wins, return <code>-1</code>.
        </li>
        <li>
          If the game results in a draw, return <code>0</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> aliceValues = [1,3], bobValues = [2,1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> <br />
        If Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.{" "}
        <br />
        Bob can only choose stone 0, and will only receive 2 points. <br />
        Alice wins.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> aliceValues = [1,2], bobValues = [3,1] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> <br />
        If Alice takes stone 0, and Bob takes stone 1, they will both have 1
        point. Draw.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> aliceValues = [2,4,3], bobValues = [1,6,7]{" "}
        <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> <br />
        Regardless of how Alice plays, Bob will be able to have more points than
        Alice. <br />
        For example, if Alice takes stone 1, Bob can take stone 2, and Alice
        takes stone 0, Alice will have 6 points to Bob's 7. <br />
        Bob wins.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == aliceValues.length == bobValues.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= aliceValues[i], bobValues[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1690: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice and Bob take turns playing a game, with{" "}
        <strong>Alice starting first</strong>.
      </p>

      <p>
        There are <code>n</code> stones arranged in a row. On each player's
        turn, they can <strong>remove</strong> either the leftmost stone or the
        rightmost stone from the row and receive points equal to the{" "}
        <strong>sum</strong> of the remaining stones' values in the row. The
        winner is the one with the higher score when there are no stones left to
        remove.
      </p>

      <p>
        Bob found that he will always lose this game (poor Bob, he always
        loses), so he decided to{" "}
        <strong>minimize the score's difference</strong>. Alice's goal is to{" "}
        <strong>maximize the difference</strong> in the score.
      </p>

      <p>
        Given an array of integers <code>stones</code> where{" "}
        <code>stones[i]</code> represents the value of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        stone <strong>from the left</strong>, return{" "}
        <em>
          the <strong>difference</strong> in Alice and Bob's score if they both
          play <strong>optimally</strong>.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [5,3,1,4,2] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> <br />
        - Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob =
        0, stones = [5,3,1,4]. <br />
        - Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8,
        stones = [3,1,4]. <br />
        - Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones
        = [1,4]. <br />- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12,
        stones = [4]. <br />- Alice removes 4 and gets 0 points. Alice = 18, Bob
        = 12, stones = []. <br />
        The score difference is 18 - 12 = 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [7,90,5,1,100,10,10,2] <br />
        <strong>Output:</strong> 122
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == stones.length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= stones[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1872: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice and Bob take turns playing a game, with{" "}
        <strong>Alice starting first</strong>.
      </p>

      <p>
        There are <code>n</code> stones arranged in a row. On each player's
        turn, while the number of stones is <strong>more than one</strong>, they
        will do the following:
      </p>

      <ul>
        <li>
          Choose an integer <code>x &gt; 1</code>, and <strong>remove</strong>{" "}
          the leftmost <code>x</code> stones from the row.
        </li>
        <li>
          Add the <strong>sum</strong> of the <strong>removed</strong> stones'
          values to the player's score.
        </li>
        <li>
          Place a <strong>new stone</strong>, whose value is equal to that sum,
          on the left side of the row.
        </li>
      </ul>

      <p>
        The game stops when <strong>only</strong> <strong>one</strong> stone is
        left in the row.
      </p>

      <p>
        The <strong>score difference</strong> between Alice and Bob is{" "}
        <code>(Alice's score - Bob's score)</code>. Alice's goal is to{" "}
        <strong>maximize</strong> the score difference, and Bob's goal is the{" "}
        <strong>minimize</strong> the score difference.
      </p>

      <p>
        Given an integer array <code>stones</code> of length <code>n</code>{" "}
        where <code>stones[i]</code> represents the value of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        stone <strong>from the left</strong>, return{" "}
        <em>
          the <strong>score difference</strong> between Alice and Bob if they
          both play <strong>optimally</strong>.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [-1,2,-3,4,-5]
        <br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation:</strong>
        <br />
        - Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her
        score, and places a stone of
        <br />
        value 2 on the left. stones = [2,-5].
        <br />
        - Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and
        places a stone of value -3 on
        <br />
        the left. stones = [-3].
        <br />
        The difference between their scores is 2 - (-3) = 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [7,-6,5,10,5,-2,-6]
        <br />
        <strong>Output:</strong> 13
        <br />
        <strong>Explanation:</strong> <br />
        - Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) =
        13 to her score, and places a<br />
        stone of value 13 on the left. stones = [13].
        <br />
        The difference between their scores is 13 - 0 = 13.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [-10,-12] <br />
        <strong>Output:</strong> -22 <br />
        <strong>Explanation:</strong> <br />
        - Alice can only make one move, which is to remove both stones. She adds
        (-10) + (-12) = -22 to her <br />
        score and places a stone of value -22 on the left. stones = [-22].
        <br />
        The difference between their scores is (-22) - 0 = -22.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == stones.length</code>
        </li>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= stones[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2029: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice and Bob continue their games with stones. There is a row of n
        stones, and each stone has an associated value. You are given an integer
        array <code>stones</code>, where <code>stones[i]</code> is the{" "}
        <strong>value</strong> of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        stone.
      </p>

      <p>
        Alice and Bob take turns, with <strong>Alice</strong> starting first. On
        each turn, the player may remove any stone from <code>stones</code>. The
        player who removes a stone <strong>loses</strong> if the{" "}
        <strong>sum</strong> of the values of{" "}
        <strong>all removed stones</strong> is divisible by <code>3</code>. Bob
        will win automatically if there are no remaining stones (even if it is
        Alice's turn).
      </p>

      <p>
        Assuming both players play <strong>optimally</strong>, return{" "}
        <code>true</code> <em>if Alice wins and</em> <code>false</code>{" "}
        <em>if Bob wins</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [2,1] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong>&nbsp;The game will be played as follows:{" "}
        <br />
        - Turn 1: Alice can remove either stone. <br />
        - Turn 2: Bob removes the remaining stone. <br />
        The sum of the removed stones is 1 + 2 = 3 and is divisible by 3.
        Therefore, Bob loses and Alice wins the game.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [2] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong>&nbsp;Alice will remove the only stone, and
        the sum of the values on the removed stones is 2.
        <br /> Since all the stones are removed and the sum of values is not
        divisible by 3, Bob wins the game.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [5,1,2,4,3] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Bob will always win. One possible way for
        Bob to win is shown below: <br />
        - Turn 1: Alice can remove the second stone with value 1. Sum of removed
        stones = 1. <br />
        - Turn 2: Bob removes the fifth stone with value 3. Sum of removed
        stones = 1 + 3 = 4. <br />
        - Turn 3: Alices removes the fourth stone with value 4. Sum of removed
        stones = 1 + 3 + 4 = 8. <br />
        - Turn 4: Bob removes the third stone with value 2. Sum of removed
        stones = 1 + 3 + 4 + 2 = 10. <br />
        - Turn 5: Alice removes the first stone with value 5. Sum of removed
        stones = 1 + 3 + 4 + 2 + 5 = 15. <br />
        Alice loses the game because the sum of the removed stones (15) is
        divisible by 3. Bob wins the game.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= stones.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= stones[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2038: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> pieces arranged in a line, and each piece is
        colored either by <code>'A'</code> or by <code>'B'</code>. You are given
        a string <code>colors</code> of length <code>n</code> where{" "}
        <code>colors[i]</code> is the color of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        piece.
      </p>

      <p>
        Alice and Bob are playing a game where they take{" "}
        <strong>alternating turns</strong> removing pieces from the line. In
        this game, Alice moves<strong> first</strong>.
      </p>

      <ul>
        <li>
          Alice is only allowed to remove a piece colored <code>'A'</code> if{" "}
          <strong>both its neighbors</strong> are also colored <code>'A'</code>.
          She is <strong>not allowed</strong> to remove pieces that are colored{" "}
          <code>'B'</code>.
        </li>
        <li>
          Bob is only allowed to remove a piece colored <code>'B'</code> if{" "}
          <strong>both its neighbors</strong> are also colored <code>'B'</code>.
          He is <strong>not allowed</strong> to remove pieces that are colored{" "}
          <code>'A'</code>.
        </li>
        <li>
          Alice and Bob <strong>cannot</strong> remove pieces from the edge of
          the line.
        </li>
        <li>
          If a player cannot make a move on their turn, that player{" "}
          <strong>loses</strong> and the other player <strong>wins</strong>.
        </li>
      </ul>

      <p>
        Assuming Alice and Bob play optimally, return <code>true</code>
        <em> if Alice wins, or return </em>
        <code>false</code>
        <em> if Bob wins</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> colors = "AAABABB" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> <br />A<u>A</u>ABABB -&gt; AABABB
        <br />
        Alice moves first.
        <br />
        She removes the second 'A' from the left since that is the only 'A'
        whose neighbors are both 'A'.
        <br />
        Now it's Bob's turn.
        <br />
        Bob cannot make a move on his turn since there are no 'B's whose
        neighbors are both 'B'.
        <br />
        Thus, Alice wins, so return true.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> colors = "AA"
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong>
        <br />
        Alice has her turn first.
        <br />
        There are only two 'A's and both are on the edge of the line, so she
        cannot move on her turn.
        <br />
        Thus, Bob wins, so return false.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> colors = "ABBBBBBBAAA"
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong>
        <br />
        ABBBBBBBA<u>A</u>A -&gt; ABBBBBBBAA
        <br />
        Alice moves first.
        <br />
        Her only option is to remove the second to last 'A' from the right.
        <br />
        ABBBB<u>B</u>BBAA -&gt; ABBBBBBAA Next is Bob's turn.
        <br />
        He has many options for which 'B' piece to remove. He can pick any.
        <br />
        <br />
        On Alice's second turn, she has no more pieces that she can remove.
        <br />
        Thus, Bob wins, so return false.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;=&nbsp;colors.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>colors</code>&nbsp;consists of only the letters&nbsp;
          <code>'A'</code>&nbsp;and&nbsp;<code>'B'</code>
        </li>
      </ul>
    </div>
  ),
  299: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are playing the{" "}
        <strong>
          <a
            href="https://en.wikipedia.org/wiki/Bulls_and_Cows"
            target="_blank"
            rel="noreferrer"
          >
            Bulls and Cows
          </a>
        </strong>{" "}
        game with your friend.
      </p>

      <p>
        You write down a secret number and ask your friend to guess what the
        number is. When your friend makes a guess, you provide a hint with the
        following info:
      </p>

      <ul>
        <li>
          The number of "bulls", which are digits in the guess that are in the
          correct position.
        </li>
        <li>
          The number of "cows", which are digits in the guess that are in your
          secret number but are located in the wrong position. Specifically, the
          non-bull digits in the guess that could be rearranged such that they
          become bulls.
        </li>
      </ul>

      <p>
        Given the secret number <code>secret</code> and your friend's guess{" "}
        <code>guess</code>, return <em>the hint for your friend's guess</em>.
      </p>

      <p>
        The hint should be formatted as <code>"xAyB"</code>, where{" "}
        <code>x</code> is the number of bulls and <code>y</code> is the number
        of cows. Note that both <code>secret</code> and <code>guess</code> may
        contain duplicate digits.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> secret = "1807", guess = "7810" <br />
        <strong>Output:</strong> "1A3B" <br />
        <strong>Explanation:</strong> Bulls are connected with a '|' and cows
        are underlined:
        <br />
        "1807"
        <br />
        |<br />"<u>7</u>8<u>10</u>"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> secret = "1123", guess = "0111"
        <br />
        <strong>Output:</strong> "1A1B"
        <br />
        <strong>Explanation:</strong> Bulls are connected with a '|' and cows
        are underlined:
        <br />
        "1123" "1123"
        <br />
        | or |<br />
        "01<u>1</u>1" "011<u>1</u>"<br />
        Note that only one of the two unmatched 1s is counted as a cow since the
        non-bull digits can only be rearranged to allow one 1 to be a bull.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= secret.length, guess.length &lt;= 1000</code>
        </li>
        <li>
          <code>secret.length == guess.length</code>
        </li>
        <li>
          <code>secret</code> and <code>guess</code> consist of digits only.
        </li>
      </ul>
    </div>
  ),
  383: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>ransomNote</code> and <code>magazine</code>,
        return <code>true</code>
        <em> if </em>
        <code>ransomNote</code>
        <em> can be constructed by using the letters from </em>
        <code>magazine</code>
        <em> and </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>
        Each letter in <code>magazine</code> can only be used once in{" "}
        <code>ransomNote</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> ransomNote = "a", magazine = "b" <br />
        <strong>Output:</strong> false
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> ransomNote = "aa", magazine = "ab" <br />
        <strong>Output:</strong> false
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> ransomNote = "aa", magazine = "aab" <br />
        <strong>Output:</strong> true
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= ransomNote.length, magazine.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>ransomNote</code> and <code>magazine</code> consist of lowercase
          English letters.
        </li>
      </ul>
    </div>
  ),
  869: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code>. We reorder the digits in any
        order (including the original order) such that the leading digit is not
        zero.
      </p>

      <p>
        Return <code>true</code>{" "}
        <em>
          if and only if we can do this so that the resulting number is a power
          of two
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 10 <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1213: (
    <div class="markdown-body div-width">
      <p>
        Given three integer arrays <code>arr1</code>, <code>arr2</code> and
        <code>arr3</code>&nbsp;<strong>sorted</strong> in{" "}
        <strong>strictly increasing</strong>
        order, return a sorted array of <strong>only</strong>
        &nbsp;the&nbsp;integers that appeared in <strong>all</strong> three
        arrays.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 =
        [1,3,4,5,8] <br />
        <strong>Output:</strong> [1,5] <br />
        <strong>Explanation: </strong>Only 1 and 5 appeared in the three arrays.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= arr1.length, arr2.length, arr3.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= arr1[i], arr2[i], arr3[i] &lt;= 2000</code>
        </li>
      </ul>
    </div>
  ),
  1512: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code>, return{" "}
        <em>
          the number of <strong>good pairs</strong>
        </em>
        .
      </p>

      <p>
        A pair <code>(i, j)</code> is called <em>good</em> if{" "}
        <code>nums[i] == nums[j]</code> and <code>i</code> &lt; <code>j</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,1,1,3] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> There are 4 good pairs (0,3), (0,4),
        (3,4), (2,5) 0-indexed.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> Each pair in the array are <em>good</em>.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1726: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> of <strong>distinct</strong> positive
        integers, return <em>the number of tuples </em>
        <code>(a, b, c, d)</code>
        <em> such that </em>
        <code>a * b = c * d</code>
        <em> where </em>
        <code>a</code>
        <em>, </em>
        <code>b</code>
        <em>, </em>
        <code>c</code>
        <em>, and </em>
        <code>d</code>
        <em> are elements of </em>
        <code>nums</code>
        <em>, and </em>
        <code>a != b != c != d</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,4,6] <br />
        <strong>Output:</strong> 8 <br />
        <strong>Explanation:</strong> There are 8 valid tuples: <br />
        (2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3) <br />
        (3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,4,5,10] <br />
        <strong>Output:</strong> 16 <br />
        <strong>Explanation:</strong> There are 16 valid tuples: <br />
        (1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2) <br />
        (2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1) <br />
        (2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4) <br />
        (4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          All elements in <code>nums</code> are <strong>distinct</strong>.
        </li>
      </ul>
    </div>
  ),
  1748: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>. The unique elements of
        an array are the elements that appear <strong>exactly once</strong> in
        the array.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>sum</strong> of all the unique elements of{" "}
        </em>
        <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,2] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The unique elements are [1,3], and the sum
        is 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1,1] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There are no unique elements, and the sum
        is 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5] <br />
        <strong>Output:</strong> 15 <br />
        <strong>Explanation:</strong> The unique elements are [1,2,3,4,5], and
        the sum is 15.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1790: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two strings <code>s1</code> and <code>s2</code> of equal
        length. A <strong>string swap</strong> is an operation where you choose
        two indices in a string (not necessarily different) and swap the
        characters at these indices.
      </p>

      <p>
        Return <code>true</code>{" "}
        <em>
          if it is possible to make both strings equal by performing{" "}
          <strong>at most one string swap </strong>on{" "}
          <strong>exactly one</strong> of the strings.{" "}
        </em>
        Otherwise, return <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "bank", s2 = "kanb" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> For example, swap the first character with
        the last character of s2 to make "bank".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "attack", s2 = "defend" <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> It is impossible to make them equal with
        one string swap.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "kelb", s2 = "kelb" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The two strings are already equal, so no
        string swap operation is required.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s1.length, s2.length &lt;= 100</code>
        </li>
        <li>
          <code>s1.length == s2.length</code>
        </li>
        <li>
          <code>s1</code> and <code>s2</code> consist of only lowercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  1940: (
    <article role="main" class="blog-post">
      <p>
        Given an array of integer arrays{" "}
        <code class="language-plaintext highlighter-rouge">arrays</code> where
        each <code class="language-plaintext highlighter-rouge">arrays[i]</code>{" "}
        is sorted in <strong>strictly increasing</strong> order, return{" "}
        <em>
          an integer array representing the{" "}
          <strong>longest common subsequence</strong> between{" "}
          <strong>all</strong> the arrays
        </em>
        .
      </p>

      <p>
        A <strong>subsequence</strong> is a sequence that can be derived from
        another sequence by deleting some elements (possibly none) without
        changing the order of the remaining elements.
      </p>

      <p>
        <strong>Example 1:</strong>
      </p>
      <div class="language-plaintext highlighter-rouge">
        <div class="highlight">
          <pre class="highlight">
            <code>
              Input: arrays = [[1,3,4], [1,4,7,9]]
              <br />
              Output: [1,4] <br />
              Explanation: The longest common subsequence in the two arrays is
              [1,4].
            </code>
          </pre>
        </div>
      </div>
      <p>
        <strong>Example 2:</strong>
      </p>
      <div class="language-plaintext highlighter-rouge">
        <div class="highlight">
          <pre class="highlight">
            <code>
              Input: arrays = [[2,3,6,8], [1,2,3,5,6,7,10], [2,3,4,6,9]]
              <br />
              Output: [2,3,6] <br />
              Explanation: The longest common subsequence in all three arrays is
              [2,3,6].
            </code>
          </pre>
        </div>
      </div>
      <p>
        <strong>Example 3:</strong>
      </p>
      <div class="language-plaintext highlighter-rouge">
        <div class="highlight">
          <pre class="highlight">
            <code>
              Input: arrays = [[1,2,3,4,5], [6,7,8]]
              <br />
              Output: []
              <br />
              Explanation: There is no common subsequence between the two
              arrays.
            </code>
          </pre>
        </div>
      </div>

      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code class="language-plaintext highlighter-rouge">
            2 &lt;= arrays.length &lt;= 100
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= arrays[i].length &lt;= 100
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= arrays[i][j] &lt;= 100
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">arrays[i]</code> is
          sorted in strictly increasing order.
        </li>
      </ul>
    </article>
  ),
  2053: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>distinct string</strong> is a string that is present only{" "}
        <strong>once</strong> in an array.
      </p>

      <p>
        Given an array of strings <code>arr</code>, and an integer{" "}
        <code>k</code>, return <em>the </em>
        <code>
          k<sup>th</sup>
        </code>
        <em>
          {" "}
          <strong>distinct string</strong> present in{" "}
        </em>
        <code>arr</code>. If there are <strong>fewer</strong> than{" "}
        <code>k</code> distinct strings, return{" "}
        <em>
          an <strong>empty string </strong>
        </em>
        <code>""</code>.
      </p>

      <p>
        Note that the strings are considered in the{" "}
        <strong>order in which they appear</strong> in the array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = ["d","b","c","b","c","a"], k = 2 <br />
        <strong>Output:</strong> "a" <br />
        <strong>Explanation:</strong> <br />
        The only distinct strings in arr are "d" and "a". <br />
        "d" appears 1<sup>st</sup>, so it is the 1<sup>st</sup> distinct string.{" "}
        <br />
        "a" appears 2<sup>nd</sup>, so it is the 2<sup>nd</sup> distinct string.{" "}
        <br />
        Since k == 2, "a" is returned.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = ["aaa","aa","a"], k = 1 <br />
        <strong>Output:</strong> "aaa" <br />
        <strong>Explanation:</strong> <br />
        All strings in arr are distinct, so the 1<sup>st</sup> string "aaa" is
        returned.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = ["a","b","a"], k = 3 <br />
        <strong>Output:</strong> "" <br />
        <strong>Explanation:</strong> <br />
        The only distinct string is "b". Since there are fewer than 3 distinct
        strings, we return an empty string "".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= arr.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= arr[i].length &lt;= 5</code>
        </li>
        <li>
          <code>arr[i]</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  2068: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Two strings <code>word1</code> and <code>word2</code> are considered{" "}
        <strong>almost equivalent</strong> if the differences between the
        frequencies of each letter from <code>'a'</code> to <code>'z'</code>{" "}
        between <code>word1</code> and <code>word2</code> is{" "}
        <strong>at most</strong> <code>3</code>.
      </p>

      <p>
        Given two strings <code>word1</code> and <code>word2</code>, each of
        length <code>n</code>, return <code>true</code> <em>if </em>
        <code>word1</code> <em>and</em> <code>word2</code>{" "}
        <em>
          are <strong>almost equivalent</strong>, or
        </em>{" "}
        <code>false</code> <em>otherwise</em>.
      </p>

      <p>
        The <strong>frequency</strong> of a letter <code>x</code> is the number
        of times it occurs in the string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = "aaaa", word2 = "bccb" <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> There are 4 'a's in "aaaa" but 0 'a's in
        "bccb". <br />
        The difference is 4, which is more than the allowed 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = "abcdeef", word2 = "abaaacc" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The differences between the frequencies of
        each letter in word1 and word2 are at most 3: <br />- 'a' appears 1 time
        in word1 and 4 times in word2. The difference is 3. <br />- 'b' appears
        1 time in word1 and 1 time in word2. The difference is 0. <br />- 'c'
        appears 1 time in word1 and 2 times in word2. The difference is 1.{" "}
        <br />- 'd' appears 1 time in word1 and 0 times in word2. The difference
        is 1. <br />
        - 'e' appears 2 times in word1 and 0 times in word2. The difference is
        2. <br />- 'f' appears 1 time in word1 and 0 times in word2. The
        difference is 1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = "cccddabba", word2 = "babababab" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The differences between the frequencies of
        each letter in word1 and word2 are at most 3: <br />
        - 'a' appears 2 times in word1 and 4 times in word2. The difference is
        2. <br />
        - 'b' appears 2 times in word1 and 5 times in word2. The difference is
        3. <br />
        - 'c' appears 3 times in word1 and 0 times in word2. The difference is
        3. <br />- 'd' appears 2 times in word1 and 0 times in word2. The
        difference is 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == word1.length == word2.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>word1</code> and <code>word2</code> consist only of lowercase
          English letters.
        </li>
      </ul>
    </div>
  ),
  2248: (
    <div class="elfjS" data-track-load="description_content">
      Given a 2D integer array <code>nums</code> where <code>nums[i]</code> is a
      non-empty array of <strong>distinct</strong> positive integers, return{" "}
      <em>
        the list of integers that are present in <strong>each array</strong> of
      </em>{" "}
      <code>nums</code>
      <em>
        {" "}
        sorted in <strong>ascending order</strong>
      </em>
      .<p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [[
        <u>
          <strong>3</strong>
        </u>
        ,1,2,
        <u>
          <strong>4</strong>
        </u>
        ,5],[1,2,
        <u>
          <strong>3</strong>
        </u>
        ,
        <u>
          <strong>4</strong>
        </u>
        ],[
        <u>
          <strong>3</strong>
        </u>
        ,
        <u>
          <strong>4</strong>
        </u>
        ,5,6]]
        <br /> <strong>Output:</strong> [3,4] <br />
        <strong>Explanation:</strong> <br />
        The only integers present in each of nums[0] = [
        <u>
          <strong>3</strong>
        </u>
        ,1,2,
        <u>
          <strong>4</strong>
        </u>
        ,5], nums[1] = [1,2,
        <u>
          <strong>3</strong>
        </u>
        ,
        <u>
          <strong>4</strong>
        </u>
        ], and nums[2] = [
        <u>
          <strong>3</strong>
        </u>
        ,
        <u>
          <strong>4</strong>
        </u>
        ,5,6] are 3 and 4, so we return [3,4].
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [[1,2,3],[4,5,6]] <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> <br />
        There does not exist any integer present both in nums[0] and nums[1], so
        we return an empty list [].
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= sum(nums[i].length) &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= nums[i][j] &lt;= 1000</code>
        </li>
        <li>
          All the values of <code>nums[i]</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  3046: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> of{" "}
        <strong>even</strong> length. You have to split the array into two parts{" "}
        <code>nums1</code> and <code>nums2</code> such that:
      </p>

      <ul>
        <li>
          <code>nums1.length == nums2.length == nums.length / 2</code>.
        </li>
        <li>
          <code>nums1</code> should contain <strong>distinct </strong>elements.
        </li>
        <li>
          <code>nums2</code> should also contain <strong>distinct</strong>{" "}
          elements.
        </li>
      </ul>

      <p>
        Return <code>true</code>
        <em> if it is possible to split the array, and </em>
        <code>false</code> <em>otherwise</em>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,2,3,4] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> One of the possible ways to split nums is
        nums1 = [1,2,3] and nums2 = [1,2,4].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The only possible way to split nums is
        nums1 = [1,1] and nums2 = [1,1]. Both nums1 and nums2 do not contain
        distinct elements. Therefore, we return false.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>nums.length % 2 == 0 </code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  3184: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>hours</code> representing times in{" "}
        <strong>hours</strong>, return an integer denoting the number of pairs{" "}
        <code>i</code>, <code>j</code> where <code>i &lt; j</code> and{" "}
        <code>hours[i] + hours[j]</code> forms a <strong>complete day</strong>.
      </p>

      <p>
        A <strong>complete day</strong> is defined as a time duration that is an{" "}
        <strong>exact</strong> <strong>multiple</strong> of 24 hours.
      </p>

      <p>
        For example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours,
        and so on.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">hours = [12,12,30,24,24]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          The pairs of indices that form a complete day are <code>(0, 1)</code>{" "}
          and <code>(3, 4)</code>.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">hours = [72,48,24,3]</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          The pairs of indices that form a complete day are <code>(0, 1)</code>,{" "}
          <code>(0, 2)</code>, and <code>(1, 2)</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= hours.length &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= hours[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3167: (
    <>
      <p>
        You are given a string <code>compressed</code> representing a compressed
        version of a string. The format is a character followed by its
        frequency. For example, <code>&quot;a3b1a1c2&quot;</code> is a
        compressed version of the string <code>&quot;aaabacc&quot;</code>.
      </p>

      <p>
        We seek a <strong>better compression</strong> with the following
        conditions:
      </p>

      <ul>
        <li>
          Each character should appear <strong>only once</strong> in the
          compressed version.
        </li>
        <li>
          The characters should be in <strong>alphabetical order</strong>.
        </li>
      </ul>

      <p>
        Return the <em>better compression</em> of <code>compressed</code>.
      </p>

      <p>
        <strong>Note:</strong> In the better version of compression, the order
        of letters may change, which is acceptable.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">compressed = &quot;a3c9b2c1&quot;</span>
        </p>{" "}
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">&quot;a3b2c10&quot;</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          Characters &quot;a&quot; and &quot;b&quot; appear only once in the
          input, but &quot;c&quot; appears twice, once with a size of 9 and once
          with a size of 1.
        </p>
        <p>Hence, in the resulting string, it should have a size of 10.</p>
      </div>

      <br />
      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">compressed = &quot;c2b3a1&quot;</span>
        </p>{" "}
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">&quot;a1b3c2&quot;</span>
        </p>
      </div>
      <br />

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">compressed = &quot;a2b4c1&quot;</span>
        </p>{" "}
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">&quot;a2b4c1&quot;</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= compressed.length &lt;= 6 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>compressed</code> consists only of lowercase English letters and
          digits.
        </li>
        <li>
          <code>compressed</code> is a valid compression, i.e., each character
          is followed by its frequency.
        </li>
        <li>
          Frequencies are in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>{" "}
          and have no leading zeroes.
        </li>
      </ul>
    </>
  ),
  743: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a network of <code>n</code> nodes, labeled from{" "}
        <code>1</code> to <code>n</code>. You are also given <code>times</code>,
        a list of travel times as directed edges{" "}
        <code>
          times[i] = (u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>)
        </code>
        , where{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        is the source node,{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        is the target node, and{" "}
        <code>
          w<sub>i</sub>
        </code>{" "}
        is the time it takes for a signal to travel from source to target.
      </p>

      <p>
        We will send a signal from a given node <code>k</code>. Return{" "}
        <em>
          the <strong>minimum</strong> time it takes for all the
        </em>{" "}
        <code>n</code> <em>nodes to receive the signal</em>. If it is impossible
        for all the <code>n</code> nodes to receive the signal, return{" "}
        <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png"
        style={{ width: 217, height: 239 }}
      />
      <pre>
        <strong>Input:</strong> times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2{" "}
        <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> times = [[1,2,1]], n = 2, k = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> times = [[1,2,1]], n = 2, k = 2 <br />
        <strong>Output:</strong> -1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= times.length &lt;= 6000</code>
        </li>
        <li>
          <code>times[i].length == 3</code>
        </li>
        <li>
          <code>
            1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= w<sub>i</sub> &lt;= 100
          </code>
        </li>
        <li>
          All the pairs{" "}
          <code>
            (u<sub>i</sub>, v<sub>i</sub>)
          </code>{" "}
          are <strong>unique</strong>. (i.e., no multiple edges.)
        </li>
      </ul>
    </div>
  ),
  787: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> cities connected by some number of flights. You
        are given an array <code>flights</code> where{" "}
        <code>
          flights[i] = [from<sub>i</sub>, to<sub>i</sub>, price<sub>i</sub>]
        </code>{" "}
        indicates that there is a flight from city{" "}
        <code>
          from<sub>i</sub>
        </code>{" "}
        to city{" "}
        <code>
          to<sub>i</sub>
        </code>{" "}
        with cost{" "}
        <code>
          price<sub>i</sub>
        </code>
        .
      </p>

      <p>
        You are also given three integers <code>src</code>, <code>dst</code>,
        and <code>k</code>, return{" "}
        <em>
          <strong>the cheapest price</strong> from{" "}
        </em>
        <code>src</code>
        <em> to </em>
        <code>dst</code>
        <em> with at most </em>
        <code>k</code>
        <em> stops. </em>If there is no such route, return<em> </em>
        <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-3drawio.png"
        style={{ width: 332, height: 392 }}
      />
      <pre>
        <strong>Input:</strong> n = 4, flights =
        [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k
        = 1 <br />
        <strong>Output:</strong> 700 <br />
        <strong>Explanation:</strong> <br />
        The graph is shown above. <br />
        The optimal path with at most 1 stop from city 0 to 3 is marked in red
        and has cost 100 + 600 = 700. <br />
        Note that the path through cities [0,1,2,3] is cheaper but is invalid
        because it uses 2 stops.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-1drawio.png"
        style={{ width: 332, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> n = 3, flights =
        [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1 <br />
        <strong>Output:</strong> 200 <br />
        <strong>Explanation:</strong> <br />
        The graph is shown above. <br />
        The optimal path with at most 1 stop from city 0 to 2 is marked in red
        and has cost 100 + 100 = 200.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-2drawio.png"
        style={{ width: 332, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> n = 3, flights =
        [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0 <br />
        <strong>Output:</strong> 500 <br />
        <strong>Explanation:</strong> <br />
        The graph is shown above. <br />
        The optimal path with no stops from city 0 to 2 is marked in red and has
        cost 500.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= flights.length &lt;= (n * (n - 1) / 2)</code>
        </li>
        <li>
          <code>flights[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            from<sub>i</sub> != to<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= price<sub>i</sub> &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>There will not be any multiple flights between two cities.</li>
        <li>
          <code>0 &lt;= src, dst, k &lt; n</code>
        </li>
        <li>
          <code>src != dst</code>
        </li>
      </ul>
    </div>
  ),
  882: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an undirected graph (the <strong>"original graph"</strong>
        ) with <code>n</code> nodes labeled from <code>0</code> to{" "}
        <code>n - 1</code>. You decide to <strong>subdivide</strong> each edge
        in the graph into a chain of nodes, with the number of new nodes varying
        between each edge.
      </p>

      <p>
        The graph is given as a 2D array of <code>edges</code> where{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>, cnt<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        in the original graph, and{" "}
        <code>
          cnt<sub>i</sub>
        </code>{" "}
        is the total number of new nodes that you will{" "}
        <strong>subdivide</strong> the edge into. Note that{" "}
        <code>
          cnt<sub>i</sub> == 0
        </code>{" "}
        means you will not subdivide the edge.
      </p>

      <p>
        To <strong>subdivide</strong> the edge{" "}
        <code>
          [u<sub>i</sub>, v<sub>i</sub>]
        </code>
        , replace it with{" "}
        <code>
          (cnt<sub>i</sub> + 1)
        </code>{" "}
        new edges and{" "}
        <code>
          cnt<sub>i</sub>
        </code>{" "}
        new nodes. The new nodes are{" "}
        <code>
          x<sub>1</sub>
        </code>
        ,{" "}
        <code>
          x<sub>2</sub>
        </code>
        , ...,{" "}
        <code>
          x
          <sub>
            cnt<sub>i</sub>
          </sub>
        </code>
        , and the new edges are{" "}
        <code>
          [u<sub>i</sub>, x<sub>1</sub>]
        </code>
        ,{" "}
        <code>
          [x<sub>1</sub>, x<sub>2</sub>]
        </code>
        ,{" "}
        <code>
          [x<sub>2</sub>, x<sub>3</sub>]
        </code>
        , ...,{" "}
        <code>
          [x
          <sub>
            cnt<sub>i</sub>-1
          </sub>
          , x
          <sub>
            cnt<sub>i</sub>
          </sub>
          ]
        </code>
        ,{" "}
        <code>
          [x
          <sub>
            cnt<sub>i</sub>
          </sub>
          , v<sub>i</sub>]
        </code>
        .
      </p>

      <p>
        In this <strong>new graph</strong>, you want to know how many nodes are{" "}
        <strong>reachable</strong> from the node <code>0</code>, where a node is{" "}
        <strong>reachable</strong> if the distance is <code>maxMoves</code> or
        less.
      </p>

      <p>
        Given the original graph and <code>maxMoves</code>, return{" "}
        <em>
          the number of nodes that are <strong>reachable</strong> from node{" "}
        </em>
        <code>0</code>
        <em> in the new graph</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png"
        style={{ width: 600, height: 247 }}
      />
      <pre>
        <strong>Input:</strong> edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves =
        6, n = 3 <br />
        <strong>Output:</strong> 13 <br />
        <strong>Explanation:</strong> The edge subdivisions are shown in the
        image above. <br />
        The nodes that are reachable are highlighted in yellow.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]],
        maxMoves = 10, n = 4 <br />
        <strong>Output:</strong> 23
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> edges =
        [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> Node 0 is disconnected from the rest of
        the graph, so only node 0 is reachable.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= edges.length &lt;= min(n * (n - 1) / 2, 10<sup>4</sup>)
          </code>
        </li>
        <li>
          <code>edges[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub> &lt; v<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          There are <strong>no multiple edges</strong> in the graph.
        </li>
        <li>
          <code>
            0 &lt;= cnt<sub>i</sub> &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= maxMoves &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 3000</code>
        </li>
      </ul>
    </div>
  ),
  1514: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an undirected weighted graph of&nbsp;<code>n</code>
        &nbsp;nodes (0-indexed), represented by an edge list where&nbsp;
        <code>edges[i] = [a, b]</code>&nbsp;is an undirected edge connecting the
        nodes&nbsp;<code>a</code>&nbsp;and&nbsp;<code>b</code>&nbsp;with a
        probability of success of traversing that edge&nbsp;
        <code>succProb[i]</code>.
      </p>

      <p>
        Given two nodes&nbsp;<code>start</code>&nbsp;and&nbsp;<code>end</code>,
        find the path with the maximum probability of success to go from&nbsp;
        <code>start</code>&nbsp;to&nbsp;<code>end</code>&nbsp;and return its
        success probability.
      </p>

      <p>
        If there is no path from&nbsp;<code>start</code>&nbsp;to&nbsp;
        <code>end</code>, <strong>return&nbsp;0</strong>. Your answer will be
        accepted if it differs from the correct answer by at most{" "}
        <strong>1e-5</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/09/20/1558_ex1.png"
            style={{ width: 187, height: 186 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, edges = [[0,1],[1,2],[0,2]], succProb =
        [0.5,0.5,0.2], start = 0, end = 2 <br />
        <strong>Output:</strong> 0.25000 <br />
        <strong>Explanation:</strong>&nbsp;There are two paths from start to
        end, one having a probability of success = 0.2 and the other has 0.5 *
        0.5 = 0.25.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/09/20/1558_ex2.png"
            style={{ width: 189, height: 186 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, edges = [[0,1],[1,2],[0,2]], succProb =
        [0.5,0.5,0.3], start = 0, end = 2 <br />
        <strong>Output:</strong> 0.30000
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/09/20/1558_ex3.png"
            style={{ width: 215, height: 191 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, edges = [[0,1]], succProb = [0.5], start
        = 0, end = 2 <br />
        <strong>Output:</strong> 0.00000 <br />
        <strong>Explanation:</strong>&nbsp;There is no path between 0 and 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n &lt;= 10^4</code>
        </li>
        <li>
          <code>0 &lt;= start, end &lt; n</code>
        </li>
        <li>
          <code>start != end</code>
        </li>
        <li>
          <code>0 &lt;= a, b &lt; n</code>
        </li>
        <li>
          <code>a != b</code>
        </li>
        <li>
          <code>0 &lt;= succProb.length == edges.length &lt;= 2*10^4</code>
        </li>
        <li>
          <code>0 &lt;= succProb[i] &lt;= 1</code>
        </li>
        <li>There is at most one edge between every two nodes.</li>
      </ul>
    </div>
  ),
  1976: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are in a city that consists of <code>n</code> intersections numbered
        from <code>0</code> to <code>n - 1</code> with{" "}
        <strong>bi-directional</strong> roads between some intersections. The
        inputs are generated such that you can reach any intersection from any
        other intersection and that there is at most one road between any two
        intersections.
      </p>

      <p>
        You are given an integer <code>n</code> and a 2D integer array{" "}
        <code>roads</code> where{" "}
        <code>
          roads[i] = [u<sub>i</sub>, v<sub>i</sub>, time<sub>i</sub>]
        </code>{" "}
        means that there is a road between intersections{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        that takes{" "}
        <code>
          time<sub>i</sub>
        </code>{" "}
        minutes to travel. You want to know in how many ways you can travel from
        intersection <code>0</code> to intersection <code>n - 1</code> in the{" "}
        <strong>shortest amount of time</strong>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>number of ways</strong> you can arrive at your destination
          in the <strong>shortest amount of time</strong>
        </em>
        . Since the answer may be large, return it <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/17/graph2.png"
        style={{ width: 235, height: 381 }}
      />
      <pre>
        <strong>Input:</strong> n = 7, roads =
        [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]
        <br /> <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> The shortest amount of time it takes to go
        from intersection 0 to intersection 6 is 7 minutes.
        <br /> The four ways to get there in 7 minutes are: <br />
        - 0 ➝ 6 <br />
        - 0 ➝ 4 ➝ 6 <br />
        - 0 ➝ 1 ➝ 2 ➝ 5 ➝ 6 <br />- 0 ➝ 1 ➝ 3 ➝ 5 ➝ 6
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, roads = [[1,0,10]] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> There is only one way to go from
        intersection 0 to intersection 1, and it takes 10 minutes.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 200</code>
        </li>
        <li>
          <code>n - 1 &lt;= roads.length &lt;= n * (n - 1) / 2</code>
        </li>
        <li>
          <code>roads[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            1 &lt;= time<sub>i</sub> &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            u<sub>i </sub>!= v<sub>i</sub>
          </code>
        </li>
        <li>There is at most one road connecting any two intersections.</li>
        <li>You can reach any intersection from any other intersection.</li>
      </ul>
    </div>
  ),
  2045: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A city is represented as a <strong>bi-directional connected</strong>{" "}
        graph with <code>n</code> vertices where each vertex is labeled from{" "}
        <code>1</code> to <code>n</code> (<strong>inclusive</strong>). The edges
        in the graph are represented as a 2D integer array <code>edges</code>,
        where each{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        denotes a bi-directional edge between vertex{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and vertex{" "}
        <code>
          v<sub>i</sub>
        </code>
        . Every vertex pair is connected by <strong>at most one</strong> edge,
        and no vertex has an edge to itself. The time taken to traverse any edge
        is <code>time</code> minutes.
      </p>
      <p>
        Each vertex has a traffic signal which changes its color from{" "}
        <strong>green</strong> to <strong>red</strong> and vice versa
        every&nbsp;<code>change</code> minutes. All signals change{" "}
        <strong>at the same time</strong>. You can enter a vertex at{" "}
        <strong>any time</strong>, but can leave a vertex{" "}
        <strong>only when the signal is green</strong>. You{" "}
        <strong>cannot wait </strong>at a vertex if the signal is{" "}
        <strong>green</strong>.
      </p>
      <p>
        The <strong>second minimum value</strong> is defined as the smallest
        value<strong> strictly larger </strong>than the minimum value.
      </p>
      <ul>
        <li>
          For example the second minimum value of <code>[2, 3, 4]</code> is{" "}
          <code>3</code>, and the second minimum value of <code>[2, 2, 4]</code>{" "}
          is <code>4</code>.
        </li>
      </ul>
      <p>
        Given <code>n</code>, <code>edges</code>, <code>time</code>, and{" "}
        <code>change</code>, return{" "}
        <em>
          the <strong>second minimum time</strong> it will take to go from
          vertex{" "}
        </em>
        <code>1</code>
        <em> to vertex </em>
        <code>n</code>.
      </p>
      <p>
        <strong>Notes:</strong>
      </p>
      <ul>
        <li>
          You can go through any vertex <strong>any</strong> number of times,{" "}
          <strong>including</strong> <code>1</code> and <code>n</code>.
        </li>
        <li>
          You can assume that when the journey <strong>starts</strong>, all
          signals have just turned <strong>green</strong>.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/09/29/e1.png"
        style={{ width: 200, height: 250 }}
      />{" "}
         
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/09/29/e2.png"
        style={{ width: 200, height: 250 }}
      />
      <pre>
        <strong>Input:</strong> n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]],
        time = 3, change = 5<br />
        <strong>Output:</strong> 13
        <br />
        <strong>Explanation:</strong>
        The figure on the left shows the given graph.
        <br />
        The blue path in the figure on the right is the minimum time path.
        <br />
        The time taken is:
        <br />
        - Start at 1, time elapsed=0
        <br />
        - 1 -&gt; 4: 3 minutes, time elapsed=3
        <br />
        - 4 -&gt; 5: 3 minutes, time elapsed=6
        <br />
        Hence the minimum time needed is 6 minutes.
        <br />
        The red path shows the path to get the second minimum time.
        <br />
        - Start at 1, time elapsed=0
        <br />
        - 1 -&gt; 3: 3 minutes, time elapsed=3
        <br />
        - 3 -&gt; 4: 3 minutes, time elapsed=6
        <br />
        - Wait at 4 for 4 minutes, time elapsed=10
        <br />
        - 4 -&gt; 5: 3 minutes, time elapsed=13
        <br />
        Hence the second minimum time is 13 minutes.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/09/29/eg2.png"
        style={{ width: 225, height: 50 }}
      />
      <pre>
        <strong>Input:</strong> n = 2, edges = [[1,2]], time = 3, change = 2{" "}
        <br />
        <strong>Output:</strong> 11 <br />
        <strong>Explanation:</strong> <br />
        The minimum time path is 1 -&gt; 2 with time = 3 minutes. <br />
        The second minimum time path is 1 -&gt; 2 -&gt; 1 -&gt; 2 with time = 11
        minutes.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            n - 1 &lt;= edges.length &lt;= min(2 * 10<sup>4</sup>, n * (n - 1) /
            2)
          </code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
        <li>There are no duplicate edges.</li>
        <li>
          Each vertex can be reached directly or indirectly from every other
          vertex.
        </li>
        <li>
          <code>
            1 &lt;= time, change &lt;= 10<sup>3</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2203: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code> denoting the number of nodes of
        a <strong>weighted directed</strong> graph. The nodes are numbered from{" "}
        <code>0</code> to <code>n - 1</code>.
      </p>

      <p>
        You are also given a 2D integer array <code>edges</code> where{" "}
        <code>
          edges[i] = [from<sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]
        </code>{" "}
        denotes that there exists a <strong>directed</strong> edge from{" "}
        <code>
          from<sub>i</sub>
        </code>{" "}
        to{" "}
        <code>
          to<sub>i</sub>
        </code>{" "}
        with weight{" "}
        <code>
          weight<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Lastly, you are given three <strong>distinct</strong> integers{" "}
        <code>src1</code>, <code>src2</code>, and <code>dest</code> denoting
        three distinct nodes of the graph.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum weight</strong> of a subgraph of the graph such
          that it is <strong>possible</strong> to reach
        </em>{" "}
        <code>dest</code> <em>from both</em> <code>src1</code> <em>and</em>{" "}
        <code>src2</code> <em>via a set of edges of this subgraph</em>. In case
        such a subgraph does not exist, return <code>-1</code>.
      </p>

      <p>
        A <strong>subgraph</strong> is a graph whose vertices and edges are
        subsets of the original graph. The <strong>weight</strong> of a subgraph
        is the sum of weights of its constituent edges.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/02/17/example1drawio.png"
        style={{ width: 263, height: 250 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, edges =
        [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]],
        src1 = 0, src2 = 1, dest = 5<strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> <br />
        The above figure represents the input graph. <br />
        The blue edges represent one of the subgraphs that yield the optimal
        answer. <br />
        Note that the subgraph [[1,0,3],[0,5,6]] also yields the optimal answer.
        It is not possible to get a subgraph with less weight satisfying all the
        constraints.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/02/17/example2-1drawio.png"
        style={{ width: 350, height: 51 }}
      />
      <pre>
        <strong>Input:</strong> n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2
        = 1, dest = 2 <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> <br />
        The above figure represents the input graph. <br />
        It can be seen that there does not exist any path from node 1 to node 2,
        hence there are no subgraphs satisfying all the constraints.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= edges.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= from<sub>i</sub>, to<sub>i</sub>, src1, src2, dest &lt;= n -
            1
          </code>
        </li>
        <li>
          <code>
            from<sub>i</sub> != to<sub>i</sub>
          </code>
        </li>
        <li>
          <code>src1</code>, <code>src2</code>, and <code>dest</code> are
          pairwise distinct.
        </li>
        <li>
          <code>
            1 &lt;= weight[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2093: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code> denoting the number of nodes of
        a <strong>weighted directed</strong> graph. The nodes are numbered from{" "}
        <code>0</code> to <code>n - 1</code>.
      </p>

      <p>
        You are also given a 2D integer array <code>edges</code> where{" "}
        <code>
          edges[i] = [from<sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]
        </code>{" "}
        denotes that there exists a <strong>directed</strong> edge from{" "}
        <code>
          from<sub>i</sub>
        </code>{" "}
        to{" "}
        <code>
          to<sub>i</sub>
        </code>{" "}
        with weight{" "}
        <code>
          weight<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Lastly, you are given three <strong>distinct</strong> integers{" "}
        <code>src1</code>, <code>src2</code>, and <code>dest</code> denoting
        three distinct nodes of the graph.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum weight</strong> of a subgraph of the graph such
          that it is <strong>possible</strong> to reach
        </em>{" "}
        <code>dest</code> <em>from both</em> <code>src1</code> <em>and</em>{" "}
        <code>src2</code> <em>via a set of edges of this subgraph</em>. In case
        such a subgraph does not exist, return <code>-1</code>.
      </p>

      <p>
        A <strong>subgraph</strong> is a graph whose vertices and edges are
        subsets of the original graph. The <strong>weight</strong> of a subgraph
        is the sum of weights of its constituent edges.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/02/17/example1drawio.png"
        style={{ width: 263, height: 250 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, edges =
        [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]],
        src1 = 0, src2 = 1, dest = 5 <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> <br />
        The above figure represents the input graph. <br />
        The blue edges represent one of the subgraphs that yield the optimal
        answer.
        <br />
        Note that the subgraph [[1,0,3],[0,5,6]] also yields the optimal answer.
        It is not possible to get a subgraph with less weight satisfying all the
        constraints.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/02/17/example2-1drawio.png"
        style={{ width: 350, height: 51 }}
      />
      <pre>
        <strong>Input:</strong> n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2
        = 1, dest = 2 <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> <br />
        The above figure represents the input graph. <br />
        It can be seen that there does not exist any path from node 1 to node 2,
        hence there are no subgraphs satisfying all the constraints.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= edges.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= from<sub>i</sub>, to<sub>i</sub>, src1, src2, dest &lt;= n -
            1
          </code>
        </li>
        <li>
          <code>
            from<sub>i</sub> != to<sub>i</sub>
          </code>
        </li>
        <li>
          <code>src1</code>, <code>src2</code>, and <code>dest</code> are
          pairwise distinct.
        </li>
        <li>
          <code>
            1 &lt;= weight[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2290: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> 2D integer array{" "}
        <code>grid</code> of size <code>m x n</code>. Each cell has one of two
        values:
      </p>

      <ul>
        <li>
          <code>0</code> represents an <strong>empty</strong> cell,
        </li>
        <li>
          <code>1</code> represents an <strong>obstacle</strong> that may be
          removed.
        </li>
      </ul>

      <p>You can move up, down, left, or right from and to an empty cell.</p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of <strong>obstacles</strong> to{" "}
          <strong>remove</strong> so you can move from the upper left corner{" "}
        </em>
        <code>(0, 0)</code>
        <em> to the lower right corner </em>
        <code>(m - 1, n - 1)</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/04/06/example1drawio-1.png"
        style={{ width: 605, height: 246 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[0,1,1],[1,1,0],[1,1,0]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> We can remove the obstacles at (0, 1) and
        (0, 2) to create a path from (0, 0) to (2, 2). <br />
        It can be shown that we need to remove at least 2 obstacles, so we
        return 2. <br />
        Note that there may be other ways to remove 2 obstacles to create a
        path.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/04/06/example1drawio.png"
        style={{ width: 405, height: 246 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]{" "}
        <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> We can move from (0, 0) to (2, 4) without
        removing any obstacles, so we return 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>
            1 &lt;= m, n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            2 &lt;= m * n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>0</code> <strong>or</strong>{" "}
          <code>1</code>.
        </li>
        <li>
          <code>grid[0][0] == grid[m - 1][n - 1] == 0</code>
        </li>
      </ul>
    </div>
  ),
  2473: (
    <article role="main" class="blog-post">
      <p>
        You are given a positive integer <code>n</code> representing{" "}
        <code>n</code> cities numbered from <code>1</code> to <code>n</code>.
        You are also given a <strong>2D</strong> array <code>roads</code>, where{" "}
        <code>
          roads[i] = [a<sub>i</sub>, b<sub>i</sub>, cost<sub>i</sub>]
        </code>{" "}
        indicates that there is a <strong>bidirectional </strong>road between
        cities{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        with a cost of traveling equal to{" "}
        <code>
          cost<sub>i</sub>
        </code>
        .
      </p>

      <p>
        You can buy apples in <strong>any</strong> city you want, but some
        cities have different costs to buy apples. You are given the array{" "}
        <code>appleCost</code> where <code>appleCost[i]</code> is the cost of
        buying one apple from city <code>i</code>.
      </p>

      <p>
        You start at some city, traverse through various roads, and eventually
        buy <strong>exactly</strong> one apple from <strong>any</strong> city.
        After you buy that apple, you have to return back to the city you{" "}
        <strong>started</strong> at, but now the cost of all the roads will be{" "}
        <strong>multiplied</strong> by a given factor <code>k</code>.
      </p>

      <p>
        Given the integer <code>k</code>, return <em>an array </em>
        <code>answer</code>
        <em> of size </em>
        <code>n</code>
        <em> where </em>
        <code>answer[i]</code>
        <em>
          {" "}
          is the <strong>minimum</strong> total cost to buy an apple if you
          start at city{" "}
        </em>
        <code>i</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2400-2499/2473.Minimum%20Cost%20to%20Buy%20Apples/images/graph55.png"
          style={{ width: 241, height: 309 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> n = 4, roads =
        [[1,2,4],[2,3,2],[2,4,5],[3,4,1],[1,3,4]], appleCost = [56,42,102,301],
        k = 2 <br />
        <strong>Output:</strong> [54,42,48,51] <br />
        <strong>Explanation:</strong> The minimum cost for each starting city is
        the following: <br />
        - Starting at city 1: You take the path 1 -&gt; 2, buy an apple at city
        2, and finally take the path 2 -&gt; 1. The total cost is 4 + 42 + 4 * 2
        = 54. <br />
        - Starting at city 2: You directly buy an apple at city 2. The total
        cost is 42. <br />
        - Starting at city 3: You take the path 3 -&gt; 2, buy an apple at city
        2, and finally take the path 2 -&gt; 3. The total cost is 2 + 42 + 2 * 2
        = 48. <br />- Starting at city 4: You take the path 4 -&gt; 3 -&gt; 2
        then you buy at city 2, and finally take the path 2 -&gt; 3 -&gt; 4. The
        total cost is 1 + 2 + 42 + 1 * 2 + 2 * 2 = 51.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2400-2499/2473.Minimum%20Cost%20to%20Buy%20Apples/images/graph4.png"
          style={{ width: 167, height: 309 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> n = 3, roads = [[1,2,5],[2,3,1],[3,1,2]],
        appleCost = [2,3,1], k = 3 <br />
        <strong>Output:</strong> [2,3,1] <br />
        <strong>Explanation:</strong> It is always optimal to buy the apple in
        the starting city.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= roads.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= cost<sub>i</sub> &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>appleCost.length == n</code>
        </li>
        <li>
          <code>
            1 &lt;= appleCost[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= 100</code>
        </li>
        <li>There are no repeated edges.</li>
      </ul>
    </article>
  ),
  2577: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <code>m x n</code> matrix <code>grid</code> consisting
        of <b>non-negative</b> integers where <code>grid[row][col]</code>{" "}
        represents the <strong>minimum</strong> time required to be able to
        visit the cell <code>(row, col)</code>, which means you can visit the
        cell <code>(row, col)</code> only when the time you visit it is greater
        than or equal to <code>grid[row][col]</code>.
      </p>

      <p>
        You are standing in the <strong>top-left</strong> cell of the matrix in
        the{" "}
        <code>
          0<sup>th</sup>
        </code>{" "}
        second, and you must move to <strong>any</strong> adjacent cell in the
        four directions: up, down, left, and right. Each move you make takes 1
        second.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> time required in which you can visit the
          bottom-right cell of the matrix
        </em>
        . If you cannot visit the bottom-right cell, then return <code>-1</code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2023/02/14/yetgriddrawio-8.png"
        />
      </p>

      <pre>
        <strong>Input:</strong> grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> One of the paths that we can take is the
        following: <br />
        - at t = 0, we are on the cell (0,0). <br />
        - at t = 1, we move to the cell (0,1). It is possible because grid[0][1]
        &lt;= 1. <br />
        - at t = 2, we move to the cell (1,1). It is possible because grid[1][1]
        &lt;= 2. <br />
        - at t = 3, we move to the cell (1,2). It is possible because grid[1][2]
        &lt;= 3. <br />
        - at t = 4, we move to the cell (1,1). It is possible because grid[1][1]
        &lt;= 4. <br />
        - at t = 5, we move to the cell (1,2). It is possible because grid[1][2]
        &lt;= 5. <br />
        - at t = 6, we move to the cell (1,3). It is possible because grid[1][3]
        &lt;= 6. <br />
        - at t = 7, we move to the cell (2,3). It is possible because grid[2][3]
        &lt;= 7. <br />
        The final time is 7. It can be shown that it is the minimum time
        possible.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2023/02/14/yetgriddrawio-9.png"
          style={{ width: 151, height: 151 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> grid = [[0,2,4],[3,2,1],[1,0,4]] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> There is no path from the top left to the
        bottom-right cell.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>2 &lt;= m, n &lt;= 1000</code>
        </li>
        <li>
          <code>
            4 &lt;= m * n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= grid[i][j] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>grid[0][0] == 0</code>
        </li>
      </ul>

      <p>&nbsp;</p>
    </div>
  ),
  2976: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two <strong>0-indexed</strong> strings <code>source</code>{" "}
        and <code>target</code>, both of length <code>n</code> and consisting of{" "}
        <strong>lowercase</strong> English letters. You are also given two{" "}
        <strong>0-indexed</strong> character arrays <code>original</code> and{" "}
        <code>changed</code>, and an integer array <code>cost</code>, where{" "}
        <code>cost[i]</code> represents the cost of changing the character{" "}
        <code>original[i]</code> to the character <code>changed[i]</code>.
      </p>

      <p>
        You start with the string <code>source</code>. In one operation, you can
        pick a character <code>x</code> from the string and change it to the
        character <code>y</code> at a cost of <code>z</code> <strong>if</strong>{" "}
        there exists <strong>any</strong> index <code>j</code> such that{" "}
        <code>cost[j] == z</code>, <code>original[j] == x</code>, and{" "}
        <code>changed[j] == y</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> cost to convert the string{" "}
        </em>
        <code>source</code>
        <em> to the string </em>
        <code>target</code>
        <em>
          {" "}
          using <strong>any</strong> number of operations. If it is impossible
          to convert
        </em>{" "}
        <code>source</code> <em>to</em> <code>target</code>, <em>return</em>{" "}
        <code>-1</code>.
      </p>

      <p>
        <strong>Note</strong> that there may exist indices <code>i</code>,{" "}
        <code>j</code> such that <code>original[j] == original[i]</code> and{" "}
        <code>changed[j] == changed[i]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> source = "abcd", target = "acbe", original =
        ["a","b","c","c","e","d"], changed = ["b","c","b","e","b","e"], cost =
        [2,5,5,1,2,20] <br />
        <strong>Output:</strong> 28 <br />
        <strong>Explanation:</strong> To convert the string "abcd" to string
        "acbe": <br />
        - Change value at index 1 from 'b' to 'c' at a cost of 5. <br />
        - Change value at index 2 from 'c' to 'e' at a cost of 1. <br />
        - Change value at index 2 from 'e' to 'b' at a cost of 2. <br />
        - Change value at index 3 from 'd' to 'e' at a cost of 20. <br />
        The total cost incurred is 5 + 1 + 2 + 20 = 28. <br />
        It can be shown that this is the minimum possible cost.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> source = "aaaa", target = "bbbb", original =
        ["a","c"], changed = ["c","b"], cost = [1,2] <br />
        <strong>Output:</strong> 12 <br />
        <strong>Explanation:</strong> To change the character 'a' to 'b' change
        the character 'a' to 'c' at a cost of 1, followed by changing the
        character 'c' to 'b' at a cost of 2, for a total cost of 1 + 2 = 3. To
        change all occurrences of 'a' to 'b', a total cost of 3 * 4 = 12 is
        incurred.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> source = "abcd", target = "abce", original =
        ["a"], changed = ["e"], cost = [10000] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> It is impossible to convert source to
        target because the value at index 3 cannot be changed from 'd' to 'e'.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= source.length == target.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>source</code>, <code>target</code> consist of lowercase English
          letters.
        </li>
        <li>
          <code>
            1 &lt;= cost.length == original.length == changed.length &lt;= 2000
          </code>
        </li>
        <li>
          <code>original[i]</code>, <code>changed[i]</code> are lowercase
          English letters.
        </li>
        <li>
          <code>
            1 &lt;= cost[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>original[i] != changed[i]</code>
        </li>
      </ul>
    </div>
  ),
  2977: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two <strong>0-indexed</strong> strings <code>source</code>{" "}
        and <code>target</code>, both of length <code>n</code> and consisting of{" "}
        <strong>lowercase</strong> English characters. You are also given two{" "}
        <strong>0-indexed</strong> string arrays <code>original</code> and{" "}
        <code>changed</code>, and an integer array <code>cost</code>, where{" "}
        <code>cost[i]</code> represents the cost of converting the string{" "}
        <code>original[i]</code> to the string <code>changed[i]</code>.
      </p>

      <p>
        You start with the string <code>source</code>. In one operation, you can
        pick a <strong>substring</strong> <code>x</code> from the string, and
        change it to <code>y</code> at a cost of <code>z</code>{" "}
        <strong>if</strong> there exists <strong>any</strong> index{" "}
        <code>j</code> such that <code>cost[j] == z</code>,{" "}
        <code>original[j] == x</code>, and <code>changed[j] == y</code>. You are
        allowed to do <strong>any</strong> number of operations, but any pair of
        operations must satisfy <strong>either</strong> of these two conditions:
      </p>

      <ul>
        <li>
          The substrings picked in the operations are <code>source[a..b]</code>{" "}
          and <code>source[c..d]</code> with either <code>b &lt; c</code>{" "}
          <strong>or</strong> <code>d &lt; a</code>. In other words, the indices
          picked in both operations are <strong>disjoint</strong>.
        </li>
        <li>
          The substrings picked in the operations are <code>source[a..b]</code>{" "}
          and <code>source[c..d]</code> with <code>a == c</code>{" "}
          <strong>and</strong> <code>b == d</code>. In other words, the indices
          picked in both operations are <strong>identical</strong>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> cost to convert the string{" "}
        </em>
        <code>source</code>
        <em> to the string </em>
        <code>target</code>
        <em>
          {" "}
          using <strong>any</strong> number of operations
        </em>
        . <em>If it is impossible to convert</em> <code>source</code>{" "}
        <em>to</em> <code>target</code>,<em> return</em> <code>-1</code>.
      </p>

      <p>
        <strong>Note</strong> that there may exist indices <code>i</code>,{" "}
        <code>j</code> such that <code>original[j] == original[i]</code> and{" "}
        <code>changed[j] == changed[i]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> source = "abcd", target = "acbe", original =
        ["a","b","c","c","e","d"], changed = ["b","c","b","e","b","e"], cost =
        [2,5,5,1,2,20] <br />
        <strong>Output:</strong> 28 <br />
        <strong>Explanation:</strong> To convert "abcd" to "acbe", do the
        following operations: <br />
        - Change substring source[1..1] from "b" to "c" at a cost of 5. <br />
        - Change substring source[2..2] from "c" to "e" at a cost of 1. <br />
        - Change substring source[2..2] from "e" to "b" at a cost of 2. <br />
        - Change substring source[3..3] from "d" to "e" at a cost of 20. <br />
        The total cost incurred is 5 + 1 + 2 + 20 = 28. <br />
        It can be shown that this is the minimum possible cost.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> source = "abcdefgh", target = "acdeeghh",
        original = ["bcd","fgh","thh"], changed = ["cde","thh","ghh"], cost =
        [1,3,5]
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> To convert "abcdefgh" to "acdeeghh", do
        the following operations: <br />- Change substring source[1..3] from
        "bcd" to "cde" at a cost of 1. <br />
        - Change substring source[5..7] from "fgh" to "thh" at a cost of 3. We
        can do this operation because indices [5,7] are disjoint with indices
        picked in the first operation. <br />
        - Change substring source[5..7] from "thh" to "ghh" at a cost of 5. We
        can do this operation because indices [5,7] are disjoint with indices
        picked in the first operation, and identical with indices picked in the
        second operation. <br />
        The total cost incurred is 1 + 3 + 5 = 9. <br />
        It can be shown that this is the minimum possible cost.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> source = "abcdefgh", target = "addddddd",
        original = ["bcd","defgh"], changed = ["ddd","ddddd"], cost = [100,1578]{" "}
        <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> It is impossible to convert "abcdefgh" to
        "addddddd". <br />
        If you select substring source[1..3] as the first operation to change
        "abcdefgh" to "adddefgh", you cannot select substring source[3..7] as
        the second operation because it has a common index, 3, with the first
        operation. <br />
        If you select substring source[3..7] as the first operation to change
        "abcdefgh" to "abcddddd", you cannot select substring source[1..3] as
        the second operation because it has a common index, 3, with the first
        operation.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= source.length == target.length &lt;= 1000</code>
        </li>
        <li>
          <code>source</code>, <code>target</code> consist only of lowercase
          English characters.
        </li>
        <li>
          <code>
            1 &lt;= cost.length == original.length == changed.length &lt;= 100
          </code>
        </li>
        <li>
          <code>
            1 &lt;= original[i].length == changed[i].length &lt;= source.length
          </code>
        </li>
        <li>
          <code>original[i]</code>, <code>changed[i]</code> consist only of
          lowercase English characters.
        </li>
        <li>
          <code>original[i] != changed[i]</code>
        </li>
        <li>
          <code>
            1 &lt;= cost[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3112: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an undirected graph of <code>n</code> nodes. You are given a 2D
        array <code>edges</code>, where{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>, length<sub>i</sub>]
        </code>{" "}
        describes an edge between node{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and node{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        with a traversal time of{" "}
        <code>
          length<sub>i</sub>
        </code>{" "}
        units.
      </p>

      <p>
        Additionally, you are given an array <code>disappear</code>, where{" "}
        <code>disappear[i]</code> denotes the time when the node <code>i</code>{" "}
        disappears from the graph and you won't be able to visit it.
      </p>

      <p>
        <strong>Note</strong>&nbsp;that the graph might be <em>disconnected</em>{" "}
        and might contain <em>multiple edges</em>.
      </p>

      <p>
        Return the array <code>answer</code>, with <code>answer[i]</code>{" "}
        denoting the <strong>minimum</strong> units of time required to reach
        node <code>i</code> from node 0. If node <code>i</code> is{" "}
        <strong>unreachable</strong> from node 0 then <code>answer[i]</code> is{" "}
        <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,1,5]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[0,-1,4]</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/08/11/output-onlinepngtools.png"
            style={{ width: 350, height: 210 }}
          />
        </p>
        <br />
        <p>
          We are starting our journey from node 0, and our goal is to find the
          minimum time required to reach each node before it disappears.
        </p>
        <br />
        <ul>
          <li>
            For node 0, we don't need any time as it is our starting point.
          </li>
          <li>
            For node 1, we need at least 2 units of time to traverse{" "}
            <code>edges[0]</code>. Unfortunately, it disappears at that moment,
            so we won't be able to visit it.
          </li>
          <li>
            For node 2, we need at least 4 units of time to traverse{" "}
            <code>edges[2]</code>.
          </li>
        </ul>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,3,5]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[0,2,3]</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/08/11/output-onlinepngtools-1.png"
            style={{ width: 350, height: 210 }}
          />
        </p>
        <br />
        <p>
          We are starting our journey from node 0, and our goal is to find the
          minimum time required to reach each node before it disappears.
        </p>

        <ul>
          <li>
            For node 0, we don't need any time as it is the starting point.
          </li>
          <li>
            For node 1, we need at least 2 units of time to traverse{" "}
            <code>edges[0]</code>.
          </li>
          <li>
            For node 2, we need at least 3 units of time to traverse{" "}
            <code>edges[0]</code> and <code>edges[1]</code>.
          </li>
        </ul>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 2, edges = [[0,1,1]], disappear = [1,1]
          </span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[0,-1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>Exactly when we reach node 1, it disappears.</p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= edges.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            edges[i] == [u<sub>i</sub>, v<sub>i</sub>, length<sub>i</sub>]
          </code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            1 &lt;= length<sub>i</sub> &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>disappear.length == n</code>
        </li>
        <li>
          <code>
            1 &lt;= disappear[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3123: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an undirected weighted graph of <code>n</code> nodes
        numbered from 0 to <code>n - 1</code>. The graph consists of{" "}
        <code>m</code> edges represented by a 2D array <code>edges</code>, where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>, w<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        with weight{" "}
        <code>
          w<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Consider all the shortest paths from node 0 to node <code>n - 1</code>{" "}
        in the graph. You need to find a <strong>boolean</strong> array{" "}
        <code>answer</code> where <code>answer[i]</code> is <code>true</code> if
        the edge <code>edges[i]</code> is part of <strong>at least</strong> one
        shortest path. Otherwise, <code>answer[i]</code> is <code>false</code>.
      </p>

      <p>
        Return the array <code>answer</code>.
      </p>

      <p>
        <strong>Note</strong> that the graph may not be connected.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2024/03/05/graph35drawio-1.png"
        style={{ height: 129, width: 250 }}
      />
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 6, edges =
            [[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">
            [true,true,true,false,true,true,true,false]
          </span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The following are <strong>all</strong> the shortest paths between
          nodes 0 and 5:
        </p>

        <ul>
          <li>
            The path <code>0 -&gt; 1 -&gt; 5</code>: The sum of weights is{" "}
            <code>4 + 1 = 5</code>.
          </li>
          <li>
            The path <code>0 -&gt; 2 -&gt; 3 -&gt; 5</code>: The sum of weights
            is <code>1 + 1 + 3 = 5</code>.
          </li>
          <li>
            The path <code>0 -&gt; 2 -&gt; 3 -&gt; 1 -&gt; 5</code>: The sum of
            weights is <code>1 + 1 + 2 + 1 = 5</code>.
          </li>
        </ul>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2024/03/05/graphhhh.png"
        style={{ width: 185, height: 136 }}
      />
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 4, edges = [[2,0,1],[0,1,1],[0,3,4],[3,2,2]]
          </span>
        </p>
        <br />

        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">[true,false,false,true]</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          There is one shortest path between nodes 0 and 3, which is the path{" "}
          <code>0 -&gt; 2 -&gt; 3</code> with the sum of weights{" "}
          <code>1 + 2 = 3</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>m == edges.length</code>
        </li>
        <li>
          <code>
            1 &lt;= m &lt;= min(5 * 10<sup>4</sup>, n * (n - 1) / 2)
          </code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= w<sub>i</sub> &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>There are no repeated edges.</li>
      </ul>
    </div>
  ),
  252: (
    <div class="markdown-body div-width">
      <p>
        Given an array of meeting time intervals consisting of start and end
        times <code>[[s1,e1],[s2,e2],...]</code>
        (s<sub>i</sub> &lt; e<sub>i</sub>), determine if a person could attend
        all meetings.
      </p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        <b>Input:</b> <code>[[0,30],[5,10],[15,20]]</code> <br />
        <b>Output:</b> false
      </pre>

      <p>
        <b>Example 2:</b>
      </p>

      <pre>
        <b>Input:</b> [[7,10],[2,4]] <br />
        <b>Output:</b> true
      </pre>

      <p>
        <strong>NOTE:</strong>&nbsp;input types have been changed on April 15,
        2019. Please reset to default code definition to get new method
        signature.
      </p>
    </div>
  ),
  414: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return{" "}
        <em>
          the <strong>third distinct maximum</strong> number in this array. If
          the third maximum does not exist, return the <strong>maximum</strong>{" "}
          number
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [3,2,1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> <br />
        The first distinct maximum is 3. <br />
        The second distinct maximum is 2. <br />
        The third distinct maximum is 1.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,2] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        The first distinct maximum is 2. <br />
        The second distinct maximum is 1. <br />
        The third distinct maximum does not exist, so the maximum (2) is
        returned instead.
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [2,2,3,1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> <br />
        The first distinct maximum is 3. <br />
        The second distinct maximum is 2 (both 2's are counted together since
        they have the same value). <br />
        The third distinct maximum is 1.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Can you find an <code>O(n)</code> solution?
    </div>
  ),
  628: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>,{" "}
        <em>
          find three numbers whose product is maximum and return the maximum
          product
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> 6
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,2,3,4] <br />
        <strong>Output:</strong> 24
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [-1,-2,-3] <br />
        <strong>Output:</strong> -6
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= nums.length &lt;=&nbsp;10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>-1000 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  747: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> where the largest
        integer is <strong>unique</strong>.
      </p>

      <p>
        Determine whether the largest element in the array is{" "}
        <strong>at least twice</strong> as much as every other number in the
        array. If it is, return{" "}
        <em>
          the <strong>index</strong> of the largest element, or return{" "}
        </em>
        <code>-1</code>
        <em> otherwise</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,6,1,0] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> 6 is the largest integer. <br />
        For every other number in the array x, 6 is at least twice as big as x.{" "}
        <br />
        The index of value 6 is 1, so we return 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> 4 is less than twice the value of 3, so we
        return -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 100</code>
        </li>
        <li>
          The largest element in <code>nums</code> is unique.
        </li>
      </ul>
    </div>
  ),
  757: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a 2D integer array <code>intervals</code> where{" "}
        <code>
          intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]
        </code>{" "}
        represents all the integers from{" "}
        <code>
          start<sub>i</sub>
        </code>{" "}
        to{" "}
        <code>
          end<sub>i</sub>
        </code>{" "}
        inclusively.
      </p>

      <p>
        A <strong>containing set</strong> is an array <code>nums</code> where
        each interval from <code>intervals</code> has{" "}
        <strong>at least two</strong> integers in <code>nums</code>.
      </p>

      <ul>
        <li>
          For example, if <code>intervals = [[1,3], [3,7], [8,9]]</code>, then{" "}
          <code>[1,2,4,7,8,9]</code> and <code>[2,3,4,8,9]</code> are{" "}
          <strong>containing sets</strong>.
        </li>
      </ul>

      <p>
        Return <em>the minimum possible size of a containing set</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,3],[3,7],[8,9]] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> let nums = [2, 3, 4, 8, 9]. <br />
        It can be shown that there cannot be any containing array of size 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,3],[1,4],[2,5],[3,5]] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> let nums = [2, 3, 4]. <br />
        It can be shown that there cannot be any containing array of size 2.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,2],[2,3],[2,4],[4,5]] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> let nums = [1, 2, 3, 4, 5]. <br />
        It can be shown that there cannot be any containing array of size 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= intervals.length &lt;= 3000</code>
        </li>
        <li>
          <code>intervals[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>8</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  791: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two strings <code>order</code> and <code>s</code>. All the
        characters of <code>order</code> are <strong>unique</strong> and were
        sorted in some custom order previously.
      </p>

      <p>
        Permute the characters of <code>s</code> so that they match the order
        that <code>order</code> was sorted. More specifically, if a character{" "}
        <code>x</code> occurs before a character <code>y</code> in{" "}
        <code>order</code>, then <code>x</code> should occur before{" "}
        <code>y</code> in the permuted string.
      </p>

      <p>
        Return <em>any permutation of </em>
        <code>s</code>
        <em> that satisfies this property</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io"> order = "cba", s = "abcd" </span>
        </p>
        <br />
        <p>
          <strong>Output: </strong> <span class="example-io"> "cbad" </span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong> <code>"a"</code>, <code>"b"</code>,{" "}
          <code>"c"</code> appear in order, so the order of <code>"a"</code>,{" "}
          <code>"b"</code>, <code>"c"</code> should be <code>"c"</code>,{" "}
          <code>"b"</code>, and <code>"a"</code>.
        </p>
        <br />

        <p>
          Since <code>"d"</code> does not appear in <code>order</code>, it can
          be at any position in the returned string. <code>"dcba"</code>,{" "}
          <code>"cdba"</code>, <code>"cbda"</code> are also valid outputs.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io"> order = "bcafg", s = "abcd" </span>
        </p>
        <br />

        <p>
          <strong>Output: </strong> <span class="example-io"> "bcad" </span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong> The characters <code>"b"</code>,{" "}
          <code>"c"</code>, and <code>"a"</code> from <code>order</code> dictate
          the order for the characters in <code>s</code>. The character{" "}
          <code>"d"</code> in <code>s</code> does not appear in{" "}
          <code>order</code>, so its position is flexible.
        </p>
        <br />

        <p>
          Following the order of appearance in <code>order</code>,{" "}
          <code>"b"</code>, <code>"c"</code>, and <code>"a"</code> from{" "}
          <code>s</code> should be arranged as <code>"b"</code>,{" "}
          <code>"c"</code>, <code>"a"</code>. <code>"d"</code> can be placed at
          any position since it's not in order. The output <code>"bcad"</code>{" "}
          correctly follows this rule. Other arrangements like{" "}
          <code>"dbca"</code> or <code>"bcda"</code> would also be valid, as
          long as <code>"b"</code>, <code>"c"</code>, <code>"a"</code> maintain
          their order.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= order.length &lt;= 26</code>
        </li>
        <li>
          <code>1 &lt;= s.length &lt;= 200</code>
        </li>
        <li>
          <code>order</code> and <code>s</code> consist of lowercase English
          letters.
        </li>
        <li>
          All the characters of <code>order</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  833: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> string <code>s</code> that
        you must perform <code>k</code> replacement operations on. The
        replacement operations are given as three <strong>0-indexed</strong>{" "}
        parallel arrays, <code>indices</code>, <code>sources</code>, and{" "}
        <code>targets</code>, all of length <code>k</code>.
      </p>

      <p>
        To complete the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        replacement operation:
      </p>

      <ul>
        <li>
          Check if the <strong>substring</strong> <code>sources[i]</code> occurs
          at index <code>indices[i]</code> in the{" "}
          <strong>original string</strong> <code>s</code>.
        </li>
        <li>
          If it does not occur, <strong>do nothing</strong>.
        </li>
        <li>
          Otherwise if it does occur, <strong>replace</strong> that substring
          with <code>targets[i]</code>.
        </li>
      </ul>

      <p>
        For example, if{" "}
        <code>
          s = "<u>ab</u>cd"
        </code>
        , <code>indices[i] = 0</code>, <code>sources[i] = "ab"</code>, and{" "}
        <code>targets[i] = "eee"</code>, then the result of this replacement
        will be{" "}
        <code>
          "<u>eee</u>cd"
        </code>
        .
      </p>

      <p>
        All replacement operations must occur <strong>simultaneously</strong>,
        meaning the replacement operations should not affect the indexing of
        each other. The testcases will be generated such that the replacements
        will <strong>not overlap</strong>.
      </p>

      <ul>
        <li>
          For example, a testcase with <code>s = "abc"</code>,{" "}
          <code>indices = [0, 1]</code>, and <code>sources = ["ab","bc"]</code>{" "}
          will not be generated because the <code>"ab"</code> and{" "}
          <code>"bc"</code> replacements overlap.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>resulting string</strong> after performing all replacement
          operations on{" "}
        </em>
        <code>s</code>.
      </p>

      <p>
        A <strong>substring</strong> is a contiguous sequence of characters in a
        string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/06/12/833-ex1.png"
        style={{ width: 411, height: 251 }}
      />
      <pre>
        <strong>Input:</strong> s = "abcd", indices = [0, 2], sources = ["a",
        "cd"], targets = ["eee", "ffff"] <br />
        <strong>Output:</strong> "eeebffff" <br />
        <strong>Explanation:</strong> <br />
        "a" occurs at index 0 in s, so we replace it with "eee". <br />
        "cd" occurs at index 2 in s, so we replace it with "ffff".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/06/12/833-ex2-1.png"
        style={{ width: 411, height: 251 }}
      />
      <pre>
        <strong>Input:</strong> s = "abcd", indices = [0, 2], sources =
        ["ab","ec"], targets = ["eee","ffff"] <br />
        <strong>Output:</strong> "eeecd" <br />
        <strong>Explanation:</strong> <br />
        "ab" occurs at index 0 in s, so we replace it with "eee". <br />
        "ec" does not occur at index 2 in s, so we do nothing.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>k == indices.length == sources.length == targets.length</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= indexes[i] &lt; s.length</code>
        </li>
        <li>
          <code>1 &lt;= sources[i].length, targets[i].length &lt;= 50</code>
        </li>
        <li>
          <code>s</code> consists of only lowercase English letters.
        </li>
        <li>
          <code>sources[i]</code> and <code>targets[i]</code> consist of only
          lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  891: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>width</strong> of a sequence is the difference between the
        maximum and minimum elements in the sequence.
      </p>

      <p>
        Given an array of integers <code>nums</code>, return{" "}
        <em>
          the sum of the <strong>widths</strong> of all the non-empty{" "}
          <strong>subsequences</strong> of{" "}
        </em>
        <code>nums</code>. Since the answer may be very large, return it{" "}
        <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>
        A <strong>subsequence</strong> is a sequence that can be derived from an
        array by deleting some or no elements without changing the order of the
        remaining elements. For example, <code>[3,6,2,7]</code> is a subsequence
        of the array <code>[0,3,1,6,2,2,7]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1,3] <br />
        <strong>Output:</strong> 6 <br />
        Explanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3],
        [2,1,3]. <br />
        The corresponding widths are 0, 0, 0, 1, 1, 2, 2. <br />
        The sum of these widths is 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  899: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> and an integer <code>k</code>. You
        can choose one of the first <code>k</code> letters of <code>s</code> and
        append it at the end of the string.
      </p>

      <p>
        Return{" "}
        <em>
          the lexicographically smallest string you could have after applying
          the mentioned step any number of moves
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "cba", k = 1<br />
        <strong>Output:</strong> "acb"
        <br />
        <strong>Explanation:</strong> <br />
        In the first move, we move the 1<sup>st</sup> character 'c' to the end,
        obtaining the string "bac".
        <br />
        In the second move, we move the 1<sup>st</sup> character 'b' to the end,
        obtaining the final result "acb".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "baaca", k = 3 <br />
        <strong>Output:</strong> "aaabc" <br />
        <strong>Explanation:</strong> <br />
        In the first move, we move the 1<sup>st</sup> character 'b' to the end,
        obtaining the string "aacab".
        <br />
        In the second move, we move the 3<sup>rd</sup> character 'c' to the end,
        obtaining the final result "aaabc".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>s</code> consist of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  910: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and an integer{" "}
        <code>k</code>.
      </p>

      <p>
        For each index <code>i</code> where{" "}
        <code>0 &lt;= i &lt; nums.length</code>, change <code>nums[i]</code> to
        be either <code>nums[i] + k</code> or <code>nums[i] - k</code>.
      </p>

      <p>
        The <strong>score</strong> of <code>nums</code> is the difference
        between the maximum and minimum elements in <code>nums</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum <strong>score</strong> of{" "}
        </em>
        <code>nums</code>
        <em> after changing the values at each index</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1], k = 0 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The score is max(nums) - min(nums) = 1 - 1
        = 0.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,10], k = 2 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> Change nums to be [2, 8]. The score is
        max(nums) - min(nums) = 8 - 2 = 6.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,6], k = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Change nums to be [4, 6, 3]. The score is
        max(nums) - min(nums) = 6 - 3 = 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  922: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code>, half of the integers in{" "}
        <code>nums</code> are <strong>odd</strong>, and the other half are{" "}
        <strong>even</strong>.
      </p>

      <p>
        Sort the array so that whenever <code>nums[i]</code> is odd,{" "}
        <code>i</code> is <strong>odd</strong>, and whenever{" "}
        <code>nums[i]</code> is even, <code>i</code> is <strong>even</strong>.
      </p>

      <p>
        Return <em>any answer array that satisfies this condition</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,5,7] <br />
        <strong>Output:</strong> [4,5,2,7] <br />
        <strong>Explanation:</strong> [4,7,2,5], [2,5,4,7], [2,7,4,5] would also
        have been accepted.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3] <br />
        <strong>Output:</strong> [2,3]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= nums.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>nums.length</code> is even.
        </li>
        <li>
          Half of the integers in <code>nums</code> are even.
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow Up:</strong> Could you solve it in-place?
      </p>
    </div>
  ),
  1005: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and an integer <code>k</code>,
        modify the array in the following way:
      </p>

      <ul>
        <li>
          choose an index <code>i</code> and replace <code>nums[i]</code> with{" "}
          <code>-nums[i]</code>.
        </li>
      </ul>

      <p>
        You should apply this process exactly <code>k</code> times. You may
        choose the same index <code>i</code> multiple times.
      </p>

      <p>
        Return{" "}
        <em>
          the largest possible sum of the array after modifying it in this way
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,3], k = 1 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> Choose index 1 and nums becomes [4,-2,3].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,-1,0,2], k = 3 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> Choose indices (1, 2, 2) and nums becomes
        [3,1,0,2].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,-3,-1,5,-4], k = 2 <br />
        <strong>Output:</strong> 13 <br />
        <strong>Explanation:</strong> Choose indices (1, 4) and nums becomes
        [2,3,-1,5,4].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>-100 &lt;= nums[i] &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1029: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A company is planning to interview <code>2n</code> people. Given the
        array <code>costs</code> where{" "}
        <code>
          costs[i] = [aCost<sub>i</sub>, bCost<sub>i</sub>]
        </code>
        ,&nbsp;the cost of flying the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        person to city <code>a</code> is{" "}
        <code>
          aCost<sub>i</sub>
        </code>
        , and the cost of flying the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        person to city <code>b</code> is{" "}
        <code>
          bCost<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Return <em>the minimum cost to fly every person to a city</em> such that
        exactly <code>n</code> people arrive in each city.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> costs = [[10,20],[30,200],[400,50],[30,20]]{" "}
        <br />
        <strong>Output:</strong> 110
        <br />
        <strong>Explanation: </strong>
        <br />
        The first person goes to city A for a cost of 10.
        <br />
        The second person goes to city A for a cost of 30.
        <br />
        The third person goes to city B for a cost of 50.
        <br />
        The fourth person goes to city B for a cost of 20.
        <br />
        The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the
        people interviewing in each city.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> costs =
        [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]] <br />
        <strong>Output:</strong> 1859
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> costs =
        [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]{" "}
        <br />
        <strong>Output:</strong> 3086
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 * n == costs.length</code>
        </li>
        <li>
          <code>2 &lt;= costs.length &lt;= 100</code>
        </li>
        <li>
          <code>costs.length</code> is even.
        </li>
        <li>
          <code>
            1 &lt;= aCost<sub>i</sub>, bCost<sub>i</sub> &lt;= 1000
          </code>
        </li>
      </ul>
    </div>
  ),
  1133: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A company is planning to interview <code>2n</code> people. Given the
        array <code>costs</code> where{" "}
        <code>
          costs[i] = [aCost<sub>i</sub>, bCost<sub>i</sub>]
        </code>
        ,&nbsp;the cost of flying the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        person to city <code>a</code> is{" "}
        <code>
          aCost<sub>i</sub>
        </code>
        , and the cost of flying the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        person to city <code>b</code> is{" "}
        <code>
          bCost<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Return <em>the minimum cost to fly every person to a city</em> such that
        exactly <code>n</code> people arrive in each city.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> costs = [[10,20],[30,200],[400,50],[30,20]]{" "}
        <br />
        <strong>Output:</strong> 110 <br />
        <strong>Explanation: </strong> <br />
        The first person goes to city A for a cost of 10. <br />
        The second person goes to city A for a cost of 30. <br />
        The third person goes to city B for a cost of 50. <br />
        The fourth person goes to city B for a cost of 20. <br />
        The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the
        people interviewing in each city.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> costs =
        [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]] <br />
        <strong>Output:</strong> 1859
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> costs =
        [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]{" "}
        <br />
        <strong>Output:</strong> 3086
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 * n == costs.length</code>
        </li>
        <li>
          <code>2 &lt;= costs.length &lt;= 100</code>
        </li>
        <li>
          <code>costs.length</code> is even.
        </li>
        <li>
          <code>
            1 &lt;= aCost<sub>i</sub>, bCost<sub>i</sub> &lt;= 1000
          </code>
        </li>
      </ul>
    </div>
  ),
  1196: (
    <article role="main" class="blog-post">
      <p>
        You have some apples and a basket that can carry up to <code>5000</code>{" "}
        units of weight.
      </p>

      <p>
        Given an integer array <code>weight</code> where <code>weight[i]</code>{" "}
        is the weight of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        apple, return{" "}
        <em>the maximum number of apples you can put in the basket</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> weight = [100,200,150,1000] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> All 4 apples can be carried by the basket
        since their sum of weights is 1450.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> weight = [900,950,800,1000,700,800] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The sum of weights of the 6 apples exceeds
        5000 so we choose any 5 of them.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= weight.length &lt;= 10<sup>3</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= weight[i] &lt;= 10<sup>3</sup>
          </code>
        </li>
      </ul>
    </article>
  ),
  1200: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of <strong>distinct</strong> integers <code>arr</code>,
        find all pairs of elements with the minimum absolute difference of any
        two elements.
      </p>

      <p>
        Return a list of pairs in ascending order(with respect to pairs), each
        pair <code>[a, b]</code> follows
      </p>

      <ul>
        <li>
          <code>a, b</code> are from <code>arr</code>
        </li>
        <li>
          <code>a &lt; b</code>
        </li>
        <li>
          <code>b - a</code> equals to the minimum absolute difference of any
          two elements in <code>arr</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [4,2,1,3] <br />
        <strong>Output:</strong> [[1,2],[2,3],[3,4]] <br />
        <strong>Explanation: </strong>The minimum absolute difference is 1. List
        all pairs with difference equal to 1 in ascending order.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,3,6,10,15] <br />
        <strong>Output:</strong> [[1,3]]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [3,8,-10,23,19,-4,-14,27] <br />
        <strong>Output:</strong> [[-14,-10],[19,23],[23,27]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= arr.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>6</sup> &lt;= arr[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1329: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>matrix diagonal</strong> is a diagonal line of cells starting
        from some cell in either the topmost row or leftmost column and going in
        the bottom-right direction until reaching the matrix's end. For example,
        the <strong>matrix diagonal</strong> starting from{" "}
        <code>mat[2][0]</code>, where <code>mat</code> is a <code>6 x 3</code>{" "}
        matrix, includes cells <code>mat[2][0]</code>, <code>mat[3][1]</code>,
        and <code>mat[4][2]</code>.
      </p>
      <p>
        Given an <code>m x n</code> matrix <code>mat</code> of integers, sort
        each <strong>matrix diagonal</strong> in ascending order and return{" "}
        <em>the resulting matrix</em>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/01/21/1482_example_1_2.png"
        style={{ width: 500, height: 198 }}
      />
      <br />{" "}
      <pre>
        <strong>Input:</strong> mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
        <br /> <strong>Output:</strong> [[1,1,1,1],[1,2,2,2],[1,2,3,3]]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> mat =
        [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]{" "}
        <br />
        <strong>Output:</strong>{" "}
        [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>m == mat.length</code>
        </li>
        <li>
          <code>n == mat[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= mat[i][j] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1433: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings: <code>s1</code> and <code>s2</code> with the
        same&nbsp;size, check if some&nbsp;permutation of string <code>s1</code>{" "}
        can break&nbsp;some&nbsp;permutation of string <code>s2</code> or
        vice-versa. In other words <code>s2</code> can break <code>s1</code>
        &nbsp;or vice-versa.
      </p>

      <p>
        A string <code>x</code>&nbsp;can break&nbsp;string <code>y</code>
        &nbsp;(both of size <code>n</code>) if <code>x[i] &gt;= y[i]</code>
        &nbsp;(in alphabetical order)&nbsp;for all <code>
          i
        </code>&nbsp;between <code>0</code> and <code>n-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "abc", s2 = "xya" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> "ayx" is a permutation of s2="xya" which
        can break to string "abc" which is a permutation of s1="abc".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "abe", s2 = "acd"
        <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> All permutations for s1="abe" are: "abe",
        "aeb", "bae", "bea", "eab" and "eba" and all permutation for s2="acd"
        are: "acd", "adc", "cad", "cda", "dac" and "dca". However, there is not
        any permutation from s1 which can break some permutation from s2 and
        vice-versa.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "leetcodee", s2 = "interview" <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>s1.length == n</code>
        </li>
        <li>
          <code>s2.length == n</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 10^5</code>
        </li>
        <li>All strings consist of lowercase English letters.</li>
      </ul>
    </div>
  ),
  1451: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a sentence&nbsp;<code>text</code> (A&nbsp;<em>sentence</em>
        &nbsp;is a string of space-separated words) in the following format:
      </p>

      <ul>
        <li>First letter is in upper case.</li>
        <li>
          Each word in <code>text</code> are separated by a single space.
        </li>
      </ul>

      <p>
        Your task is to rearrange the words in text such that&nbsp;all words are
        rearranged in an increasing order of their lengths. If two words have
        the same length, arrange them in their original order.
      </p>

      <p>Return the new text&nbsp;following the format shown above.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> text = "Leetcode is cool" <br />
        <strong>Output:</strong> "Is cool leetcode" <br />
        <strong>Explanation: </strong>There are 3 words, "Leetcode" of length 8,
        "is" of length 2 and "cool" of length 4. <br />
        Output is ordered by length and the new first word starts with capital
        letter.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> text = "Keep calm and code on" <br />
        <strong>Output:</strong> "On and keep calm code" <br />
        <strong>Explanation: </strong>Output is ordered as follows: <br />
        "On" 2 letters. <br />
        "and" 3 letters. <br />
        "keep" 4 letters in case of tie order by position in original text.{" "}
        <br />
        "calm" 4 letters. <br />
        "code" 4 letters.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> text = "To be or not to be" <br />
        <strong>Output:</strong> "To be or to be not"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>text</code> begins with a capital letter and then contains
          lowercase letters and single space between words.
        </li>
        <li>
          <code>1 &lt;= text.length &lt;= 10^5</code>
        </li>
      </ul>
    </div>
  ),
  1619: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>arr</code>, return{" "}
        <em>
          the mean of the remaining integers after removing the smallest{" "}
          <code>5%</code> and the largest <code>5%</code> of the elements.
        </em>
      </p>

      <p>
        Answers within{" "}
        <code>
          10<sup>-5</sup>
        </code>{" "}
        of the <strong>actual answer</strong> will be considered accepted.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]{" "}
        <br />
        <strong>Output:</strong> 2.00000 <br />
        <strong>Explanation:</strong> After erasing the minimum and the maximum
        values of this array, all elements are equal to 2, so the mean is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]{" "}
        <br />
        <strong>Output:</strong> 4.00000
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr =
        [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]{" "}
        <br />
        <strong>Output:</strong> 4.77778
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>20 &lt;= arr.length &lt;= 1000</code>
        </li>
        <li>
          <code>arr.length</code>
          <b> </b>
          <strong>is a multiple</strong> of <code>20</code>.
        </li>
        <li>
          <code>
            <font face="monospace">
              0 &lt;= arr[i] &lt;= 10<sup>5</sup>
            </font>
          </code>
        </li>
      </ul>
    </div>
  ),
  1710: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are assigned to put some amount of boxes onto{" "}
        <strong>one truck</strong>. You are given a 2D array{" "}
        <code>boxTypes</code>, where{" "}
        <code>
          boxTypes[i] = [numberOfBoxes<sub>i</sub>, numberOfUnitsPerBox
          <sub>i</sub>]
        </code>
        :
      </p>

      <ul>
        <li>
          <code>
            numberOfBoxes<sub>i</sub>
          </code>{" "}
          is the number of boxes of type <code>i</code>.
        </li>
        <li>
          <code>
            numberOfUnitsPerBox<sub>i</sub>
          </code>
          <sub> </sub>is the number of units in each box of the type{" "}
          <code>i</code>.
        </li>
      </ul>

      <p>
        You are also given an integer <code>truckSize</code>, which is the{" "}
        <strong>maximum</strong> number of <strong>boxes</strong> that can be
        put on the truck. You can choose any boxes to put on the truck as long
        as the number&nbsp;of boxes does not exceed <code>truckSize</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong> total number of <strong>units</strong>{" "}
          that can be put on the truck.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4{" "}
        <br />
        <strong>Output:</strong> 8 <br />
        <strong>Explanation:</strong> There are: <br />
        - 1 box of the first type that contains 3 units. <br />
        - 2 boxes of the second type that contain 2 units each. <br />
        - 3 boxes of the third type that contain 1 unit each. <br />
        You can take all the boxes of the first and second types, and one box of
        the third type. <br />
        The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize
        = 10 <br />
        <strong>Output:</strong> 91
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= boxTypes.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= numberOfBoxes<sub>i</sub>, numberOfUnitsPerBox<sub>i</sub>{" "}
            &lt;= 1000
          </code>
        </li>
        <li>
          <code>
            1 &lt;= truckSize &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1913: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>product difference</strong> between two pairs{" "}
        <code>(a, b)</code> and <code>(c, d)</code> is defined as{" "}
        <code>(a * b) - (c * d)</code>.
      </p>

      <ul>
        <li>
          For example, the product difference between <code>(5, 6)</code> and{" "}
          <code>(2, 7)</code> is <code>(5 * 6) - (2 * 7) = 16</code>.
        </li>
      </ul>

      <p>
        Given an integer array <code>nums</code>, choose four{" "}
        <strong>distinct</strong> indices <code>w</code>, <code>x</code>,{" "}
        <code>y</code>, and <code>z</code> such that the{" "}
        <strong>product difference</strong> between pairs{" "}
        <code>(nums[w], nums[x])</code> and <code>(nums[y], nums[z])</code> is{" "}
        <strong>maximized</strong>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong> such product difference
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,6,2,7,4] <br />
        <strong>Output:</strong> 34 <br />
        <strong>Explanation:</strong> We can choose indices 1 and 3 for the
        first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).
        <br /> The product difference is (6 * 7) - (2 * 4) = 34.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,5,9,7,4,8] <br />
        <strong>Output:</strong> 64 <br />
        <strong>Explanation:</strong> We can choose indices 3 and 6 for the
        first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).
        <br /> The product difference is (9 * 8) - (2 * 4) = 64.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            4 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2164: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code>. Rearrange the values of <code>nums</code> according
        to the following rules:
      </p>

      <ul>
        <li>
          Sort the values at <strong>odd indices</strong> of <code>nums</code>{" "}
          in <strong>non-increasing</strong> order.
          <ul>
            <li>
              For example, if{" "}
              <code>
                nums = [4,
                <strong>
                  <u>1</u>
                </strong>
                ,2,
                <u>
                  <strong>3</strong>
                </u>
                ]
              </code>{" "}
              before this step, it becomes{" "}
              <code>
                [4,
                <u>
                  <strong>3</strong>
                </u>
                ,2,
                <strong>
                  <u>1</u>
                </strong>
                ]
              </code>{" "}
              after. The values at odd indices <code>1</code> and <code>3</code>{" "}
              are sorted in non-increasing order.
            </li>
          </ul>
        </li>
        <li>
          Sort the values at <strong>even indices</strong> of <code>nums</code>{" "}
          in <strong>non-decreasing</strong> order.
          <ul>
            <li>
              For example, if{" "}
              <code>
                nums = [
                <u>
                  <strong>4</strong>
                </u>
                ,1,
                <u>
                  <strong>2</strong>
                </u>
                ,3]
              </code>{" "}
              before this step, it becomes{" "}
              <code>
                [
                <u>
                  <strong>2</strong>
                </u>
                ,1,
                <u>
                  <strong>4</strong>
                </u>
                ,3]
              </code>{" "}
              after. The values at even indices <code>0</code> and{" "}
              <code>2</code> are sorted in non-decreasing order.
            </li>
          </ul>
        </li>
      </ul>

      <p>
        Return <em>the array formed after rearranging the values of</em>{" "}
        <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,1,2,3]
        <br /> <strong>Output:</strong> [2,3,4,1]
        <br /> <strong>Explanation:</strong>
        <br /> First, we sort the values present at odd indices (1 and 3) in
        non-increasing order.
        <br /> So, nums changes from [4,
        <strong>
          <u>1</u>
        </strong>
        ,2,
        <strong>
          <u>3</u>
        </strong>
        ] to [4,
        <u>
          <strong>3</strong>
        </u>
        ,2,
        <strong>
          <u>1</u>
        </strong>
        ].
        <br /> Next, we sort the values present at even indices (0 and 2) in
        non-decreasing order.
        <br /> So, nums changes from [
        <u>
          <strong>4</strong>
        </u>
        ,1,
        <strong>
          <u>2</u>
        </strong>
        ,3] to [
        <u>
          <strong>2</strong>
        </u>
        ,3,
        <u>
          <strong>4</strong>
        </u>
        ,1].
        <br /> Thus, the array formed after rearranging the values is [2,3,4,1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1]
        <br /> <strong>Output:</strong> [2,1] <br />
        <strong>Explanation:</strong> <br />
        <br /> Since there is exactly one odd index and one even index, no
        rearrangement of values takes place. <br />
        The resultant array formed is [2,1], which is the same as the initial
        array.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  57: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of non-overlapping intervals{" "}
        <code>intervals</code> where{" "}
        <code>
          intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]
        </code>{" "}
        represent the start and the end of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        interval and <code>intervals</code> is sorted in ascending order by{" "}
        <code>
          start<sub>i</sub>
        </code>
        . You are also given an interval <code>newInterval = [start, end]</code>{" "}
        that represents the start and end of another interval.
      </p>

      <p>
        Insert <code>newInterval</code> into <code>intervals</code> such that{" "}
        <code>intervals</code> is still sorted in ascending order by{" "}
        <code>
          start<sub>i</sub>
        </code>{" "}
        and <code>intervals</code> still does not have any overlapping intervals
        (merge overlapping intervals if necessary).
      </p>

      <p>
        Return <code>intervals</code>
        <em> after the insertion</em>.
      </p>

      <p>
        <strong>Note</strong> that you don't need to modify{" "}
        <code>intervals</code> in-place. You can make a new array and return it.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,3],[6,9]], newInterval = [2,5]{" "}
        <br />
        <strong>Output:</strong> [[1,5],[6,9]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]],
        newInterval = [4,8] <br />
        <strong>Output:</strong> [[1,2],[3,10],[12,16]] <br />
        <strong>Explanation:</strong> Because the new interval [4,8] overlaps
        with [3,5],[6,7],[8,10].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= intervals.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>intervals[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>intervals</code> is sorted by{" "}
          <code>
            start<sub>i</sub>
          </code>{" "}
          in <strong>ascending</strong> order.
        </li>
        <li>
          <code>newInterval.length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= start &lt;= end &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  66: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>large integer</strong> represented as an integer
        array <code>digits</code>, where each <code>digits[i]</code> is the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        digit of the integer. The digits are ordered from most significant to
        least significant in left-to-right order. The large integer does not
        contain any leading <code>0</code>'s.
      </p>

      <p>
        Increment the large integer by one and return{" "}
        <em>the resulting array of digits</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> digits = [1,2,3] <br />
        <strong>Output:</strong> [1,2,4] <br />
        <strong>Explanation:</strong> The array represents the integer 123.{" "}
        <br />
        Incrementing by one gives 123 + 1 = 124. <br />
        Thus, the result should be [1,2,4].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> digits = [4,3,2,1] <br />
        <strong>Output:</strong> [4,3,2,2] <br />
        <strong>Explanation:</strong> The array represents the integer 4321.{" "}
        <br />
        Incrementing by one gives 4321 + 1 = 4322. <br />
        Thus, the result should be [4,3,2,2].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> digits = [9] <br />
        <strong>Output:</strong> [1,0] <br />
        <strong>Explanation:</strong> The array represents the integer 9. <br />
        Incrementing by one gives 9 + 1 = 10. <br />
        Thus, the result should be [1,0].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= digits.length &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= digits[i] &lt;= 9</code>
        </li>
        <li>
          <code>digits</code> does not contain any leading <code>0</code>'s.
        </li>
      </ul>
    </div>
  ),
  136: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <strong>non-empty</strong>&nbsp;array of integers{" "}
        <code>nums</code>, every element appears <em>twice</em> except for one.
        Find that single one.
      </p>

      <p>
        You must&nbsp;implement a solution with a linear runtime complexity and
        use&nbsp;only constant&nbsp;extra space.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [2,2,1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [4,1,2,1,2]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">4</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          Each element in the array appears twice except for one element which
          appears only once.
        </li>
      </ul>
    </div>
  ),
  163: (
    <div class="markdown-body div-width">
      <p>
        Given a sorted integer array{" "}
        <strong>
          <em>nums</em>
        </strong>
        , where the range of elements are in the{" "}
        <strong>inclusive range</strong>
        <b>
          <strong> </strong>[<i>lower</i>, <i>upper</i>]
        </b>
        , return its missing ranges.
      </p>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input:</strong>{" "}
        <strong>
          <em>nums</em>
        </strong>{" "}
        = <code>[0, 1, 3, 50, 75]</code>,{" "}
        <strong>
          <i>lower</i>
        </strong>{" "}
        = 0 and{" "}
        <strong>
          <i>upper</i>
        </strong>{" "}
        = 99,
        <br />
        <strong>Output:</strong>{" "}
        <code>["2", "4-&gt;49", "51-&gt;74", "76-&gt;99"]</code>
      </pre>
    </div>
  ),
  228: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>sorted unique</strong> integer array{" "}
        <code>nums</code>.
      </p>

      <p>
        A <strong>range</strong> <code>[a,b]</code> is the set of all integers
        from <code>a</code> to <code>b</code> (inclusive).
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>smallest sorted</strong> list of ranges that{" "}
          <strong>cover all the numbers in the array exactly</strong>
        </em>
        . That is, each element of <code>nums</code> is covered by exactly one
        of the ranges, and there is no integer <code>x</code> such that{" "}
        <code>x</code> is in one of the ranges but not in <code>nums</code>.
      </p>

      <p>
        Each range <code>[a,b]</code> in the list should be output as:
      </p>

      <ul>
        <li>
          <code>"a-&gt;b"</code> if <code>a != b</code>
        </li>
        <li>
          <code>"a"</code> if <code>a == b</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1,2,4,5,7] <br />
        <strong>Output:</strong> ["0-&gt;2","4-&gt;5","7"] <br />
        <strong>Explanation:</strong> The ranges are: <br />
        [0,2] --&gt; "0-&gt;2" <br />
        [4,5] --&gt; "4-&gt;5" <br />
        [7,7] --&gt; "7"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,2,3,4,6,8,9] <br />
        <strong>Output:</strong> ["0","2-&gt;4","6","8-&gt;9"] <br />
        <strong>Explanation:</strong> The ranges are: <br />
        [0,0] --&gt; "0" <br />
        [2,4] --&gt; "2-&gt;4" <br />
        [6,6] --&gt; "6" <br />
        [8,9] --&gt; "8-&gt;9"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= nums.length &lt;= 20</code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          All the values of <code>nums</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>nums</code> is sorted in ascending order.
        </li>
      </ul>
    </div>
  ),
  665: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> with <code>n</code> integers, your task
        is to check if it could become non-decreasing by modifying{" "}
        <strong>at most one element</strong>.
      </p>

      <p>
        We define an array is non-decreasing if{" "}
        <code>nums[i] &lt;= nums[i + 1]</code> holds for every <code>i</code> (
        <strong>0-based</strong>) such that (<code>0 &lt;= i &lt;= n - 2</code>
        ).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,3] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> You could modify the first 4 to 1 to get a
        non-decreasing array.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,1] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> You cannot get a non-decreasing array by
        modifying at most one element.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  717: (
    <div class="elfjS" data-track-load="description_content">
      <p>We have two special characters:</p>

      <ul>
        <li>
          The first character can be represented by one bit <code>0</code>.
        </li>
        <li>
          The second character can be represented by two bits (<code>10</code>{" "}
          or <code>11</code>).
        </li>
      </ul>

      <p>
        Given a binary array <code>bits</code> that ends with <code>0</code>,
        return <code>true</code> if the last character must be a one-bit
        character.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> bits = [1,0,0] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The only way to decode it is two-bit
        character and one-bit character. <br />
        So the last character is one-bit character.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> bits = [1,1,1,0] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The only way to decode it is two-bit
        character and two-bit character. <br />
        So the last character is not one-bit character.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= bits.length &lt;= 1000</code>
        </li>
        <li>
          <code>bits[i]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  915: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, partition it into two
        (contiguous) subarrays <code>left</code> and <code>right</code> so that:
      </p>

      <ul>
        <li>
          Every element in <code>left</code> is less than or equal to every
          element in <code>right</code>.
        </li>
        <li>
          <code>left</code> and <code>right</code> are non-empty.
        </li>
        <li>
          <code>left</code> has the smallest possible size.
        </li>
      </ul>

      <p>
        Return <em>the length of </em>
        <code>left</code>
        <em> after such a partitioning</em>.
      </p>

      <p>Test cases are generated such that partitioning exists.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,0,3,8,6] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> left = [5,0,3], right = [8,6]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,0,6,12] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> left = [1,1,1,0], right = [6,12]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>There is at least one valid answer for the given input.</li>
      </ul>
    </div>
  ),
  1295: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> of integers, return how many of them
        contain an <strong>even number</strong> of digits.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [12,345,2,6,7896] <br />
        <strong>Output:</strong> 2 <br />
        <strong>
          Explanation: <br />
        </strong>
        12 contains 2 digits (even number of digits).&nbsp; <br />
        345 contains 3 digits (odd number of digits).&nbsp; <br />
        2 contains 1 digit (odd number of digits).&nbsp; <br />
        6 contains 1 digit (odd number of digits).&nbsp; <br />
        7896 contains 4 digits (even number of digits).&nbsp; <br />
        Therefore only 12 and 7896 contain an even number of digits.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [555,901,482,1771] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation: </strong> <br />
        Only 1771 contains an even number of digits.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 500</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1299: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>arr</code>,&nbsp;replace every element in that
        array with the greatest element among the elements to its&nbsp;right,
        and replace the last element with <code>-1</code>.
      </p>

      <p>After doing so, return the array.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [17,18,5,4,6,1] <br />
        <strong>Output:</strong> [18,6,6,6,1,-1] <br />
        <strong>Explanation:</strong> <br />
        - index 0 --&gt; the greatest element to the right of index 0 is index 1
        (18). <br />
        - index 1 --&gt; the greatest element to the right of index 1 is index 4
        (6). <br />
        - index 2 --&gt; the greatest element to the right of index 2 is index 4
        (6). <br />
        - index 3 --&gt; the greatest element to the right of index 3 is index 4
        (6). <br />
        - index 4 --&gt; the greatest element to the right of index 4 is index 5
        (1). <br />- index 5 --&gt; there are no elements to the right of index
        5, so we put -1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [400] <br />
        <strong>Output:</strong> [-1] <br />
        <strong>Explanation:</strong> There are no elements to the right of
        index 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= arr.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= arr[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1437: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an binary array <code>nums</code> and an integer <code>k</code>,
        return <code>true</code>
        <em> if all </em>
        <code>1</code>
        <em>'s are at least </em>
        <code>k</code>
        <em> places away from each other, otherwise return </em>
        <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/04/15/sample_1_1791.png"
        style={{ width: 428, height: 181 }}
      />
      <pre>
        <strong>Input:</strong> nums = [1,0,0,0,1,0,0,1], k = 2 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Each of the 1s are at least 2 places away
        from each other.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/04/15/sample_2_1791.png"
        style={{ width: 320, height: 173 }}
      />
      <pre>
        <strong>Input:</strong> nums = [1,0,0,1,0,1], k = 2 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The second 1 and third 1 are only one
        apart from each other.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= k &lt;= nums.length</code>
        </li>
        <li>
          <code>nums[i]</code> is <code>0</code> or <code>1</code>
        </li>
      </ul>
    </div>
  ),
  1450: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integer arrays <code>startTime</code> and <code>endTime</code>{" "}
        and given an integer <code>queryTime</code>.
      </p>

      <p>
        The <code>ith</code> student started doing their homework at the time{" "}
        <code>startTime[i]</code> and finished it at time{" "}
        <code>endTime[i]</code>.
      </p>

      <p>
        Return <em>the number of students</em> doing their homework at time{" "}
        <code>queryTime</code>. More formally, return the number of students
        where <code>queryTime</code> lays in the interval{" "}
        <code>[startTime[i], endTime[i]]</code> inclusive.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> startTime = [1,2,3], endTime = [3,2,7],
        queryTime = 4 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> We have 3 students where: <br />
        The first student started doing homework at time 1 and finished at time
        3 and wasn't doing anything at time 4. <br />
        The second student started doing homework at time 2 and finished at time
        2 and also wasn't doing anything at time 4. <br />
        The third student started doing homework at time 3 and finished at time
        7 and was the only student doing homework at time 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> startTime = [4], endTime = [4], queryTime = 4{" "}
        <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The only student was doing their homework
        at the queryTime.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>startTime.length == endTime.length</code>
        </li>
        <li>
          <code>1 &lt;= startTime.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= startTime[i] &lt;= endTime[i] &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= queryTime &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1470: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the array <code>nums</code> consisting of <code>2n</code> elements
        in the form{" "}
        <code>
          [x<sub>1</sub>,x<sub>2</sub>,...,x<sub>n</sub>,y<sub>1</sub>,y
          <sub>2</sub>,...,y<sub>n</sub>]
        </code>
        .
      </p>

      <p>
        <em>Return the array in the form</em>{" "}
        <code>
          [x<sub>1</sub>,y<sub>1</sub>,x<sub>2</sub>,y<sub>2</sub>,...,x
          <sub>n</sub>,y<sub>n</sub>]
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,5,1,3,4,7], n = 3 <br />
        <strong>Output:</strong> [2,3,5,4,1,7] <br />
        <strong>Explanation:</strong> Since x<sub>1</sub>=2, x<sub>2</sub>=5, x
        <sub>3</sub>=1, y<sub>1</sub>=3, y<sub>2</sub>=4, y<sub>3</sub>=7 then
        the answer is [2,3,5,4,1,7].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,4,3,2,1], n = 4 <br />
        <strong>Output:</strong> [1,4,2,3,3,2,4,1]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,2], n = 2 <br />
        <strong>Output:</strong> [1,2,1,2]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 500</code>
        </li>
        <li>
          <code>nums.length == 2n</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 10^3</code>
        </li>
      </ul>
    </div>
  ),
  1662: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two string arrays <code>word1</code> and <code>word2</code>,
        return<em> </em>
        <code>true</code>
        <em>
          {" "}
          if the two arrays <strong>represent</strong> the same string, and{" "}
        </em>
        <code>false</code>
        <em> otherwise.</em>
      </p>

      <p>
        A string is <strong>represented</strong> by an array if the array
        elements concatenated <strong>in order</strong> forms the string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = ["ab", "c"], word2 = ["a", "bc"] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> <br />
        word1 represents string "ab" + "c" -&gt; "abc" <br />
        word2 represents string "a" + "bc" -&gt; "abc" <br />
        The strings are the same, so return true.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = ["a", "cb"], word2 = ["ab", "c"] <br />
        <strong>Output:</strong> false
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = ["abc", "d", "defg"], word2 =
        ["abcddefg"] <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= word1.length, word2.length &lt;= 10<sup>3</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= word1[i].length, word2[i].length &lt;= 10<sup>3</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= sum(word1[i].length), sum(word2[i].length) &lt;= 10
            <sup>3</sup>
          </code>
        </li>
        <li>
          <code>word1[i]</code> and <code>word2[i]</code> consist of lowercase
          letters.
        </li>
      </ul>
    </div>
  ),
  1848: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> <strong>(0-indexed)</strong>{" "}
        and two integers <code>target</code> and <code>start</code>, find an
        index <code>i</code> such that <code>nums[i] == target</code> and{" "}
        <code>abs(i - start)</code> is <strong>minimized</strong>. Note
        that&nbsp;<code>abs(x)</code>&nbsp;is the absolute value of{" "}
        <code>x</code>.
      </p>

      <p>
        Return <code>abs(i - start)</code>.
      </p>

      <p>
        It is <strong>guaranteed</strong> that <code>target</code> exists in{" "}
        <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5], target = 5, start = 3 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> nums[4] = 5 is the only value equal to
        target, so the answer is abs(4 - 3) = 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1], target = 1, start = 0 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> nums[0] = 1 is the only value equal to
        target, so the answer is abs(0 - 0) = 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start
        = 0<br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> Every value of nums is 1, but nums[0]
        minimizes abs(i - start), which is abs(0 - 0) = 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= start &lt; nums.length</code>
        </li>
        <li>
          <code>target</code> is in <code>nums</code>.
        </li>
      </ul>
    </div>
  ),
  2216: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code>. The array <code>nums</code> is{" "}
        <strong>beautiful</strong> if:
      </p>

      <ul>
        <li>
          <code>nums.length</code> is even.
        </li>
        <li>
          <code>nums[i] != nums[i + 1]</code> for all <code>i % 2 == 0</code>.
        </li>
      </ul>

      <p>Note that an empty array is considered beautiful.</p>

      <p>
        You can delete any number of elements from <code>nums</code>. When you
        delete an element, all the elements to the right of the deleted element
        will be <strong>shifted one unit to the left</strong> to fill the gap
        created and all the elements to the left of the deleted element will
        remain <strong>unchanged</strong>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of elements to delete from{" "}
        </em>
        <code>nums</code>
        <em> to make it </em>
        <em>beautiful.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,3,5] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> You can delete either <code>nums[0]</code>{" "}
        or <code>nums[1]</code> to make <code>nums</code> = [1,2,3,5] which is
        beautiful. It can be proven you need at least 1 deletion to make{" "}
        <code>nums</code> beautiful.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,2,3,3] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> You can delete <code>nums[0]</code> and{" "}
        <code>nums[5]</code> to make nums = [1,2,2,3] which is beautiful. It can
        be proven you need at least 2 deletions to make nums beautiful.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2644: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two integer arrays <code>nums</code> and{" "}
        <code>divisors</code>.
      </p>

      <p>
        The <strong>divisibility score</strong> of <code>divisors[i]</code> is
        the number of indices <code>j</code> such that <code>nums[j]</code> is
        divisible by <code>divisors[i]</code>.
      </p>

      <p>
        Return the integer <code>divisors[i]</code> with the{" "}
        <strong>maximum</strong> divisibility score. If multiple integers have
        the maximum score, return the smallest one.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            nums = [2,9,15,50], divisors = [5,3,7,2]
          </span>
        </p>
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          The divisibility score of <code>divisors[0]</code> is 2 since{" "}
          <code>nums[2]</code> and <code>nums[3]</code> are divisible by 5.
        </p>

        <p>
          The divisibility score of <code>divisors[1]</code> is 2 since{" "}
          <code>nums[1]</code> and <code>nums[2]</code> are divisible by 3.
        </p>

        <p>
          The divisibility score of <code>divisors[2]</code> is 0 since none of
          the numbers in <code>nums</code> is divisible by 7.
        </p>

        <p>
          The divisibility score of <code>divisors[3]</code> is 2 since{" "}
          <code>nums[0]</code> and <code>nums[3]</code> are divisible by 2.
        </p>
        <br />

        <p>
          As <code>divisors[0]</code>,&nbsp;<code>divisors[1]</code>, and{" "}
          <code>divisors[3]</code> have the same divisibility score, we return
          the smaller one which is <code>divisors[3]</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [4,7,9,3,9], divisors = [5,2,3]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          The divisibility score of <code>divisors[0]</code> is 0 since none of
          numbers in <code>nums</code> is divisible by 5.
        </p>

        <p>
          The divisibility score of <code>divisors[1]</code> is 1 since only{" "}
          <code>nums[0]</code> is divisible by 2.
        </p>

        <p>
          The divisibility score of <code>divisors[2]</code> is 3 since{" "}
          <code>nums[2]</code>, <code>nums[3]</code> and <code>nums[4]</code>{" "}
          are divisible by 3.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            nums = [20,14,21,10], divisors = [10,16,20]
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">10</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          The divisibility score of <code>divisors[0]</code> is 2 since{" "}
          <code>nums[0]</code> and <code>nums[3]</code> are divisible by 10.
        </p>

        <p>
          The divisibility score of <code>divisors[1]</code> is 0 since none of
          the numbers in <code>nums</code> is divisible by 16.
        </p>

        <p>
          The divisibility score of <code>divisors[2]</code> is 1 since{" "}
          <code>nums[0]</code> is divisible by 20.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length, divisors.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i], divisors[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2672: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code> representing an array{" "}
        <code>colors</code> of length <code>n</code> where all elements are set
        to 0's meaning <strong>uncolored</strong>. You are also given a 2D
        integer array <code>queries</code> where{" "}
        <code>
          queries[i] = [index<sub>i</sub>, color<sub>i</sub>]
        </code>
        . For the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        <strong>query</strong>:
      </p>

      <ul>
        <li>
          Set{" "}
          <code>
            colors[index<sub>i</sub>]
          </code>{" "}
          to{" "}
          <code>
            color<sub>i</sub>
          </code>
          .
        </li>
        <li>
          Count adjacent pairs in <code>colors</code> set to the same color
          (regardless of{" "}
          <code>
            color<sub>i</sub>
          </code>
          ).
        </li>
      </ul>

      <p>
        Return an array <code>answer</code> of the same length as{" "}
        <code>queries</code> where <code>answer[i]</code> is the answer to the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        query.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]]
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">[0,1,1,0,2]</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <ul>
          <li>
            Initially array colors = [0,0,0,0], where 0 denotes uncolored
            elements of the array.
          </li>
          <li>
            After the 1<sup>st</sup> query colors = [2,0,0,0]. The count of
            adjacent pairs with the same color is 0.
          </li>
          <li>
            After the 2<sup>nd</sup> query colors = [2,2,0,0]. The count of
            adjacent pairs with the same color is 1.
          </li>
          <li>
            After the 3<sup>rd</sup> query colors = [2,2,0,1]. The count of
            adjacent pairs with the same color is 1.
          </li>
          <li>
            After the 4<sup>th</sup> query colors = [2,1,0,1]. The count of
            adjacent pairs with the same color is 0.
          </li>
          <li>
            After the 5<sup>th</sup> query colors = [2,1,1,1]. The count of
            adjacent pairs with the same color is 2.
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">n = 1, queries = [[0,100000]]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">[0]</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          After the 1<sup>st</sup> query colors = [100000]. The count of
          adjacent pairs with the same color is 0.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= queries.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>queries[i].length&nbsp;== 2</code>
        </li>
        <li>
          <code>
            0 &lt;= index<sub>i</sub>&nbsp;&lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            1 &lt;=&nbsp; color<sub>i</sub>&nbsp;&lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2855: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array <code>nums</code> of
        length <code>n</code> containing <strong>distinct</strong> positive
        integers. Return{" "}
        <em>
          the <strong>minimum</strong> number of <strong>right shifts</strong>{" "}
          required to sort{" "}
        </em>
        <code>nums</code>
        <em> and </em>
        <code>-1</code>
        <em> if this is not possible.</em>
      </p>

      <p>
        A <strong>right shift</strong> is defined as shifting the element at
        index <code>i</code> to index <code>(i + 1) % n</code>, for all indices.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,4,5,1,2] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        After the first right shift, nums = [2,3,4,5,1]. <br />
        After the second right shift, nums = [1,2,3,4,5]. <br />
        Now nums is sorted; therefore the answer is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,5] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> nums is already sorted therefore, the
        answer is 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1,4] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> It's impossible to sort the array using
        right shifts.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
        <li>
          <code>nums</code> contains distinct integers.
        </li>
      </ul>
    </div>
  ),
  3065: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code>, and an integer <code>k</code>.
      </p>

      <p>
        In one operation, you can remove one occurrence of the smallest element
        of <code>nums</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of operations needed so that all
          elements of the array are greater than or equal to
        </em>{" "}
        <code>k</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,11,10,1,3], k = 10 <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> After one operation, nums becomes equal to
        [2, 11, 10, 3]. <br />
        After two operations, nums becomes equal to [11, 10, 3]. <br />
        After three operations, nums becomes equal to [11, 10]. <br />
        At this stage, all the elements of nums are greater than or equal to 10
        so we can stop. <br />
        It can be shown that 3 is the minimum number of operations needed so
        that all elements of the array are greater than or equal to 10.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,4,9], k = 1 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> All elements of the array are greater than
        or equal to 1 so we do not need to apply any operations on nums.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,4,9], k = 9 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> only a single element of nums is greater
        than or equal to 9 so we need to apply the operations 4 times on nums.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          The input is generated such that there is at least one index{" "}
          <code>i</code> such that <code>nums[i] &gt;= k</code>.
        </li>
      </ul>
    </div>
  ),
  3105: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of integers <code>nums</code>. Return{" "}
        <em>
          the length of the <strong>longest</strong>{" "}
          <span
            data-keyword="subarray-nonempty"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:r27e:"
                >
                  <div>subarray</div>
                </div>
              </div>
            </div>
          </span>{" "}
          of{" "}
        </em>
        <code>nums</code>
        <em>
          {" "}
          which is either{" "}
          <strong>
            <span
              data-keyword="strictly-increasing-array"
              class=" cursor-pointer relative text-dark-blue-s text-sm"
            >
              <div
                class="popover-wrapper inline-block"
                data-headlessui-state=""
              >
                <div>
                  <div
                    aria-expanded="false"
                    data-headlessui-state=""
                    id="headlessui-popover-button-:r27g:"
                  >
                    <div>strictly increasing</div>
                  </div>
                </div>
              </div>
            </span>
          </strong>{" "}
          or{" "}
          <strong>
            <span
              data-keyword="strictly-decreasing-array"
              class=" cursor-pointer relative text-dark-blue-s text-sm"
            >
              <div
                class="popover-wrapper inline-block"
                data-headlessui-state=""
              >
                <div>
                  <div
                    aria-expanded="false"
                    data-headlessui-state=""
                    id="headlessui-popover-button-:r27i:"
                  >
                    <div>strictly decreasing</div>
                  </div>
                </div>
              </div>
            </span>
          </strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,4,3,3,2]</span>
        </p>
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The strictly increasing subarrays of <code>nums</code> are{" "}
          <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[3]</code>
          , <code>[4]</code>, and <code>[1,4]</code>.
        </p>
        <br />

        <p>
          The strictly decreasing subarrays of <code>nums</code> are{" "}
          <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[3]</code>
          , <code>[4]</code>, <code>[3,2]</code>, and <code>[4,3]</code>.
        </p>
        <br />

        <p>
          Hence, we return <code>2</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [3,3,3,3]</span>
        </p>
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The strictly increasing subarrays of <code>nums</code> are{" "}
          <code>[3]</code>, <code>[3]</code>, <code>[3]</code>, and{" "}
          <code>[3]</code>.
        </p>
        <br />

        <p>
          The strictly decreasing subarrays of <code>nums</code> are{" "}
          <code>[3]</code>, <code>[3]</code>, <code>[3]</code>, and{" "}
          <code>[3]</code>.
        </p>
        <br />

        <p>
          Hence, we return <code>1</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [3,2,1]</span>
        </p>
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The strictly increasing subarrays of <code>nums</code> are{" "}
          <code>[3]</code>, <code>[2]</code>, and <code>[1]</code>.
        </p>
        <br />

        <p>
          The strictly decreasing subarrays of <code>nums</code> are{" "}
          <code>[3]</code>, <code>[2]</code>, <code>[1]</code>,{" "}
          <code>[3,2]</code>, <code>[2,1]</code>, and <code>[3,2,1]</code>.
        </p>
        <br />

        <p>
          Hence, we return <code>3</code>.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  3190: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>. In one operation, you
        can add or subtract 1 from <strong>any</strong> element of{" "}
        <code>nums</code>.
      </p>

      <p>
        Return the <strong>minimum</strong> number of operations to make all
        elements of <code>nums</code> divisible by 3.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,2,3,4]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>All array elements can be made divisible by 3 using 3 operations:</p>

        <ul>
          <li>Subtract 1 from 1.</li>
          <li>Add 1 to 2.</li>
          <li>Subtract 1 from 4.</li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [3,6,9]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  2165: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>num.</code> <strong>Rearrange</strong>{" "}
        the digits of <code>num</code> such that its value is{" "}
        <strong>minimized</strong> and it does not contain <strong>any</strong>{" "}
        leading zeros.
      </p>

      <p>
        Return <em>the rearranged number with minimal value</em>.
      </p>

      <p>
        Note that the sign of the number does not change after rearranging the
        digits.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 310 <br />
        <strong>Output:</strong> 103 <br />
        <strong>Explanation:</strong> The possible arrangements for the digits
        of 310 are 013, 031, 103, 130, 301, 310.
        <br /> The arrangement with the smallest value that does not contain any
        leading zeros is 103.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = -7605 <br />
        <strong>Output:</strong> -7650 <br />
        <strong>Explanation:</strong> Some possible arrangements for the digits
        of -7605 are -7650, -6705, -5076, -0567.
        <br /> The arrangement with the smallest value that does not contain any
        leading zeros is -7650.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            -10<sup>15</sup> &lt;= num &lt;= 10<sup>15</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2784: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>. We consider an array{" "}
        <strong>good </strong>if it is a permutation of an array{" "}
        <code>base[n]</code>.
      </p>

      <p>
        <code>base[n] = [1, 2, ..., n - 1, n, n] </code>(in other words, it is
        an array of length <code>n + 1</code> which contains <code>1</code> to{" "}
        <code>n - 1 </code>exactly once, plus two occurrences of <code>n</code>
        ). For example, <code>base[1] = [1, 1]</code> and
        <code> base[3] = [1, 2, 3, 3]</code>.
      </p>

      <p>
        Return <code>true</code>{" "}
        <em>if the given array is good, otherwise return</em>
        <em> </em>
        <code>false</code>.
      </p>

      <p>
        <strong>Note: </strong>A permutation of integers represents an
        arrangement of these numbers.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2, 1, 3] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Since the maximum element of the array is
        3, the only candidate n for which this array could be a permutation of
        base[n], is n = 3. However, base[3] has four elements but array nums has
        three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3].
        So the answer is false.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1, 3, 3, 2] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Since the maximum element of the array is
        3, the only candidate n for which this array could be a permutation of
        base[n], is n = 3. It can be seen that nums is a permutation of base[3]
        = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we
        reach base[3]). Therefore, the answer is true.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1, 1] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Since the maximum element of the array is
        1, the only candidate n for which this array could be a permutation of
        base[n], is n = 1. It can be seen that nums is a permutation of base[1]
        = [1, 1]. Therefore, the answer is true.
      </pre>

      <p>
        <strong class="example">Example 4:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3, 4, 4, 1, 2, 1] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Since the maximum element of the array is
        4, the only candidate n for which this array could be a permutation of
        base[n], is n = 4. However, base[4] has five elements but array nums has
        six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4,
        4]. So the answer is false.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= num[i] &lt;= 200</code>
        </li>
      </ul>
    </div>
  ),
  2785: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <strong>0-indexed</strong> string <code>s</code>,{" "}
        <strong>permute</strong> <code>s</code> to get a new string{" "}
        <code>t</code> such that:
      </p>

      <ul>
        <li>
          All consonants remain in their original places. More formally, if
          there is an index <code>i</code> with{" "}
          <code>0 &lt;= i &lt; s.length</code> such that <code>s[i]</code> is a
          consonant, then <code>t[i] = s[i]</code>.
        </li>
        <li>
          The vowels must be sorted in the <strong>nondecreasing</strong> order
          of their <strong>ASCII</strong> values. More formally, for pairs of
          indices <code>i</code>, <code>j</code> with{" "}
          <code>0 &lt;= i &lt; j &lt; s.length</code> such that{" "}
          <code>s[i]</code> and <code>s[j]</code> are vowels, then{" "}
          <code>t[i]</code> must not have a higher ASCII value than{" "}
          <code>t[j]</code>.
        </li>
      </ul>

      <p>
        Return <em>the resulting string</em>.
      </p>

      <p>
        The vowels are <code>'a'</code>, <code>'e'</code>, <code>'i'</code>,{" "}
        <code>'o'</code>, and <code>'u'</code>, and they can appear in lowercase
        or uppercase. Consonants comprise all letters that are not vowels.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "lEetcOde" <br />
        <strong>Output:</strong> "lEOtcede" <br />
        <strong>Explanation:</strong> 'E', 'O', and 'e' are the vowels in s;
        'l', 't', 'c', and 'd' are all consonants. The vowels are sorted
        according to their ASCII values, and the consonants remain in the same
        places.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "lYmpH" <br />
        <strong>Output:</strong> "lYmpH" <br />
        <strong>Explanation:</strong> There are no vowels in s (all characters
        in s are consonants), so we return "lYmpH".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists only of letters of the&nbsp;English
          alphabet&nbsp;in <strong>uppercase and lowercase</strong>.
        </li>
      </ul>
    </div>
  ),
  3024: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> of size <code>3</code> which can form the sides of a
        triangle.
      </p>

      <ul>
        <li>
          A triangle is called <strong>equilateral</strong> if it has all sides
          of equal length.
        </li>
        <li>
          A triangle is called <strong>isosceles</strong> if it has exactly two
          sides of equal length.
        </li>
        <li>
          A triangle is called <strong>scalene</strong> if all its sides are of
          different lengths.
        </li>
      </ul>

      <p>
        Return <em>a string representing</em>{" "}
        <em>the type of triangle that can be formed </em>
        <em>or </em>
        <code>"none"</code>
        <em>
          {" "}
          if it <strong>cannot</strong> form a triangle.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,3,3] <br />
        <strong>Output:</strong> "equilateral" <br />
        <strong>Explanation:</strong> Since all the sides are of equal length,
        therefore, it will form an equilateral triangle.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,4,5] <br />
        <strong>Output:</strong> "scalene"
        <br />
        <strong>Explanation:</strong> <br />
        nums[0] + nums[1] = 3 + 4 = 7, which is greater than nums[2] = 5. <br />
        nums[0] + nums[2] = 3 + 5 = 8, which is greater than nums[1] = 4.
        <br />
        nums[1] + nums[2] = 4 + 5 = 9, which is greater than nums[0] = 3. <br />
        Since the sum of the two sides is greater than the third side for all
        three cases, therefore, it can form a triangle.
        <br /> As all the sides are of different lengths, it will form a scalene
        triangle.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>nums.length == 3</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  3107: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and a{" "}
        <strong>non-negative</strong> integer <code>k</code>. In one operation,
        you can increase or decrease any element by 1.
      </p>

      <p>
        Return the <strong>minimum</strong> number of operations needed to make
        the <strong>median</strong> of <code>nums</code> <em>equal</em> to{" "}
        <code>k</code>.
      </p>

      <p>
        The median of an array is defined as the middle element of the array
        when it is sorted in non-decreasing order. If there are two choices for
        a median, the larger of the two values is taken.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [2,5,6,8,5], k = 4</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          We can subtract one from <code>nums[1]</code> and <code>nums[4]</code>{" "}
          to obtain <code>[2, 4, 6, 8, 4]</code>. The median of the resulting
          array is equal to <code>k</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [2,5,6,8,5], k = 7</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          We can add one to <code>nums[1]</code> twice and add one to{" "}
          <code>nums[2]</code> once to obtain <code>[2, 7, 7, 8, 5]</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,2,3,4,5,6], k = 4</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          The median of the array is already equal to <code>k</code>.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 2 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3111: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a 2D integer array <code>points</code>, where{" "}
        <code>
          points[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>
        . You are also given an integer <code>w</code>. Your task is to{" "}
        <strong>cover</strong> <strong>all</strong> the given points with
        rectangles.
      </p>

      <p>
        Each rectangle has its lower end at some point{" "}
        <code>
          (x<sub>1</sub>, 0)
        </code>{" "}
        and its upper end at some point{" "}
        <code>
          (x<sub>2</sub>, y<sub>2</sub>)
        </code>
        , where{" "}
        <code>
          x<sub>1</sub> &lt;= x<sub>2</sub>
        </code>
        ,{" "}
        <code>
          y<sub>2</sub> &gt;= 0
        </code>
        , and the condition{" "}
        <code>
          x<sub>2</sub> - x<sub>1</sub> &lt;= w
        </code>{" "}
        <strong>must</strong> be satisfied for each rectangle.
      </p>

      <p>
        A point is considered covered by a rectangle if it lies within or on the
        boundary of the rectangle.
      </p>

      <p>
        Return an integer denoting the <strong>minimum</strong> number of
        rectangles needed so that each point is covered by{" "}
        <strong>at least one</strong> rectangle<em>.</em>
      </p>

      <p>
        <strong>Note:</strong> A point may be covered by more than one
        rectangle.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-33-05.png"
          style={{ width: 205, height: 300 }}
        />
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            points = [[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]], w = 1
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>

        <p>
          <strong>Explanation: </strong>
        </p>

        <p>
          The image above shows one possible placement of rectangles to cover
          the points:
        </p>

        <ul>
          <li>
            A rectangle with a lower end at <code>(1, 0)</code> and its upper
            end at <code>(2, 8)</code>
          </li>
          <li>
            A rectangle with a lower end at <code>(3, 0)</code> and its upper
            end at <code>(4, 8)</code>
          </li>
        </ul>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-18-59-12.png"
          style={{ width: 260, height: 250 }}
        />
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]], w = 2
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>

        <p>
          <strong>Explanation: </strong>
        </p>

        <p>
          The image above shows one possible placement of rectangles to cover
          the points:
        </p>

        <ul>
          <li>
            A rectangle with a lower end at <code>(0, 0)</code> and its upper
            end at <code>(2, 2)</code>
          </li>
          <li>
            A rectangle with a lower end at <code>(3, 0)</code> and its upper
            end at <code>(5, 5)</code>
          </li>
          <li>
            A rectangle with a lower end at <code>(6, 0)</code> and its upper
            end at <code>(6, 6)</code>
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-24-03.png"
          style={{ height: 150, width: 127 }}
        />
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">points = [[2,3],[1,2]], w = 0</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>

        <p>
          <strong>Explanation: </strong>
        </p>

        <p>
          The image above shows one possible placement of rectangles to cover
          the points:
        </p>

        <ul>
          <li>
            A rectangle with a lower end at <code>(1, 0)</code> and its upper
            end at <code>(1, 2)</code>
          </li>
          <li>
            A rectangle with a lower end at <code>(2, 0)</code> and its upper
            end at <code>(2, 3)</code>
          </li>
        </ul>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= points.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>points[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= x<sub>i</sub> == points[i][0] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= y<sub>i</sub> == points[i][1] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= w &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          All pairs{" "}
          <code>
            (x<sub>i</sub>, y<sub>i</sub>)
          </code>{" "}
          are distinct.
        </li>
      </ul>
    </div>
  ),
  3169: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a positive integer <code>days</code> representing the
        total number of days an employee is available for work (starting from
        day 1). You are also given a 2D array <code>meetings</code> of size{" "}
        <code>n</code> where, <code>meetings[i] = [start_i, end_i]</code>{" "}
        represents the starting and ending days of meeting <code>i</code>{" "}
        (inclusive).
      </p>

      <p>
        Return the count of days when the employee is available for work but no
        meetings are scheduled.
      </p>

      <p>
        <strong>Note: </strong>The meetings may overlap.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            days = 10, meetings = [[5,7],[1,3],[9,10]]
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          There is no meeting scheduled on the 4<sup>th</sup> and 8<sup>th</sup>{" "}
          days.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">days = 5, meetings = [[2,4],[1,3]]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          There is no meeting scheduled on the 5<sup>th </sup>day.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">days = 6, meetings = [[1,6]]</span>
        </p>
        <p>
          <strong>Output:</strong> 0
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>Meetings are scheduled for all working days.</p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= days &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= meetings.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>meetings[i].length == 2</code>
        </li>
        <li>
          <code>
            <font face="monospace">
              1 &lt;= meetings[i][0] &lt;= meetings[i][1] &lt;= days
            </font>
          </code>
        </li>
      </ul>
    </div>
  ),
  89: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        An <strong>n-bit gray code sequence</strong> is a sequence of{" "}
        <code>
          2<sup>n</sup>
        </code>{" "}
        integers where:
      </p>

      <ul>
        <li>
          Every integer is in the <strong>inclusive</strong> range{" "}
          <code>
            [0, 2<sup>n</sup> - 1]
          </code>
          ,
        </li>
        <li>
          The first integer is <code>0</code>,
        </li>
        <li>
          An integer appears <strong>no more than once</strong> in the sequence,
        </li>
        <li>
          The binary representation of every pair of <strong>adjacent</strong>{" "}
          integers differs by <strong>exactly one bit</strong>, and
        </li>
        <li>
          The binary representation of the <strong>first</strong> and{" "}
          <strong>last</strong> integers differs by{" "}
          <strong>exactly one bit</strong>.
        </li>
      </ul>

      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          any valid <strong>n-bit gray code sequence</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> [0,1,3,2] <br />
        <strong>Explanation:</strong> <br />
        The binary representation of [0,1,3,2] is [00,01,11,10]. <br />- 0
        <u>0</u> and 0<u>1</u> differ by one bit
        <br />- <u>0</u>1 and <u>1</u>1 differ by one bit
        <br />- 1<u>1</u> and 1<u>0</u> differ by one bit
        <br />- <u>1</u>0 and <u>0</u>0 differ by one bit
        <br />
        [0,2,3,1] is also a valid gray code sequence, whose binary
        representation is [00,10,11,01].
        <br />- <u>0</u>0 and <u>1</u>0 differ by one bit
        <br />- 1<u>0</u> and 1<u>1</u> differ by one bit
        <br />- <u>1</u>1 and <u>0</u>1 differ by one bit
        <br />- 0<u>1</u> and 0<u>0</u> differ by one bit
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> [0,1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 16</code>
        </li>
      </ul>
    </div>
  ),
  90: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> that may contain duplicates,
        return <em>all possible</em>{" "}
        <span
          data-keyword="subset"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r35:"
              >
                <div>
                  <em>subsets</em>
                </div>
              </div>
            </div>
          </div>
        </span>
        <em> (the power set)</em>.
      </p>

      <p>
        The solution set <strong>must not</strong> contain duplicate subsets.
        Return the solution in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,2,2] <br />
        <strong>Output:</strong> [[],[1],[1,2],[1,2,2],[2],[2,2]]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [0] <br />
        <strong>Output:</strong> [[],[0]]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 10</code>
        </li>
        <li>
          <code>-10 &lt;= nums[i] &lt;= 10</code>
        </li>
      </ul>
    </div>
  ),
  93: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>valid IP address</strong> consists of exactly four integers
        separated by single dots. Each integer is between <code>0</code> and{" "}
        <code>255</code> (<strong>inclusive</strong>) and cannot have leading
        zeros.
      </p>

      <ul>
        <li>
          For example, <code>"0.1.2.201"</code> and <code>"192.168.1.1"</code>{" "}
          are <strong>valid</strong> IP addresses, but{" "}
          <code>"0.011.255.245"</code>, <code>"192.168.1.312"</code> and{" "}
          <code>"192.168@1.1"</code> are <strong>invalid</strong> IP addresses.
        </li>
      </ul>

      <p>
        Given a string <code>s</code> containing only digits, return{" "}
        <em>
          all possible valid IP addresses that can be formed by inserting dots
          into{" "}
        </em>
        <code>s</code>. You are <strong>not</strong> allowed to reorder or
        remove any digits in <code>s</code>. You may return the valid IP
        addresses in <strong>any</strong> order.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "25525511135" <br />
        <strong>Output:</strong> ["255.255.11.135","255.255.111.35"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "0000" <br />
        <strong>Output:</strong> ["0.0.0.0"]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "101023" <br />
        <strong>Output:</strong>{" "}
        ["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 20</code>
        </li>
        <li>
          <code>s</code> consists of digits only.
        </li>
      </ul>
    </div>
  ),
  126: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>transformation sequence</strong> from word{" "}
        <code>beginWord</code> to word <code>endWord</code> using a dictionary{" "}
        <code>wordList</code> is a sequence of words{" "}
        <code>
          beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s
          <sub>k</sub>
        </code>{" "}
        such that:
      </p>

      <ul>
        <li>Every adjacent pair of words differs by a single letter.</li>
        <li>
          Every{" "}
          <code>
            s<sub>i</sub>
          </code>{" "}
          for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note
          that <code>beginWord</code> does not need to be in{" "}
          <code>wordList</code>.
        </li>
        <li>
          <code>
            s<sub>k</sub> == endWord
          </code>
        </li>
      </ul>

      <p>
        Given two words, <code>beginWord</code> and <code>endWord</code>, and a
        dictionary <code>wordList</code>, return{" "}
        <em>
          all the <strong>shortest transformation sequences</strong> from
        </em>{" "}
        <code>beginWord</code> <em>to</em> <code>endWord</code>
        <em>
          , or an empty list if no such sequence exists. Each sequence should be
          returned as a list of the words{" "}
        </em>
        <code>
          [beginWord, s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub>]
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> beginWord = "hit", endWord = "cog", wordList =
        ["hot","dot","dog","lot","log","cog"] <br />
        <strong>Output:</strong>{" "}
        [["hit","hot","dot","dog","cog"],["hit","hot","lot","log","cog"]] <br />
        <strong>Explanation:</strong>&nbsp;There are 2 shortest transformation
        sequences:
        <br />
        "hit" -&gt; "hot" -&gt; "dot" -&gt; "dog" -&gt; "cog"
        <br />
        "hit" -&gt; "hot" -&gt; "lot" -&gt; "log" -&gt; "cog"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> beginWord = "hit", endWord = "cog", wordList =
        ["hot","dot","dog","lot","log"] <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> The endWord "cog" is not in wordList,
        therefore there is no valid transformation sequence.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= beginWord.length &lt;= 5</code>
        </li>
        <li>
          <code>endWord.length == beginWord.length</code>
        </li>
        <li>
          <code>1 &lt;= wordList.length &lt;= 500</code>
        </li>
        <li>
          <code>wordList[i].length == beginWord.length</code>
        </li>
        <li>
          <code>beginWord</code>, <code>endWord</code>, and{" "}
          <code>wordList[i]</code> consist of lowercase English letters.
        </li>
        <li>
          <code>beginWord != endWord</code>
        </li>
        <li>
          All the words in <code>wordList</code> are <strong>unique</strong>.
        </li>
        <li>
          The <strong>sum</strong> of all shortest transformation sequences does
          not exceed{" "}
          <code>
            10<sup>5</sup>
          </code>
          .
        </li>
      </ul>
    </div>
  ),
  131: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, partition <code>s</code> such that every{" "}
        <span
          data-keyword="substring-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rcn:"
              >
                <div>substring</div>
              </div>
            </div>
          </div>
        </span>{" "}
        of the partition is a{" "}
        <span
          data-keyword="palindrome-string"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rcp:"
              >
                <div>
                  <strong>palindrome</strong>
                </div>
              </div>
            </div>
          </div>
        </span>
        . Return <em>all possible palindrome partitioning of </em>
        <code>s</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = "aab" <br />
        <strong>Output:</strong> [["a","a","b"],["aa","b"]]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = "a" <br />
        <strong>Output:</strong> [["a"]]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 16</code>
        </li>
        <li>
          <code>s</code> contains only lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  140: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> and a dictionary of strings{" "}
        <code>wordDict</code>, add spaces in <code>s</code> to construct a
        sentence where each word is a valid dictionary word. Return all such
        possible sentences in <strong>any order</strong>.
      </p>

      <p>
        <strong>Note</strong> that the same word in the dictionary may be reused
        multiple times in the segmentation.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "catsanddog", wordDict =
        ["cat","cats","and","sand","dog"] <br />
        <strong>Output:</strong> ["cats and dog","cat sand dog"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "pineapplepenapple", wordDict =
        ["apple","pen","applepen","pine","pineapple"] <br />
        <strong>Output:</strong> ["pine apple pen apple","pineapple pen
        apple","pine applepen apple"] <br />
        <strong>Explanation:</strong> Note that you are allowed to reuse a
        dictionary word.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "catsandog", wordDict =
        ["cats","dog","sand","and","cat"] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 20</code>
        </li>
        <li>
          <code>1 &lt;= wordDict.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= wordDict[i].length &lt;= 10</code>
        </li>
        <li>
          <code>s</code> and <code>wordDict[i]</code> consist of only lowercase
          English letters.
        </li>
        <li>
          All the strings of <code>wordDict</code> are <strong>unique</strong>.
        </li>
        <li>
          Input is generated in a way that the length of the answer doesn't
          exceed&nbsp;10<sup>5</sup>.
        </li>
      </ul>
    </div>
  ),
  216: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Find all valid combinations of <code>k</code> numbers that sum up to{" "}
        <code>n</code> such that the following conditions are true:
      </p>

      <ul>
        <li>
          Only numbers <code>1</code> through <code>9</code> are used.
        </li>
        <li>
          Each number is used <strong>at most once</strong>.
        </li>
      </ul>

      <p>
        Return <em>a list of all possible valid combinations</em>. The list must
        not contain the same combination twice, and the combinations may be
        returned in any order.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> k = 3, n = 7<br />
        <strong>Output:</strong> [[1,2,4]]
        <br />
        <strong>Explanation:</strong>
        <br />
        1 + 2 + 4 = 7<br />
        There are no other valid combinations.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> k = 3, n = 9<br />
        <strong>Output:</strong> [[1,2,6],[1,3,5],[2,3,4]] <br />
        <strong>Explanation:</strong>
        <br />
        1 + 2 + 6 = 9<br />
        1 + 3 + 5 = 9<br />
        2 + 3 + 4 = 9<br />
        There are no other valid combinations.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> k = 4, n = 1 <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> There are no valid combinations. <br />
        Using 4 different numbers in the range [1,9], the smallest sum we can{" "}
        <br />
        get is 1+2+3+4 = 10 and since 10 &gt; 1, there are no valid combination.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= k &lt;= 9</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 60</code>
        </li>
      </ul>
    </div>
  ),
  254: (
    <div class="markdown-body div-width">
      <p>Numbers can be regarded as product of its factors. For example,</p>

      <pre>8 = 2 x 2 x 2; = 2 x 4.</pre>

      <p>
        Write a function that takes an integer <i>n</i> and return all possible
        combinations of its factors.
      </p>

      <p>
        <b>Note:</b>
      </p>

      <ol>
        <li>
          You may assume that <i>n</i> is always positive.
        </li>
        <li>
          Factors should be greater than 1 and less than <i>n</i>.
        </li>
      </ol>

      <p>
        <b>Example&nbsp;1: </b>
      </p>

      <pre>
        <strong>Input:</strong> <code>1</code> <br />
        <strong>Output:</strong> []
      </pre>

      <p>
        <b>Example&nbsp;2: </b>
      </p>

      <pre>
        <strong>Input:</strong> <code>37</code> <br />
        <strong>Output:</strong>[]
      </pre>

      <p>
        <b>Example&nbsp;3: </b>
      </p>

      <pre>
        <strong>Input:</strong> <code>12</code> <br />
        <strong>Output:</strong>
        {`[
      [2, 6],
      [2, 2, 3],
      [3, 4]
    ]`}
      </pre>

      <p>
        <b>Example&nbsp;4: </b>
      </p>

      <pre>
        <strong>Input:</strong> <code>32</code> <br />
        <strong>Output:</strong>
        {`[
      [2, 16],
      [2, 2, 8],
      [2, 2, 2, 4],
      [2, 2, 2, 2, 2],
      [2, 4, 4],
      [4, 8]
    ]`}
      </pre>
    </div>
  ),
  257: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>
          all root-to-leaf paths in <strong>any order</strong>
        </em>
        .
      </p>

      <p>
        A <strong>leaf</strong> is a node with no children.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg"
        style={{ width: 207, height: 293 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3,null,5] <br />
        <strong>Output:</strong> ["1-&gt;2-&gt;5","1-&gt;3"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> ["1"]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 100]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  267: (
    <div class="markdown-body div-width">
      <p>
        Given a string <code>s</code>, return all the palindromic permutations
        (without duplicates) of it. Return an empty list if no palindromic
        permutation could be form.
      </p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <code>"aabb"</code> <br />
        <strong>Output:</strong> <code>["abba", "baab"]</code>
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <code>"abc"</code> <br />
        <strong>Output:</strong> <code>[]</code>
      </pre>
    </div>
  ),
  301: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> that contains parentheses and letters,
        remove the minimum number of invalid parentheses to make the input
        string valid.
      </p>

      <p>
        Return{" "}
        <em>
          a list of <strong>unique strings</strong> that are valid with the
          minimum number of removals
        </em>
        . You may return the answer in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = {`"()())()"`} <br />
        <strong>Output:</strong> ["(())()","()()()"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = {`"(a)())()"`} <br />
        <strong>Output:</strong> ["(a())()","(a)()()"]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = {'")("'} <br />
        <strong>Output:</strong> [""]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 25</code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters and parentheses{" "}
          <code>'('</code> and <code>')'</code>.
        </li>
        <li>
          There will be at most <code>20</code> parentheses in <code>s</code>.
        </li>
      </ul>
    </div>
  ),
  473: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>matchsticks</code> where{" "}
        <code>matchsticks[i]</code> is the length of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        matchstick. You want to use <strong>all the matchsticks</strong> to make
        one square. You <strong>should not break</strong> any stick, but you can
        link them up, and each matchstick must be used{" "}
        <strong>exactly one time</strong>.
      </p>

      <p>
        Return <code>true</code> if you can make this square and{" "}
        <code>false</code> otherwise.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/09/matchsticks1-grid.jpg"
        style={{ width: 253, height: 253 }}
      />
      <pre>
        <strong>Input:</strong> matchsticks = [1,1,2,2,2] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> You can form a square with length 2, one
        side of the square came two sticks with length 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matchsticks = [3,3,3,3,4] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> You cannot find a way to form a square
        with all the matchsticks.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= matchsticks.length &lt;= 15</code>
        </li>
        <li>
          <code>
            1 &lt;= matchsticks[i] &lt;= 10<sup>8</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  526: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Suppose you have <code>n</code> integers labeled <code>1</code> through{" "}
        <code>n</code>. A permutation of those <code>n</code> integers{" "}
        <code>perm</code> (<strong>1-indexed</strong>) is considered a{" "}
        <strong>beautiful arrangement</strong> if for every <code>i</code> (
        <code>1 &lt;= i &lt;= n</code>), <strong>either</strong> of the
        following is true:
      </p>

      <ul>
        <li>
          <code>perm[i]</code> is divisible by <code>i</code>.
        </li>
        <li>
          <code>i</code> is divisible by <code>perm[i]</code>.
        </li>
      </ul>

      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          the <strong>number</strong> of the{" "}
          <strong>beautiful arrangements</strong> that you can construct
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> 2 <br />
        <b>Explanation:</b> <br />
        The first beautiful arrangement is [1,2]: <br />
        - perm[1] = 1 is divisible by i = 1 <br />
        - perm[2] = 2 is divisible by i = 2 <br />
        The second beautiful arrangement is [2,1]: <br />
        - perm[1] = 2 is divisible by i = 1 <br />- i = 2 is divisible by
        perm[2] = 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 15</code>
        </li>
      </ul>
    </div>
  ),
  494: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and an integer{" "}
        <code>target</code>.
      </p>

      <p>
        You want to build an <strong>expression</strong> out of nums by adding
        one of the symbols <code>'+'</code> and <code>'-'</code> before each
        integer in nums and then concatenate all the integers.
      </p>

      <ul>
        <li>
          For example, if <code>nums = [2, 1]</code>, you can add a{" "}
          <code>'+'</code> before <code>2</code> and a <code>'-'</code> before{" "}
          <code>1</code> and concatenate them to build the expression{" "}
          <code>"+2-1"</code>.
        </li>
      </ul>

      <p>
        Return the number of different <strong>expressions</strong> that you can
        build, which evaluates to <code>target</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1,1], target = 3 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> There are 5 ways to assign symbols to make
        the sum of nums be target 3. <br />
        {`-1 + 1 + 1 + 1 + 1 = 3
        +1 - 1 + 1 + 1 + 1 = 3
        +1 + 1 - 1 + 1 + 1 = 3
        +1 + 1 + 1 - 1 + 1 = 3
        +1 + 1 + 1 + 1 - 1 = 3`}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1], target = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 20</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= sum(nums[i]) &lt;= 1000</code>
        </li>
        <li>
          <code>-1000 &lt;= target &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  784: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, you&nbsp;can transform every letter
        individually to be lowercase or uppercase to create another string.
      </p>

      <p>
        Return <em>a list of all possible strings we could create</em>. Return
        the output in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "a1b2" <br />
        <strong>Output:</strong> ["a1b2","a1B2","A1b2","A1B2"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "3z4" <br />
        <strong>Output:</strong> ["3z4","3Z4"]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 12</code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters, uppercase
          English letters, and digits.
        </li>
      </ul>
    </div>
  ),
  797: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a directed acyclic graph (<strong>DAG</strong>) of <code>n</code>{" "}
        nodes labeled from <code>0</code> to <code>n - 1</code>, find all
        possible paths from node <code>0</code> to node <code>n - 1</code> and
        return them in <strong>any order</strong>.
      </p>

      <p>
        The graph is given as follows: <code>graph[i]</code> is a list of all
        nodes you can visit from node <code>i</code> (i.e., there is a directed
        edge from node <code>i</code> to node <code>graph[i][j]</code>).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg"
        style={{ width: 242, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[1,2],[3],[3],[]] <br />
        <strong>Output:</strong> [[0,1,3],[0,2,3]] <br />
        <strong>Explanation:</strong> There are two paths: 0 -&gt; 1 -&gt; 3 and
        0 -&gt; 2 -&gt; 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg"
        style={{ width: 423, height: 301 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[4,3,1],[3,2,4],[3],[4],[]] <br />
        <strong>Output:</strong> [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == graph.length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 15</code>
        </li>
        <li>
          <code>0 &lt;= graph[i][j] &lt; n</code>
        </li>
        <li>
          <code>graph[i][j] != i</code> (i.e., there will be no self-loops).
        </li>
        <li>
          All the elements of <code>graph[i]</code> are <strong>unique</strong>.
        </li>
        <li>
          The input graph is <strong>guaranteed</strong> to be a{" "}
          <strong>DAG</strong>.
        </li>
      </ul>
    </div>
  ),
  988: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>root</code> of a binary tree where each node has
        a value in the range <code>[0, 25]</code> representing the letters{" "}
        <code>'a'</code> to <code>'z'</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>lexicographically smallest</strong> string that starts at
          a leaf of this tree and ends at the root
        </em>
        .
      </p>

      <p>
        As a reminder, any shorter prefix of a string is{" "}
        <strong>lexicographically smaller</strong>.
      </p>

      <ul>
        <li>
          For example, <code>"ab"</code> is lexicographically smaller than{" "}
          <code>"aba"</code>.
        </li>
      </ul>

      <p>A leaf of a node is a node that has no children.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/01/30/tree1.png"
        style={{ width: 534, height: 358 }}
      />
      <pre>
        <strong>Input:</strong> root = [0,1,2,3,4,3,4] <br />
        <strong>Output:</strong> "dba"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/01/30/tree2.png"
        style={{ width: 534, height: 358 }}
      />
      <pre>
        <strong>Input:</strong> root = [25,1,3,1,3,0,2] <br />
        <strong>Output:</strong> "adz"
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/02/01/tree3.png"
        style={{ height: 490, width: 468 }}
      />
      <pre>
        <strong>Input:</strong> root = [2,2,1,null,1,0,null,0] <br />
        <strong>Output:</strong> "abc"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 8500]</code>
          .
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 25</code>
        </li>
      </ul>
    </div>
  ),
  996: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        An array is <strong>squareful</strong> if the sum of every pair of
        adjacent elements is a <strong>perfect square</strong>.
      </p>

      <p>
        Given an integer array nums, return{" "}
        <em>the number of permutations of </em>
        <code>nums</code>
        <em>
          {" "}
          that are <strong>squareful</strong>
        </em>
        .
      </p>

      <p>
        Two permutations <code>perm1</code> and <code>perm2</code> are different
        if there is some index <code>i</code> such that{" "}
        <code>perm1[i] != perm2[i]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,17,8] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> [1,8,17] and [17,8,1] are the valid
        permutations.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,2,2] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 12</code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1415: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>happy string</strong> is a string that:
      </p>

      <ul>
        <li>
          consists only of letters of the set <code>['a', 'b', 'c']</code>.
        </li>
        <li>
          <code>s[i] != s[i + 1]</code> for all values of <code>i</code> from{" "}
          <code>1</code> to <code>s.length - 1</code> (string is 1-indexed).
        </li>
      </ul>

      <p>
        For example, strings <strong>"abc", "ac", "b"</strong> and{" "}
        <strong>"abcbabcbcb"</strong> are all happy strings and strings{" "}
        <strong>"aa", "baa"</strong> and <strong>"ababbc"</strong> are not happy
        strings.
      </p>

      <p>
        Given two integers <code>n</code> and <code>k</code>, consider a list of
        all happy strings of length <code>n</code> sorted in lexicographical
        order.
      </p>

      <p>
        Return <em>the kth string</em> of this list or return an{" "}
        <strong>empty string</strong> if there are less than <code>k</code>{" "}
        happy strings of length <code>n</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1, k = 3 <br />
        <strong>Output:</strong> "c"
        <br />
        <strong>Explanation:</strong> The list ["a", "b", "c"] contains all
        happy strings of length 1. The third string is "c".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1, k = 4 <br />
        <strong>Output:</strong> ""
        <br />
        <strong>Explanation:</strong> There are only 3 happy strings of length
        1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, k = 9 <br />
        <strong>Output:</strong> "cab" <br />
        <strong>Explanation:</strong> There are 12 different happy string of
        length 3 ["aba", "abc", "aca", "acb", "bab", "bac", "bca", "bcb", "cab",
        "cac", "cba", "cbc"]. You will find the 9<sup>th</sup> string = "cab"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 10</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  2014: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> of length <code>n</code>, and an
        integer <code>k</code>. You are tasked to find the{" "}
        <strong>longest subsequence repeated</strong> <code>k</code> times in
        string <code>s</code>.
      </p>

      <p>
        A <strong>subsequence</strong> is a string that can be derived from
        another string by deleting some or no characters without changing the
        order of the remaining characters.
      </p>

      <p>
        A subsequence <code>seq</code> is <strong>repeated</strong>{" "}
        <code>k</code> times in the string <code>s</code> if{" "}
        <code>seq * k</code> is a subsequence of <code>s</code>, where{" "}
        <code>seq * k</code> represents a string constructed by concatenating{" "}
        <code>seq</code> <code>k</code> times.
      </p>

      <ul>
        <li>
          For example, <code>"bba"</code> is repeated <code>2</code> times in
          the string <code>"bababcba"</code>, because the string{" "}
          <code>"bbabba"</code>, constructed by concatenating <code>"bba"</code>{" "}
          <code>2</code> times, is a subsequence of the string{" "}
          <code>
            "
            <strong>
              <u>b</u>
            </strong>
            a
            <strong>
              <u>bab</u>
            </strong>
            c
            <strong>
              <u>ba</u>
            </strong>
            "
          </code>
          .
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>longest subsequence repeated</strong>{" "}
        </em>
        <code>k</code>
        <em> times in string </em>
        <code>s</code>
        <em>
          . If multiple such subsequences are found, return the{" "}
          <strong>lexicographically largest</strong> one. If there is no such
          subsequence, return an <strong>empty</strong> string
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt="example 1"
        src="https://assets.leetcode.com/uploads/2021/08/30/longest-subsequence-repeat-k-times.png"
        style={{ width: 457, height: 99 }}
      />
      <pre>
        <strong>Input:</strong> s = "letsleetcode", k = 2 <br />
        <strong>Output:</strong> "let" <br />
        <strong>Explanation:</strong> There are two longest subsequences
        repeated 2 times: "let" and "ete". <br />
        "let" is the lexicographically largest one.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "bb", k = 2 <br />
        <strong>Output:</strong> "b" <br />
        <strong>Explanation:</strong> The longest subsequence repeated 2 times
        is "b".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "ab", k = 2 <br />
        <strong>Output:</strong> "" <br />
        <strong>Explanation:</strong> There is no subsequence repeated 2 times.
        Empty string is returned.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == s.length</code>
        </li>
        <li>
          <code>2 &lt;= n, k &lt;= 2000</code>
        </li>
        <li>
          <code>2 &lt;= n &lt; k * 8</code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  2305: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>cookies</code>, where{" "}
        <code>cookies[i]</code> denotes the number of cookies in the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        bag. You are also given an integer <code>k</code> that denotes the
        number of children to distribute <strong>all</strong> the bags of
        cookies to. All the cookies in the same bag must go to the same child
        and cannot be split up.
      </p>

      <p>
        The <strong>unfairness</strong> of a distribution is defined as the{" "}
        <strong>maximum</strong> <strong>total</strong> cookies obtained by a
        single child in the distribution.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> unfairness of all distributions
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> cookies = [8,15,10,20,8], k = 2 <br />
        <strong>Output:</strong> 31 <br />
        <strong>Explanation:</strong> One optimal distribution is [8,15,8] and
        [10,20] <br />- The 1<sup>st</sup> child receives [8,15,8] which has a
        total of 8 + 15 + 8 = 31 cookies. <br />- The 2<sup>nd</sup> child
        receives [10,20] which has a total of 10 + 20 = 30 cookies.
        <br />
        The unfairness of the distribution is max(31,30) = 31.
        <br />
        It can be shown that there is no distribution with an unfairness less
        than 31.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> cookies = [6,1,3,2,2,4,1,2], k = 3<br />
        <strong>Output:</strong> 7<br />
        <strong>Explanation:</strong> One optimal distribution is [6,1],
        [3,2,2], and [4,1,2]
        <br />- The 1<sup>st</sup> child receives [6,1] which has a total of 6 +
        1 = 7 cookies.
        <br />- The 2<sup>nd</sup> child receives [3,2,2] which has a total of 3
        + 2 + 2 = 7 cookies.
        <br />- The 3<sup>rd</sup> child receives [4,1,2] which has a total of 4
        + 1 + 2 = 7 cookies.
        <br />
        The unfairness of the distribution is max(7,7,7) = 7.
        <br />
        It can be shown that there is no distribution with an unfairness less
        than 7.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= cookies.length &lt;= 8</code>
        </li>
        <li>
          <code>
            1 &lt;= cookies[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>2 &lt;= k &lt;= cookies.length</code>
        </li>
      </ul>
    </div>
  ),
  2664: (
    <article role="main" class="blog-post">
      <p>
        Given two positive integers <code>m</code> and <code>n</code> which are
        the height and width of a <strong>0-indexed</strong> 2D-array{" "}
        <code>board</code>, a pair of positive integers <code>(r, c)</code>{" "}
        which is the starting position of the knight on the board.
      </p>

      <p>
        Your task is to find an order of movements for the knight, in a manner
        that every cell of the&nbsp;<code>board</code> gets visited{" "}
        <strong>exactly</strong> once (the starting cell is considered visited
        and you <strong>shouldn't</strong> visit it again).
      </p>

      <p>
        Return <em>the array</em> <code>board</code>{" "}
        <em>
          in which the cells' values show the order of visiting the cell
          starting from 0 (the initial place of the knight).
        </em>
      </p>

      <p>
        Note that a <strong>knight</strong> can <strong>move</strong> from cell{" "}
        <code>(r1, c1)</code> to cell <code>(r2, c2)</code> if{" "}
        <code>0 &lt;= r2 &lt;= m - 1</code> and{" "}
        <code>0 &lt;= c2 &lt;= n - 1</code> and{" "}
        <code>min(abs(r1 - r2), abs(c1 - c2)) = 1</code> and{" "}
        <code>max(abs(r1 - r2), abs(c1 - c2)) = 2</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> m = 1, n = 1, r = 0, c = 0 <br />
        <strong>Output:</strong> [[0]] <br />
        <strong>Explanation:</strong> There is only 1 cell and the knight is
        initially on it so there is only a 0 inside the 1x1 grid.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> m = 3, n = 4, r = 0, c = 0 <br />
        <strong>Output:</strong> [[0,3,6,9],[11,8,1,4],[2,5,10,7]] <br />
        <strong>Explanation:</strong> By the following order of movements we can
        visit the entire board. <br />
        (0,0)-&gt;(1,2)-&gt;(2,0)-&gt;(0,1)-&gt;(1,3)-&gt;(2,1)-&gt;(0,2)-&gt;(2,3)-&gt;(1,1)-&gt;(0,3)-&gt;(2,2)-&gt;(1,0)
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= m,&nbsp;n &lt;= 5</code>
        </li>
        <li>
          <code>0 &lt;= r &lt;= m - 1</code>
        </li>
        <li>
          <code>0 &lt;= c &lt;= n - 1</code>
        </li>
        <li>
          The inputs will be generated such that there exists at least
          one&nbsp;possible order of movements with the given condition
        </li>
      </ul>
    </article>
  ),
  6: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The string <code>"PAYPALISHIRING"</code> is written in a zigzag pattern
        on a given number of rows like this: (you may want to display this
        pattern in a fixed font for better legibility)
      </p>

      <pre>
        {`P   A   H   N
    A P L S I I G
    Y   I   R`}
      </pre>

      <p>
        And then read line by line: <code>"PAHNAPLSIIGYIR"</code>
      </p>

      <p>
        Write the code that will take a string and make this conversion given a
        number of rows:
      </p>

      <pre>string convert(string s, int numRows);</pre>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "PAYPALISHIRING", numRows = 3 <br />
        <strong>Output:</strong> "PAHNAPLSIIGYIR"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "PAYPALISHIRING", numRows = 4 <br />
        <strong>Output:</strong> "PINALSIGYAHRPI" <br />
        <strong>Explanation:</strong>
        {`P     I    N
    A   L S  I G
    Y A   H R
    P     I`}
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "A", numRows = 1 <br />
        <strong>Output:</strong> "A"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>s</code> consists of English letters (lower-case and
          upper-case), <code>','</code> and <code>'.'</code>.
        </li>
        <li>
          <code>1 &lt;= numRows &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  8: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Implement the <code>myAtoi(string s)</code> function, which converts a
        string to a 32-bit signed integer.
      </p>

      <p>
        The algorithm for <code>myAtoi(string s)</code> is as follows:
      </p>

      <ul>
        <li>
          <strong>Whitespace</strong>: Ignore any leading whitespace (
          <code>" "</code>).
        </li>
        <li>
          <strong>Signedness</strong>: Determine the sign by checking if the
          next character is <code>'-'</code> or <code>'+'</code>, assuming
          positivity if neither present.
        </li>
        <li>
          <strong>Conversion</strong>: Read the integer by skipping leading
          zeros&nbsp;until a non-digit character is encountered or the end of
          the string is reached. If no digits were read, then the result is 0.
        </li>
        <li>
          <strong>Rounding</strong>: If the integer is out of the 32-bit signed
          integer range{" "}
          <code>
            [-2<sup>31</sup>, 2<sup>31</sup> - 1]
          </code>
          , then round the integer to remain in the range. Specifically,
          integers less than{" "}
          <code>
            -2<sup>31</sup>
          </code>{" "}
          should be rounded to{" "}
          <code>
            -2<sup>31</sup>
          </code>
          , and integers greater than{" "}
          <code>
            2<sup>31</sup> - 1
          </code>{" "}
          should be rounded to{" "}
          <code>
            2<sup>31</sup> - 1
          </code>
          .
        </li>
      </ul>

      <p>Return the integer as the final result.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "42"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">42</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <pre>
          {`The underlined characters are what is read in and the caret is the current reader position. 
      Step 1: "42" (no characters read because there is no leading whitespace)
               ^
      Step 2: "42" (no characters read because there is neither a '-' nor '+')
               ^
      Step 3: "<u>42</u>" ("42" is read in)
                 ^`}
        </pre>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = " -042"</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">-42</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <pre>
          {`Step 1: "<u>   </u>-042" (leading whitespace is read and ignored)
                  ^
      Step 2: "   <u>-</u>042" ('-' is read, so the result should be negative)
                   ^
      Step 3: "   -<u>042</u>" ("042" is read in, leading zeros ignored in the result)
                     ^`}
        </pre>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "1337c0d3"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">1337</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <pre>
          {`Step 1: "1337c0d3" (no characters read because there is no leading whitespace)
               ^
      Step 2: "1337c0d3" (no characters read because there is neither a '-' nor '+')
               ^
      Step 3: "<u>1337</u>c0d3" ("1337" is read in; reading stops because the next character is a non-digit)
                   ^`}
        </pre>
      </div>

      <p>
        <strong class="example">Example 4:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "0-1"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <pre>
          {`Step 1: "0-1" (no characters read because there is no leading whitespace)
               ^
      Step 2: "0-1" (no characters read because there is neither a '-' nor '+')
               ^
      Step 3: "<u>0</u>-1" ("0" is read in; reading stops because the next character is a non-digit)
                ^`}
        </pre>
      </div>

      <p>
        <strong class="example">Example 5:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "words and 987"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>Reading stops at the first non-digit character 'w'.</p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= s.length &lt;= 200</code>
        </li>
        <li>
          <code>s</code> consists of English letters (lower-case and
          upper-case), digits (<code>0-9</code>), <code>' '</code>,{" "}
          <code>'+'</code>, <code>'-'</code>, and <code>'.'</code>.
        </li>
      </ul>
    </div>
  ),
  14: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Write a function to find the longest common prefix string amongst an
        array of strings.
      </p>

      <p>
        If there is no common prefix, return an empty string <code>""</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> strs = ["flower","flow","flight"] <br />
        <strong>Output:</strong> "fl"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> strs = ["dog","racecar","car"] <br />
        <strong>Output:</strong> "" <br />
        <strong>Explanation:</strong> There is no common prefix among the input
        strings.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= strs.length &lt;= 200</code>
        </li>
        <li>
          <code>0 &lt;= strs[i].length &lt;= 200</code>
        </li>
        <li>
          <code>strs[i]</code> consists of only lowercase English letters if it
          is non-empty.
        </li>
      </ul>
    </div>
  ),
  38: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>count-and-say</strong> sequence is a sequence of digit
        strings defined by the recursive formula:
      </p>
      <ul>
        <li>
          <code>countAndSay(1) = "1"</code>
        </li>
        <li>
          <code>countAndSay(n)</code> is the run-length encoding of{" "}
          <code>countAndSay(n - 1)</code>.
        </li>
      </ul>
      <p>
        <a
          href="http://en.wikipedia.org/wiki/Run-length_encoding"
          target="_blank"
          rel="noreferrer"
        >
          Run-length encoding
        </a>{" "}
        (RLE) is a string compression method that works by replacing consecutive
        identical characters (repeated 2 or more times) with the concatenation
        of the character and the number marking the count of the characters
        (length of the run). For example, to compress the string{" "}
        <code>"3322251"</code> we replace <code>"33"</code> with{" "}
        <code>"23"</code>, replace <code>"222"</code> with <code>"32"</code>,
        replace <code>"5"</code> with <code>"15"</code> and replace{" "}
        <code>"1"</code> with <code>"11"</code>. Thus the compressed string
        becomes <code>"23321511"</code>.
      </p>
      <p>
        Given a positive integer <code>n</code>, return <em>the </em>
        <code>
          n<sup>th</sup>
        </code>
        <em>
          {" "}
          element of the <strong>count-and-say</strong> sequence
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 4</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"1211"</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <pre>
          {`countAndSay(1) = "1"
        countAndSay(2) = RLE of "1" = "11"
        countAndSay(3) = RLE of "11" = "21"
        countAndSay(4) = RLE of "21" = "1211"`}
        </pre>
      </div>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 1</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">"1"</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>This is the base case.</p>
      </div>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= n &lt;= 30</code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you solve it iteratively?
    </div>
  ),
  58: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> consisting of words and spaces, return{" "}
        <em>
          the length of the <strong>last</strong> word in the string.
        </em>
      </p>

      <p>
        A <strong>word</strong> is a maximal{" "}
        <span
          data-keyword="substring-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r2tu:"
              >
                <div>substring</div>
              </div>
            </div>
          </div>
        </span>{" "}
        consisting of non-space characters only.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "Hello World" <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The last word is "World" with length 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = " fly me to the moon " <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The last word is "moon" with length 4.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "luffy is still joyboy" <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The last word is "joyboy" with length 6.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of only English letters and spaces{" "}
          <code>' '</code>.
        </li>
        <li>
          There will be at least one word in <code>s</code>.
        </li>
      </ul>
    </div>
  ),
  65: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, return whether <code>s</code> is a{" "}
        <strong>valid number</strong>.<br />
        For example, all the following are valid numbers:{" "}
        <code>
          "2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90E3", "3e+7",
          "+6e-1", "53.5e93", "-123.456e789"
        </code>
        , while the following are not valid numbers:{" "}
        <code>"abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"</code>
        .
      </p>

      <p>
        Formally, a&nbsp;<strong>valid number</strong> is defined using one of
        the following definitions:
      </p>

      <ul>
        <li>
          An <strong>integer number</strong> followed by an{" "}
          <strong>optional exponent</strong>.
        </li>
        <li>
          A <strong>decimal number</strong> followed by an{" "}
          <strong>optional exponent</strong>.
        </li>
      </ul>

      <p>
        An <strong>integer number</strong> is defined with an{" "}
        <strong>optional sign</strong> <code>'-'</code> or <code>'+'</code>{" "}
        followed by <strong>digits</strong>.
      </p>

      <p>
        A <strong>decimal number</strong> is defined with an{" "}
        <strong>optional sign</strong> <code>'-'</code> or <code>'+'</code>{" "}
        followed by one of the following definitions:
      </p>

      <ul>
        <li>
          <strong>Digits</strong> followed by a <strong>dot</strong>{" "}
          <code>'.'</code>.
        </li>
        <li>
          <strong>Digits</strong> followed by a <strong>dot</strong>{" "}
          <code>'.'</code> followed by <strong>digits</strong>.
        </li>
        <li>
          A <strong>dot</strong> <code>'.'</code> followed by{" "}
          <strong>digits</strong>.
        </li>
      </ul>

      <p>
        An <strong>exponent</strong> is defined with an{" "}
        <strong>exponent notation</strong> <code>'e'</code> or <code>'E'</code>{" "}
        followed by an <strong>integer number</strong>.
      </p>

      <p>
        The <strong>digits</strong> are defined as one or more digits.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "0"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">true</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "e"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">false</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "."</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">false</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 20</code>
        </li>
        <li>
          <code>s</code> consists of only English letters (both uppercase and
          lowercase), digits (<code>0-9</code>), plus <code>'+'</code>, minus{" "}
          <code>'-'</code>, or dot <code>'.'</code>.
        </li>
      </ul>
    </div>
  ),
  171: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>columnTitle</code> that represents the column title
        as appears in an Excel sheet, return{" "}
        <em>its corresponding column number</em>.
      </p>

      <p>For example:</p>

      <pre>
        {`A -&gt; 1
        B -&gt; 2
        C -&gt; 3
        ...
        Z -&gt; 26
        AA -&gt; 27
        AB -&gt; 28 
        ...`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> columnTitle = "A" <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> columnTitle = "AB" <br />
        <strong>Output:</strong> 28
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> columnTitle = "ZY" <br />
        <strong>Output:</strong> 701
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= columnTitle.length &lt;= 7</code>
        </li>
        <li>
          <code>columnTitle</code> consists only of uppercase English letters.
        </li>
        <li>
          <code>columnTitle</code> is in the range <code>["A", "FXSHRXW"]</code>
          .
        </li>
      </ul>
    </div>
  ),
  243: (
    <div class="markdown-body div-width">
      <p>
        Given a list of words and two words <em>word1</em> and <em>word2</em>,
        return the shortest distance between these two words in the list.
      </p>
      <p>
        <strong>Example:</strong>
        <br />
        Assume that words ={" "}
        <code>["practice", "makes", "perfect", "coding", "makes"]</code>.
      </p>{" "}
      <br />
      <pre>
        <b>Input:</b> <em>word1</em> = <code>“coding”</code>, <em>word2</em> ={" "}
        <code>“practice”</code>
        <br />
        <b>Output:</b> 3
      </pre>
      <pre>
        <b>Input:</b> <em>word1</em> = <code>"makes"</code>, <em>word2</em> ={" "}
        <code>"coding"</code>
        <br />
        <b>Output:</b> 1
      </pre>
      <p>
        <strong>Note:</strong>
        <br />
        You may assume that <em>word1</em> <strong>does not equal to</strong>{" "}
        <em>word2</em>, and
        <em>word1</em> and <em>word2</em> are both in the list.
      </p>
    </div>
  ),
  244: (
    <div class="markdown-body div-width">
      <p>
        Design a class which receives a list of words in the constructor, and
        implements a method that takes two words <em>word1</em> and{" "}
        <em>word2</em> and return the shortest distance between these two words
        in the list. Your method will be called <em>repeatedly</em> many times
        with different parameters.&nbsp;
      </p>

      <p>
        <strong>Example:</strong>
        <br />
        Assume that words ={" "}
        <code>["practice", "makes", "perfect", "coding", "makes"]</code>.
      </p>

      <pre>
        <b>Input:</b> <em>word1</em> = <code>“coding”</code>, <em>word2</em> ={" "}
        <code>“practice”</code> <br />
        <b>Output:</b> 3
      </pre>

      <pre>
        <b>Input:</b> <em>word1</em> = <code>"makes"</code>, <em>word2</em> ={" "}
        <code>"coding"</code> <br />
        <b>Output:</b> 1
      </pre>

      <p>
        <strong>Note:</strong>
        <br />
        You may assume that <em>word1</em> <strong>does not equal to</strong>{" "}
        <em>word2</em>, and
        <em>word1</em> and <em>word2</em> are both in the list.
      </p>
    </div>
  ),
  245: (
    <div class="markdown-body div-width">
      <p>
        Given a list of words and two words <em>word1</em> and <em>word2</em>,
        return the shortest distance between these two words in the list.
      </p>

      <p>
        <em>word1</em> and <em>word2</em> may be the same and they represent two
        individual words in the list.
      </p>

      <p>
        <strong>Example:</strong>
        <br />
        Assume that words ={" "}
        <code>["practice", "makes", "perfect", "coding", "makes"]</code>.
      </p>

      <pre>
        <b>Input:</b> <em>word1</em> = <code>“makes”</code>, <em>word2</em> ={" "}
        <code>“coding”</code> <br />
        <b>Output:</b> 1
      </pre>

      <pre>
        <b>Input:</b> <em>word1</em> = <code>"makes"</code>, <em>word2</em> ={" "}
        <code>"makes"</code> <br />
        <b>Output:</b> 3
      </pre>

      <p>
        <strong>Note:</strong>
        <br />
        You may assume <em>word1</em> and <em>word2</em> are both in the list.
      </p>
    </div>
  ),
  246: (
    <div class="markdown-body div-width">
      <p>
        A strobogrammatic number is a number that looks the same when rotated
        180 degrees (looked at upside down).
      </p>

      <p>
        Write a function to determine if a number is strobogrammatic. The number
        is represented as a string.
      </p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        <b>Input:</b> "69" <br />
        <b>Output:</b> true
      </pre>

      <p>
        <b>Example 2:</b>
      </p>

      <pre>
        <b>Input:</b> "88" <br />
        <b>Output:</b> true
      </pre>

      <p>
        <b>Example 3:</b>
      </p>

      <pre>
        <b>Input:</b> "962" <br />
        <b>Output:</b> false
      </pre>
    </div>
  ),
  248: (
    <div class="markdown-body div-width">
      <p>
        A strobogrammatic number is a number that looks the same when rotated
        180 degrees (looked at upside down).
      </p>

      <p>
        Write a function to count the total strobogrammatic numbers that exist
        in the range of low &lt;= num &lt;= high.
      </p>

      <p>
        <b>Example:</b>
      </p>

      <pre>
        <b>Input:</b> low = "50", high = "100" <br />
        <b>Output:</b> 3 <br />
        <strong>Explanation: </strong>69, 88, and 96 are three strobogrammatic
        numbers.
      </pre>

      <p>
        <strong>Note:</strong>
        <br />
        Because the range might be a large number, the <em>low</em> and{" "}
        <em>high</em> numbers are represented as string.
      </p>
    </div>
  ),
  293: (
    <div class="markdown-body div-width">
      <p>
        You are playing the following Flip Game with your friend: Given a string
        that contains only these two characters: <code>+</code> and{" "}
        <code>-</code>, you and your friend take turns to flip two{" "}
        <b>consecutive</b> <code>"++"</code> into <code>"--"</code>. The game
        ends when a person can no longer make a move and therefore the other
        person will be the winner.
      </p>

      <p>
        Write a function to compute all possible states of the string after one
        valid move.
      </p>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <code>s = "++++"</code> <br />
        <strong>Output:</strong>
        {`[
      "--++",
      "+--+",
      "++--"
    ]`}
      </pre>

      <p>
        <strong>Note: </strong>If there is no valid move, return an empty list{" "}
        <code>[]</code>.
      </p>
    </div>
  ),
  415: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two non-negative integers, <code>num1</code> and <code>num2</code>{" "}
        represented as string, return <em>the sum of</em> <code>num1</code>{" "}
        <em>and</em> <code>num2</code> <em>as a string</em>.
      </p>

      <p>
        You must solve the problem without using any built-in library for
        handling large integers (such as <code>BigInteger</code>). You must also
        not convert the inputs to integers directly.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num1 = "11", num2 = "123" <br />
        <strong>Output:</strong> "134"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num1 = "456", num2 = "77" <br />
        <strong>Output:</strong> "533"
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num1 = "0", num2 = "0" <br />
        <strong>Output:</strong> "0"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= num1.length, num2.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>num1</code> and <code>num2</code> consist of only digits.
        </li>
        <li>
          <code>num1</code> and <code>num2</code> don't have any leading zeros
          except for the zero itself.
        </li>
      </ul>
    </div>
  ),
  434: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, return{" "}
        <em>the number of segments in the string</em>.
      </p>

      <p>
        A <strong>segment</strong> is defined to be a contiguous sequence of{" "}
        <strong>non-space characters</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "Hello, my name is John" <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The five segments are ["Hello,", "my",
        "name", "is", "John"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "Hello" <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= s.length &lt;= 300</code>
        </li>
        <li>
          <code>s</code> consists of lowercase and uppercase English letters,
          digits, or one of the following characters{" "}
          <code>"!@#$%^&amp;*()_+-=',.:"</code>.
        </li>
        <li>
          The only space character in <code>s</code> is <code>' '</code>.
        </li>
      </ul>
    </div>
  ),
  468: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>queryIP</code>, return <code>"IPv4"</code> if IP is
        a valid IPv4 address, <code>"IPv6"</code> if IP is a valid IPv6 address
        or <code>"Neither"</code> if IP is not a correct IP of any type.
      </p>

      <p>
        <strong>A valid IPv4</strong> address is an IP in the form{" "}
        <code>
          "x<sub>1</sub>.x<sub>2</sub>.x<sub>3</sub>.x<sub>4</sub>"
        </code>{" "}
        where{" "}
        <code>
          0 &lt;= x<sub>i</sub> &lt;= 255
        </code>{" "}
        and{" "}
        <code>
          x<sub>i</sub>
        </code>{" "}
        <strong>cannot contain</strong> leading zeros. For example,{" "}
        <code>"192.168.1.1"</code> and <code>"192.168.1.0"</code> are valid IPv4
        addresses while <code>"192.168.01.1"</code>, <code>"192.168.1.00"</code>
        , and <code>"192.168@1.1"</code> are invalid IPv4 addresses.
      </p>

      <p>
        <strong>A valid IPv6</strong> address is an IP in the form{" "}
        <code>
          "x<sub>1</sub>:x<sub>2</sub>:x<sub>3</sub>:x<sub>4</sub>:x<sub>5</sub>
          :x<sub>6</sub>:x<sub>7</sub>:x<sub>8</sub>"
        </code>{" "}
        where:
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= x<sub>i</sub>.length &lt;= 4
          </code>
        </li>
        <li>
          <code>
            x<sub>i</sub>
          </code>{" "}
          is a <strong>hexadecimal string</strong> which may contain digits,
          lowercase English letter (<code>'a'</code> to <code>'f'</code>) and
          upper-case English letters (<code>'A'</code> to <code>'F'</code>).
        </li>
        <li>
          Leading zeros are allowed in{" "}
          <code>
            x<sub>i</sub>
          </code>
          .
        </li>
      </ul>

      <p>
        For example, "<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334"</code> and
        "<code>2001:db8:85a3:0:0:8A2E:0370:7334"</code> are valid IPv6
        addresses, while "<code>2001:0db8:85a3::8A2E:037j:7334"</code> and "
        <code>02001:0db8:85a3:0000:0000:8a2e:0370:7334"</code> are invalid IPv6
        addresses.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queryIP = "172.16.254.1" <br />
        <strong>Output:</strong> "IPv4" <br />
        <strong>Explanation:</strong> This is a valid IPv4 address, return
        "IPv4".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queryIP = "2001:0db8:85a3:0:0:8A2E:0370:7334"{" "}
        <br />
        <strong>Output:</strong> "IPv6" <br />
        <strong>Explanation:</strong> This is a valid IPv6 address, return
        "IPv6".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queryIP = "256.256.256.256" <br />
        <strong>Output:</strong> "Neither" <br />
        <strong>Explanation:</strong> This is neither a IPv4 address nor a IPv6
        address.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>queryIP</code> consists only of English letters, digits and the
          characters <code>'.'</code> and <code>':'</code>.
        </li>
      </ul>
    </div>
  ),
  482: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a license key represented as a string <code>s</code> that
        consists of only alphanumeric characters and dashes. The string is
        separated into <code>n + 1</code> groups by <code>n</code> dashes. You
        are also given an integer <code>k</code>.
      </p>

      <p>
        We want to reformat the string <code>s</code> such that each group
        contains exactly <code>k</code> characters, except for the first group,
        which could be shorter than <code>k</code> but still must contain at
        least one character. Furthermore, there must be a dash inserted between
        two groups, and you should convert all lowercase letters to uppercase.
      </p>

      <p>
        Return <em>the reformatted license key</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "5F3Z-2e-9-w", k = 4 <br />
        <strong>Output:</strong> "5F3Z-2E9W" <br />
        <strong>Explanation:</strong> The string s has been split into two
        parts, each part has 4 characters. <br />
        Note that the two extra dashes are not needed and can be removed.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "2-5g-3-J", k = 2 <br />
        <strong>Output:</strong> "2-5G-3J" <br />
        <strong>Explanation:</strong> The string s has been split into three
        parts, each part has 2 characters except the first part as it could be
        shorter as mentioned above.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of English letters, digits, and dashes{" "}
          <code>'-'</code>.
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  520: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        We define the usage of capitals in a word to be right when one of the
        following cases holds:
      </p>

      <ul>
        <li>
          All letters in this word are capitals, like <code>"USA"</code>.
        </li>
        <li>
          All letters in this word are not capitals, like{" "}
          <code>"leetcode"</code>.
        </li>
        <li>
          Only the first letter in this word is capital, like{" "}
          <code>"Google"</code>.
        </li>
      </ul>

      <p>
        Given a string <code>word</code>, return <code>true</code> if the usage
        of capitals in it is right.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> word = "USA" <br />
        <strong>Output:</strong> true
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> word = "FlaG" <br />
        <strong>Output:</strong> false
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= word.length &lt;= 100</code>
        </li>
        <li>
          <code>word</code> consists of lowercase and uppercase English letters.
        </li>
      </ul>
    </div>
  ),
  521: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>a</code> and <code>b</code>, return{" "}
        <em>
          the length of the <strong>longest uncommon subsequence</strong>{" "}
          between{" "}
        </em>
        <code>a</code> <em>and</em> <code>b</code>.{" "}
        <em>If no such uncommon subsequence exists, return</em> <code>-1</code>
        <em>.</em>
      </p>

      <p>
        An <strong>uncommon subsequence</strong> between two strings is a string
        that is a{" "}
        <strong>
          <span
            data-keyword="subsequence-string"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:rrj:"
                >
                  <div>subsequence</div>
                </div>
              </div>
            </div>
          </span>{" "}
          of exactly one of them
        </strong>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = "aba", b = "cdc" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> One longest uncommon subsequence is "aba"
        because "aba" is a subsequence of "aba" but not "cdc".
        <br /> Note that "cdc" is also a longest uncommon subsequence.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = "aaa", b = "bbb" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong>&nbsp;The longest uncommon subsequences are
        "aaa" and "bbb".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = "aaa", b = "aaa" <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong>&nbsp;Every subsequence of string a is also
        a subsequence of string b. Similarly, every subsequence of string b is
        also a subsequence of string a. So the answer would be <code>-1</code>.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= a.length, b.length &lt;= 100</code>
        </li>
        <li>
          <code>a</code> and <code>b</code> consist of lower-case English
          letters.
        </li>
      </ul>
    </div>
  ),
  680: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, return <code>true</code> <em>if the </em>
        <code>s</code>
        <em>
          {" "}
          can be palindrome after deleting <strong>at most one</strong>{" "}
          character from it
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aba" <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abca" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> You could delete the character 'c'.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abc" <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  709: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, return{" "}
        <em>
          the string after replacing every uppercase letter with the same
          lowercase letter
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "Hello" <br />
        <strong>Output:</strong> "hello"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "here" <br />
        <strong>Output:</strong> "here"
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "LOVELY" <br />
        <strong>Output:</strong> "lovely"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code> consists of printable ASCII characters.
        </li>
      </ul>
    </div>
  ),
  1078: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>first</code> and <code>second</code>, consider
        occurrences in some text of the form <code>"first second third"</code>,
        where <code>second</code> comes immediately after <code>first</code>,
        and <code>third</code> comes immediately after <code>second</code>.
      </p>

      <p>
        Return <em>an array of all the words</em> <code>third</code>{" "}
        <em>for each occurrence of</em> <code>"first second third"</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> text = "alice is a good girl she is a good
        student", first = "a", second = "good" <br />
        <strong>Output:</strong> ["girl","student"]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> text = "we will we will rock you", first = "we",
        second = "will" <br />
        <strong>Output:</strong> ["we","rock"]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= text.length &lt;= 1000</code>
        </li>
        <li>
          <code>text</code> consists of lowercase English letters and spaces.
        </li>
        <li>
          All the words in <code>text</code> are separated by{" "}
          <strong>a single space</strong>.
        </li>
        <li>
          <code>1 &lt;= first.length, second.length &lt;= 10</code>
        </li>
        <li>
          <code>first</code> and <code>second</code> consist of lowercase
          English letters.
        </li>
        <li>
          <code>text</code> will not have any leading or trailing spaces.
        </li>
      </ul>
    </div>
  ),
  1309: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> formed by digits and{" "}
        <code>'#'</code>. We want to map <code>s</code> to English lowercase
        characters as follows:
      </p>

      <ul>
        <li>
          Characters (<code>'a'</code> to <code>'i'</code>) are represented by (
          <code>'1'</code> to <code>'9'</code>) respectively.
        </li>
        <li>
          Characters (<code>'j'</code> to <code>'z'</code>) are represented by (
          <code>'10#'</code> to <code>'26#'</code>) respectively.
        </li>
      </ul>

      <p>
        Return <em>the string formed after mapping</em>.
      </p>

      <p>
        The test cases are generated so that a unique mapping will always exist.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "10#11#12" <br />
        <strong>Output:</strong> "jkab" <br />
        <strong>Explanation:</strong> "j" -&gt; "10#" , "k" -&gt; "11#" , "a"
        -&gt; "1" , "b" -&gt; "2".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "1326#" <br />
        <strong>Output:</strong> "acz"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>s</code> consists of digits and the <code>'#'</code> letter.
        </li>
        <li>
          <code>s</code> will be a valid string such that mapping is always
          possible.
        </li>
      </ul>
    </div>
  ),
  1614: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <strong>valid parentheses string</strong> <code>s</code>, return
        the <strong>nesting depth</strong> of<em> </em>
        <code>s</code>. The nesting depth is the <strong>maximum</strong> number
        of nested parentheses.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "(1+(2*3)+((8)/4))+1"</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>Digit 8 is inside of 3 nested parentheses in the string.</p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "(1)+((2))+(((3)))"</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>Digit 3 is inside of 3 nested parentheses in the string.</p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "()(())((()()))"</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code> consists of digits <code>0-9</code> and characters{" "}
          <code>'+'</code>, <code>'-'</code>, <code>'*'</code>, <code>'/'</code>
          , <code>'('</code>, and <code>')'</code>.
        </li>
        <li>
          It is guaranteed that parentheses expression <code>s</code> is a VPS.
        </li>
      </ul>
    </div>
  ),
  2381: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> of lowercase English letters and a
        2D integer array <code>shifts</code> where{" "}
        <code>
          shifts[i] = [start<sub>i</sub>, end<sub>i</sub>, direction<sub>i</sub>
          ]
        </code>
        . For every <code>i</code>, <strong>shift</strong> the characters in{" "}
        <code>s</code> from the index{" "}
        <code>
          start<sub>i</sub>
        </code>{" "}
        to the index{" "}
        <code>
          end<sub>i</sub>
        </code>{" "}
        (<strong>inclusive</strong>) forward if{" "}
        <code>
          direction<sub>i</sub> = 1
        </code>
        , or shift the characters backward if{" "}
        <code>
          direction<sub>i</sub> = 0
        </code>
        .
      </p>

      <p>
        Shifting a character <strong>forward</strong> means replacing it with
        the <strong>next</strong> letter in the alphabet (wrapping around so
        that <code>'z'</code> becomes <code>'a'</code>). Similarly, shifting a
        character <strong>backward</strong> means replacing it with the{" "}
        <strong>previous</strong> letter in the alphabet (wrapping around so
        that <code>'a'</code> becomes <code>'z'</code>).
      </p>

      <p>
        Return <em>the final string after all such shifts to </em>
        <code>s</code>
        <em> are applied</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abc", shifts = [[0,1,0],[1,2,1],[0,2,1]]{" "}
        <br />
        <strong>Output:</strong> "ace" <br />
        <strong>Explanation:</strong> Firstly, shift the characters from index 0
        to index 1 backward. Now s = "zac". <br />
        Secondly, shift the characters from index 1 to index 2 forward. Now s =
        "zbd". <br />
        Finally, shift the characters from index 0 to index 2 forward. Now s =
        "ace".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "dztz", shifts = [[0,0,0],[1,1,1]] <br />
        <strong>Output:</strong> "catz" <br />
        <strong>Explanation:</strong> Firstly, shift the characters from index 0
        to index 0 backward. Now s = "cztz". <br />
        Finally, shift the characters from index 1 to index 1 forward. Now s =
        "catz".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length, shifts.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>shifts[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt; s.length
          </code>
        </li>
        <li>
          <code>
            0 &lt;= direction<sub>i</sub> &lt;= 1
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  2414: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        An <strong>alphabetical continuous string</strong> is a string
        consisting of consecutive letters in the alphabet. In other words, it is
        any substring of the string <code>"abcdefghijklmnopqrstuvwxyz"</code>.
      </p>

      <ul>
        <li>
          For example, <code>"abc"</code> is an alphabetical continuous string,
          while <code>"acb"</code> and <code>"za"</code> are not.
        </li>
      </ul>

      <p>
        Given a string <code>s</code> consisting of lowercase letters only,
        return the{" "}
        <em>
          length of the <strong>longest</strong> alphabetical continuous
          substring.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abacaba" <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> There are 4 distinct continuous
        substrings: "a", "b", "c" and "ab". <br />
        "ab" is the longest continuous substring.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcde" <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> "abcde" is the longest continuous
        substring.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of only English lowercase letters.
        </li>
      </ul>
    </div>
  ),
  2515: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> <strong>circular</strong>{" "}
        string array <code>words</code> and a string <code>target</code>. A{" "}
        <strong>circular array</strong> means that the array's end connects to
        the array's beginning.
      </p>

      <ul>
        <li>
          Formally, the next element of <code>words[i]</code> is{" "}
          <code>words[(i + 1) % n]</code> and the previous element of{" "}
          <code>words[i]</code> is <code>words[(i - 1 + n) % n]</code>, where{" "}
          <code>n</code> is the length of <code>words</code>.
        </li>
      </ul>

      <p>
        Starting from <code>startIndex</code>, you can move to either the next
        word or the previous word with <code>1</code> step at a time.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>shortest</strong> distance needed to reach the string
        </em>{" "}
        <code>target</code>. If the string <code>target</code> does not exist in{" "}
        <code>words</code>, return <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["hello","i","am","leetcode","hello"],
        target = "hello", startIndex = 1 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> We start from index 1 and can reach
        "hello" by <br />
        - moving 3 units to the right to reach index 4.
        <br />
        - moving 2 units to the left to reach index 4.
        <br />
        - moving 4 units to the right to reach index 0.
        <br />
        - moving 1 unit to the left to reach index 0.
        <br />
        The shortest distance to reach "hello" is 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["a","b","leetcode"], target =
        "leetcode", startIndex = 0 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> We start from index 0 and can reach
        "leetcode" by <br />
        - moving 2 units to the right to reach index 3. <br />
        - moving 1 unit to the left to reach index 3. <br />
        The shortest distance to reach "leetcode" is 1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["i","eat","leetcode"], target = "ate",
        startIndex = 0 <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> Since "ate" does not exist in{" "}
        <code>words</code>, we return -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= words.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 100</code>
        </li>
        <li>
          <code>words[i]</code> and <code>target</code> consist of only
          lowercase English letters.
        </li>
        <li>
          <code>0 &lt;= startIndex &lt; words.length</code>
        </li>
      </ul>
    </div>
  ),
  2788: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of strings <code>words</code> and a character{" "}
        <code>separator</code>, <strong>split</strong> each string in{" "}
        <code>words</code> by <code>separator</code>.
      </p>

      <p>
        Return{" "}
        <em>
          an array of strings containing the new strings formed after the
          splits, <strong>excluding empty strings</strong>.
        </em>
      </p>

      <p>
        <strong>Notes</strong>
      </p>

      <ul>
        <li>
          <code>separator</code> is used to determine where the split should
          occur, but it is not included as part of the resulting strings.
        </li>
        <li>A split may result in more than two strings.</li>
        <li>
          The resulting strings must maintain the same order as they were
          initially given.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["one.two.three","four.five","six"],
        separator = "." <br />
        <strong>Output:</strong> ["one","two","three","four","five","six"]{" "}
        <br />
        <strong>Explanation: </strong>In this example we split as follows:{" "}
        <br />
        "one.two.three" splits into "one", "two", "three" <br />
        "four.five" splits into "four", "five" <br />
        "six" splits into "six" <br />
        Hence, the resulting array is ["one","two","three","four","five","six"].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["$easy$","$problem$"], separator = "$"{" "}
        <br />
        <strong>Output:</strong> ["easy","problem"] <br />
        <strong>Explanation:</strong> In this example we split as follows:{" "}
        <br />
        "$easy$" splits into "easy" (excluding empty strings) <br />
        "$problem$" splits into "problem" (excluding empty strings) <br />
        Hence, the resulting array is ["easy","problem"].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["|||"], separator = "|" <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> In this example the resulting split of
        "|||" will contain only empty strings, so we return an empty array [].{" "}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= words.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 20</code>
        </li>
        <li>
          characters in <code>words[i]</code> are either lowercase English
          letters or characters from the string <code>".,|$#@"</code> (excluding
          the quotes)
        </li>
        <li>
          <code>separator</code> is a character from the string{" "}
          <code>".,|$#@"</code> (excluding the quotes)
        </li>
      </ul>
    </div>
  ),
  2833: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>moves</code> of length <code>n</code>{" "}
        consisting only of characters <code>'L'</code>, <code>'R'</code>, and{" "}
        <code>'_'</code>. The string represents your movement on a number line
        starting from the origin <code>0</code>.
      </p>

      <p>
        In the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        move, you can choose one of the following directions:
      </p>

      <ul>
        <li>
          move to the left if <code>moves[i] = 'L'</code> or{" "}
          <code>moves[i] = '_'</code>
        </li>
        <li>
          move to the right if <code>moves[i] = 'R'</code> or{" "}
          <code>moves[i] = '_'</code>
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>distance from the origin</strong> of the{" "}
          <strong>furthest</strong> point you can get to after{" "}
        </em>
        <code>n</code>
        <em> moves</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> moves = "L_RL__R" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The furthest point we can reach from the
        origin 0 is point -3 through the following sequence of moves "LLRLLLR".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> moves = "_R__LL_" <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The furthest point we can reach from the
        origin 0 is point -5 through the following sequence of moves "LRLLLLL".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> moves = "_______" <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> The furthest point we can reach from the
        origin 0 is point 7 through the following sequence of moves "RRRRRRR".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= moves.length == n &lt;= 50</code>
        </li>
        <li>
          <code>moves</code> consists only of characters <code>'L'</code>,{" "}
          <code>'R'</code> and <code>'_'</code>.
        </li>
      </ul>
    </div>
  ),
  3170: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code>. It may contain any number of{" "}
        <code>'*'</code> characters. Your task is to remove all <code>'*'</code>{" "}
        characters.
      </p>

      <p>
        While there is a <code>'*'</code>, do the following operation:
      </p>

      <ul>
        <li>
          Delete the leftmost <code>'*'</code> and the <strong>smallest</strong>{" "}
          non-<code>'*'</code> character to its <em>left</em>. If there are
          several smallest characters, you can delete any of them.
        </li>
      </ul>

      <p>
        Return the{" "}
        <span
          data-keyword="lexicographically-smaller-string"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r15i:"
              >
                <div>lexicographically smallest</div>
              </div>
            </div>
          </div>
        </span>{" "}
        resulting string after removing all <code>'*'</code> characters.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "aaba*"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"aab"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          We should delete one of the <code>'a'</code> characters with{" "}
          <code>'*'</code>. If we choose <code>s[3]</code>, <code>s</code>{" "}
          becomes the lexicographically smallest.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "abc"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"abc"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          There is no <code>'*'</code> in the string.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists only of lowercase English letters and{" "}
          <code>'*'</code>.
        </li>
        <li>
          The input is generated such that it is possible to delete all{" "}
          <code>'*'</code> characters.
        </li>
      </ul>
    </div>
  ),
  3174: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code>.
      </p>

      <p>
        Your task is to remove <strong>all</strong> digits by doing this
        operation repeatedly:
      </p>

      <ul>
        <li>
          Delete the <em>first</em> digit and the <strong>closest</strong>{" "}
          <b>non-digit</b> character to its <em>left</em>.
        </li>
      </ul>

      <p>Return the resulting string after removing all digits.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "abc"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"abc"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>There is no digit in the string.</p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "cb34"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">""</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          First, we apply the operation on <code>s[2]</code>, and <code>s</code>{" "}
          becomes <code>"c4"</code>.
        </p>{" "}
        <br />
        <p>
          Then we apply the operation on <code>s[1]</code>, and <code>s</code>{" "}
          becomes <code>""</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code> consists only of lowercase English letters and digits.
        </li>
        <li>
          The input is generated such that it is possible to delete all digits.
        </li>
      </ul>
    </div>
  ),
  3210: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> and an integer <code>k</code>.
        Encrypt the string using the following algorithm:
      </p>

      <ul>
        <li>
          For each character <code>c</code> in <code>s</code>, replace{" "}
          <code>c</code> with the{" "}
          <code>
            k<sup>th</sup>
          </code>{" "}
          character after <code>c</code> in the string (in a cyclic manner).
        </li>
      </ul>

      <p>
        Return the <em>encrypted string</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "dart", k = 3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"tdar"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <ul>
          <li>
            For <code>i = 0</code>, the 3<sup>rd</sup> character after{" "}
            <code>'d'</code> is <code>'t'</code>.
          </li>
          <li>
            For <code>i = 1</code>, the 3<sup>rd</sup> character after{" "}
            <code>'a'</code> is <code>'d'</code>.
          </li>
          <li>
            For <code>i = 2</code>, the 3<sup>rd</sup> character after{" "}
            <code>'r'</code> is <code>'a'</code>.
          </li>
          <li>
            For <code>i = 3</code>, the 3<sup>rd</sup> character after{" "}
            <code>'t'</code> is <code>'r'</code>.
          </li>
        </ul>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "aaa", k = 1</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"aaa"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          As all the characters are the same, the encrypted string will also be
          the same.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists only of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  3216: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> containing only digits, return the{" "}
        <span
          data-keyword="lexicographically-smaller-string"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r187:"
              >
                <div>lexicographically smallest string</div>
              </div>
            </div>
          </div>
        </span>{" "}
        that can be obtained after swapping <strong>adjacent</strong> digits in{" "}
        <code>s</code> with the same <strong>parity</strong> at most{" "}
        <strong>once</strong>.
      </p>

      <p>
        Digits have the same parity if both are odd or both are even. For
        example, 5 and 9, as well as 2 and 4, have the same parity, while 6 and
        9 do not.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "45320"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"43520"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation: </strong>
        </p>{" "}
        <br />
        <p>
          <code>s[1] == '5'</code> and <code>s[2] == '3'</code> both have the
          same parity, and swapping them results in the lexicographically
          smallest string.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "001"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"001"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          There is no need to perform a swap because <code>s</code> is already
          the lexicographically smallest.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code> consists only of digits.
        </li>
      </ul>
    </div>
  ),
  133: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a reference of a node in a{" "}
        <strong>
          <a
            href="https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph"
            target="_blank"
            rel="noreferrer"
          >
            connected
          </a>
        </strong>{" "}
        undirected graph.
      </p>

      <p>
        Return a{" "}
        <a
          href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy"
          target="_blank"
          rel="noreferrer"
        >
          <strong>deep copy</strong>
        </a>{" "}
        (clone) of the graph.
      </p>

      <p>
        Each node in the graph contains a value (<code>int</code>) and a list (
        <code>List[Node]</code>) of its neighbors.
      </p>

      <pre>
        {`class Node {
            public int val;
            public List&lt;Node&gt; neighbors;
        }`}
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Test case format:</strong>
      </p>

      <p>
        For simplicity, each node's value is the same as the node's index
        (1-indexed). For example, the first node with <code>val == 1</code>, the
        second node with <code>val == 2</code>, and so on. The graph is
        represented in the test case using an adjacency list.
      </p>

      <p>
        <b>An adjacency list</b> is a collection of unordered <b>lists</b> used
        to represent a finite graph. Each list describes the set of neighbors of
        a node in the graph.
      </p>

      <p>
        The given node will always be the first node with <code>val = 1</code>.
        You must return the <strong>copy of the given node</strong> as a
        reference to the cloned graph.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png"
        style={{ width: 454, height: 500 }}
      />
      <pre>
        <strong>Input:</strong> adjList = [[2,4],[1,3],[2,4],[1,3]]
        <br />
        <strong>Output:</strong> [[2,4],[1,3],[2,4],[1,3]]
        <br />
        <strong>Explanation:</strong> There are 4 nodes in the graph.
        <br />
        1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val
        = 4).
        <br />
        2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val
        = 3).
        <br />
        3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val
        = 4).
        <br />
        4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val
        = 3).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/01/07/graph.png"
        style={{ width: 163, height: 148 }}
      />
      <pre>
        <strong>Input:</strong> adjList = [[]] <br />
        <strong>Output:</strong> [[]] <br />
        <strong>Explanation:</strong> Note that the input contains one empty
        list. The graph consists of only one node with val = 1 and it does not
        have any neighbors.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> adjList = [] <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> This an empty graph, it does not have any
        nodes.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the graph is in the range <code>[0, 100]</code>
          .
        </li>
        <li>
          <code>1 &lt;= Node.val &lt;= 100</code>
        </li>
        <li>
          <code>Node.val</code> is unique for each node.
        </li>
        <li>There are no repeated edges and no self-loops in the graph.</li>
        <li>
          The Graph is connected and all nodes can be visited starting from the
          given node.
        </li>
      </ul>
    </div>
  ),
  310: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A tree is an undirected graph in which any two vertices are connected
        by&nbsp;<i>exactly</i>&nbsp;one path. In other words, any connected
        graph without simple cycles is a tree.
      </p>

      <p>
        Given a tree of <code>n</code> nodes&nbsp;labelled from <code>0</code>{" "}
        to <code>n - 1</code>, and an array of&nbsp;<code>n - 1</code>&nbsp;
        <code>edges</code> where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that there is an undirected edge between the two nodes&nbsp;
        <code>
          a<sub>i</sub>
        </code>{" "}
        and&nbsp;
        <code>
          b<sub>i</sub>
        </code>{" "}
        in the tree,&nbsp;you can choose any node of the tree as the root. When
        you select a node <code>x</code> as the root, the result tree has height{" "}
        <code>h</code>. Among all possible rooted trees, those with minimum
        height (i.e. <code>min(h)</code>)&nbsp; are called{" "}
        <strong>minimum height trees</strong> (MHTs).
      </p>

      <p>
        Return{" "}
        <em>
          a list of all <strong>MHTs'</strong> root labels
        </em>
        .&nbsp;You can return the answer in <strong>any order</strong>.
      </p>

      <p>
        The <strong>height</strong> of a rooted tree is the number of edges on
        the longest downward path between the root and a leaf.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/01/e1.jpg"
        style={{ width: 800, height: 213 }}
      />
      <pre>
        <strong>Input:</strong> n = 4, edges = [[1,0],[1,2],[1,3]] <br />
        <strong>Output:</strong> [1] <br />
        <strong>Explanation:</strong> As shown, the height of the tree is 1 when
        the root is the node with label 1 which is the only MHT.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/01/e2.jpg"
        style={{ width: 800, height: 321 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]{" "}
        <br />
        <strong>Output:</strong> [3,4]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          All the pairs{" "}
          <code>
            (a<sub>i</sub>, b<sub>i</sub>)
          </code>{" "}
          are distinct.
        </li>
        <li>
          The given input is <strong>guaranteed</strong> to be a tree and there
          will be <strong>no repeated</strong> edges.
        </li>
      </ul>
    </div>
  ),
  765: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> couples sitting in <code>2n</code> seats
        arranged in a row and want to hold hands.
      </p>

      <p>
        The people and seats are represented by an integer array{" "}
        <code>row</code> where <code>row[i]</code> is the ID of the person
        sitting in the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        seat. The couples are numbered in order, the first couple being{" "}
        <code>(0, 1)</code>, the second couple being <code>(2, 3)</code>, and so
        on with the last couple being <code>(2n - 2, 2n - 1)</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum number of swaps so that every couple is sitting side by
          side
        </em>
        . A swap consists of choosing any two people, then they stand up and
        switch seats.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> row = [0,2,1,3] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> We only need to swap the second (row[1])
        and third (row[2]) person.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> row = [3,2,0,1] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> All couples are already seated side by
        side.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2n == row.length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 30</code>
        </li>
        <li>
          <code>n</code> is even.
        </li>
        <li>
          <code>0 &lt;= row[i] &lt; 2n</code>
        </li>
        <li>
          All the elements of <code>row</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  785: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an <strong>undirected</strong> graph with <code>n</code> nodes,
        where each node is numbered between <code>0</code> and{" "}
        <code>n - 1</code>. You are given a 2D array <code>graph</code>, where{" "}
        <code>graph[u]</code> is an array of nodes that node <code>u</code> is
        adjacent to. More formally, for each <code>v</code> in{" "}
        <code>graph[u]</code>, there is an undirected edge between node{" "}
        <code>u</code> and node <code>v</code>. The graph has the following
        properties:
      </p>

      <ul>
        <li>
          There are no self-edges (<code>graph[u]</code> does not contain{" "}
          <code>u</code>).
        </li>
        <li>
          There are no parallel edges (<code>graph[u]</code> does not contain
          duplicate values).
        </li>
        <li>
          If <code>v</code> is in <code>graph[u]</code>, then <code>u</code> is
          in <code>graph[v]</code> (the graph is undirected).
        </li>
        <li>
          The graph may not be connected, meaning there may be two nodes{" "}
          <code>u</code> and <code>v</code> such that there is no path between
          them.
        </li>
      </ul>

      <p>
        A graph is <strong>bipartite</strong> if the nodes can be partitioned
        into two independent sets <code>A</code> and <code>B</code> such that{" "}
        <strong>every</strong> edge in the graph connects a node in set{" "}
        <code>A</code> and a node in set <code>B</code>.
      </p>

      <p>
        Return <code>true</code>
        <em>
          {" "}
          if and only if it is <strong>bipartite</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg"
        style={{ width: 222, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[1,2,3],[0,2],[0,1,3],[0,2]] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> There is no way to partition the nodes
        into two independent sets such that every edge connects a node in one
        and a node in the other.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg"
        style={{ width: 222, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[1,3],[0,2],[1,3],[0,2]] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> We can partition the nodes into two sets:{" "}
        {(0, 2)} and {(1, 3)}.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>graph.length == n</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= graph[u].length &lt; n</code>
        </li>
        <li>
          <code>0 &lt;= graph[u][i] &lt;= n - 1</code>
        </li>
        <li>
          <code>graph[u]</code>&nbsp;does not contain&nbsp;<code>u</code>.
        </li>
        <li>
          All the values of <code>graph[u]</code> are <strong>unique</strong>.
        </li>
        <li>
          If <code>graph[u]</code> contains <code>v</code>, then{" "}
          <code>graph[v]</code> contains <code>u</code>.
        </li>
      </ul>
    </div>
  ),
  802: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a directed graph of <code>n</code> nodes with each node labeled
        from <code>0</code> to <code>n - 1</code>. The graph is represented by a{" "}
        <strong>0-indexed</strong> 2D integer array <code>graph</code> where{" "}
        <code>graph[i]</code> is an integer array of nodes adjacent to node{" "}
        <code>i</code>, meaning there is an edge from node <code>i</code> to
        each node in <code>graph[i]</code>.
      </p>

      <p>
        A node is a <strong>terminal node</strong> if there are no outgoing
        edges. A node is a <strong>safe node</strong> if every possible path
        starting from that node leads to a <strong>terminal node</strong> (or
        another safe node).
      </p>

      <p>
        Return{" "}
        <em>
          an array containing all the <strong>safe nodes</strong> of the graph
        </em>
        . The answer should be sorted in <strong>ascending</strong> order.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt="Illustration of graph"
        src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png"
        style={{ height: 171, width: 600 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[1,2],[2,3],[5],[0],[5],[],[]] <br />
        <strong>Output:</strong> [2,4,5,6] <br />
        <strong>Explanation:</strong> The given graph is shown above. <br />
        Nodes 5 and 6 are terminal nodes as there are no outgoing edges from
        either of them. <br />
        Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or
        6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]] <br />
        <strong>Output:</strong> [4] <br />
        <strong>Explanation:</strong> <br />
        Only node 4 is a terminal node, and every path starting at node 4 leads
        to node 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == graph.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= graph[i].length &lt;= n</code>
        </li>
        <li>
          <code>0 &lt;= graph[i][j] &lt;= n - 1</code>
        </li>
        <li>
          <code>graph[i]</code> is sorted in a strictly increasing order.
        </li>
        <li>The graph may contain self-loops.</li>
        <li>
          The number of edges in the graph will be in the range{" "}
          <code>
            [1, 4 * 10<sup>4</sup>]
          </code>
          .
        </li>
      </ul>
    </div>
  ),
  834: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an undirected connected tree with <code>n</code> nodes labeled
        from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> edges.
      </p>

      <p>
        You are given the integer <code>n</code> and the array{" "}
        <code>edges</code> where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        in the tree.
      </p>

      <p>
        Return an array <code>answer</code> of length <code>n</code> where{" "}
        <code>answer[i]</code> is the sum of the distances between the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        node in the tree and all other nodes.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist1.jpg"
        style={{ width: 304, height: 224 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]{" "}
        <br />
        <strong>Output:</strong> [8,12,6,10,10,10] <br />
        <strong>Explanation:</strong> The tree is shown above. <br />
        We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) +
        dist(0,5) <br />
        equals 1 + 1 + 2 + 2 + 2 = 8.
        <br />
        Hence, answer[0] = 8, and so on.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist2.jpg"
        style={{ width: 64, height: 65 }}
      />
      <pre>
        <strong>Input:</strong> n = 1, edges = [] <br />
        <strong>Output:</strong> [0]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist3.jpg"
        style={{ width: 144, height: 145 }}
      />
      <pre>
        <strong>Input:</strong> n = 2, edges = [[1,0]] <br />
        <strong>Output:</strong> [1,1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>The given input represents a valid tree.</li>
      </ul>
    </div>
  ),
  997: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        In a town, there are <code>n</code> people labeled from <code>1</code>{" "}
        to <code>n</code>. There is a rumor that one of these people is secretly
        the town judge.
      </p>

      <p>If the town judge exists, then:</p>

      <ul>
        <li>The town judge trusts nobody.</li>
        <li>Everybody (except for the town judge) trusts the town judge.</li>
        <li>
          There is exactly one person that satisfies properties{" "}
          <strong>1</strong> and <strong>2</strong>.
        </li>
      </ul>

      <p>
        You are given an array <code>trust</code> where{" "}
        <code>
          trust[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        representing that the person labeled{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        trusts the person labeled{" "}
        <code>
          b<sub>i</sub>
        </code>
        . If a trust relationship does not exist in <code>trust</code> array,
        then such a trust relationship does not exist.
      </p>

      <p>
        Return{" "}
        <em>
          the label of the town judge if the town judge exists and can be
          identified, or return{" "}
        </em>
        <code>-1</code>
        <em> otherwise</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, trust = [[1,2]] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, trust = [[1,3],[2,3]] <br />
        <strong>Output:</strong> 3
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, trust = [[1,3],[2,3],[3,1]] <br />
        <strong>Output:</strong> -1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>
            0 &lt;= trust.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>trust[i].length == 2</code>
        </li>
        <li>
          All the pairs of <code>trust</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n
          </code>
        </li>
      </ul>
    </div>
  ),
  1298: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have <code>n</code> boxes labeled from <code>0</code> to{" "}
        <code>n - 1</code>. You are given four arrays: <code>status</code>,{" "}
        <code>candies</code>, <code>keys</code>, and <code>containedBoxes</code>{" "}
        where:
      </p>

      <ul>
        <li>
          <code>status[i]</code> is <code>1</code> if the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          box is open and <code>0</code> if the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          box is closed,
        </li>
        <li>
          <code>candies[i]</code> is the number of candies in the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          box,
        </li>
        <li>
          <code>keys[i]</code> is a list of the labels of the boxes you can open
          after opening the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          box.
        </li>
        <li>
          <code>containedBoxes[i]</code> is a list of the boxes you found inside
          the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          box.
        </li>
      </ul>

      <p>
        You are given an integer array <code>initialBoxes</code> that contains
        the labels of the boxes you initially have. You can take all the candies
        in <strong>any open box</strong> and you can use the keys in it to open
        new boxes and you also can use the boxes you find in it.
      </p>

      <p>
        Return{" "}
        <em>
          the maximum number of candies you can get following the rules above
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> status = [1,0,1,0], candies = [7,5,4,100], keys
        = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]{" "}
        <br />
        <strong>Output:</strong> 16 <br />
        <strong>Explanation:</strong> You will be initially given box 0. You
        will find 7 candies in it and boxes 1 and 2. <br />
        Box 1 is closed and you do not have a key for it so you will open box 2.
        You will find 4 candies and a key to box 1 in box 2. <br />
        In box 1, you will find 5 candies and box 3 but you will not find a key
        to box 3 so box 3 will remain closed.
        <br />
        Total number of candies collected = 7 + 4 + 5 = 16 candy.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1],
        keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes =
        [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]
        <br />
        <strong>Output:</strong> 6<br />
        <strong>Explanation:</strong> You have initially box 0. Opening it you
        can find boxes 1,2,3,4 and 5 and their keys.
        <br />
        The total number of candies will be 6.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            n == status.length == candies.length == keys.length ==
            containedBoxes.length
          </code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>status[i]</code> is either <code>0</code> or <code>1</code>.
        </li>
        <li>
          <code>1 &lt;= candies[i] &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= keys[i].length &lt;= n</code>
        </li>
        <li>
          <code>0 &lt;= keys[i][j] &lt; n</code>
        </li>
        <li>
          All values of <code>keys[i]</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>0 &lt;= containedBoxes[i].length &lt;= n</code>
        </li>
        <li>
          <code>0 &lt;= containedBoxes[i][j] &lt; n</code>
        </li>
        <li>
          All values of <code>containedBoxes[i]</code> are unique.
        </li>
        <li>Each box is contained in one box at most.</li>
        <li>
          <code>0 &lt;= initialBoxes.length &lt;= n</code>
        </li>
        <li>
          <code>0 &lt;= initialBoxes[i] &lt; n</code>
        </li>
      </ul>
    </div>
  ),
  1377: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an undirected tree consisting of <code>n</code> vertices numbered
        from <code>1</code> to <code>n</code>. A frog starts jumping from{" "}
        <strong>vertex 1</strong>. In one second, the frog jumps from its
        current vertex to another <strong>unvisited</strong> vertex if they are
        directly connected. The frog can not jump back to a visited vertex. In
        case the frog can jump to several vertices, it jumps randomly to one of
        them with the same probability. Otherwise, when the frog can not jump to
        any unvisited vertex, it jumps forever on the same vertex.
      </p>

      <p>
        The edges of the undirected tree are given in the array{" "}
        <code>edges</code>, where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        means that exists an edge connecting the vertices{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>
        .
      </p>

      <p>
        <em>
          Return the probability that after <code>t</code> seconds the frog is
          on the vertex <code>target</code>.{" "}
        </em>
        Answers within{" "}
        <code>
          10<sup>-5</sup>
        </code>{" "}
        of the actual answer will be accepted.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/12/21/frog1.jpg"
        style={{ width: 338, height: 304 }}
      />
      <pre>
        <strong>Input:</strong> n = 7, edges =
        [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4 <br />
        <strong>Output:</strong> 0.16666666666666666 <br />
        <strong>Explanation:</strong> The figure above shows the given graph.
        The frog starts at vertex 1, jumping with 1/3 probability to the vertex
        2 after <strong>second 1</strong> and then jumping with 1/2 probability
        to vertex 4 after <strong>second 2</strong>. Thus the probability for
        the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 =
        0.16666666666666666.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <strong>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/12/21/frog2.jpg"
          style={{ width: 304, height: 304 }}
        />
      </strong>

      <pre>
        <strong>Input:</strong> n = 7, edges =
        [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7 <br />
        <strong>Output:</strong> 0.3333333333333333 <br />
        <strong>Explanation: </strong>The figure above shows the given graph.
        The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333
        probability to the vertex 7 after <strong>second 1</strong>.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>1 &lt;= t &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= target &lt;= n</code>
        </li>
      </ul>
    </div>
  ),
  1494: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code>, which indicates that there are{" "}
        <code>n</code> courses labeled from <code>1</code> to <code>n</code>.
        You are also given an array <code>relations</code> where{" "}
        <code>
          relations[i] = [prevCourse<sub>i</sub>, nextCourse<sub>i</sub>]
        </code>
        , representing a prerequisite relationship between course{" "}
        <code>
          prevCourse<sub>i</sub>
        </code>{" "}
        and course{" "}
        <code>
          nextCourse<sub>i</sub>
        </code>
        : course{" "}
        <code>
          prevCourse<sub>i</sub>
        </code>{" "}
        has to be taken before course{" "}
        <code>
          nextCourse<sub>i</sub>
        </code>
        . Also, you are given the integer <code>k</code>.
      </p>

      <p>
        In one semester, you can take <strong>at most</strong> <code>k</code>{" "}
        courses as long as you have taken all the prerequisites in the{" "}
        <strong>previous</strong> semesters for the courses you are taking.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of semesters needed to take all
          courses
        </em>
        . The testcases will be generated such that it is possible to take every
        course.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_1.png"
        style={{ width: 269, height: 147 }}
      />
      <pre>
        <strong>Input:</strong> n = 4, relations = [[2,1],[3,1],[1,4]], k = 2{" "}
        <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The figure above represents the given
        graph. <br />
        In the first semester, you can take courses 2 and 3.
        <br />
        In the second semester, you can take course 1.
        <br />
        In the third semester, you can take course 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_2.png"
        style={{ width: 271, height: 211 }}
      />
      <pre>
        <strong>Input:</strong> n = 5, relations = [[2,1],[3,1],[4,1],[1,5]], k
        = 2<br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> The figure above represents the given
        graph.
        <br />
        In the first semester, you can only take courses 2 and 3 since you
        cannot take more than two per semester.
        <br />
        In the second semester, you can take course 4.
        <br />
        In the third semester, you can take course 1.
        <br />
        In the fourth semester, you can take course 5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 15</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= n</code>
        </li>
        <li>
          <code>0 &lt;= relations.length &lt;= n * (n-1) / 2</code>
        </li>
        <li>
          <code>relations[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= prevCourse<sub>i</sub>, nextCourse<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            prevCourse<sub>i</sub> != nextCourse<sub>i</sub>
          </code>
        </li>
        <li>
          All the pairs{" "}
          <code>
            [prevCourse<sub>i</sub>, nextCourse<sub>i</sub>]
          </code>{" "}
          are <strong>unique</strong>.
        </li>
        <li>The given graph is a directed acyclic graph.</li>
      </ul>
    </div>
  ),
  1761: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an undirected graph. You are given an integer{" "}
        <code>n</code> which is the number of nodes in the graph and an array{" "}
        <code>edges</code>, where each{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        indicates that there is an undirected edge between{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>
        .
      </p>

      <p>
        A <strong>connected trio</strong> is a set of <strong>three</strong>{" "}
        nodes where there is an edge between <b>every</b> pair of them.
      </p>

      <p>
        The <strong>degree of a connected trio</strong> is the number of edges
        where one endpoint is in the trio, and the other is not.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> degree of a connected trio in the graph,
          or
        </em>{" "}
        <code>-1</code> <em>if the graph has no connected trios.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/26/trios1.png"
        style={{ width: 388, height: 164 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, edges =
        [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> There is exactly one trio, which is
        [1,2,3]. The edges that form its degree are bolded in the figure above.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/26/trios2.png"
        style={{ width: 388, height: 164 }}
      />
      <pre>
        <strong>Input:</strong> n = 7, edges =
        [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There are exactly three trios: <br />
        {`1)`} [1,4,3] with degree 0. <br />
        {`2)`} [2,5,6] with degree 2. <br />
        {`3)`} [5,6,7] with degree 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n &lt;= 400</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>1 &lt;= edges.length &lt;= n * (n-1) / 2</code>
        </li>
        <li>
          <code>
            1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            u<sub>i </sub>!= v<sub>i</sub>
          </code>
        </li>
        <li>There are no repeated edges.</li>
      </ul>
    </div>
  ),
  1791: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an undirected <strong>star</strong> graph consisting of{" "}
        <code>n</code> nodes labeled from <code>1</code> to <code>n</code>. A
        star graph is a graph where there is one <strong>center</strong> node
        and <strong>exactly</strong> <code>n - 1</code> edges that connect the
        center node with every other node.
      </p>

      <p>
        You are given a 2D integer array <code>edges</code> where each{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between the nodes{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>
        . Return the center of the given star graph.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/24/star_graph.png"
        style={{ width: 331, height: 321 }}
      />
      <pre>
        <strong>Input:</strong> edges = [[1,2],[2,3],[4,2]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> As shown in the figure above, node 2 is
        connected to every other node, so 2 is the center.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> edges = [[1,2],[5,1],[1,3],[1,4]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= u<sub>i,</sub> v<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
        <li>
          The given <code>edges</code> represent a valid star graph.
        </li>
      </ul>
    </div>
  ),
  2192: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a positive integer <code>n</code> representing the number
        of nodes of a <strong>Directed Acyclic Graph</strong> (DAG). The nodes
        are numbered from <code>0</code> to <code>n - 1</code> (
        <strong>inclusive</strong>).
      </p>

      <p>
        You are also given a 2D integer array <code>edges</code>, where{" "}
        <code>
          edges[i] = [from<sub>i</sub>, to<sub>i</sub>]
        </code>{" "}
        denotes that there is a <strong>unidirectional</strong> edge from{" "}
        <code>
          from<sub>i</sub>
        </code>{" "}
        to{" "}
        <code>
          to<sub>i</sub>
        </code>{" "}
        in the graph.
      </p>

      <p>
        Return <em>a list</em> <code>answer</code>
        <em>, where </em>
        <code>answer[i]</code>
        <em>
          {" "}
          is the <strong>list of ancestors</strong> of the
        </em>{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        <em>
          node, sorted in <strong>ascending order</strong>
        </em>
        .
      </p>

      <p>
        A node <code>u</code> is an <strong>ancestor</strong> of another node{" "}
        <code>v</code> if <code>u</code> can reach <code>v</code> via a set of
        edges.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/12/12/e1.png"
        style={{ width: 322, height: 265 }}
      />
      <pre>
        <strong>Input:</strong> n = 8, edgeList =
        [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]] <br />
        <strong>Output:</strong>{" "}
        [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]] <br />
        <strong>Explanation:</strong>
        <br />
        The above diagram represents the input graph.
        <br />
        - Nodes 0, 1, and 2 do not have any ancestors.
        <br />
        - Node 3 has two ancestors 0 and 1.
        <br />
        - Node 4 has two ancestors 0 and 2.
        <br />
        - Node 5 has three ancestors 0, 1, and 3.
        <br />
        - Node 6 has five ancestors 0, 1, 2, 3, and 4.
        <br />- Node 7 has four ancestors 0, 1, 2, and 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/12/12/e2.png"
        style={{ width: 343, height: 299 }}
      />
      <pre>
        <strong>Input:</strong> n = 5, edgeList =
        [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]] <br />
        <strong>Output:</strong> [[],[0],[0,1],[0,1,2],[0,1,2,3]] <br />
        <strong>Explanation:</strong> <br />
        The above diagram represents the input graph. <br />
        - Node 0 does not have any ancestor. <br />
        - Node 1 has one ancestor 0. <br />
        - Node 2 has two ancestors 0 and 1. <br />
        - Node 3 has three ancestors 0, 1, and 2. <br />- Node 4 has four
        ancestors 0, 1, 2, and 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= edges.length &lt;= min(2000, n * (n - 1) / 2)</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            from<sub>i</sub> != to<sub>i</sub>
          </code>
        </li>
        <li>There are no duplicate edges.</li>
        <li>
          The graph is <strong>directed</strong> and <strong>acyclic</strong>.
        </li>
      </ul>
    </div>
  ),
  2204: (
    <article role="main" class="blog-post">
      <p>
        You are given a positive integer <code>n</code> representing the number
        of nodes in a <strong>connected undirected graph</strong> containing{" "}
        <strong>exactly one</strong> cycle. The nodes are numbered from{" "}
        <code>0</code> to <code>n - 1</code> (<strong>inclusive</strong>).
      </p>

      <p>
        You are also given a 2D integer array <code>edges</code>, where{" "}
        <code>
          edges[i] = [node1<sub>i</sub>, node2<sub>i</sub>]
        </code>{" "}
        denotes that there is a <strong>bidirectional</strong> edge connecting{" "}
        <code>
          node1<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          node2<sub>i</sub>
        </code>{" "}
        in the graph.
      </p>

      <p>
        The distance between two nodes <code>a</code> and <code>b</code> is
        defined to be the <strong>minimum</strong> number of edges that are
        needed to go from <code>a</code> to <code>b</code>.
      </p>

      <p>
        Return{" "}
        <em>
          an integer array <code>answer</code>
        </em>
        <em> of size </em>
        <code>n</code>
        <em>, where </em>
        <code>answer[i]</code>
        <em>
          {" "}
          is the <strong>minimum</strong> distance between the{" "}
        </em>
        <code>
          i<sup>th</sup>
        </code>
        <em>
          {" "}
          node and <strong>any</strong> node in the cycle.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2204.Distance%20to%20a%20Cycle%20in%20Undirected%20Graph/images/image-20220315154238-1.png"
          style={{ width: 350, height: 237 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> n = 7, edges =
        [[1,2],[2,4],[4,3],[3,1],[0,1],[5,2],[6,5]] <br />
        <strong>Output:</strong> [1,0,0,0,0,1,2] <br />
        <strong>Explanation:</strong> <br />
        The nodes 1, 2, 3, and 4 form the cycle. <br />
        The distance from 0 to 1 is 1. <br />
        The distance from 1 to 1 is 0. <br />
        The distance from 2 to 2 is 0. <br />
        The distance from 3 to 3 is 0. <br />
        The distance from 4 to 4 is 0. <br />
        The distance from 5 to 2 is 1. <br />
        The distance from 6 to 2 is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2204.Distance%20to%20a%20Cycle%20in%20Undirected%20Graph/images/image-20220315154634-1.png"
          style={{ width: 400, height: 297 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> n = 9, edges =
        [[0,1],[1,2],[0,2],[2,6],[6,7],[6,8],[0,3],[3,4],[3,5]] <br />
        <strong>Output:</strong> [0,0,0,1,2,2,1,2,2] <br />
        <strong>Explanation:</strong> <br />
        The nodes 0, 1, and 2 form the cycle. <br />
        The distance from 0 to 0 is 0. <br />
        The distance from 1 to 1 is 0. <br />
        The distance from 2 to 2 is 0. <br />
        The distance from 3 to 1 is 1. <br />
        The distance from 4 to 1 is 2. <br />
        The distance from 5 to 1 is 2. <br />
        The distance from 6 to 2 is 1. <br />
        The distance from 7 to 2 is 2. <br />
        The distance from 8 to 2 is 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges.length == n</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= node1<sub>i</sub>, node2<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            node1<sub>i</sub> != node2<sub>i</sub>
          </code>
        </li>
        <li>The graph is connected.</li>
        <li>The graph has exactly one cycle.</li>
        <li>There is at most one edge between any pair of vertices.</li>
      </ul>
    </article>
  ),
  2359: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>directed</strong> graph of <code>n</code> nodes
        numbered from <code>0</code> to <code>n - 1</code>, where each node has{" "}
        <strong>at most one</strong> outgoing edge.
      </p>

      <p>
        The graph is represented with a given <strong>0-indexed</strong> array{" "}
        <code>edges</code> of size <code>n</code>, indicating that there is a
        directed edge from node <code>i</code> to node <code>edges[i]</code>. If
        there is no outgoing edge from <code>i</code>, then{" "}
        <code>edges[i] == -1</code>.
      </p>

      <p>
        You are also given two integers <code>node1</code> and{" "}
        <code>node2</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>index</strong> of the node that can be reached from both{" "}
        </em>
        <code>node1</code>
        <em> and </em>
        <code>node2</code>
        <em>
          , such that the <strong>maximum</strong> between the distance from{" "}
        </em>
        <code>node1</code>
        <em> to that node, and from </em>
        <code>node2</code>
        <em>
          {" "}
          to that node is <strong>minimized</strong>
        </em>
        . If there are multiple answers, return the node with the{" "}
        <strong>smallest</strong> index, and if no possible answer exists,
        return <code>-1</code>.
      </p>

      <p>
        Note that <code>edges</code> may contain cycles.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-2.png"
        style={{ width: 321, height: 161 }}
      />
      <pre>
        <strong>Input:</strong> edges = [2,2,3,-1], node1 = 0, node2 = 1 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The distance from node 0 to node 2 is 1,
        and the distance from node 1 to node 2 is 1. <br />
        The maximum of those two distances is 1. It can be proven that we cannot
        get a node with a smaller maximum distance than 1, so we return node 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-4.png"
        style={{ width: 195, height: 161 }}
      />
      <pre>
        <strong>Input:</strong> edges = [1,2,-1], node1 = 0, node2 = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The distance from node 0 to node 2 is 2,
        and the distance from node 2 to itself is 0. <br />
        The maximum of those two distances is 2. It can be proven that we cannot
        get a node with a smaller maximum distance than 2, so we return node 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == edges.length</code>
        </li>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>-1 &lt;= edges[i] &lt; n</code>
        </li>
        <li>
          <code>edges[i] != i</code>
        </li>
        <li>
          <code>0 &lt;= node1, node2 &lt; n</code>
        </li>
      </ul>
    </div>
  ),
  2508: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an <strong>undirected</strong> graph consisting of{" "}
        <code>n</code> nodes numbered from <code>1</code> to <code>n</code>. You
        are given the integer <code>n</code> and a <strong>2D</strong> array{" "}
        <code>edges</code> where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>
        . The graph can be disconnected.
      </p>

      <p>
        You can add <strong>at most</strong> two additional edges (possibly
        none) to this graph so that there are no repeated edges and no
        self-loops.
      </p>

      <p>
        Return <code>true</code>
        <em>
          {" "}
          if it is possible to make the degree of each node in the graph even,
          otherwise return{" "}
        </em>
        <code>false</code>
        <em>.</em>
      </p>

      <p>The degree of a node is the number of edges connected to it.</p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/26/agraphdrawio.png"
        style={{ width: 500, height: 190 }}
      />
      <pre>
        <strong>Input:</strong> n = 5, edges =
        [[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The above diagram shows a valid way of
        adding an edge. <br />
        Every node in the resulting graph is connected to an even number of
        edges.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/26/aagraphdrawio.png"
        style={{ width: 400, height: 120 }}
      />
      <pre>
        <strong>Input:</strong> n = 4, edges = [[1,2],[3,4]] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The above diagram shows a valid way of
        adding two edges.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/26/aaagraphdrawio.png"
        style={{ width: 150, height: 158 }}
      />
      <pre>
        <strong>Input:</strong> n = 4, edges = [[1,2],[1,3],[1,4]] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> It is not possible to obtain a valid graph
        with adding at most 2 edges.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            2 &lt;= edges.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>There are no repeated edges.</li>
      </ul>
    </div>
  ),
  2924: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> teams numbered from <code>0</code> to{" "}
        <code>n - 1</code> in a tournament; each team is also a node in a{" "}
        <strong>DAG</strong>.
      </p>

      <p>
        You are given the integer <code>n</code> and a{" "}
        <strong>0-indexed</strong> 2D integer array <code>edges</code> of length{" "}
        <code>
          <font face="monospace">m</font>
        </code>{" "}
        representing the <strong>DAG</strong>, where{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        indicates that there is a directed edge from team{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        to team{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        in the graph.
      </p>

      <p>
        A directed edge from <code>a</code> to <code>b</code> in the graph means
        that team <code>a</code> is <strong>stronger</strong> than team{" "}
        <code>b</code> and team <code>b</code> is <strong>weaker</strong> than
        team <code>a</code>.
      </p>

      <p>
        Team <code>a</code> will be the <strong>champion</strong> of the
        tournament if there is no team <code>b</code> that is{" "}
        <strong>stronger</strong> than team <code>a</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the team that will be the <strong>champion</strong> of the tournament
          if there is a <strong>unique</strong> champion, otherwise, return{" "}
        </em>
        <code>-1</code>
        <em>.</em>
      </p>

      <p>
        <strong>Notes</strong>
      </p>

      <ul>
        <li>
          A <strong>cycle</strong> is a series of nodes{" "}
          <code>
            a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>, a<sub>n+1</sub>
          </code>{" "}
          such that node{" "}
          <code>
            a<sub>1</sub>
          </code>{" "}
          is the same node as node{" "}
          <code>
            a<sub>n+1</sub>
          </code>
          , the nodes{" "}
          <code>
            a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>
          </code>{" "}
          are distinct, and there is a directed edge from the node{" "}
          <code>
            a<sub>i</sub>
          </code>{" "}
          to node{" "}
          <code>
            a<sub>i+1</sub>
          </code>{" "}
          for every <code>i</code> in the range <code>[1, n]</code>.
        </li>
        <li>
          A <strong>DAG</strong> is a directed graph that does not have any{" "}
          <strong>cycle</strong>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          height="300"
          src="https://assets.leetcode.com/uploads/2023/10/19/graph-3.png"
          width="300"
        />
      </p>

      <pre>
        <strong>Input:</strong> n = 3, edges = [[0,1],[1,2]] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation: </strong>Team 1 is weaker than team 0. Team 2 is
        weaker than team 1. So the champion is team 0.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          height="300"
          src="https://assets.leetcode.com/uploads/2023/10/19/graph-4.png"
          width="300"
        />
      </p>

      <pre>
        <strong>Input:</strong> n = 4, edges = [[0,2],[1,3],[1,2]] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> Team 2 is weaker than team 0 and team 1.
        Team 3 is weaker than team 1. But team 1 and team 0 are not weaker than
        any other teams. So the answer is -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>m == edges.length</code>
        </li>
        <li>
          <code>0 &lt;= m &lt;= n * (n - 1) / 2</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>0 &lt;= edge[i][j] &lt;= n - 1</code>
        </li>
        <li>
          <code>edges[i][0] != edges[i][1]</code>
        </li>
        <li>
          The input is generated such that if team <code>a</code> is stronger
          than team <code>b</code>, team <code>b</code> is not stronger than
          team <code>a</code>.
        </li>
        <li>
          The input is generated such that if team <code>a</code> is stronger
          than team <code>b</code> and team <code>b</code> is stronger than team{" "}
          <code>c</code>, then team <code>a</code> is stronger than team{" "}
          <code>c</code>.
        </li>
      </ul>
    </div>
  ),
  2959: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a company with <code>n</code> branches across the country, some
        of which are connected by roads. Initially, all branches are reachable
        from each other by traveling some roads.
      </p>

      <p>
        The company has realized that they are spending an excessive amount of
        time traveling between their branches. As a result, they have decided to
        close down some of these branches (<strong>possibly none</strong>).
        However, they want to ensure that the remaining branches have a distance
        of at most <code>maxDistance</code> from each other.
      </p>

      <p>
        The <strong>distance</strong> between two branches is the{" "}
        <strong>minimum</strong> total traveled length needed to reach one
        branch from another.
      </p>

      <p>
        You are given integers <code>n</code>, <code>maxDistance</code>, and a{" "}
        <strong>0-indexed</strong> 2D array <code>roads</code>, where{" "}
        <code>
          roads[i] = [u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>]
        </code>{" "}
        represents the <strong>undirected</strong> road between branches{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        with length{" "}
        <code>
          w<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Return{" "}
        <em>
          the number of possible sets of closing branches, so that any branch
          has a distance of at most{" "}
        </em>
        <code>maxDistance</code>
        <em> from any other</em>.
      </p>

      <p>
        <strong>Note</strong> that, after closing a branch, the company will no
        longer have access to any roads connected to it.
      </p>

      <p>
        <strong>Note</strong> that, multiple roads are allowed.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/11/08/example11.png"
        style={{ width: 221, height: 191 }}
      />
      <pre>
        <strong>Input:</strong> n = 3, maxDistance = 5, roads =
        [[0,1,2],[1,2,10],[0,2,10]] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The possible sets of closing branches are:{" "}
        <br />
        - The set [2], after closing, active branches are [0,1] and they are
        reachable to each other within distance 2. <br />
        - The set [0,1], after closing, the active branch is [2]. <br />
        - The set [1,2], after closing, the active branch is [0]. <br />
        - The set [0,2], after closing, the active branch is [1]. <br />
        - The set [0,1,2], after closing, there are no active branches. <br />
        It can be proven, that there are only 5 possible sets of closing
        branches.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/11/08/example22.png"
        style={{ width: 221, height: 241 }}
      />
      <pre>
        <strong>Input:</strong> n = 3, maxDistance = 5, roads =
        [[0,1,20],[0,1,10],[1,2,2],[0,2,2]] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> The possible sets of closing branches are:{" "}
        <br />
        - The set [], after closing, active branches are [0,1,2] and they are
        reachable to each other within distance 4. <br />
        - The set [0], after closing, active branches are [1,2] and they are
        reachable to each other within distance 2. <br />
        - The set [1], after closing, active branches are [0,2] and they are
        reachable to each other within distance 2. <br />
        - The set [0,1], after closing, the active branch is [2]. <br />
        - The set [1,2], after closing, the active branch is [0]. <br />
        - The set [0,2], after closing, the active branch is [1]. <br />
        - The set [0,1,2], after closing, there are no active branches. <br />
        It can be proven, that there are only 7 possible sets of closing
        branches.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1, maxDistance = 10, roads = [] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The possible sets of closing branches are:{" "}
        <br />
        - The set [], after closing, the active branch is [0]. <br />
        - The set [0], after closing, there are no active branches. <br />
        It can be proven, that there are only 2 possible sets of closing
        branches.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 10</code>
        </li>
        <li>
          <code>
            1 &lt;= maxDistance &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= roads.length &lt;= 1000</code>
        </li>
        <li>
          <code>roads[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= w<sub>i</sub> &lt;= 1000
          </code>
        </li>
        <li>
          All branches are reachable from each other by traveling some roads.
        </li>
      </ul>
    </div>
  ),
  176: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Table: <code>Employee</code>
      </p>

      <pre>
        {`+-------------+------+
        | Column Name | Type |
        +-------------+------+
        | id          | int  |
        | salary      | int  |
        +-------------+------+
        id is the primary key (column with unique values) for this table.
        Each row of this table contains information about the salary of an employee.`}
      </pre>

      <p>&nbsp;</p>

      <p>
        Write a solution to find&nbsp;the second highest{" "}
        <strong>distinct</strong> salary from the <code>Employee</code> table.
        If there is no second highest salary,&nbsp;return&nbsp;
        <code>null (return&nbsp;None in Pandas)</code>.
      </p>

      <p>The result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        {`Employee table:
        +----+--------+
        | id | salary |
        +----+--------+
        | 1  | 100    |
        | 2  | 200    |
        | 3  | 300    |
        +----+--------+`}{" "}
        <br />
        <strong>Output:</strong> <br />
        {`+---------------------+
        | SecondHighestSalary |
        +---------------------+
        | 200                 |
        +---------------------+`}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        {`Employee table:
        +----+--------+
        | id | salary |
        +----+--------+
        | 1  | 100    |
        +----+--------+`}{" "}
        <br />
        <strong>Output:</strong> <br />
        {`+---------------------+
        | SecondHighestSalary |
        +---------------------+
        | null                |
        +---------------------+`}
      </pre>
    </div>
  ),
  177: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Table: <code>Employee</code>
      </p>

      <pre>
        {`+-------------+------+
        | Column Name | Type |
        +-------------+------+
        | id          | int  |
        | salary      | int  |
        +-------------+------+`}{" "}
        <br />
        id is the primary key (column with unique values) for this table. Each
        row of this table contains information about the salary of an employee.
      </pre>

      <p>&nbsp;</p>

      <p>
        Write a solution to find the{" "}
        <code>
          n<sup>th</sup>
        </code>{" "}
        highest salary from the <code>Employee</code> table. If there is no{" "}
        <code>
          n<sup>th</sup>
        </code>{" "}
        highest salary, return&nbsp;<code>null</code>.
      </p>

      <p>The result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        Employee table: <br />
        {`+----+--------+
        | id | salary |
        +----+--------+
        | 1  | 100    |
        | 2  | 200    |
        | 3  | 300    |
        +----+--------+`}{" "}
        <br />n = 2 <br />
        <strong>Output:</strong> <br />
        {`+------------------------+
        | getNthHighestSalary(2) |
        +------------------------+
        | 200                    |
        +------------------------+`}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        Employee table: <br />
        {`+----+--------+
        | id | salary |
        +----+--------+
        | 1  | 100    |
        +----+--------+`}{" "}
        <br />
        n = 2 <br />
        <strong>Output:</strong> <br />
        {`+------------------------+
        | getNthHighestSalary(2) |
        +------------------------+
        | null                   |
        +------------------------+`}
      </pre>
    </div>
  ),
  178: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Table: <code>Scores</code>
      </p>

      <pre>
        {` +-------------+---------+
        | Column Name | Type    |
        +-------------+---------+
        | id          | int     |
        | score       | decimal |
        +-------------+---------+`}{" "}
        <br />
        id is the primary key (column with unique values) for this table. <br />
        Each row of this table contains the score of a game. Score is a floating
        point value with two decimal places.
      </pre>

      <p>&nbsp;</p>

      <p>
        Write a solution to find the rank of the scores. The ranking should be
        calculated according to the following rules:
      </p>

      <ul>
        <li>The scores should be ranked from the highest to the lowest.</li>
        <li>
          If there is a tie between two scores, both should have the same
          ranking.
        </li>
        <li>
          After a tie, the next ranking number should be the next consecutive
          integer value. In other words, there should be no holes between ranks.
        </li>
      </ul>

      <p>
        Return the result table ordered by <code>score</code> in descending
        order.
      </p>

      <p>The result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        Scores table: <br />
        {`+----+-------+
        | id | score |
        +----+-------+
        | 1  | 3.50  |
        | 2  | 3.65  |
        | 3  | 4.00  |
        | 4  | 3.85  |
        | 5  | 4.00  |
        | 6  | 3.65  |
        +----+-------+`}{" "}
        <br />
        <strong>Output:</strong> <br />
        {`+-------+------+
        | score | rank |
        +-------+------+
        | 4.00  | 1    |
        | 4.00  | 1    |
        | 3.85  | 2    |
        | 3.65  | 3    |
        | 3.65  | 3    |
        | 3.50  | 4    |
        +-------+------+`}
      </pre>
    </div>
  ),
  180: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Table: <code>Logs</code>
      </p>

      <pre>
        {`+-------------+---------+
        | Column Name | Type    |
        +-------------+---------+
        | id          | int     |
        | num         | varchar |
        +-------------+---------+`}{" "}
        <br />
        In SQL, id is the primary key for this table. id is an autoincrement
        column starting from 1.
      </pre>

      <p>&nbsp;</p>

      <p>Find all numbers that appear at least three times consecutively.</p>

      <p>
        Return the result table in <strong>any order</strong>.
      </p>

      <p>The&nbsp;result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        Logs table: <br />
        {`+----+-----+
        | id | num |
        +----+-----+
        | 1  | 1   |
        | 2  | 1   |
        | 3  | 1   |
        | 4  | 2   |
        | 5  | 1   |
        | 6  | 2   |
        | 7  | 2   |
        +----+-----+`}{" "}
        <br />
        <strong>Output:</strong> <br />
        {`+-----------------+
        | ConsecutiveNums |
        +-----------------+
        | 1               |
        +-----------------+`}{" "}
        <br />
        <strong>Explanation:</strong> <br /> 1 is the only number that appears
        consecutively for at least three times.
      </pre>
    </div>
  ),
  182: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Table: <code>Person</code>
      </p>

      <pre>
        {`+-------------+---------+
        | Column Name | Type    |
        +-------------+---------+
        | id          | int     |
        | email       | varchar |
        +-------------+---------+`}{" "}
        <br />
        id is the primary key (column with unique values) for this table. <br />
        Each row of this table contains an email. The emails will not contain
        uppercase letters.
      </pre>

      <p>&nbsp;</p>

      <p>
        Write a solution to report all the duplicate emails. Note that it's
        guaranteed that the email&nbsp;field is not NULL.
      </p>

      <p>
        Return the result table in <strong>any order</strong>.
      </p>

      <p>The&nbsp;result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        Person table: <br />
        {`+----+---------+
        | id | email   |
        +----+---------+
        | 1  | a@b.com |
        | 2  | c@d.com |
        | 3  | a@b.com |
        +----+---------+`}{" "}
        <br />
        <strong>Output:</strong> <br />
        {`+---------+
        | Email   |
        +---------+
        | a@b.com |
        +---------+`}{" "}
        <br />
        <strong>Explanation:</strong> a@b.com is repeated two times.
      </pre>
    </div>
  ),
  184: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Table: <code>Employee</code>
      </p>{" "}
      <br />
      <pre>
        {`+--------------+---------+
        | Column Name  | Type    |
        +--------------+---------+
        | id           | int     |
        | name         | varchar |
        | salary       | int     |
        | departmentId | int     |
        +--------------+---------+`}{" "}
        <br />
        id is the primary key (column with unique values) for this table. <br />
        departmentId is a foreign key (reference columns) of the ID from the{" "}
        <code>Department </code>table. <br />
        Each row of this table indicates the ID, name, and salary of an
        employee. It also contains the ID of their department.
      </pre>
      <p>&nbsp;</p>
      <p>
        Table: <code>Department</code>
      </p>{" "}
      <br />
      <pre>
        {`+-------------+---------+
        | Column Name | Type    |
        +-------------+---------+
        | id          | int     |
        | name        | varchar |
        +-------------+---------+`}
        id is the primary key (column with unique values) for this table. It is
        guaranteed that department name is not <code>NULL.</code>
        Each row of this table indicates the ID of a department and its name.
      </pre>
      <p>&nbsp;</p>
      <p>
        Write a solution to find employees who have the highest salary in each
        of the departments.
      </p>
      <p>
        Return the result table in <strong>any order</strong>.
      </p>
      <p>The result format is in the following example.</p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> <br />
        Employee table: <br />
        {`+----+-------+--------+--------------+
        | id | name  | salary | departmentId |
        +----+-------+--------+--------------+
        | 1  | Joe   | 70000  | 1            |
        | 2  | Jim   | 90000  | 1            |
        | 3  | Henry | 80000  | 2            |
        | 4  | Sam   | 60000  | 2            |
        | 5  | Max   | 90000  | 1            |
        +----+-------+--------+--------------+`}
        Department table: <br />
        {`+----+-------+
        | id | name  |
        +----+-------+
        | 1  | IT    |
        | 2  | Sales |
        +----+-------+`}{" "}
        <br />
        <strong>Output:</strong> <br />
        {`+------------+----------+--------+
        | Department | Employee | Salary |
        +------------+----------+--------+
        | IT         | Jim      | 90000  |
        | Sales      | Henry    | 80000  |
        | IT         | Max      | 90000  |
        +------------+----------+--------+`}{" "}
        <br />
        <strong>Explanation:</strong> Max and Jim both have the highest salary
        in the IT department and Henry has the highest salary in the Sales
        department.
      </pre>
    </div>
  ),
  185: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Table: <code>Employee</code>
      </p>

      <pre>
        {`+--------------+---------+
        | Column Name  | Type    |
        +--------------+---------+
        | id           | int     |
        | name         | varchar |
        | salary       | int     |
        | departmentId | int     |
        +--------------+---------+`}{" "}
        <br />
        id is the primary key (column with unique values) for this table. <br />
        departmentId is a foreign key (reference column) of the ID from the{" "}
        <code>Department </code>table. <br />
        Each row of this table indicates the ID, name, and salary of an
        employee. It also contains the ID of their department.
      </pre>

      <p>&nbsp;</p>

      <p>
        Table: <code>Department</code>
      </p>

      <pre>
        {`+-------------+---------+
        | Column Name | Type    |
        +-------------+---------+
        | id          | int     |
        | name        | varchar |
        +-------------+---------+`}{" "}
        <br />
        id is the primary key (column with unique values) for this table. <br />
        Each row of this table indicates the ID of a department and its name.
      </pre>

      <p>&nbsp;</p>

      <p>
        A company's executives are interested in seeing who earns the most money
        in each of the company's departments. A <strong>high earner</strong> in
        a department is an employee who has a salary in the{" "}
        <strong>top three unique</strong> salaries for that department.
      </p>

      <p>
        Write a solution to find the employees who are{" "}
        <strong>high earners</strong> in each of the departments.
      </p>

      <p>
        Return the result table <strong>in any order</strong>.
      </p>

      <p>The&nbsp;result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong>
        Employee table:
        {`+----+-------+--------+--------------+
        | id | name  | salary | departmentId |
        +----+-------+--------+--------------+
        | 1  | Joe   | 85000  | 1            |
        | 2  | Henry | 80000  | 2            |
        | 3  | Sam   | 60000  | 2            |
        | 4  | Max   | 90000  | 1            |
        | 5  | Janet | 69000  | 1            |
        | 6  | Randy | 85000  | 1            |
        | 7  | Will  | 70000  | 1            |
        +----+-------+--------+--------------+`}{" "}
        <br />
        Department table: <br />
        {`+----+-------+
        | id | name  |
        +----+-------+
        | 1  | IT    |
        | 2  | Sales |
        +----+-------+`}{" "}
        <br />
        <strong>Output:</strong> <br />
        {`+------------+----------+--------+
        | Department | Employee | Salary |
        +------------+----------+--------+
        | IT         | Max      | 90000  |
        | IT         | Joe      | 85000  |
        | IT         | Randy    | 85000  |
        | IT         | Will     | 70000  |
        | Sales      | Henry    | 80000  |
        | Sales      | Sam      | 60000  |
        +------------+----------+--------+`}{" "}
        <br />
        <strong>Explanation:</strong> <br />
        In the IT department: <br />
        - Max earns the highest unique salary <br />
        - Both Randy and Joe earn the second-highest unique salary <br />
        - Will earns the third-highest unique salary <br />
        In the Sales department: <br />
        - Henry earns the highest salary <br />
        - Sam earns the second-highest salary <br />- There is no third-highest
        salary as there are only two employees
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          There are no employees with the <strong>exact</strong> same name,
          salary <em>and</em> department.
        </li>
      </ul>
    </div>
  ),
  197: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Table: <code>Weather</code>
      </p>

      <pre>
        {`+---------------+---------+
        | Column Name   | Type    |
        +---------------+---------+
        | id            | int     |
        | recordDate    | date    |
        | temperature   | int     |
        +---------------+---------+`}
        id is the column with unique values for this table. <br />
        There are no different rows with the same recordDate. <br />
        This table contains information about the temperature on a certain day.
      </pre>

      <p>&nbsp;</p>

      <p>
        Write a solution to find all dates' <code>id</code> with higher
        temperatures compared to its previous dates (yesterday).
      </p>

      <p>
        Return the result table in <strong>any order</strong>.
      </p>

      <p>The result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong>
        Weather table:
        {`+----+------------+-------------+
        | id | recordDate | temperature |
        +----+------------+-------------+
        | 1  | 2015-01-01 | 10          |
        | 2  | 2015-01-02 | 25          |
        | 3  | 2015-01-03 | 20          |
        | 4  | 2015-01-04 | 30          |
        +----+------------+-------------+`}{" "}
        <br />
        <strong>Output:</strong> <br />
        +----+ | id | +----+ | 2 | | 4 | +----+ <br />
        <strong>Explanation:</strong> <br />
        In 2015-01-02, the temperature was higher than the previous day (10
        -&gt; 25). <br />
        In 2015-01-04, the temperature was higher than the previous day (20
        -&gt; 30).
      </pre>
    </div>
  ),
  262: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Table: <code>Trips</code>
      </p>

      <pre>
        {`+-------------+----------+
        | Column Name | Type     |
        +-------------+----------+
        | id          | int      |
        | client_id   | int      |
        | driver_id   | int      |
        | city_id     | int      |
        | status      | enum     |
        | request_at  | varchar  |     
        +-------------+----------+`}
        id is the primary key (column with unique values) for this table. <br />
        The table holds all taxi trips. Each trip has a unique id, while
        client_id and driver_id are foreign keys to the users_id at the Users
        table. <br />
        Status is an ENUM (category) type of ('completed',
        'cancelled_by_driver', 'cancelled_by_client').
      </pre>

      <p>&nbsp;</p>

      <p>
        Table: <code>Users</code>
      </p>

      <pre>
        {`+-------------+----------+
        | Column Name | Type     |
        +-------------+----------+
        | users_id    | int      |
        | banned      | enum     |
        | role        | enum     |
        +-------------+----------+`}{" "}
        <br />
        users_id is the primary key (column with unique values) for this table.{" "}
        <br />
        The table holds all users. Each user has a unique users_id, and role is
        an ENUM type of ('client', 'driver', 'partner'). <br />
        banned is an ENUM (category) type of ('Yes', 'No').
      </pre>

      <p>&nbsp;</p>

      <p>
        The <strong>cancellation rate</strong> is computed by dividing the
        number of canceled (by client or driver) requests with unbanned users by
        the total number of requests with unbanned users on that day.
      </p>

      <p>
        Write a solution to find the <strong>cancellation rate</strong> of
        requests with unbanned users (
        <strong>both client and driver must not be banned</strong>) each day
        between <code>"2013-10-01"</code> and <code>"2013-10-03"</code>. Round{" "}
        <code>Cancellation Rate</code> to <strong>two decimal</strong> points.
      </p>

      <p>
        Return the result table in <strong>any order</strong>.
      </p>

      <p>The&nbsp;result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        Trips table: <br />
        {`+----+-----------+-----------+---------+---------------------+------------+
        | id | client_id | driver_id | city_id | status              | request_at |
        +----+-----------+-----------+---------+---------------------+------------+
        | 1  | 1         | 10        | 1       | completed           | 2013-10-01 |
        | 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |
        | 3  | 3         | 12        | 6       | completed           | 2013-10-01 |
        | 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |
        | 5  | 1         | 10        | 1       | completed           | 2013-10-02 |
        | 6  | 2         | 11        | 6       | completed           | 2013-10-02 |
        | 7  | 3         | 12        | 6       | completed           | 2013-10-02 |
        | 8  | 2         | 12        | 12      | completed           | 2013-10-03 |
        | 9  | 3         | 10        | 12      | completed           | 2013-10-03 |
        | 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |
        +----+-----------+-----------+---------+---------------------+------------+`}
        Users table: <br />
        {`+----------+--------+--------+
        | users_id | banned | role   |
        +----------+--------+--------+
        | 1        | No     | client |
        | 2        | Yes    | client |
        | 3        | No     | client |
        | 4        | No     | client |
        | 10       | No     | driver |
        | 11       | No     | driver |
        | 12       | No     | driver |
        | 13       | No     | driver |
        +----------+--------+--------+`}
        <strong>Output:</strong> <br />
        {`+------------+-------------------+
        | Day        | Cancellation Rate |
        +------------+-------------------+
        | 2013-10-01 | 0.33              |
        | 2013-10-02 | 0.00              |
        | 2013-10-03 | 0.50              |
        +------------+-------------------+`}
        <strong>Explanation:</strong> <br />
        On 2013-10-01: <br />
        - There were 4 requests in total, 2 of which were canceled. <br />
        - However, the request with Id=2 was made by a banned client
        (User_Id=2), so it is ignored in the calculation. <br />- Hence there
        are 3 unbanned requests in total, 1 of which was canceled. <br />
        - The Cancellation Rate is (1 / 3) = 0.33 <br />
        On 2013-10-02: <br />
        - There were 3 requests in total, 0 of which were canceled. <br />- The
        request with Id=6 was made by a banned client, so it is ignored. <br />
        - Hence there are 2 unbanned requests in total, 0 of which were
        canceled. <br />
        - The Cancellation Rate is (0 / 2) = 0.00 <br />
        On 2013-10-03: <br />
        - There were 3 requests in total, 1 of which was canceled. <br />- The
        request with Id=8 was made by a banned client, so it is ignored. <br />-
        Hence there are 2 unbanned request in total, 1 of which were canceled.{" "}
        <br />- The Cancellation Rate is (1 / 2) = 0.50
      </pre>
    </div>
  ),
  569: (
    <div class="markdown-body div-width">
      <p>
        The <code>Employee</code> table holds all employees. The employee table
        has three columns: <br />
        Employee Id, Company Name, and Salary.
      </p>

      <pre>
        {`+-----+------------+--------+
    |Id   | Company    | Salary |
    +-----+------------+--------+
    |1    | A          | 2341   |
    |2    | A          | 341    |
    |3    | A          | 15     |
    |4    | A          | 15314  |
    |5    | A          | 451    |
    |6    | A          | 513    |
    |7    | B          | 15     |
    |8    | B          | 13     |
    |9    | B          | 1154   |
    |10   | B          | 1345   |
    |11   | B          | 1221   |
    |12   | B          | 234    |
    |13   | C          | 2345   |
    |14   | C          | 2645   |
    |15   | C          | 2645   |
    |16   | C          | 2652   |
    |17   | C          | 65     |
    +-----+------------+--------+`}
      </pre>

      <p>
        Write a <span>SQL query</span> to find the median salary of each
        company. Bonus points if you can solve it without using any built-in{" "}
        <span>SQL</span> functions.
      </p>

      <pre>
        {`+-----+------------+--------+
    |Id   | Company    | Salary |
    +-----+------------+--------+
    |5    | A          | 451    |
    |6    | A          | 513    |
    |12   | B          | 234    |
    |9    | B          | 1154   |
    |14   | C          | 2645   |
    +-----+------------+--------+`}
      </pre>
    </div>
  ),
  571: (
    <div class="markdown-body div-width">
      <p>
        The <code>Numbers</code> table keeps the value of number and its
        frequency.
      </p>

      <pre>
        {`+----------+-------------+
    |  Number  |  Frequency  |
    +----------+-------------|
    |  0       |  7          |
    |  1       |  1          |
    |  2       |  3          |
    |  3       |  1          |
    +----------+-------------+`}
      </pre>
      <br />
      <p>
        In this table, the numbers are{" "}
        <code>0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3</code>, so the median is{" "}
        <code>(0 + 0) / 2 = 0</code>.
      </p>

      <pre>
        {`+--------+
    | median |
    +--------|
    | 0.0000 |
    +--------+`}
      </pre>
      <br />
      <p>
        Write a query to find the median of all numbers and name the result as{" "}
        <code>median</code>.
      </p>
    </div>
  ),
  578: (
    <div class="markdown-body div-width">
      <p>
        Get the highest answer rate question from a table{" "}
        <code>survey_log</code> with these columns:
        <b>uid</b>, <b>action</b>, <b>question_id</b>, <b>answer_id</b>,{" "}
        <b>q_num</b>,<b>timestamp</b>.
      </p>

      <p>
        uid means user id; action has these kind of values: "show", "answer",
        "skip"; answer_id is not null when action column is "answer", while is
        null for "show" and "skip"; q_num is the numeral order of the question
        in current session.
      </p>

      <p>
        Write a sql query to identify the question which has the highest answer
        rate.
      </p>

      <p>
        <b>Example:</b>
      </p>

      <pre>
        <b>Input:</b> <br />
        {`+------+-----------+--------------+------------+-----------+------------+
    | uid  | action    | question_id  | answer_id  | q_num     | timestamp  |
    +------+-----------+--------------+------------+-----------+------------+
    | 5    | show      | 285          | null       | 1         | 123        |
    | 5    | answer    | 285          | 124124     | 1         | 124        |
    | 5    | show      | 369          | null       | 2         | 125        |
    | 5    | skip      | 369          | null       | 2         | 126        |
    +------+-----------+--------------+------------+-----------+------------+`}{" "}
        <br />
        <b>Output:</b> <br />
        {`+-------------+
    | survey_log  |
    +-------------+
    |    285      |
    +-------------+`}{" "}
        <br />
        <b>Explanation:</b> <br />
        question 285 has answer rate 1/1, while question 369 has 0/1 answer
        rate, so output 285.
      </pre>

      <p>&nbsp;</p>

      <p>
        <b>Note:</b> The highest answer rate meaning is: answer number's ratio
        in show number in the same question.
      </p>
    </div>
  ),
  579: (
    <div class="markdown-body div-width">
      <p>
        The <b>Employee</b> table holds the salary information in a year.
      </p>
      <p>
        Write a SQL to get the cumulative sum of an employee's salary over a
        period of 3 months but exclude the most recent month.
      </p>
      <p>
        The result should be displayed by 'Id' ascending, and then by 'Month'
        descending.
      </p>
      <p>
        <b>Example</b>
        <br />
        <b>Input</b>
      </p>{" "}
      <br />
      <pre>
        {`| Id | Month | Salary |
    |----|-------|--------|
    | 1  | 1     | 20     |
    | 2  | 1     | 20     |
    | 1  | 2     | 30     |
    | 2  | 2     | 30     |
    | 3  | 2     | 40     |
    | 1  | 3     | 40     |
    | 3  | 3     | 60     |
    | 1  | 4     | 60     |
    | 3  | 4     | 70     |`}
      </pre>{" "}
      <br />
      <b>Output</b> <br />
      <pre>
        {" "}
        <br />
        {`| Id | Month | Salary |
    |----|-------|--------|
    | 1  | 3     | 90     |
    | 1  | 2     | 50     |
    | 1  | 1     | 20     |
    | 2  | 1     | 20     |
    | 3  | 3     | 100    |
    | 3  | 2     | 40     |`}
      </pre>
      <p>&nbsp;</p>
      <b>Explanation</b>
      <p>
        Employee '1' has 3 salary records for the following 3 months except the
        most recent month '4': salary 40 for month '3', 30 for month '2' and 20
        for month '1'
        <br />
        So the cumulative sum of salary of this employee over 3 months is
        90(40+30+20), 50(30+20) and 20 respectively.
      </p>{" "}
      <br />
      <pre>
        {`| Id | Month | Salary |
    |----|-------|--------|
    | 1  | 3     | 90     |
    | 1  | 2     | 50     |
    | 1  | 1     | 20     |`}
      </pre>{" "}
      <br />
      Employee '2' only has one salary record (month '1') except its most recent
      month '2'. <br />
      <pre>
        {`| Id | Month | Salary |
    |----|-------|--------|
    | 2  | 1     | 20     |`}
      </pre>
      <p>&nbsp;</p> <br />
      Employ '3' has two salary records except its most recent pay month '4':
      month '3' with 60 and month '2' with 40. So the cumulative salary is as
      following.
      <pre>
        {`| Id | Month | Salary |
    |----|-------|--------|
    | 3  | 3     | 100    |
    | 3  | 2     | 40     |`}
      </pre>
      <p>&nbsp;</p>
    </div>
  ),
  601: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Table: <code>Stadium</code>
      </p>

      <pre>
        {`+---------------+---------+
        | Column Name   | Type    |
        +---------------+---------+
        | id            | int     |
        | visit_date    | date    |
        | people        | int     |
        +---------------+---------+`}{" "}
        <br />
        visit_date is the column with unique values for this table. Each row of
        this table contains the visit date and visit id to the stadium with the
        number of people during the visit. As the id increases, the date
        increases as well.
      </pre>

      <p>&nbsp;</p>

      <p>
        Write a solution to display the records with three or more rows with{" "}
        <strong>consecutive</strong> <code>id</code>'s, and the number of people
        is greater than or equal to 100 for each.
      </p>

      <p>
        Return the result table ordered by <code>visit_date</code> in{" "}
        <strong>ascending order</strong>.
      </p>

      <p>The result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        Stadium table: <br />
        {`+------+------------+-----------+
        | id   | visit_date | people    |
        +------+------------+-----------+
        | 1    | 2017-01-01 | 10        |
        | 2    | 2017-01-02 | 109       |
        | 3    | 2017-01-03 | 150       |
        | 4    | 2017-01-04 | 99        |
        | 5    | 2017-01-05 | 145       |
        | 6    | 2017-01-06 | 1455      |
        | 7    | 2017-01-07 | 199       |
        | 8    | 2017-01-09 | 188       |
        +------+------------+-----------+`}
        <strong>Output:</strong> <br />
        {`+------+------------+-----------+
        | id   | visit_date | people    |
        +------+------------+-----------+
        | 5    | 2017-01-05 | 145       |
        | 6    | 2017-01-06 | 1455      |
        | 7    | 2017-01-07 | 199       |
        | 8    | 2017-01-09 | 188       |
        +------+------------+-----------+`}
        <strong>Explanation:</strong> <br />
        The four rows with ids 5, 6, 7, and 8 have consecutive ids and each of
        them has &gt;= 100 people attended. Note that row 8 was included even
        though the visit_date was not the next day after row 7. The rows with
        ids 2 and 3 are not included because we need at least three consecutive
        ids.
      </pre>
    </div>
  ),
  603: (
    <div class="markdown-body div-width">
      Several friends at a cinema ticket office would like to reserve
      consecutive available seats.
      <br />
      Can you help to query all the consecutive available seats order by the
      seat_id using the following <code>cinema</code> table?
      <pre>
        {`| seat_id | free |
    |---------|------|
    | 1       | 1    |
    | 2       | 0    |
    | 3       | 1    |
    | 4       | 1    |
    | 5       | 1    |`}
      </pre>
      <p>&nbsp;</p>
      Your query should return the following result for the sample case above.
      <p>&nbsp;</p>
      <pre>
        {`| seat_id |
    |---------|
    | 3       |
    | 4       |
    | 5       |`}
      </pre>
      <b>Note</b>:
      <ul>
        <li>
          The seat_id is an auto increment int, and free is bool ('1' means
          free, and '0' means occupied.).
        </li>
        <li>
          Consecutive available seats are more than 2(inclusive) seats
          consecutively available.
        </li>
      </ul>
    </div>
  ),
  615: (
    <div class="markdown-body div-width">
      Given two tables as below, write a query to display the comparison result
      (higher/lower/same) of the average salary of employees in a department to
      the company's average salary.
      <p>&nbsp;</p>
      Table: <code>salary</code>
      <pre>
        {`| id | employee_id | amount | pay_date   |
    |----|-------------|--------|------------|
    | 1  | 1           | 9000   | 2017-03-31 |
    | 2  | 2           | 6000   | 2017-03-31 |
    | 3  | 3           | 10000  | 2017-03-31 |
    | 4  | 1           | 7000   | 2017-02-28 |
    | 5  | 2           | 6000   | 2017-02-28 |
    | 6  | 3           | 8000   | 2017-02-28 |`}
      </pre>
      <p>&nbsp;</p>
      The <b>employee_id</b> column refers to the <b>employee_id</b> in the
      following table <code>employee</code>.<p>&nbsp;</p>
      <pre>
        {`| employee_id | department_id |
    |-------------|---------------|
    | 1           | 1             |
    | 2           | 2             |
    | 3           | 2             |`}
      </pre>
      <p>&nbsp;</p>
      So for the sample data above, the result is:
      <p>&nbsp;</p>
      <pre>
        {`| pay_month | department_id | comparison  |
    |-----------|---------------|-------------|
    | 2017-03   | 1             | higher      |
    | 2017-03   | 2             | lower       |
    | 2017-02   | 1             | same        |
    | 2017-02   | 2             | same        |`}
      </pre>
      <p>&nbsp;</p>
      <b>Explanation</b>
      <p>&nbsp;</p>
      In March, the company's average salary is (9000+6000+10000)/3 = 8333.33...
      <p>&nbsp;</p>
      The average salary for department '1' is 9000, which is the salary of{" "}
      <b>employee_id</b>
      '1' since there is only one employee in this department. So the comparison
      result is 'higher' since 9000 &gt; 8333.33 obviously.
      <p>&nbsp;</p>
      The average salary of department '2' is (6000 + 10000)/2 = 8000, which is
      the average of
      <b>employee_id</b> '2' and '3'. So the comparison result is 'lower' since
      8000 &lt; 8333.33.
      <p>&nbsp;</p>
      With he same formula for the average salary comparison in February, the
      result is 'same' since both the department '1' and '2' have the same
      average salary with the company, which is 7000.
      <p>&nbsp;</p>
    </div>
  ),
  618: (
    <div class="markdown-body div-width">
      A U.S graduate school has students from Asia, Europe and America. The
      students' location information are stored in table <code>student</code> as
      below.
      <p>&nbsp;</p> <br />
      <pre>
        {`| name   | continent |
    |--------|-----------|
    | Jack   | America   |
    | Pascal | Europe    |
    | Xi     | Asia      |
    | Jane   | America   |`}
      </pre>{" "}
      <br />
      <p>&nbsp;</p>
      <a href="https://en.wikipedia.org/wiki/Pivot_table"> Pivot</a> the
      continent column in this table so that each name is sorted alphabetically
      and displayed underneath its corresponding continent. The output headers
      should be America, Asia and Europe respectively. It is guaranteed that the
      student number from America is no less than either Asia or Europe.
      <p>&nbsp;</p>
      For the sample input, the output is:
      <p>&nbsp;</p> <br />
      <pre>
        {" "}
        <br />
        {`| America | Asia | Europe |
    |---------|------|--------|
    | Jack    | Xi   | Pascal |
    | Jane    |      |        |`}
      </pre>{" "}
      <br />
      <p>&nbsp;</p>
      <b>Follow-up:</b> If it is unknown which continent has the most students,
      can you write a query to generate the student report?
      <p>&nbsp;</p>
    </div>
  ),
  1097: (
    <div class="markdown-body div-width">
      <p>
        Table:&nbsp;<code>Activity</code>
      </p>

      <pre>
        {`+--------------+---------+
    | Column Name  | Type    |
    +--------------+---------+
    | player_id    | int     |
    | device_id    | int     |
    | event_date   | date    |
    | games_played | int     |
    +--------------+---------+`}
        (player_id, event_date) is the primary key of this table. This table
        shows the activity of players of some game. Each row is a record of a
        player who logged in and played a number of games (possibly 0) before
        logging out on some day using some device.
      </pre>

      <p>&nbsp;</p>

      <p>
        We define the <em>install date</em> of a player to be the first login
        day of that player.
      </p>

      <p>
        We also define <em>day 1 retention</em>&nbsp;of some date <code>X</code>
        &nbsp;to be the number&nbsp;of players whose install date is&nbsp;
        <code>X</code>&nbsp;and they logged back in on the day right after{" "}
        <code>X</code>, divided by the number of players whose install date
        is&nbsp;<code>X</code>, <strong>rounded to 2 decimal places</strong>.
      </p>

      <p>
        Write an SQL query that reports for each <strong>install date</strong>,
        the <strong>number&nbsp;of players</strong> that installed the game on
        that day and the <strong>day 1 retention</strong>. Best video game
        consoles{" "}
      </p>

      <p>The query result format is in the following example:</p>

      <pre>
        Activity table:
        <br />
        {`+-----------+-----------+------------+--------------+
    | player_id | device_id | event_date | games_played |
    +-----------+-----------+------------+--------------+
    | 1         | 2         | 2016-03-01 | 5            |
    | 1         | 2         | 2016-03-02 | 6            |
    | 2         | 3         | 2017-06-25 | 1            |
    | 3         | 1         | 2016-03-01 | 0            |
    | 3         | 4         | 2016-07-03 | 5            |
    +-----------+-----------+------------+--------------+`}
        <br />
        Result table: <br />
        {`+------------+----------+----------------+
    | install_dt | installs | Day1_retention |
    +------------+----------+----------------+
    | 2016-03-01 | 2        | 0.50           |
    | 2017-06-25 | 1        | 0.00           |
    +------------+----------+----------------+`}
        Player 1 and 3 installed the game on 2016-03-01 but only player 1 logged
        back in on 2016-03-02 so the day 1 retention of 2016-03-01 is 1 / 2 =
        0.50 Player 2 installed the game on 2017-06-25 but didn't log back in on
        2017-06-26 so the day 1 retention of 2017-06-25 is 0 / 1 = 0.00
      </pre>
    </div>
  ),
  1194: (
    <div class="markdown-body div-width">
      <p>
        Table:&nbsp;<code>Players</code>
      </p>
      <pre>
        {`+-------------+-------+
    | Column Name | Type  |
    +-------------+-------+
    | player_id   | int   |
    | group_id    | int   |
    +-------------+-------+`}{" "}
        <br />
        player_id is the primary key of this table. Each row of this table
        indicates the group of each player.
      </pre>
      <p>
        Table:&nbsp;<code>Matches</code>
      </p>{" "}
      <br />
      <pre>
        {`+---------------+---------+
    | Column Name   | Type    |
    +---------------+---------+
    | match_id      | int     |
    | first_player  | int     |
    | second_player | int     |
    | first_score   | int     |
    | second_score  | int     |
    +---------------+---------+`}{" "}
        <br />
        match_id is the primary key of this table. Each row is a record of a
        match, first_player and second_player contain the player_id of each
        match. first_score and second_score contain the number of points of the
        first_player and second_player respectively. You may assume that, in
        each match, players belongs to the same group.
      </pre>
      <p>&nbsp;</p>
      <p>
        The winner in each group is the player who scored the maximum total
        points within the group.&nbsp;In the case of a tie, the{" "}
        <strong>lowest</strong> player_id&nbsp;wins.
      </p>
      <p>Write an SQL query to find the winner in each group. </p>
      <p>The query result format is in the following example:</p>
      <pre>
        <code>Players </code>table: <br />
        {`+-----------+------------+
    | player_id | group_id   |
    +-----------+------------+
    | 15        | 1          |
    | 25        | 1          |
    | 30        | 1          |
    | 45        | 1          |
    | 10        | 2          |
    | 35        | 2          |
    | 50        | 2          |
    | 20        | 3          |
    | 40        | 3          |
    +-----------+------------+`}
        <code>Matches </code>table: <br />
        {`+------------+--------------+---------------+-------------+--------------+
    | match_id   | first_player | second_player | first_score | second_score |
    +------------+--------------+---------------+-------------+--------------+
    | 1          | 15           | 45            | 3           | 0            |
    | 2          | 30           | 25            | 1           | 2            |
    | 3          | 30           | 15            | 2           | 0            |
    | 4          | 40           | 20            | 5           | 2            |
    | 5          | 35           | 50            | 1           | 1            |
    +------------+--------------+---------------+-------------+--------------+`}
        Result table: <br />
        {`+-----------+------------+
    | group_id  | player_id  |
    +-----------+------------+
    | 1         | 15         |
    | 2         | 35         |
    | 3         | 40         |
    +-----------+------------+`}
      </pre>
    </div>
  ),
  1378: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Table: <code>Employees</code>
      </p>
      <pre>
        {`+---------------+---------+
        | Column Name   | Type    |
        +---------------+---------+
        | id            | int     |
        | name          | varchar |
        +---------------+---------+`}{" "}
        <br />
        id is the primary key (column with unique values) for this table. <br />
        Each row of this table contains the id and the name of an employee in a
        company.
      </pre>
      <p>&nbsp;</p>
      <p>
        Table: <code>EmployeeUNI</code>
      </p>{" "}
      <br />
      <pre>
        {`+---------------+---------+
        | Column Name   | Type    |
        +---------------+---------+
        | id            | int     |
        | unique_id     | int     |
        +---------------+---------+`}
        (id, unique_id) is the primary key (combination of columns with unique
        values) for this table. <br />
        Each row of this table contains the id and the corresponding unique id
        of an employee in the company.
      </pre>
      <p>&nbsp;</p>
      <p>
        Write a solution to show the <strong>unique ID </strong>of each user, If
        a user does not have a unique ID replace just show <code>null</code>.
      </p>
      <p>
        Return the result table in <strong>any</strong> order.
      </p>
      <p>The result format is in the following example.</p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong>
        Employees table: <br />
        {`+----+----------+
        | id | name     |
        +----+----------+
        | 1  | Alice    |
        | 7  | Bob      |
        | 11 | Meir     |
        | 90 | Winston  |
        | 3  | Jonathan |
        +----+----------+`}
        EmployeeUNI table: <br />
        {`+----+-----------+
        | id | unique_id |
        +----+-----------+
        | 3  | 1         |
        | 11 | 2         |
        | 90 | 3         |
        +----+-----------+`}
        <strong>Output:</strong> <br />
        {`+-----------+----------+
        | unique_id | name     |
        +-----------+----------+
        | null      | Alice    |
        | null      | Bob      |
        | 2         | Meir     |
        | 3         | Winston  |
        | 1         | Jonathan |
        +-----------+----------+`}
        <strong>Explanation:</strong> <br />
        Alice and Bob do not have a unique ID, We will show null instead. <br />
        The unique ID of Meir is 2. <br />
        The unique ID of Winston is 3. <br />
        The unique ID of Jonathan is 1.
      </pre>
    </div>
  ),
  1412: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div class="sql-schema-wrapper__3VBi">
          <a class="sql-schema-link__3cEg">
            SQL Schema
            <svg
              viewBox="0 0 24 24"
              width="1em"
              height="1em"
              class="icon__3Su4"
            >
              <path
                fill-rule="evenodd"
                d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
              ></path>
            </svg>
          </a>
        </div>
        <div>
          <p>
            Table: <code>Student</code>
          </p>
          <br />
          <pre>
            {`+---------------------+---------+
    | Column Name         | Type    |
    +---------------------+---------+
    | student_id          | int     |
    | student_name        | varchar |
    +---------------------+---------+`}
            <br />
            student_id is the primary key for this table. student_name is the
            name of the student.
          </pre>

          <p>&nbsp;</p>

          <p>
            Table: <code>Exam</code>
          </p>
          <br />
          <pre>
            {`+---------------+---------+
    | Column Name   | Type    |
    +---------------+---------+
    | exam_id       | int     |
    | student_id    | int     |
    | score         | int     |
    +---------------+---------+`}
            <br />
            (exam_id, student_id) is the primary key for this table. Student
            with student_id got score points in exam with id exam_id.
          </pre>

          <p>&nbsp;</p>

          <p>
            A "quite" student is the one who took at least one exam and didn't
            score neither the high score nor the low score.
          </p>

          <p>
            Write an SQL query to report the students (student_id, student_name)
            being "quiet" in ALL exams.
          </p>

          <p>
            Don't return the student who has never taken any exam. Return the
            result table
            <strong>ordered</strong> by student_id.
          </p>

          <p>The query result format is in the following example.</p>

          <p>&nbsp;</p>

          <pre>
            Student table: <br />
            {`+-------------+---------------+
    | student_id  | student_name  |
    +-------------+---------------+
    | 1           | Daniel        |
    | 2           | Jade          |
    | 3           | Stella        |
    | 4           | Jonathan      |
    | 5           | Will          |
    +-------------+---------------+`}
            <br />
            Exam table: <br />
            {`+------------+--------------+-----------+
    | exam_id    | student_id   | score     |
    +------------+--------------+-----------+
    | 10         |     1        |    70     |
    | 10         |     2        |    80     |
    | 10         |     3        |    90     |
    | 20         |     1        |    80     |
    | 30         |     1        |    70     |
    | 30         |     3        |    80     |
    | 30         |     4        |    90     |
    | 40         |     1        |    60     |
    | 40         |     2        |    70     |
    | 40         |     4        |    80     |
    +------------+--------------+-----------+`}
            Result table:
            {`+-------------+---------------+
    | student_id  | student_name  |
    +-------------+---------------+
    | 2           | Jade          |
    +-------------+---------------+`}
            For exam 1: Student 1 and 3 hold the lowest and high score
            respectively. For exam 2: Student 1 hold both highest and lowest
            score. For exam 3 and 4: Studnet 1 and 4 hold the lowest and high
            score respectively. Student 2 and 5 have never got the highest or
            lowest in any of the exam. Since student 5 is not taking any exam,
            he is excluded from the result. So, we only return the information
            of Student 2.
          </pre>
        </div>
      </div>
    </div>
  ),
  2991: (
    <article role="main" class="blog-post">
      <p>
        Table: <code>Wineries</code>
      </p>

      <pre>
        {`+-------------+----------+
    | Column Name | Type     |
    +-------------+----------+
    | id          | int      |
    | country     | varchar  |
    | points      | int      |
    | winery      | varchar  |
    +-------------+----------+`}
        id is column of unique values for this table. <br />
        This table contains id, country, points, and winery.
      </pre>

      <p>
        Write a solution to find the <strong>top three wineries</strong> in{" "}
        <strong>each</strong> <strong>country</strong> based on their{" "}
        <strong>total points</strong>. If <strong>multiple wineries</strong>{" "}
        have the <strong>same</strong> total points, order them by{" "}
        <code>winery</code> name in <strong>ascending</strong> order. If there's{" "}
        <strong>no second winery</strong>, output 'No Second Winery,' and if
        there's <strong>no third winery</strong>, output 'No Third Winery.'
      </p>

      <p>
        Return <em>the result table ordered by </em>
        <code>country</code>
        <em>
          {" "}
          in <strong>ascending</strong> order
        </em>
        <em>.</em>
      </p>

      <p>The result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        Sessions table: <br />
        {`+-----+-----------+--------+-----------------+
    | id  | country   | points | winery          | 
    +-----+-----------+--------+-----------------+
    | 103 | Australia | 84     | WhisperingPines | 
    | 737 | Australia | 85     | GrapesGalore    |    
    | 848 | Australia | 100    | HarmonyHill     | 
    | 222 | Hungary   | 60     | MoonlitCellars  | 
    | 116 | USA       | 47     | RoyalVines      | 
    | 124 | USA       | 45     | Eagle'sNest     | 
    | 648 | India     | 69     | SunsetVines     | 
    | 894 | USA       | 39     | RoyalVines      |  
    | 677 | USA       | 9      | PacificCrest    |  
    +-----+-----------+--------+-----------------+`}{" "}
        <br />
        <strong>Output:</strong> <br />
        {`+-----------+---------------------+-------------------+----------------------+
    | country   | top_winery          | second_winery     | third_winery         |
    +-----------+---------------------+-------------------+----------------------+
    | Australia | HarmonyHill (100)   | GrapesGalore (85) | WhisperingPines (84) |
    | Hungary   | MoonlitCellars (60) | No second winery  | No third winery      | 
    | India     | SunsetVines (69)    | No second winery  | No third winery      |  
    | USA       | RoyalVines (86)     | Eagle'sNest (45)  | PacificCrest (9)     | 
    +-----------+---------------------+-------------------+----------------------+`}{" "}
        <br />
        <strong>Explanation</strong> <br />
        For Australia <br />
        - HarmonyHill Winery accumulates the highest score of 100 points in
        Australia. <br />
        - GrapesGalore Winery has a total of 85 points, securing the
        second-highest position in Australia. <br />
        - WhisperingPines Winery has a total of 80 points, ranking as the
        third-highest. <br />
        For Hungary <br />
        - MoonlitCellars is the sole winery, accruing 60 points, automatically
        making it the highest. There is no second or third winery. <br />
        For India <br />
        - SunsetVines is the sole winery, earning 69 points, making it the top
        winery. There is no second or third winery. <br />
        For the USA <br />
        - RoyalVines Wines accumulates a total of 47 + 39 = 86 points, claiming
        the highest position in the USA. <br />
        - Eagle'sNest has a total of 45 points, securing the second-highest
        position in the USA. <br />
        - PacificCrest accumulates 9 points, ranking as the third-highest winery
        in the USA <br />
        Output table is ordered by country in ascending order.
      </pre>
    </article>
  ),
  3103: (
    <div>
      <p>
        Table: <code>Tweets</code>
      </p>

      <pre>
        {`+-------------+---------+
        | Column Name | Type    |
        +-------------+---------+
        | user_id     | int     |
        | tweet_id    | int     |
        | tweet_date  | date    |
        | tweet       | varchar |
        +-------------+---------+`}{" "}
        <br />
        tweet_id is the primary key (column with unique values) for this table.
        Each row of this table contains user_id, tweet_id, tweet_date and tweet.
        It is guaranteed that all tweet_date are valid dates in February 2024.
      </pre>

      <p>
        Write a solution to find the <strong>top</strong> <code>3</code>{" "}
        trending <strong>hashtags</strong> in <strong>February</strong>{" "}
        <code>2024</code>. Every tweet may contain <strong>several</strong>{" "}
        <strong>hashtags</strong>.
      </p>

      <p>
        Return{" "}
        <em>the result table ordered by count of hashtag, hashtag in </em>
        <strong>descending</strong>
        <em> order.</em>
      </p>

      <p>The result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>
        </p>
        <p>Tweets table:</p> <br />
        <pre class="example-io">
          {`+---------+----------+------------------------------------------------------------+------------+
        | user_id | tweet_id | tweet                                                      | tweet_date |
        +---------+----------+------------------------------------------------------------+------------+
        | 135     | 13       | Enjoying a great start to the day. #HappyDay #MorningVibes | 2024-02-01 |
        | 136     | 14       | Another #HappyDay with good vibes! #FeelGood               | 2024-02-03 |
        | 137     | 15       | Productivity peaks! #WorkLife #ProductiveDay               | 2024-02-04 |
        | 138     | 16       | Exploring new tech frontiers. #TechLife #Innovation        | 2024-02-04 |
        | 139     | 17       | Gratitude for today&#39;s moments. #HappyDay #Thankful         | 2024-02-05 |
        | 140     | 18       | Innovation drives us. #TechLife #FutureTech                | 2024-02-07 |
        | 141     | 19       | Connecting with nature&#39;s serenity. #Nature #Peaceful       | 2024-02-09 |
        +---------+----------+------------------------------------------------------------+------------+`}
        </pre>
        <p>
          <strong>Output:</strong>
        </p>
        <pre class="example-io">
          {`+-----------+-------+
        | hashtag   | count |
        +-----------+-------+
        | #HappyDay | 3     |
        | #TechLife | 2     |
        | #WorkLife | 1     |
        +-----------+-------+`}
        </pre>
        <p>
          <strong>Explanation:</strong>
        </p>
        <ul>
          <li>
            <strong>#HappyDay:</strong> Appeared in tweet IDs 13, 14, and 17,
            with a total count of 3 mentions.
          </li>
          <li>
            <strong>#TechLife:</strong> Appeared in tweet IDs 16 and 18, with a
            total count of 2 mentions.
          </li>
          <li>
            <strong>#WorkLife:</strong> Appeared in tweet ID 15, with a total
            count of 1 mention.
          </li>
        </ul>
        <p>
          <b>Note:</b> Output table is sorted in descending order by count and
          hashtag respectively.
        </p>
      </div>
    </div>
  ),
  3198: (
    <div>
      <p>
        Table: <code>cities</code>
      </p>

      <pre>
        {`+-------------+---------+
        | Column Name | Type    | 
        +-------------+---------+
        | state       | varchar |
        | city        | varchar |
        +-------------+---------+`}{" "}
        <br />
        (state, city) is the primary key (combination of columns with unique
        values) for this table. Each row of this table contains the state name
        and the city name within that state.
      </pre>

      <p>
        Write a solution to find <strong>all the cities in each state</strong>{" "}
        and combine them into a <strong>single comma-separated</strong> string.
      </p>

      <p>
        Return <em>the result table ordered by</em> <code>state</code>&nbsp;
        <em>and</em> <code>city</code>&nbsp;
        <em>
          in <strong>ascending</strong> order
        </em>
        .
      </p>

      <p>The result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>
        </p>{" "}
        <br />
        <p>cities table:</p> <br />
        <pre class="example-io">
          {`+-------------+---------------+
        | state       | city          |
        +-------------+---------------+
        | California  | Los Angeles   |
        | California  | San Francisco |
        | California  | San Diego     |
        | Texas       | Houston       |
        | Texas       | Austin        |
        | Texas       | Dallas        |
        | New York    | New York City |
        | New York    | Buffalo       |
        | New York    | Rochester     |
        +-------------+---------------+`}
        </pre>
        <p>
          <strong>Output:</strong>
        </p>
        <pre class="example-io">
          {`+-------------+---------------------------------------+
        | state       | cities                                |
        +-------------+---------------------------------------+
        | California  | Los Angeles, San Diego, San Francisco |
        | New York    | Buffalo, New York City, Rochester     |
        | Texas       | Austin, Dallas, Houston               |
        +-------------+---------------------------------------+`}
        </pre>
        <p>
          <strong>Explanation:</strong>
        </p>
        <ul>
          <li>
            <strong>California:</strong> All cities (&quot;Los Angeles&quot;,
            &quot;San Diego&quot;, &quot;San Francisco&quot;) are listed in a
            comma-separated string.
          </li>
          <li>
            <strong>New York:</strong> All cities (&quot;Buffalo&quot;,
            &quot;New York City&quot;, &quot;Rochester&quot;) are listed in a
            comma-separated string.
          </li>
          <li>
            <strong>Texas:</strong> All cities (&quot;Austin&quot;,
            &quot;Dallas&quot;, &quot;Houston&quot;) are listed in a
            comma-separated string.
          </li>
        </ul>
        <p>
          <strong>Note:</strong> The output table is ordered by the state name
          in ascending order.
        </p>
      </div>
    </div>
  ),
  3214: (
    <div>
      <p>
        Table: <code>user_transactions</code>
      </p>
      <br />
      <pre>
        {`+------------------+----------+
    | Column Name      | Type     | 
    +------------------+----------+
    | transaction_id   | integer  |
    | product_id       | integer  |
    | spend            | decimal  |
    | transaction_date | datetime |
    +------------------+----------+`}{" "}
        <br />
        The transaction_id column uniquely identifies each row in this table.
        Each row of this table contains the transaction ID, product ID, the
        spend amount, and the transaction date.
      </pre>

      <p>
        Write a solution to calculate the{" "}
        <strong>year-on-year growth rate</strong> for the total spend{" "}
        <strong>for each product</strong>.
      </p>

      <p>The result table should include the following columns:</p>

      <ul>
        <li>
          <code>year</code>: The year of the transaction.
        </li>
        <li>
          <code>product_id</code>: The ID of the product.
        </li>
        <li>
          <code>curr_year_spend</code>: The total spend for the current year.
        </li>
        <li>
          <code>prev_year_spend</code>: The total spend for the previous year.
        </li>
        <li>
          <code>yoy_rate</code>: The year-on-year growth rate percentage,
          rounded to <code>2</code> decimal places.
        </li>
      </ul>

      <p>
        Return <em>the result table ordered by</em>&nbsp;<code>product_id</code>
        ,<code>year</code>{" "}
        <em>
          in <strong>ascending</strong> order
        </em>
        .
      </p>

      <p>The result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>
        </p>
        <p>
          <code>user_transactions</code> table:
        </p>
        <br />
        <pre class="example-io">
          {`+----------------+------------+---------+---------------------+
    | transaction_id | product_id | spend   | transaction_date    |
    +----------------+------------+---------+---------------------+
    | 1341           | 123424     | 1500.60 | 2019-12-31 12:00:00 |
    | 1423           | 123424     | 1000.20 | 2020-12-31 12:00:00 |
    | 1623           | 123424     | 1246.44 | 2021-12-31 12:00:00 |
    | 1322           | 123424     | 2145.32 | 2022-12-31 12:00:00 |
    +----------------+------------+---------+---------------------+`}{" "}
          <br />
        </pre>
        <p>
          <strong>Output:</strong>
        </p>{" "}
        <br />
        <pre class="example-io">
          {" "}
          <br />
          {`+------+------------+----------------+----------------+----------+
    | year | product_id | curr_year_spend| prev_year_spend| yoy_rate |
    +------+------------+----------------+----------------+----------+
    | 2019 | 123424     | 1500.60        | NULL           | NULL     |
    | 2020 | 123424     | 1000.20        | 1500.60        | -33.35   |
    | 2021 | 123424     | 1246.44        | 1000.20        | 24.62    |
    | 2022 | 123424     | 2145.32        | 1246.44        | 72.12    |
    +------+------------+----------------+----------------+----------+`}{" "}
          <br />
        </pre>
        <p>
          <strong>Explanation:</strong>
        </p>
        <ul>
          <li>
            For product ID 123424:
            <ul>
              <li>
                In 2019:
                <ul>
                  <li>Current year&#39;s spend is 1500.60</li>
                  <li>No previous year&#39;s spend recorded</li>
                  <li>YoY growth rate: NULL</li>
                </ul>
              </li>
              <li>
                In 2020:
                <ul>
                  <li>Current year&#39;s spend is 1000.20</li>
                  <li>Previous year&#39;s spend is 1500.60</li>
                  <li>
                    YoY growth rate: ((1000.20 - 1500.60) / 1500.60) * 100 =
                    -33.35%
                  </li>
                </ul>
              </li>
              <li>
                In 2021:
                <ul>
                  <li>Current year&#39;s spend is 1246.44</li>
                  <li>Previous year&#39;s spend is 1000.20</li>
                  <li>
                    YoY growth rate: ((1246.44 - 1000.20) / 1000.20) * 100 =
                    24.62%
                  </li>
                </ul>
              </li>
              <li>
                In 2022:
                <ul>
                  <li>Current year&#39;s spend is 2145.32</li>
                  <li>Previous year&#39;s spend is 1246.44</li>
                  <li>
                    YoY growth rate: ((2145.32 - 1246.44) / 1246.44) * 100 =
                    72.12%
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
        <p>
          <strong>Note:</strong> Output table is ordered by{" "}
          <code>product_id</code> and <code>year</code> in ascending order.
        </p>
      </div>
    </div>
  ),
  29: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integers <code>dividend</code> and <code>divisor</code>,
        divide two integers <strong>without</strong> using multiplication,
        division, and mod operator.
      </p>

      <p>
        The integer division should truncate toward zero, which means losing its
        fractional part. For example, <code>8.345</code> would be truncated to{" "}
        <code>8</code>, and <code>-2.7335</code> would be truncated to{" "}
        <code>-2</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>quotient</strong> after dividing{" "}
        </em>
        <code>dividend</code>
        <em> by </em>
        <code>divisor</code>.
      </p>

      <p>
        <strong>Note: </strong>Assume we are dealing with an environment that
        could only store integers within the <strong>32-bit</strong> signed
        integer range:{" "}
        <code>
          [−2<sup>31</sup>, 2<sup>31</sup> − 1]
        </code>
        . For this problem, if the quotient is{" "}
        <strong>strictly greater than</strong>{" "}
        <code>
          2<sup>31</sup> - 1
        </code>
        , then return{" "}
        <code>
          2<sup>31</sup> - 1
        </code>
        , and if the quotient is <strong>strictly less than</strong>{" "}
        <code>
          -2<sup>31</sup>
        </code>
        , then return{" "}
        <code>
          -2<sup>31</sup>
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> dividend = 10, divisor = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> 10/3 = 3.33333.. which is truncated to 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> dividend = 7, divisor = -3 <br />
        <strong>Output:</strong> -2 <br />
        <strong>Explanation:</strong> 7/-3 = -2.33333.. which is truncated to
        -2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            -2<sup>31</sup> &lt;= dividend, divisor &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          <code>divisor != 0</code>
        </li>
      </ul>
    </div>
  ),
  137: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> where&nbsp;every element
        appears <strong>three times</strong> except for one, which appears{" "}
        <strong>exactly once</strong>.{" "}
        <em>Find the single element and return it</em>.
      </p>
      <p>
        You must&nbsp;implement a solution with a linear runtime complexity and
        use&nbsp;only constant&nbsp;extra space.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [2,2,3,2] <br />
        <strong>Output:</strong> 3 <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [0,1,0,1,0,1,99] <br />
        <strong>Output:</strong> 99
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          Each element in <code>nums</code> appears exactly{" "}
          <strong>three times</strong> except for one element which appears{" "}
          <strong>once</strong>.
        </li>
      </ul>
    </div>
  ),
  190: (
    <div class="elfjS" data-track-load="description_content">
      <p>Reverse bits of a given 32 bits unsigned integer.</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          Note that in some languages, such as Java, there is no unsigned
          integer type. In this case, both input and output will be given as a
          signed integer type. They should not affect your implementation, as
          the integer's internal binary representation is the same, whether it
          is signed or unsigned.
        </li>
        <li>
          In Java, the compiler represents the signed integers using{" "}
          <a
            href="https://en.wikipedia.org/wiki/Two%27s_complement"
            target="_blank"
            rel="noreferrer"
          >
            2's complement notation
          </a>
          . Therefore, in <strong class="example">Example 2</strong> above, the
          input represents the signed integer <code>-3</code> and the output
          represents the signed integer <code>-1073741825</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 00000010100101000001111010011100 <br />
        <strong>Output:</strong> 964176192 (00111001011110000010100101000000){" "}
        <br />
        <strong>Explanation: </strong>The input binary string{" "}
        <strong>00000010100101000001111010011100</strong> represents the
        unsigned integer 43261596, so return 964176192 which its binary
        representation is <strong>00111001011110000010100101000000</strong>.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 11111111111111111111111111111101 <br />
        <strong>Output:</strong> 3221225471 (10111111111111111111111111111111){" "}
        <br />
        <strong>Explanation: </strong>The input binary string{" "}
        <strong>11111111111111111111111111111101</strong> represents the
        unsigned integer 4294967293, so return 3221225471 which its binary
        representation is <strong>10111111111111111111111111111111</strong>.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The input must be a <strong>binary string</strong> of length{" "}
          <code>32</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> If this function is called many times, how
        would you optimize it?
      </p>
    </div>
  ),
  191: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a positive integer <code>n</code>, write a function that returns
        the number of{" "}
        <span
          data-keyword="set-bit"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rb6:"
              >
                <div>set bits</div>
              </div>
            </div>
          </div>
        </span>{" "}
        in its binary representation (also known as the{" "}
        <a
          href="http://en.wikipedia.org/wiki/Hamming_weight"
          target="_blank"
          rel="noreferrer"
        >
          Hamming weight
        </a>
        ).
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 11</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          The input binary string <strong>1011</strong> has a total of three set
          bits.
        </p>
      </div>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 128</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          The input binary string <strong>10000000</strong> has a total of one
          set bit.
        </p>
      </div>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 2147483645</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">30</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          The input binary string{" "}
          <strong>1111111111111111111111111111101</strong> has a total of thirty
          set bits.
        </p>
      </div>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> If this function is called many times, how
      would you optimize it?
    </div>
  ),
  201: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integers <code>left</code> and <code>right</code> that
        represent the range <code>[left, right]</code>, return{" "}
        <em>the bitwise AND of all numbers in this range, inclusive</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> left = 5, right = 7 <br />
        <strong>Output:</strong> 4
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> left = 0, right = 0 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> left = 1, right = 2147483647 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= left &lt;= right &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  260: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, in which exactly two elements
        appear only once and all the other elements appear exactly twice. Find
        the two elements that appear only once. You can return the answer in{" "}
        <strong>any order</strong>.
      </p>

      <p>
        You must write an&nbsp;algorithm that runs in linear runtime complexity
        and uses&nbsp;only constant extra space.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,1,3,2,5] <br />
        <strong>Output:</strong> [3,5] <br />
        <strong>Explanation: </strong> [5, 3] is also a valid answer.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-1,0] <br />
        <strong>Output:</strong> [-1,0]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1] <br />
        <strong>Output:</strong> [1,0]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= nums.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          Each integer in <code>nums</code> will appear twice, only two integers
          will appear once.
        </li>
      </ul>
    </div>
  ),
  268: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> containing <code>n</code> distinct
        numbers in the range <code>[0, n]</code>, return{" "}
        <em>the only number in the range that is missing from the array.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [3,0,1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          <code>n = 3</code> since there are 3 numbers, so all numbers are in
          the range <code>[0,3]</code>. 2 is the missing number in the range
          since it does not appear in <code>nums</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [0,1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          <code>n = 2</code> since there are 2 numbers, so all numbers are in
          the range <code>[0,2]</code>. 2 is the missing number in the range
          since it does not appear in <code>nums</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [9,6,4,2,3,5,7,0,1]</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">8</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          <code>n = 9</code> since there are 9 numbers, so all numbers are in
          the range <code>[0,9]</code>. 8 is the missing number in the range
          since it does not appear in <code>nums</code>.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= n</code>
        </li>
        <li>
          All the numbers of <code>nums</code> are <strong>unique</strong>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you implement a solution using only{" "}
        <code>O(1)</code> extra space complexity and <code>O(n)</code> runtime
        complexity?
      </p>
    </div>
  ),
  371: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integers <code>a</code> and <code>b</code>, return{" "}
        <em>the sum of the two integers without using the operators</em>{" "}
        <code>+</code> <em>and</em> <code>-</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> a = 1, b = 2 <br />
        <strong>Output:</strong> 3
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> a = 2, b = 3 <br />
        <strong>Output:</strong> 5
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>-1000 &lt;= a, b &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  476: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>complement</strong> of an integer is the integer you get
        when you flip all the <code>0</code>'s to <code>1</code>'s and all the{" "}
        <code>1</code>'s to <code>0</code>'s in its binary representation.
      </p>

      <ul>
        <li>
          For example, The integer <code>5</code> is <code>"101"</code> in
          binary and its <strong>complement</strong> is <code>"010"</code> which
          is the integer <code>2</code>.
        </li>
      </ul>

      <p>
        Given an integer <code>num</code>, return <em>its complement</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 5 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The binary representation of 5 is 101 (no
        leading zero bits), and its complement is 010. So you need to output 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 1 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The binary representation of 1 is 1 (no
        leading zero bits), and its complement is 0. So you need to output 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= num &lt; 2<sup>31</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Note:</strong> This question is the same as 1009:{" "}
        <a
          href="https://leetcode.com/problems/complement-of-base-10-integer/"
          target="_blank"
          rel="noreferrer"
        >
          https://leetcode.com/problems/complement-of-base-10-integer/
        </a>
      </p>
    </div>
  ),
  762: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integers <code>left</code> and <code>right</code>, return{" "}
        <em>
          the <strong>count</strong> of numbers in the{" "}
          <strong>inclusive</strong> range{" "}
        </em>
        <code>[left, right]</code>
        <em>
          {" "}
          having a <strong>prime number of set bits</strong> in their binary
          representation
        </em>
        .
      </p>

      <p>
        Recall that the <strong>number of set bits</strong> an integer has is
        the number of <code>1</code>'s present when written in binary.
      </p>

      <ul>
        <li>
          For example, <code>21</code> written in binary is <code>10101</code>,
          which has <code>3</code> set bits.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> left = 6, right = 10 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> <br />
        6 -&gt; 110 (2 set bits, 2 is prime) <br />
        7 -&gt; 111 (3 set bits, 3 is prime)
        <br />
        8 -&gt; 1000 (1 set bit, 1 is not prime)
        <br />
        9 -&gt; 1001 (2 set bits, 2 is prime)
        <br />
        10 -&gt; 1010 (2 set bits, 2 is prime)
        <br />4 numbers have a prime number of set bits.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> left = 10, right = 15
        <br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation:</strong>
        <br />
        10 -&gt; 1010 (2 set bits, 2 is prime)
        <br />
        11 -&gt; 1011 (3 set bits, 3 is prime)
        <br />
        12 -&gt; 1100 (2 set bits, 2 is prime)
        <br />
        13 -&gt; 1101 (3 set bits, 3 is prime)
        <br />
        14 -&gt; 1110 (3 set bits, 3 is prime)
        <br />
        15 -&gt; 1111 (4 set bits, 4 is not prime)
        <br />5 numbers have a prime number of set bits.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= left &lt;= right &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= right - left &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  868: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a positive integer <code>n</code>, find and return{" "}
        <em>
          the <strong>longest distance</strong> between any two{" "}
          <strong>adjacent</strong>{" "}
        </em>
        <code>1</code>
        <em>'s in the binary representation of </em>
        <code>n</code>
        <em>. If there are no two adjacent </em>
        <code>1</code>
        <em>'s, return </em>
        <code>0</code>
        <em>.</em>
      </p>

      <p>
        Two <code>1</code>'s are <strong>adjacent</strong> if there are only{" "}
        <code>0</code>'s separating them (possibly no <code>0</code>'s). The{" "}
        <b>distance</b> between two <code>1</code>'s is the absolute difference
        between their bit positions. For example, the two <code>1</code>'s in{" "}
        <code>"1001"</code> have a distance of 3.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 22 <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> 22 in binary is "10110".
        <br />
        The first adjacent pair of 1's is "<u>1</u>0<u>1</u>10" with a distance
        of 2.
        <br />
        The second adjacent pair of 1's is "10<u>11</u>0" with a distance of 1.
        <br />
        The answer is the largest of these two distances, which is 2.
        <br />
        Note that "<u>1</u>01<u>1</u>0" is not a valid pair since there is a 1
        separating the two 1's underlined.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 8 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> 8 in binary is "1000". <br />
        There are not any adjacent pairs of 1's in the binary representation of
        8, so we return 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 5<br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> 5 in binary is "101".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  898: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>arr</code>, return{" "}
        <em>
          the number of distinct bitwise ORs of all the non-empty subarrays of
        </em>{" "}
        <code>arr</code>.
      </p>

      <p>
        The bitwise OR of a subarray is the bitwise OR of each integer in the
        subarray. The bitwise OR of a subarray of one integer is that integer.
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous non-empty sequence of
        elements within an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [0] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> There is only one possible result: 0.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,1,2] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The possible subarrays are [1], [1], [2],
        [1, 1], [1, 2], [1, 1, 2]. <br />
        These yield the results 1, 1, 2, 1, 3, 3. <br />
        There are 3 unique values, so the answer is 3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,2,4] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The possible results are 1, 2, 3, 4, 6,
        and 7.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= arr.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= arr[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1611: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, you must transform it into{" "}
        <code>0</code> using the following operations any number of times:
      </p>

      <ul>
        <li>
          Change the rightmost (
          <code>
            0<sup>th</sup>
          </code>
          ) bit in the binary representation of <code>n</code>.
        </li>
        <li>
          Change the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          bit in the binary representation of <code>n</code> if the{" "}
          <code>
            (i-1)<sup>th</sup>
          </code>{" "}
          bit is set to <code>1</code> and the{" "}
          <code>
            (i-2)<sup>th</sup>
          </code>{" "}
          through{" "}
          <code>
            0<sup>th</sup>
          </code>{" "}
          bits are set to <code>0</code>.
        </li>
      </ul>

      <p>
        Return <em>the minimum number of operations to transform </em>
        <code>n</code>
        <em> into </em>
        <code>0</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3<br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> The binary representation of 3 is "11".
        <br />"<u>1</u>1" -&gt; "<u>0</u>1" with the 2<sup>nd</sup> operation
        since the 0<sup>th</sup> bit is 1.
        <br />
        "0<u>1</u>" -&gt; "0<u>0</u>" with the 1<sup>st</sup> operation.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 6 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The binary representation of 6 is "110".{" "}
        <br />"<u>1</u>10" -&gt; "<u>0</u>10" with the 2<sup>nd</sup> operation
        since the 1<sup>st</sup> bit is 1 and 0<sup>th</sup> through 0
        <sup>th</sup> bits are 0. <br />
        "01<u>0</u>" -&gt; "01<u>1</u>" with the 1<sup>st</sup> operation.
        <br />
        "0<u>1</u>1" -&gt; "0<u>0</u>1" with the 2<sup>nd</sup> operation since
        the 0<sup>th</sup> bit is 1.
        <br />
        "00<u>1</u>" -&gt; "00<u>0</u>" with the 1<sup>st</sup> operation.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2220: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>bit flip</strong> of a number <code>x</code> is choosing a bit
        in the binary representation of <code>x</code> and{" "}
        <strong>flipping</strong> it from either <code>0</code> to{" "}
        <code>1</code> or <code>1</code> to <code>0</code>.
      </p>

      <ul>
        <li>
          For example, for <code>x = 7</code>, the binary representation is{" "}
          <code>111</code> and we may choose any bit (including any leading
          zeros not shown) and flip it. We can flip the first bit from the right
          to get <code>110</code>, flip the second bit from the right to get{" "}
          <code>101</code>, flip the fifth bit from the right (a leading zero)
          to get <code>10111</code>, etc.
        </li>
      </ul>

      <p>
        Given two integers <code>start</code> and <code>goal</code>, return
        <em>
          {" "}
          the <strong>minimum</strong> number of <strong>bit flips</strong> to
          convert{" "}
        </em>
        <code>start</code>
        <em> to </em>
        <code>goal</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> start = 10, goal = 7 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The binary representation of 10 and 7 are
        1010 and 0111 respectively. We can convert 10 to 7 in 3 steps:
        <br />- Flip the first bit from the right: 101<u>0</u> -&gt; 101<u>1</u>
        .<br />- Flip the third bit from the right: 1<u>0</u>11 -&gt; 1<u>1</u>
        11.
        <br />- Flip the fourth bit from the right: <u>1</u>111 -&gt; <u>0</u>
        111.
        <br />
        It can be shown we cannot convert 10 to 7 in less than 3 steps. Hence,
        we return 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> start = 3, goal = 4<br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The binary representation of 3 and 4 are
        011 and 100 respectively. We can convert 3 to 4 in 3 steps:
        <br />- Flip the first bit from the right: 01<u>1</u> -&gt; 01<u>0</u>.
        <br />- Flip the second bit from the right: 0<u>1</u>0 -&gt; 0<u>0</u>0.
        <br />- Flip the third bit from the right: <u>0</u>00 -&gt; <u>1</u>00.
        <br />
        It can be shown we cannot convert 3 to 4 in less than 3 steps. Hence, we
        return 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= start, goal &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Note:</strong> This question is the same as{" "}
        <a
          href="https://leetcode.com/problems/hamming-distance/description/"
          target="_blank"
          rel="noreferrer"
        >
          461: Hamming Distance.
        </a>
      </p>
    </div>
  ),
  2351: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> consisting of lowercase English letters,
        return{" "}
        <em>
          the first letter to appear <strong>twice</strong>
        </em>
        .
      </p>

      <p>
        <strong>Note</strong>:
      </p>

      <ul>
        <li>
          A letter <code>a</code> appears twice before another letter{" "}
          <code>b</code> if the <strong>second</strong> occurrence of{" "}
          <code>a</code> is before the <strong>second</strong> occurrence of{" "}
          <code>b</code>.
        </li>
        <li>
          <code>s</code> will contain at least one letter that appears twice.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abccbaacz" <br />
        <strong>Output:</strong> "c" <br />
        <strong>Explanation:</strong> <br />
        The letter 'a' appears on the indexes 0, 5 and 6. <br />
        The letter 'b' appears on the indexes 1 and 4. <br />
        The letter 'c' appears on the indexes 2, 3 and 7.
        <br />
        The letter 'z' appears on the index 8.
        <br />
        The letter 'c' is the first letter to appear twice, because out of all
        the letters the index of its second occurrence is the smallest.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcdd"
        <br />
        <strong>Output:</strong> "d"
        <br />
        <strong>Explanation:</strong>
        <br />
        The only letter that appears twice is 'd' so we return 'd'.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
        <li>
          <code>s</code> has at least one repeated letter.
        </li>
      </ul>
    </div>
  ),
  2595: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>positive</strong> integer <code>n</code>.
      </p>

      <p>
        Let <code>even</code> denote the number of even indices in the binary
        representation of <code>n</code> with value 1.
      </p>

      <p>
        Let <code>odd</code> denote the number of odd indices in the binary
        representation of <code>n</code> with value 1.
      </p>

      <p>
        Note that bits are indexed from <strong>right to left</strong> in the
        binary representation of a number.
      </p>

      <p>
        Return the array <code>[even, odd]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 50</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1,2]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          The binary representation of 50 is <code>110010</code>.
        </p>{" "}
        <br />
        <p>It contains 1 on indices 1, 4, and 5.</p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[0,1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          The binary representation of 2 is <code>10</code>.
        </p>{" "}
        <br />
        <p>It contains 1 only on index 1.</p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  2680: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> of length <code>n</code> and an integer <code>k</code>
        . In an operation, you can choose an element and multiply it by{" "}
        <code>2</code>.
      </p>

      <p>
        Return <em>the maximum possible value of </em>
        <code>nums[0] | nums[1] | ... | nums[n - 1]</code>{" "}
        <em>
          that can be obtained after applying the operation on nums at most{" "}
        </em>
        <code>k</code>
        <em> times</em>.
      </p>

      <p>
        Note that <code>a | b</code> denotes the <strong>bitwise or</strong>{" "}
        between two integers <code>a</code> and <code>b</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [12,9], k = 1 <br />
        <strong>Output:</strong> 30 <br />
        <strong>Explanation:</strong> If we apply the operation to index 1, our
        new array nums will be equal to [12,18]. Thus, we return the bitwise or
        of 12 and 18, which is 30.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [8,1,2], k = 2 <br />
        <strong>Output:</strong> 35 <br />
        <strong>Explanation:</strong> If we apply the operation twice on index
        0, we yield a new array of [32,1,2]. Thus, we return 32|1|2 = 35.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= 15</code>
        </li>
      </ul>
    </div>
  ),
  2917: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>, and an integer{" "}
        <code>k</code>. Let's introduce&nbsp;<strong>K-or</strong> operation by
        extending the standard bitwise OR. In K-or, a bit position in the result
        is set to <code>1</code>&nbsp;if at least <code>k</code> numbers in{" "}
        <code>nums</code> have a <code>1</code> in that position.
      </p>

      <p>
        Return <em>the K-or of</em> <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1: </strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>
          <span class="example-io"> nums = [7,12,9,8,9,15], k = 4 </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong>
          <span class="example-io"> 9 </span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong>
        </p>
        <br />

        <p>Represent numbers in binary:</p>
        <br />

        <table>
          <tbody>
            <tr>
              <th>
                <b>Number</b>
              </th>
              <th>Bit 3</th>
              <th>Bit 2</th>
              <th>Bit 1</th>
              <th>Bit 0</th>
            </tr>
            <tr>
              <td>
                <b>7</b>
              </td>
              <td>0</td>
              <td>1</td>
              <td>1</td>
              <td>1</td>
            </tr>
            <tr>
              <td>
                <b>12</b>
              </td>
              <td>1</td>
              <td>1</td>
              <td>0</td>
              <td>0</td>
            </tr>
            <tr>
              <td>
                <b>9</b>
              </td>
              <td>1</td>
              <td>0</td>
              <td>0</td>
              <td>1</td>
            </tr>
            <tr>
              <td>
                <b>8</b>
              </td>
              <td>1</td>
              <td>0</td>
              <td>0</td>
              <td>0</td>
            </tr>
            <tr>
              <td>
                <b>9</b>
              </td>
              <td>1</td>
              <td>0</td>
              <td>0</td>
              <td>1</td>
            </tr>
            <tr>
              <td>
                <b>15</b>
              </td>
              <td>1</td>
              <td>1</td>
              <td>1</td>
              <td>1</td>
            </tr>
            <tr>
              <td>
                <b>Result = 9</b>
              </td>
              <td>1</td>
              <td>0</td>
              <td>0</td>
              <td>1</td>
            </tr>
          </tbody>
        </table>
        <br />

        <p>
          Bit 0 is set in 7, 9, 9, and 15. Bit 3 is set in 12, 9, 8, 9, and 15.
          <br />
          Only bits 0 and 3 qualify. The result is{" "}
          <code>
            (1001)<sub>2</sub> = 9
          </code>
          .
        </p>
      </div>

      <p>
        <strong class="example">Example 2: </strong>
      </p>
      <br />

      <div class="example-block">
        <p>
          <strong>Input:</strong>
          <span class="example-io"> nums = [2,12,1,11,4,5], k = 6 </span>
        </p>
        <br />

        <p>
          <strong>Output:</strong>
          <span class="example-io"> 0 </span>
        </p>
        <br />

        <p>
          <strong>Explanation:&nbsp;</strong>No bit appears as 1 in all six
          array numbers, as required for K-or with <code>k = 6</code>. Thus, the
          result is 0.
        </p>
      </div>

      <p>
        <strong class="example">Example 3: </strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>
          <span class="example-io"> nums = [10,8,5,9,11,6,8], k = 1 </span>
        </p>
        <br />

        <p>
          <strong>Output:</strong>
          <span class="example-io"> 15 </span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong> Since <code>k == 1</code>, the 1-or of
          the array is equal to the bitwise OR of all its elements. Hence, the
          answer is <code>10 OR 8 OR 5 OR 9 OR 11 OR 6 OR 8 = 15</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt; 2<sup>31</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= nums.length</code>
        </li>
      </ul>
    </div>
  ),
  2939: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given three integers <code>a</code>, <code>b</code>, and <code>n</code>,
        return{" "}
        <em>
          the <strong>maximum value</strong> of
        </em>{" "}
        <code>(a XOR x) * (b XOR x)</code> <em>where</em>{" "}
        <code>
          0 &lt;= x &lt; 2<sup>n</sup>
        </code>
        .
      </p>

      <p>
        Since the answer may be too large, return it <strong>modulo</strong>{" "}
        <code>
          10<sup>9 </sup>+ 7
        </code>
        .
      </p>

      <p>
        <strong>Note</strong> that <code>XOR</code> is the bitwise XOR
        operation.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 12, b = 5, n = 4 <br />
        <strong>Output:</strong> 98 <br />
        <strong>Explanation:</strong> For x = 2, (a XOR x) = 14 and (b XOR x) =
        7. Hence, (a XOR x) * (b XOR x) = 98.
        <br /> It can be shown that 98 is the maximum value of (a XOR x) * (b
        XOR x) for all 0 &lt;= x &lt; 2<sup>n</sup>.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 6, b = 7 , n = 5 <br />
        <strong>Output:</strong> 930 <br />
        <strong>Explanation:</strong> For x = 25, (a XOR x) = 31 and (b XOR x) =
        30. Hence, (a XOR x) * (b XOR x) = 930.
        <br /> It can be shown that 930 is the maximum value of (a XOR x) * (b
        XOR x) for all 0 &lt;= x &lt; 2<sup>n</sup>.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 1, b = 6, n = 3 <br />
        <strong>Output:</strong> 12 <br />
        <strong>Explanation:</strong> For x = 5, (a XOR x) = 4 and (b XOR x) =
        3. Hence, (a XOR x) * (b XOR x) = 12. <br />
        It can be shown that 12 is the maximum value of (a XOR x) * (b XOR x)
        for all 0 &lt;= x &lt; 2<sup>n</sup>.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= a, b &lt; 2<sup>50</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= n &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  3011: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array of{" "}
        <strong>positive</strong> integers <code>nums</code>.
      </p>

      <p>
        In one <strong>operation</strong>, you can swap any two{" "}
        <strong>adjacent</strong> elements if they have the{" "}
        <strong>same</strong> number of{" "}
        <span
          data-keyword="set-bit"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r16t:"
              >
                <div>set bits</div>
              </div>
            </div>
          </div>
        </span>
        . You are allowed to do this operation <strong>any</strong> number of
        times (<strong>including zero</strong>).
      </p>

      <p>
        Return <code>true</code>{" "}
        <em>if you can sort the array in ascending order, else return </em>
        <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [8,4,2,30,15] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Let's look at the binary representation of
        every element. The numbers 2, 4, and 8 have one set bit each with binary
        representation "10", "100", and "1000" respectively. The numbers 15 and
        30 have four set bits each with binary representation "1111" and
        "11110". <br />
        We can sort the array using 4 operations: <br />
        - Swap nums[0] with nums[1]. This operation is valid because 8 and 4
        have one set bit each. The array becomes [4,8,2,30,15]. <br />
        - Swap nums[1] with nums[2]. This operation is valid because 8 and 2
        have one set bit each. The array becomes [4,2,8,30,15]. <br />
        - Swap nums[0] with nums[1]. This operation is valid because 4 and 2
        have one set bit each. The array becomes [2,4,8,30,15]. <br />
        - Swap nums[3] with nums[4]. This operation is valid because 30 and 15
        have four set bits each. The array becomes [2,4,8,15,30]. <br />
        The array has become sorted, hence we return true. <br />
        Note that there may be other sequences of operations which also sort the
        array.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The array is already sorted, hence we
        return true.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,16,8,4,2] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> It can be shown that it is not possible to
        sort the input array using any number of operations.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 2<sup>8</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3209: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code> and an integer{" "}
        <code>k</code>, return the number of{" "}
        <span
          data-keyword="subarray-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r18t:"
              >
                <div>subarrays</div>
              </div>
            </div>
          </div>
        </span>{" "}
        of <code>nums</code> where the bitwise <code>AND</code> of the elements
        of the subarray equals <code>k</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,1,1], k = 1</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">6</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>All subarrays contain only 1's.</p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,1,2], k = 1</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          Subarrays having an <code>AND</code> value of 1 are:{" "}
          <code>
            [
            <u>
              <strong>1</strong>
            </u>
            ,1,2]
          </code>
          ,{" "}
          <code>
            [1,
            <u>
              <strong>1</strong>
            </u>
            ,2]
          </code>
          ,{" "}
          <code>
            [
            <u>
              <strong>1,1</strong>
            </u>
            ,2]
          </code>
          .
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,2,3], k = 2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          Subarrays having an <code>AND</code> value of 2 are:{" "}
          <code>
            [1,
            <b>
              <u>2</u>
            </b>
            ,3]
          </code>
          ,{" "}
          <code>
            [1,
            <u>
              <strong>2,3</strong>
            </u>
            ]
          </code>
          .
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i], k &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3064: (
    <article role="main" class="blog-post">
      <p>
        There is a number <code>n</code> that you have to find.
      </p>

      <p>
        There is also a pre-defined API <code>int commonSetBits(int num)</code>,
        which returns the number of bits where both <code>n</code> and{" "}
        <code>num</code> are <code>1</code> in that position of their binary
        representation. In other words, it returns the number of{" "}
        <span data-keyword="set-bit">set bits</span> in <code>n &amp; num</code>
        , where <code>&amp;</code> is the bitwise <code>AND</code> operator.
      </p>

      <p>
        Return <em>the number</em> <code>n</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1: </strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input: </strong> <span class="example-io"> n = 31 </span>
        </p>
        <br />
        <p>
          <strong>Output: </strong> <span class="example-io"> 31 </span>
        </p>
        <br />
        <p>
          <strong>Explanation: </strong> It can be proven that it's possible to
          find <code>31</code> using the provided API.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2: </strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input: </strong> <span class="example-io"> n = 33 </span>
        </p>
        <br />

        <p>
          <strong>Output: </strong> <span class="example-io"> 33 </span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong> It can be proven that it's possible to
          find <code>33</code> using the provided API.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2<sup>30</sup> - 1
          </code>
        </li>
        <li>
          <code>
            0 &lt;= num &lt;= 2<sup>30</sup> - 1
          </code>
        </li>
        <li>
          If you ask for some <code>num</code> out of the given range, the
          output wouldn't be reliable.
        </li>
      </ul>
    </article>
  ),
  3094: (
    <div class=" col-xl-8 offset-xl-2 col-lg-10 offset-lg-1 ">
      <p>
        There is a number <code>n</code> between <code>0</code> and{" "}
        <code>
          2<sup>30</sup> - 1
        </code>{" "}
        (both inclusive) that you have to find.
      </p>

      <p>
        There is a pre-defined API <code>int commonBits(int num)</code> that
        helps you with your mission. But here is the challenge, every time you
        call this function, <code>n</code> changes in some way. But keep in
        mind, that you have to find the <strong>initial value of </strong>
        <code>n</code>.
      </p>

      <p>
        <code>commonBits(int num)</code> acts as follows:
      </p>

      <ul>
        <li>
          Calculate <code>count</code> which is the number of bits where both{" "}
          <code>n</code> and <code>num</code> have the same value in that
          position of their binary representation.
        </li>
        <li>
          <code>n = n XOR num</code>
        </li>
        <li>
          Return <code>count</code>.
        </li>
      </ul>

      <p>
        Return <em>the number</em> <code>n</code>.
      </p>

      <p>
        <strong>Note:</strong> In this world, all numbers are between{" "}
        <code>0</code> and{" "}
        <code>
          2<sup>30</sup> - 1
        </code>{" "}
        (both inclusive), thus for counting common bits, we see only the first
        30 bits of those numbers.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1: </strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input: </strong> <span class="example-io"> n = 31 </span>
        </p>
        <br />
        <p>
          <strong>Output: </strong> <span class="example-io"> 31 </span>
        </p>
        <br />
        <p>
          <strong>Explanation: </strong> It can be proven that it's possible to
          find 31 using the provided API.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2: </strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input: </strong> <span class="example-io"> n = 33 </span>
        </p>
        <br />

        <p>
          <strong>Output: </strong> <span class="example-io"> 33 </span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong> It can be proven that it's possible to
          find 33 using the provided API.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= n &lt;= 2<sup>30</sup> - 1
          </code>
        </li>
        <li>
          <code>
            0 &lt;= num &lt;= 2<sup>30</sup> - 1
          </code>
        </li>
        <li>
          If you ask for some <code>num</code> out of the given range, the
          output wouldn't be reliable.
        </li>
      </ul>
    </div>
  ),
  3199: (
    <div>
      Given three integer arrays <code>a</code>, <code>b</code>, and{" "}
      <code>c</code>, return the number of triplets{" "}
      <code>(a[i], b[j], c[k])</code>, such that the bitwise <code>XOR</code> of
      the elements of each triplet has an <strong>even</strong> number of{" "}
      <span data-keyword="set-bit">set bits</span>.<p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">a = [1], b = [2], c = [3]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          The only triplet is <code>(a[0], b[0], c[0])</code> and their{" "}
          <code>XOR</code> is:{" "}
          <code>
            1 XOR 2 XOR 3 = 00<sub>2</sub>
          </code>
          .
        </p>
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">a = [1,1], b = [2,3], c = [1,5]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">4</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>Consider these four triplets:</p>

        <ul>
          <li>
            <code>(a[0], b[1], c[0])</code>:{" "}
            <code>
              1 XOR 3 XOR 1 = 011<sub>2</sub>
            </code>
          </li>
          <li>
            <code>(a[1], b[1], c[0])</code>:{" "}
            <code>
              1 XOR 3 XOR 1 = 011<sub>2</sub>
            </code>
          </li>
          <li>
            <code>(a[0], b[0], c[1])</code>:{" "}
            <code>
              1 XOR 2 XOR 5 = 110<sub>2</sub>
            </code>
          </li>
          <li>
            <code>(a[1], b[0], c[1])</code>:{" "}
            <code>
              1 XOR 2 XOR 5 = 110<sub>2</sub>
            </code>
          </li>
        </ul>
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= a.length, b.length, c.length &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= a[i], b[i], c[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  170: (
    <div class="markdown-body div-width">
      <p>
        Design and implement a TwoSum class. It should support the following
        operations:
        <code>add</code> and <code>find</code>.
      </p>

      <p>
        <code>add</code> - Add the number to an internal data structure.
        <br />
        <code>find</code> - Find if there exists any pair of numbers which sum
        is equal to the value.
      </p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        add(1); add(3); add(5); <br />
        find(4) -&gt; true <br />
        find(7) -&gt; false
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        add(3); add(1); add(2); <br />
        find(3) -&gt; true <br />
        find(6) -&gt; false
      </pre>
    </div>
  ),
  297: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Serialization is the process of converting a data structure or object
        into a sequence of bits so that it can be stored in a file or memory
        buffer, or transmitted across a network connection link to be
        reconstructed later in the same or another computer environment.
      </p>

      <p>
        Design an algorithm to serialize and deserialize a binary tree. There is
        no restriction on how your serialization/deserialization algorithm
        should work. You just need to ensure that a binary tree can be
        serialized to a string and this string can be deserialized to the
        original tree structure.
      </p>

      <p>
        <strong>Clarification:</strong> The input/output format is the same as{" "}
        <a
          href="https://support.leetcode.com/hc/en-us/articles/32442719377939-How-to-create-test-cases-on-LeetCode#h_01J5EGREAW3NAEJ14XC07GRW1A"
          target="_blank"
          rel="noreferrer"
        >
          how LeetCode serializes a binary tree
        </a>
        . You do not necessarily need to follow this format, so please be
        creative and come up with different approaches yourself.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg"
        style={{ width: 442, height: 324 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3,null,null,4,5] <br />
        <strong>Output:</strong> [1,2,3,null,null,4,5]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  355: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design a simplified version of Twitter where users can post tweets,
        follow/unfollow another user, and is able to see the <code>10</code>{" "}
        most recent tweets in the user's news feed.
      </p>

      <p>
        Implement the <code>Twitter</code> class:
      </p>

      <ul>
        <li>
          <code>Twitter()</code> Initializes your twitter object.
        </li>
        <li>
          <code>void postTweet(int userId, int tweetId)</code> Composes a new
          tweet with ID <code>tweetId</code> by the user <code>userId</code>.
          Each call to this function will be made with a unique{" "}
          <code>tweetId</code>.
        </li>
        <li>
          <code>List&lt;Integer&gt; getNewsFeed(int userId)</code> Retrieves the{" "}
          <code>10</code> most recent tweet IDs in the user's news feed. Each
          item in the news feed must be posted by users who the user followed or
          by the user themself. Tweets must be{" "}
          <strong>ordered from most recent to least recent</strong>.
        </li>
        <li>
          <code>void follow(int followerId, int followeeId)</code> The user with
          ID <code>followerId</code> started following the user with ID{" "}
          <code>followeeId</code>.
        </li>
        <li>
          <code>void unfollow(int followerId, int followeeId)</code> The user
          with ID <code>followerId</code> started unfollowing the user with ID{" "}
          <code>followeeId</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["Twitter", "postTweet", "getNewsFeed", "follow", "postTweet",
        "getNewsFeed", "unfollow", "getNewsFeed"] <br />
        [[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]] <br />
        <strong>Output</strong> <br />
        [null, null, [5], null, null, [6, 5], null, [5]]
        <strong>Explanation</strong>
        <br />
        Twitter twitter = new Twitter();
        <br />
        twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).
        <br />
        twitter.getNewsFeed(1); // User 1's news feed should return a list with
        1 tweet id -&gt; [5]. return [5]
        <br />
        twitter.follow(1, 2); // User 1 follows user 2.
        <br />
        twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).
        <br />
        twitter.getNewsFeed(1); // User 1's news feed should return a list with
        2 tweet ids -&gt; [6, 5]. Tweet id 6 should precede tweet id 5 because
        it is posted after tweet id 5.
        <br />
        twitter.unfollow(1, 2); // User 1 unfollows user 2.
        <br />
        twitter.getNewsFeed(1); // User 1's news feed should return a list with
        1 tweet id -&gt; [5], since user 1 is no longer following user 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= userId, followerId, followeeId &lt;= 500</code>
        </li>
        <li>
          <code>
            0 &lt;= tweetId &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          All the tweets have <strong>unique</strong> IDs.
        </li>
        <li>
          At most{" "}
          <code>
            3 * 10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>postTweet</code>, <code>getNewsFeed</code>
          , <code>follow</code>, and <code>unfollow</code>.
        </li>
        <li>A user cannot follow himself.</li>
      </ul>
    </div>
  ),
  359: (
    <article role="main" class="blog-post">
      <p>
        Design a logger system that receives a stream of messages along with
        their timestamps. Each <strong>unique</strong> message should only be
        printed <strong>at most every 10 seconds</strong> (i.e. a message
        printed at timestamp <code>t</code> will prevent other identical
        messages from being printed until timestamp <code>t + 10</code>).
      </p>

      <p>
        All messages will come in chronological order. Several messages may
        arrive at the same timestamp.
      </p>

      <p>
        Implement the <code>Logger</code> class:
      </p>

      <ul>
        <li>
          <code>Logger()</code> Initializes the <code>logger</code> object.
        </li>
        <li>
          <code>bool shouldPrintMessage(int timestamp, string message)</code>{" "}
          Returns <code>true</code> if the <code>message</code> should be
          printed in the given <code>timestamp</code>, otherwise returns{" "}
          <code>false</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <br />
      <pre>
        <strong>Input</strong> <br />
        ["Logger", "shouldPrintMessage", "shouldPrintMessage",
        "shouldPrintMessage", "shouldPrintMessage", "shouldPrintMessage",
        "shouldPrintMessage"]
        <br />
        [[], [1, "foo"], [2, "bar"], [3, "foo"], [8, "bar"], [10, "foo"], [11,
        "foo"]] <br />
        <strong>Output</strong> <br />
        [null, true, true, false, false, false, true] <br />
        <strong>Explanation</strong> <br />
        Logger logger = new Logger(); <br />
        logger.shouldPrintMessage(1, "foo"); // return true, next allowed
        timestamp for "foo" is 1 + 10 = 11 <br />
        logger.shouldPrintMessage(2, "bar"); // return true, next allowed
        timestamp for "bar" is 2 + 10 = 12 <br />
        logger.shouldPrintMessage(3, "foo"); // 3 &lt; 11, return false <br />
        logger.shouldPrintMessage(8, "bar"); // 8 &lt; 12, return false <br />
        logger.shouldPrintMessage(10, "foo"); // 10 &lt; 11, return false <br />
        logger.shouldPrintMessage(11, "foo"); // 11 &gt;= 11, return true, next
        allowed timestamp for "foo" is 11 + 10 = 21
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= timestamp &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          Every <code>timestamp</code> will be passed in non-decreasing order
          (chronological order).
        </li>
        <li>
          <code>1 &lt;= message.length &lt;= 30</code>
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>shouldPrintMessage</code>.
        </li>
      </ul>
    </article>
  ),
  362: (
    <div class="markdown-body div-width">
      <p>
        Design a hit counter which counts the number of hits received in the
        past 5 minutes.{" "}
      </p>
      <p>
        Each function accepts a timestamp parameter (in seconds granularity) and
        you may assume that calls are being made to the system in chronological
        order (ie, the timestamp is monotonically increasing). You may assume
        that the earliest timestamp starts at 1.
      </p>

      <p>It is possible that several hits arrive roughly at the same time.</p>

      <p>
        <b>Example:</b>
      </p>

      <pre>
        {`HitCounter counter = new HitCounter();
    
    // hit at timestamp 1.
    counter.hit(1);
    
    // hit at timestamp 2.
    counter.hit(2);
    
    // hit at timestamp 3.
    counter.hit(3);
    
    // get hits at timestamp 4, should return 3.
    counter.getHits(4);
    
    // hit at timestamp 300.
    counter.hit(300);
    
    // get hits at timestamp 300, should return 4.
    counter.getHits(300);
    
    // get hits at timestamp 301, should return 3.
    counter.getHits(301);`}
      </pre>

      <p>
        <b>Follow up:</b>
        <br />
        What if the number of hits per second could be very large? Does your
        design scale?
      </p>
    </div>
  ),
  379: (
    <div class="markdown-body div-width">
      <p>Design a Phone Directory which supports the following operations:</p>

      <p></p>
      <ul>
        <li>
          <code>get</code>: Provide a number which is not assigned to anyone.
        </li>
        <li>
          <code>check</code>: Check if a number is available or not.
        </li>
        <li>
          <code>release</code>: Recycle or release a number.
        </li>
      </ul>
      <p></p>

      <p>
        <b>Example:</b>
      </p>
      <pre>
        {`// Init a phone directory containing a total of 3 numbers: 0, 1, and 2.
    PhoneDirectory directory = new PhoneDirectory(3);
    
    // It can return any available phone number. Here we assume it returns 0.
    directory.get();
    
    // Assume it returns 1.
    directory.get();
    
    // The number 2 is available, so return true.
    directory.check(2);
    
    // It returns 2, the only number that is left.
    directory.get();
    
    // The number 2 is no longer available, so return false.
    directory.check(2);
    
    // Release number 2 back to the pool.
    directory.release(2);
    
    // Number 2 is available again, return true.
    directory.check(2);`}
      </pre>
      <p></p>
    </div>
  ),
  622: (
    <article role="main" class="blog-post">
      <p>
        Design your implementation of the circular queue. The circular queue is
        a linear data structure in which the operations are performed based on
        FIFO (First In First Out) principle and the last position is connected
        back to the first position to make a circle. It is also called “Ring
        Buffer”.
      </p>

      <p>
        One of the benefits of the circular queue is that we can make use of the
        spaces in front of the queue. In a normal queue, once the queue becomes
        full, we cannot insert the next element even if there is a space in
        front of the queue. But using the circular queue, we can use the space
        to store new values.
      </p>

      <p>Your implementation should support following operations:</p>

      <ul>
        <li>
          <code class="language-plaintext highlighter-rouge">
            MyCircularQueue(k)
          </code>
          : Constructor, set the size of the queue to be k.
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">Front</code>: Get
          the front item from the queue. If the queue is empty, return -1.
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">Rear</code>: Get
          the last item from the queue. If the queue is empty, return -1.
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            enQueue(value)
          </code>
          : Insert an element into the circular queue. Return true if the
          operation is successful.
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">deQueue()</code>:
          Delete an element from the circular queue. Return true if the
          operation is successful.
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">isEmpty()</code>:
          Checks whether the circular queue is empty or not.
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">isFull()</code>:
          Checks whether the circular queue is full or not.
        </li>
      </ul>

      <p>
        <strong>Example:</strong>
      </p>
      <div class="language-plaintext highlighter-rouge">
        <div class="highlight">
          <pre class="highlight">
            <code>
              {`MyCircularQueue circularQueue = new MyCircularQueue(3); // set the size to be 3
    circularQueue.enQueue(1);  // return true
    circularQueue.enQueue(2);  // return true
    circularQueue.enQueue(3);  // return true
    circularQueue.enQueue(4);  // return false, the queue is full
    circularQueue.Rear();  // return 3
    circularQueue.isFull();  // return true
    circularQueue.deQueue();  // return true
    circularQueue.enQueue(4);  // return true
    circularQueue.Rear();  // return 4`}
            </code>
          </pre>
        </div>
      </div>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>All values will be in the range of [0, 1000].</li>
        <li>The number of operations will be in the range of [1, 1000].</li>
        <li>Please do not use the built-in Queue library.</li>
      </ul>
    </article>
  ),
  631: (
    <div class="markdown-body div-width">
      <p>
        Your task is to design the basic function of the Excel and implement the
        function of sum formula. Specifically, you need to implement the
        following functions: Specifically, you need to implement the following
        functions:
      </p>

      <p>
        <code>Excel(int H, char W):</code> This is the constructor. The inputs
        represents the height and width of the Excel form. <b>H</b> is a
        positive integer, range from 1 to 26. It represents the height. <b>W</b>{" "}
        is a character range from 'A' to 'Z'. It represents that the width is
        the number of characters from 'A' to <b>W</b>. The Excel form content is
        represented by a height * width 2D integer array <code>C</code>, it
        should be initialized to zero. You should assume that the first row of{" "}
        <code>C</code> starts from 1, and the first column of <code>C</code>{" "}
        starts from 'A'.
      </p>

      <br />

      <p>
        <code>void Set(int row, char column, int val):</code> Change the value
        at <code>C(row, column)</code> to be val.
      </p>
      <br />
      <p>
        <code>int Get(int row, char column):</code> Return the value at{" "}
        <code>C(row, column)</code>.
      </p>
      <br />
      <p>
        <code>int Sum(int row, char column, List of Strings : numbers):</code>{" "}
        This function calculate and set the value at <code>C(row, column)</code>
        , where the value should be the sum of cells represented by{" "}
        <code>numbers</code>. This function return the sum result at
        <code>C(row, column)</code>. This sum formula should exist until this
        cell is overlapped by another value or another sum formula.
      </p>

      <p>
        <code>numbers</code> is a list of strings that each string represent a
        cell or a range of cells. If the string represent a single cell, then it
        has the following format : <code>ColRow</code>. For example, "F7"
        represents the cell at (7, F).{" "}
      </p>

      <p>
        If the string represent a range of cells, then it has the following
        format : <code>ColRow1:ColRow2</code>. The range will always be a
        rectangle, and ColRow1 represent the position of the top-left cell, and
        ColRow2 represents the position of the bottom-right cell.{" "}
      </p>
      <br />
      <p>
        <b>Example 1:</b>
        <br />
      </p>
      <pre>
        {`Excel(3,"C");
    // construct a 3*3 2D array with all zero.
    //   A B C
    // 1 0 0 0
    // 2 0 0 0
    // 3 0 0 0
    
    Set(1, "A", 2);
    // set C(1,"A") to be 2.
    //   A B C
    // 1 2 0 0
    // 2 0 0 0
    // 3 0 0 0
    
    Sum(3, "C", ["A1", "A1:B2"]);
    // set C(3,"C") to be the sum of value at C(1,"A") and the values sum of the rectangle range whose top-left cell is C(1,"A") and bottom-right cell is C(2,"B"). Return 4.
    //   A B C
    // 1 2 0 0
    // 2 0 0 0
    // 3 0 0 4
    
    Set(2, "B", 2);
    // set C(2,"B") to be 2. Note C(3, "C") should also be changed.
    //   A B C
    // 1 2 0 0
    // 2 0 2 0
    // 3 0 0 6`}
      </pre>
      <p></p>

      <p>
        <b>Note:</b>
        <br />
      </p>
      <ul>
        <li>
          You could assume that there won't be any circular sum reference. For
          example, A1 = sum(B1) and B1 = sum(A1).
        </li>
        <li>
          {" "}
          The test cases are using double-quotes to represent a character.
        </li>
        <li>
          Please remember to <b>RESET</b> your class variables declared in class
          Excel, as static/class variables are{" "}
          <b>persisted across multiple test cases</b>. Please see{" "}
          <a href="https://leetcode.com/faq/#different-output">here</a> for more
          details.
        </li>
      </ul>
      <p></p>
    </div>
  ),
  635: (
    <div class="markdown-body div-width">
      <p>
        You are given several logs that each log contains a unique id and
        timestamp. Timestamp is a string that has the following format:{" "}
        <code>Year:Month:Day:Hour:Minute:Second</code>, for example,{" "}
        <code>2017:01:01:23:59:59</code>. All domains are zero-padded decimal
        numbers.{" "}
      </p>

      <p>Design a log storage system to implement the following functions:</p>

      <p>
        <code>{`void Put(int id, string timestamp)`}</code>: Given a log's
        unique id and timestamp, store the log in your storage system.
      </p>
      <br />
      <p>
        <code>
          {`int[] Retrieve(String start, String end, String granularity)</code>: Return the id of
            logs whose timestamps are within the range from start to end. Start and end all have the
            same format as timestamp. However, granularity means the time level for consideration. For
            example, start = "2017:01:01:23:59:59", end = "2017:01:02:23:59:59", granularity = "Day", it
            means that we need to find the logs within the range from Jan. 1st 2017 to Jan. 2nd 2017.`}{" "}
        </code>
      </p>

      <p>
        <b>Example 1:</b>
        <br />
      </p>
      <pre>
        {`put(1, "2017:01:01:23:59:59");
    put(2, "2017:01:01:22:59:59");
    put(3, "2016:01:01:00:00:00");
    retrieve("2016:01:01:01:01:01","2017:01:01:23:00:00","Year"); // return [1,2,3], because you need to return all logs within 2016 and 2017.
    retrieve("2016:01:01:01:01:01","2017:01:01:23:00:00","Hour"); // return [1,2], because you need to return all logs start from 2016:01:01:01 to 2017:01:01:23, where log 3 is left outside the range.`}
      </pre>
      <p></p>

      <p>
        <b>Note:</b>
        <br />
      </p>
      <ul>
        <li>There will be at most 300 operations of Put or Retrieve.</li>
        <li>Year ranges from [2000,2017]. Hour ranges from [00,23].</li>
        <li>Output for Retrieve has no order required.</li>
      </ul>
      <p></p>
    </div>
  ),
  641: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design your implementation of the circular double-ended queue (deque).
      </p>

      <p>
        Implement the <code>MyCircularDeque</code> class:
      </p>

      <ul>
        <li>
          <code>MyCircularDeque(int k)</code> Initializes the deque with a
          maximum size of <code>k</code>.
        </li>
        <li>
          <code>boolean insertFront()</code> Adds an item at the front of Deque.
          Returns <code>true</code> if the operation is successful, or{" "}
          <code>false</code> otherwise.
        </li>
        <li>
          <code>boolean insertLast()</code> Adds an item at the rear of Deque.
          Returns <code>true</code> if the operation is successful, or{" "}
          <code>false</code> otherwise.
        </li>
        <li>
          <code>boolean deleteFront()</code> Deletes an item from the front of
          Deque. Returns <code>true</code> if the operation is successful, or{" "}
          <code>false</code> otherwise.
        </li>
        <li>
          <code>boolean deleteLast()</code> Deletes an item from the rear of
          Deque. Returns <code>true</code> if the operation is successful, or{" "}
          <code>false</code> otherwise.
        </li>
        <li>
          <code>int getFront()</code> Returns the front item from the Deque.
          Returns <code>-1</code> if the deque is empty.
        </li>
        <li>
          <code>int getRear()</code> Returns the last item from Deque. Returns{" "}
          <code>-1</code> if the deque is empty.
        </li>
        <li>
          <code>boolean isEmpty()</code> Returns <code>true</code> if the deque
          is empty, or <code>false</code> otherwise.
        </li>
        <li>
          <code>boolean isFull()</code> Returns <code>true</code> if the deque
          is full, or <code>false</code> otherwise.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["MyCircularDeque", "insertLast", "insertLast", "insertFront",
        "insertFront", "getRear", "isFull", "deleteLast", "insertFront",
        "getFront"]
        <br /> [[3], [1], [2], [3], [4], [], [], [], [4], []] <br />
        <strong>Output</strong> <br />
        [null, true, true, true, false, 2, true, true, true, 4]
        <strong>Explanation</strong> <br />
        MyCircularDeque myCircularDeque = new MyCircularDeque(3); <br />
        myCircularDeque.insertLast(1); // return True <br />
        myCircularDeque.insertLast(2); // return True <br />
        myCircularDeque.insertFront(3); // return True <br />
        myCircularDeque.insertFront(4); // return False, the queue is full.{" "}
        <br />
        myCircularDeque.getRear(); // return 2 <br />
        myCircularDeque.isFull(); // return True <br />
        myCircularDeque.deleteLast(); // return True <br />
        myCircularDeque.insertFront(4); // return True <br />
        myCircularDeque.getFront(); // return 4
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= value &lt;= 1000</code>
        </li>
        <li>
          At most <code>2000</code> calls will be made to{" "}
          <code>insertFront</code>, <code>insertLast</code>,{" "}
          <code>deleteFront</code>, <code>deleteLast</code>,{" "}
          <code>getFront</code>, <code>getRear</code>, <code>isEmpty</code>,{" "}
          <code>isFull</code>.
        </li>
      </ul>
    </div>
  ),
  642: (
    <div class="markdown-body div-width">
      <p>
        Design a search engine. Users may input a sentence (at least one word
        and end with a special character <code>'#'</code>). For{" "}
        <b>each character</b> they type <b>except '#'</b>, you need to return
        the <b>top 3</b>
        historical hot sentences that have prefix the same as the part of
        sentence already typed. Here are the specific rules:
      </p>
      <ul>
        <li>
          The hot degree for a sentence is defined as the number of times a user
          typed the exactly same sentence before.
        </li>
        <li>
          The returned top 3 hot sentences should be sorted by hot degree (The
          first is the hottest one). If several sentences have the same degree
          of hot, you need to use ASCII-code order (smaller one appears first).
        </li>
        <li>
          If less than 3 hot sentences exist, then just return as many as you
          can.
        </li>
        <li>
          When the input is a special character, it means the sentence ends, and
          in this case, you need to return an empty list.
        </li>
      </ul>
      <p>Your job is to implement the following functions:</p>
      <p>The constructor function:</p>
      <p>
        <code>AutocompleteSystem(String[] sentences, int[] times):</code> This
        is the constructor. The input is <b>historical data</b>.{" "}
        <code>Sentences</code> is a string array consists of previously typed
        sentences. <code>Times</code> is the corresponding times a sentence has
        been typed. Your system should record these historical data.
      </p>
      <p>
        Now, the user wants to input a new sentence. The following function will
        provide the next character the user types:
      </p>
      <p>
        <code>List&lt;String&gt; input(char c):</code> The input <code>c</code>{" "}
        is the next character typed by the user. The character will only be
        lower-case letters (<code>'a'</code>
        to <code>'z'</code>), blank space (<code>' '</code>) or a special
        character (<code>'#'</code>). Also, the previously typed sentence should
        be recorded in your system. The output will be the <b>top 3</b>{" "}
        historical hot sentences that have prefix the same as the part of
        sentence already typed.
      </p>
      &nbsp;
      <p>
        <b>Example:</b> <br />
        <b>Operation:</b> AutocompleteSystem(["i love you", "island","ironman",
        "i love leetcode"], [5,3,2,2])
        <br />
        The system have already tracked down the following sentences and their
        corresponding times: <br />
        <code>"i love you"</code> : <code>5</code> times
        <br />
        <code>"island"</code> : <code>3</code> times
        <br />
        <code>"ironman"</code> : <code>2</code> times
        <br />
        <code>"i love leetcode"</code> : <code>2</code> times
        <br />
        Now, the user begins another search:
        <br />
        <br />
        <b>Operation:</b> input('i')
        <br />
        <b>Output:</b> ["i love you", "island","i love leetcode"]
        <br />
        <b>Explanation:</b>
        <br />
        There are four sentences that have prefix <code>"i"</code>. Among them,
        "ironman" and "i love leetcode" have same hot degree. Since{" "}
        <code>' '</code> has ASCII code 32 and <code>'r'</code> has ASCII code
        114, "i love leetcode" should be in front of "ironman". Also we only
        need to output top 3 hot sentences, so "ironman" will be ignored.
        <br />
        <br />
        <b>Operation:</b> input(' ')
        <br />
        <b>Output:</b> ["i love you","i love leetcode"]
        <br />
        <b>Explanation:</b>
        <br />
        There are only two sentences that have prefix <code>"i "</code>.<br />
        <br />
        <b>Operation:</b> input('a')
        <br />
        <b>Output:</b> []
        <br />
        <b>Explanation:</b>
        <br />
        There are no sentences that have prefix <code>"i a"</code>.<br />
        <br />
        <b>Operation:</b> input('#')
        <br />
        <b>Output:</b> []
        <br />
        <b>Explanation:</b>
        <br />
        The user finished the input, the sentence <code>"i a"</code> should be
        saved as a historical sentence in system. And the following input will
        be counted as a new search.
      </p>
      &nbsp;
      <p>
        <b>Note:</b>
      </p>
      <ul>
        <li>
          The input sentence will always start with a letter and end with '#',
          and only one blank space will exist between two words.
        </li>
        <li>
          The number of <b>complete sentences</b> that to be searched won't
          exceed 100. The length of each sentence including those in the
          historical data won't exceed 100.
        </li>
        <li>
          Please use double-quote instead of single-quote when you write test
          cases even for a character input.
        </li>
        <li>
          Please remember to <b>RESET</b> your class variables declared in class
          AutocompleteSystem, as static/class variables are{" "}
          <b>persisted across multiple test cases</b>. Please see{" "}
          <a href="https://leetcode.com/faq/#different-output">here</a>
          for more details.
        </li>
      </ul>
      <p>&nbsp;</p>
    </div>
  ),
  705: (
    <div>
      <p>Design a HashSet without using any built-in hash table libraries.</p>

      <p>
        Implement <code>MyHashSet</code> class:
      </p>

      <ul>
        <li>
          <code>void add(key)</code> Inserts the value <code>key</code> into the
          HashSet.
        </li>
        <li>
          <code>bool contains(key)</code> Returns whether the value{" "}
          <code>key</code> exists in the HashSet or not.
        </li>
        <li>
          <code>void remove(key)</code> Removes the value <code>key</code> in
          the HashSet. If <code>key</code> does not exist in the HashSet, do
          nothing.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        [&quot;MyHashSet&quot;, &quot;add&quot;, &quot;add&quot;,
        &quot;contains&quot;, &quot;contains&quot;, &quot;add&quot;,
        &quot;contains&quot;, &quot;remove&quot;, &quot;contains&quot;]
        <br /> [[], [1], [2], [1], [3], [2], [2], [2], [2]] <br />
        <strong>Output</strong> <br />
        [null, null, null, true, false, null, true, null, false] <br />
        <strong>Explanation</strong> <br />
        {`MyHashSet myHashSet = new MyHashSet();
    myHashSet.add(1);      // set = [1]
    myHashSet.add(2);      // set = [1, 2]
    myHashSet.contains(1); // return True
    myHashSet.contains(3); // return False, (not found)
    myHashSet.add(2);      // set = [1, 2]
    myHashSet.contains(2); // return True
    myHashSet.remove(2);   // set = [1]
    myHashSet.contains(2); // return False, (already removed)`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= key &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>add</code>, <code>remove</code>, and{" "}
          <code>contains</code>.
        </li>
      </ul>
    </div>
  ),
  707: (
    <div class="markdown-body div-width">
      <p>
        Design your&nbsp;implementation of the linked list. You can choose to
        use the singly linked list or the doubly linked list. A node in a
        singly&nbsp;linked list should have two attributes: <code>val</code>
        &nbsp;and <code>next</code>. <code>val</code> is the value of the
        current node, and <code>next</code>
        &nbsp;is&nbsp;a&nbsp;pointer/reference to the next node. If you want to
        use the doubly linked list,&nbsp;you will need&nbsp;one more attribute
        <code>prev</code> to indicate the previous node in the linked list.
        Assume all nodes in the linked list are 0-indexed.
      </p>

      <p>Implement these functions in your linked list class:</p>

      <ul>
        <li>
          get(index) : Get the value of&nbsp;the <code>index</code>-th&nbsp;node
          in the linked list. If the index is invalid, return <code>-1</code>.
        </li>
        <li>
          addAtHead(val) : Add a node of value <code>val</code>&nbsp;before the
          first element of the linked list. After the insertion, the new node
          will be the first node of the linked list.
        </li>
        <li>
          addAtTail(val) : Append a node of value <code>val</code>&nbsp;to the
          last element of the linked list.
        </li>
        <li>
          addAtIndex(index, val) : Add a node of value <code>val</code>
          &nbsp;before the <code>index</code>-th&nbsp;node in the linked
          list.&nbsp;If <code>index</code>&nbsp;equals&nbsp;to the length
          of&nbsp;linked list, the node will be appended to the end of linked
          list. If index is greater than the length, the node will not be
          inserted. If index is negative, the node will be inserted at the
          head&nbsp;of the list.
        </li>
        <li>
          deleteAtIndex(index) : Delete&nbsp;the <code>index</code>-th&nbsp;node
          in the linked list, if the index is valid.
        </li>
      </ul>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        {`MyLinkedList linkedList = new MyLinkedList();
    linkedList.addAtHead(1);
    linkedList.addAtTail(3);
    linkedList.addAtIndex(1, 2);  // linked list becomes 1-&gt;2-&gt;3
    linkedList.get(1);            // returns 2
    linkedList.deleteAtIndex(1);  // now the linked list is 1-&gt;3
    linkedList.get(1);&nbsp;&nbsp;&nbsp;         // returns 3`}
      </pre>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          All values will be in the range of <code>[1, 1000]</code>.
        </li>
        <li>
          The number of operations will be in the range of&nbsp;
          <code>[1, 1000]</code>.
        </li>
        <li>Please do not use the built-in LinkedList library.</li>
      </ul>
    </div>
  ),
  729: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are implementing a program to use as your calendar. We can add a new
        event if adding the event will not cause a{" "}
        <strong>double booking</strong>.
      </p>

      <p>
        A <strong>double booking</strong> happens when two events have some
        non-empty intersection (i.e., some moment is common to both events.).
      </p>

      <p>
        The event can be represented as a pair of integers{" "}
        <code>startTime</code> and <code>endTime</code> that represents a
        booking on the half-open interval <code>{`[startTime, endTime)`}</code>,
        the range of real numbers <code>x</code> such that{" "}
        <code>startTime &lt;= x &lt; endTime</code>.
      </p>

      <p>
        Implement the <code>MyCalendar</code> class:
      </p>

      <ul>
        <li>
          <code>MyCalendar()</code> Initializes the calendar object.
        </li>
        <li>
          <code>boolean book(int startTime, int endTime)</code> Returns{" "}
          <code>true</code> if the event can be added to the calendar
          successfully without causing a <strong>double booking</strong>.
          Otherwise, return <code>false</code> and do not add the event to the
          calendar.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        ["MyCalendar", "book", "book", "book"] <br />
        [[], [10, 20], [15, 25], [20, 30]] <br />
        <strong>Output</strong> <br />
        [null, true, false, true] <br />
        <strong>Explanation</strong> <br />
        MyCalendar myCalendar = new MyCalendar(); <br />
        myCalendar.book(10, 20); // return True <br />
        myCalendar.book(15, 25); // return False, It can not be booked because
        time 15 is already booked by another event.
        <br /> myCalendar.book(20, 30); // return True, The event can be booked,
        as the first event takes every time less than 20, but not including 20.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= start &lt; end &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          At most <code>1000</code> calls will be made to <code>book</code>.
        </li>
      </ul>
    </div>
  ),
  745: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design a special dictionary that searches the words in it by a prefix
        and a suffix.
      </p>

      <p>
        Implement the <code>WordFilter</code> class:
      </p>

      <ul>
        <li>
          <code>WordFilter(string[] words)</code> Initializes the object with
          the <code>words</code> in the dictionary.
        </li>
        <li>
          <code>f(string pref, string suff)</code> Returns{" "}
          <em>the index of the word in the dictionary,</em> which has the prefix{" "}
          <code>pref</code> and the suffix <code>suff</code>. If there is more
          than one valid index, return <strong>the largest</strong> of them. If
          there is no such word in the dictionary, return <code>-1</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["WordFilter", "f"] <br />
        [[["apple"]], ["a", "e"]] <br />
        <strong>Output</strong> <br />
        [null, 0] <br />
        <strong>Explanation</strong> <br />
        WordFilter wordFilter = new WordFilter(["apple"]); <br />
        wordFilter.f("a", "e"); // return 0, because the word at index 0 has
        prefix = "a" and suffix = "e".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= words.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 7</code>
        </li>
        <li>
          <code>1 &lt;= pref.length, suff.length &lt;= 7</code>
        </li>
        <li>
          <code>words[i]</code>, <code>pref</code> and <code>suff</code> consist
          of lowercase English letters only.
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls will be made to the function <code>f</code>.
        </li>
      </ul>
    </div>
  ),
  981: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design a time-based key-value data structure that can store multiple
        values for the same key at different time stamps and retrieve the key's
        value at a certain timestamp.
      </p>

      <p>
        Implement the <code>TimeMap</code> class:
      </p>

      <ul>
        <li>
          <code>TimeMap()</code> Initializes the object of the data structure.
        </li>
        <li>
          <code>void set(String key, String value, int timestamp)</code> Stores
          the key <code>key</code> with the value <code>value</code> at the
          given time <code>timestamp</code>.
        </li>
        <li>
          <code>String get(String key, int timestamp)</code> Returns a value
          such that <code>set</code> was called previously, with{" "}
          <code>timestamp_prev &lt;= timestamp</code>. If there are multiple
          such values, it returns the value associated with the largest{" "}
          <code>timestamp_prev</code>. If there are no values, it returns{" "}
          <code>""</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["TimeMap", "set", "get", "get", "set", "get", "get"] <br />
        [[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4],
        ["foo", 4], ["foo", 5]]
        <br />
        <strong>Output</strong>
        <br />
        [null, null, "bar", "bar", null, "bar2", "bar2"]
        <br />
        <strong>Explanation</strong> <br />
        {`TimeMap timeMap = new TimeMap();
        timeMap.set("foo", "bar", 1);  // store the key "foo" and value "bar" along with timestamp = 1.
        timeMap.get("foo", 1);         // return "bar"
        timeMap.get("foo", 3);         // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar".
        timeMap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4.
        timeMap.get("foo", 4);         // return "bar2"
        timeMap.get("foo", 5);         // return "bar2"`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= key.length, value.length &lt;= 100</code>
        </li>
        <li>
          <code>key</code> and <code>value</code> consist of lowercase English
          letters and digits.
        </li>
        <li>
          <code>
            1 &lt;= timestamp &lt;= 10<sup>7</sup>
          </code>
        </li>
        <li>
          All the timestamps <code>timestamp</code> of <code>set</code> are
          strictly increasing.
        </li>
        <li>
          At most{" "}
          <code>
            2 * 10<sup>5</sup>
          </code>{" "}
          calls will be made to <code>set</code> and <code>get</code>.
        </li>
      </ul>
    </div>
  ),
  1381: (
    <div class="elfjS" data-track-load="description_content">
      <p>Design a stack that supports increment operations on its elements.</p>

      <p>
        Implement the <code>CustomStack</code> class:
      </p>

      <ul>
        <li>
          <code>CustomStack(int maxSize)</code> Initializes the object with{" "}
          <code>maxSize</code> which is the maximum number of elements in the
          stack.
        </li>
        <li>
          <code>void push(int x)</code> Adds <code>x</code> to the top of the
          stack if the stack has not reached the <code>maxSize</code>.
        </li>
        <li>
          <code>int pop()</code> Pops and returns the top of the stack or{" "}
          <code>-1</code> if the stack is empty.
        </li>
        <li>
          <code>void inc(int k, int val)</code> Increments the bottom{" "}
          <code>k</code> elements of the stack by <code>val</code>. If there are
          less than <code>k</code> elements in the stack, increment all the
          elements in the stack.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["CustomStack","push","push","pop","push","push","push","increment","increment","pop","pop","pop","pop"]{" "}
        <br />
        [[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]] <br />
        <strong>Output</strong> <br />
        [null,null,null,2,null,null,null,null,null,103,202,201,-1] <br />
        <strong>Explanation</strong> <br />
        {`CustomStack stk = new CustomStack(3); // Stack is Empty []
        stk.push(1);                          // stack becomes [1]
        stk.push(2);                          // stack becomes [1, 2]
        stk.pop();                            // return 2 --&gt; Return top of the stack 2, stack becomes [1]
        stk.push(2);                          // stack becomes [1, 2]
        stk.push(3);                          // stack becomes [1, 2, 3]
        stk.push(4);                          // stack still [1, 2, 3], Do not add another elements as size is 4
        stk.increment(5, 100);                // stack becomes [101, 102, 103]
        stk.increment(2, 100);                // stack becomes [201, 202, 103]
        stk.pop();                            // return 103 --&gt; Return top of the stack 103, stack becomes [201, 202]
        stk.pop();                            // return 202 --&gt; Return top of the stack 202, stack becomes [201]
        stk.pop();                            // return 201 --&gt; Return top of the stack 201, stack becomes []
        stk.pop();                            // return -1 --&gt; Stack is empty return -1.`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= maxSize, x, k &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= val &lt;= 100</code>
        </li>
        <li>
          At most <code>1000</code> calls will be made to each method of{" "}
          <code>increment</code>, <code>push</code> and <code>pop</code> each
          separately.
        </li>
      </ul>
    </div>
  ),
  1500: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            We will use a file sharing system to share a very large file which
            consists of m small chunks with IDs from 1 to m.
          </p>

          <p>
            When users join the system, the system should assign&nbsp;
            <b>a unique</b> ID to them. The unique ID should be used <b>once</b>{" "}
            for each user, but when a user leaves the system, the ID can be{" "}
            <b>reused</b> again.
          </p>

          <p>
            Users can request a certain chunk of the file, the system should
            return a list of IDs of all the users who have this chunk. After
            that, if at least one other has this chunk, the user who requested
            the chunk <b>will get it</b>.
          </p>

          <p>
            <br />
            Implement the <code>FileSharing</code> class:
          </p>

          <ul>
            <li>
              <code>FileSharing(int m)</code> Initializes the object with the
              number of the chunks of the file <code>m</code>.
            </li>
            <li>
              <code>int join(int[] ownedChunks)</code>: A new user joined the
              system owning some chunks of the file, the system should assign an
              id to the user which is the
              <b>smallest positive integer</b> not taken by any other user.
              Return the assigned id.
            </li>
            <li>
              <code>void leave(int userID)</code>: The user with{" "}
              <code>userID</code> will leave the system, you cannot take file
              chunks from them anymore.
            </li>
            <li>
              <code>int[] request(int userID, int chunkID)</code>: The user
              with&nbsp;<code>userID</code>
              requested the file chunk with <code>chunkID</code>. Return a list
              of the IDs of all users that own this chunk sorted in ascending
              order.
            </li>
          </ul>

          <p>&nbsp;</p>

          <p>
            <b>Follow-ups:</b>
          </p>

          <ul>
            <li>
              What happens if the system identifies the user by their&nbsp;IP
              address instead of their unique ID and users disconnect and
              connect from the system with the same IP?
            </li>
            <li>
              If the users in the system join and leave the system frequently
              without requesting any chunks, will your solution still be
              efficient?
            </li>
            <li>
              If all each user join the system one time, request all files and
              then leave, will your solution still be efficient?
            </li>
            <li>
              If the system will be used to share <code>n</code> files where the
              <code>ith</code> file consists of <code>m[i]</code>, what are the
              changes you have to do?
            </li>
          </ul>

          <p>&nbsp;</p>
          <p>
            <strong>Example:</strong>
          </p>

          <pre>
            <b>Input:</b> <br />
            ["FileSharing","join","join","join","request","request","leave","request","leave","join"]{" "}
            <br />
            [[4],[[1,2]],[[2,3]],[[4]],[1,3],[2,2],[1],[2,1],[2],[[]]] <br />
            <b>Output:</b>
            <br />
            [null,1,2,3,[2],[1,2],null,[],null,1]
            <br />
            <b>Explanation:</b>
            <br />
            {`FileSharing fileSharing = new FileSharing(4); // We use the system to share a file of 4 chunks.
    fileSharing.join([1, 2]);    // A user who has chunks [1,2] joined the system, assign id = 1 to them and return 1.
    fileSharing.join([2, 3]);    // A user who has chunks [2,3] joined the system, assign id = 2 to them and return 2.
    fileSharing.join([4]);       // A user who has chunk [4] joined the system, assign id = 3 to them and return 3.
    fileSharing.request(1, 3);   // The user with id = 1 requested the third file chunk, as only the user with id = 2 has the file, return [2] . Notice that user 1 now has chunks [1,2,3].
    fileSharing.request(2, 2);   // The user with id = 2 requested the second file chunk, users with ids [1,2] have this chunk, thus we return [1,2]. We don't care if the user has the file and request it, we just return all the users that can give them the file.
    fileSharing.leave(1);        // The user with id = 1 left the system, all the file chunks with them are no longer available for other users.
    fileSharing.request(2, 1);   // The user with id = 2 requested the first file chunk, no one in the system has this chunk, we return empty list [].
    fileSharing.leave(2);        // The user with id = 2 left the system, all the file chunks with them are no longer available for other users.
    fileSharing.join([]);        // A user who doesn't have any chunks joined the system, assign id = 1 to them and return 1. Notice that ids 1 and 2 are free and we can reuse them.`}
          </pre>

          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              <code>1 &lt;= m &lt;= 10^5</code>
            </li>
            <li>
              <code>0 &lt;=&nbsp;ownedChunks.length &lt;= min(100, m)</code>
            </li>
            <li>
              <code>1 &lt;= ownedChunks[i] &lt;= m</code>
            </li>
            <li>
              Values of&nbsp;<code>ownedChunks</code> are unique.
            </li>
            <li>
              <code>1 &lt;=&nbsp;chunkID &lt;= m</code>
            </li>
            <li>
              <code>userID</code> is guaranteed to be a user in the system if
              you <strong>assign</strong>
              the IDs <strong>correctly</strong>.&nbsp;
            </li>
            <li>
              At most <code>10^4</code>&nbsp;calls will be made to&nbsp;
              <code>join</code>,&nbsp;<code>leave</code>&nbsp;and&nbsp;
              <code>request</code>.
            </li>
            <li>
              Each call to <code>leave</code> will have a matching call for{" "}
              <code>join</code>.
            </li>
          </ul>
        </div>
      </div>
    </div>
  ),
  1603: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design a parking system for a parking lot. The parking lot has three
        kinds of parking spaces: big, medium, and small, with a fixed number of
        slots for each size.
      </p>

      <p>
        Implement the <code>ParkingSystem</code> class:
      </p>

      <ul>
        <li>
          <code>ParkingSystem(int big, int medium, int small)</code> Initializes
          object of the <code>ParkingSystem</code> class. The number of slots
          for each parking space are given as part of the constructor.
        </li>
        <li>
          <code>bool addCar(int carType)</code> Checks whether there is a
          parking space of <code>carType</code> for the car that wants to get
          into the parking lot. <code>carType</code> can be of three kinds: big,
          medium, or small, which are represented by <code>1</code>,{" "}
          <code>2</code>, and <code>3</code> respectively.{" "}
          <strong>A car can only park in a parking space of its </strong>
          <code>carType</code>. If there is no space available, return{" "}
          <code>false</code>, else park the car in that size space and return{" "}
          <code>true</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["ParkingSystem", "addCar", "addCar", "addCar", "addCar"] <br />
        [[1, 1, 0], [1], [2], [3], [1]] <br />
        <strong>Output</strong> <br />
        [null, true, true, false, false] <br />
        <strong>Explanation</strong> <br />
        {`ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
        parkingSystem.addCar(1); // return true because there is 1 available slot for a big car
        parkingSystem.addCar(2); // return true because there is 1 available slot for a medium car
        parkingSystem.addCar(3); // return false because there is no available slot for a small car
        parkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= big, medium, small &lt;= 1000</code>
        </li>
        <li>
          <code>carType</code> is <code>1</code>, <code>2</code>, or{" "}
          <code>3</code>
        </li>
        <li>
          At most <code>1000</code> calls will be made to <code>addCar</code>
        </li>
      </ul>
    </div>
  ),
  1628: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            Given the <code>postfix</code> tokens of an arithmetic expression,
            build and return
            <em>the binary expression tree that represents this expression.</em>
          </p>

          <p>
            <b>Postfix</b> notation is a notation for writing arithmetic
            expressions in which the operands (numbers) appear before their
            operators. For example, the postfix tokens of the expression{" "}
            <code>4*(5-(2+7))</code> are represented in the array{" "}
            <code>postfix = ["4","5","7","2","+","-","*"]</code>.
          </p>

          <p>
            The class <code>Node</code> is an interface you should use to
            implement the binary expression tree. The returned tree will be
            tested using the <code>evaluate</code>
            function, which is supposed to evaluate the tree's value. You should
            not remove the
            <code>Node</code> class; however, you can modify it as you wish, and
            you can define other classes to implement it if needed.
          </p>

          <p>
            A{" "}
            <strong>
              <a
                href="https://en.wikipedia.org/wiki/Binary_expression_tree"
                target="_blank"
                rel="noreferrer"
              >
                binary expression tree
              </a>
            </strong>{" "}
            is a kind of binary tree used to represent arithmetic expressions.
            Each node of a binary expression tree has either zero or two
            children. Leaf nodes (nodes with 0 children) correspond to operands
            (numbers), and internal nodes (nodes with two children) correspond
            to the operators <code>'+'</code> (addition), <code>'-'</code>{" "}
            (subtraction),
            <code>'*'</code> (multiplication), and <code>'/'</code> (division).
          </p>

          <p>
            It's guaranteed that no subtree will yield a value that exceeds{" "}
            <code>
              10<sup>9</sup>
            </code>
            in absolute value, and all the operations are valid (i.e., no
            division by zero).
          </p>

          <p>
            <strong>Follow up:</strong> Could you design the expression tree
            such that it is more modular? For example, is your design able to
            support additional operators without making changes to your existing{" "}
            <code>evaluate</code> implementation?
          </p>

          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>

          <p>
            <strong>
              <img
                alt=""
                src="https://assets.leetcode.com/uploads/2020/10/15/untitled-diagram.png"
                style={{ width: 242, height: 241 }}
              />
            </strong>
          </p>

          <pre>
            <strong>Input:</strong> s = ["3","4","+","2","*","7","/"] <br />
            <strong>Output:</strong> 2 <br />
            <strong>Explanation:</strong> this expression evaluates to the above
            binary tree with expression {`(`}
            <code>{`(3+4)*2)/7) = 14/7 = 2.`}</code>
          </pre>

          <p>
            <strong>Example 2:</strong>
          </p>

          <p>
            <strong>
              <img
                alt=""
                src="https://assets.leetcode.com/uploads/2020/10/15/untitled-diagram2.png"
                style={{ width: 222, height: 232 }}
              />
            </strong>
          </p>

          <pre>
            <strong>Input:</strong> s = ["4","5","7","2","+","-","*"] <br />
            <strong>Output:</strong> -16 <br />
            <strong>Explanation:</strong> this expression evaluates to the above
            binary tree with expression 4*(5-<code>(2+7)) = 4*(-4) = -16.</code>
          </pre>

          <p>
            <strong>Example 3:</strong>
          </p>

          <pre>
            <strong>Input:</strong> s = ["4","2","+","3","5","1","-","*","+"]{" "}
            <br />
            <strong>Output:</strong> 18
          </pre>

          <p>
            <strong>Example 4:</strong>
          </p>

          <pre>
            <strong>Input:</strong> s =
            ["100","200","+","2","/","5","*","7","+"] <br />
            <strong>Output:</strong> 757
          </pre>

          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              <code>1 &lt;= s.length &lt; 100</code>
            </li>
            <li>
              <code>s.length</code> is odd.
            </li>
            <li>
              <code>s</code> consists of numbers and the characters{" "}
              <code>'+'</code>, <code>'-'</code>,<code>'*'</code>, and{" "}
              <code>'/'</code>.
            </li>
            <li>
              If <code>s[i]</code> is a number, its integer representation is no
              more than
              <code>
                10<sup>5</sup>
              </code>
              .
            </li>
            <li>
              It is guaranteed that <code>s</code> is a valid expression.
            </li>
            <li>
              The absolute value of the result and intermediate values will not
              exceed{" "}
              <code>
                10<sup>9</sup>
              </code>
              .
            </li>
            <li>
              It is guaranteed that no expression will include division by zero.
            </li>
          </ul>
        </div>
      </div>
    </div>
  ),
  1670: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design a queue that supports <code>push</code> and <code>pop</code>{" "}
        operations in the front, middle, and back.
      </p>

      <p>
        Implement the <code>FrontMiddleBack</code> class:
      </p>

      <ul>
        <li>
          <code>FrontMiddleBack()</code> Initializes the queue.
        </li>
        <li>
          <code>void pushFront(int val)</code> Adds <code>val</code> to the{" "}
          <strong>front</strong> of the queue.
        </li>
        <li>
          <code>void pushMiddle(int val)</code> Adds <code>val</code> to the{" "}
          <strong>middle</strong> of the queue.
        </li>
        <li>
          <code>void pushBack(int val)</code> Adds <code>val</code> to the{" "}
          <strong>back</strong> of the queue.
        </li>
        <li>
          <code>int popFront()</code> Removes the <strong>front</strong> element
          of the queue and returns it. If the queue is empty, return{" "}
          <code>-1</code>.
        </li>
        <li>
          <code>int popMiddle()</code> Removes the <strong>middle</strong>{" "}
          element of the queue and returns it. If the queue is empty, return{" "}
          <code>-1</code>.
        </li>
        <li>
          <code>int popBack()</code> Removes the <strong>back</strong> element
          of the queue and returns it. If the queue is empty, return{" "}
          <code>-1</code>.
        </li>
      </ul>

      <p>
        <strong>Notice</strong> that when there are <b>two</b> middle position
        choices, the operation is performed on the <strong>frontmost</strong>{" "}
        middle position choice. For example:
      </p>

      <ul>
        <li>
          Pushing <code>6</code> into the middle of <code>[1, 2, 3, 4, 5]</code>{" "}
          results in{" "}
          <code>
            [1, 2, <u>6</u>, 3, 4, 5]
          </code>
          .
        </li>
        <li>
          Popping the middle from{" "}
          <code>
            [1, 2, <u>3</u>, 4, 5, 6]
          </code>{" "}
          returns <code>3</code> and results in <code>[1, 2, 4, 5, 6]</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong>
        ["FrontMiddleBackQueue", "pushFront", "pushBack", "pushMiddle",
        "pushMiddle", "popFront", "popMiddle", "popMiddle", "popBack",
        "popFront"]
        <br /> [[], [1], [2], [3], [4], [], [], [], [], []] <br />
        <strong>Output:</strong> <br />
        [null, null, null, null, null, 1, 3, 4, 2, -1]
        <strong>Explanation:</strong> <br />
        {`FrontMiddleBackQueue q = new FrontMiddleBackQueue();
        q.pushFront(1);   // [<u>1</u>]
        q.pushBack(2);    // [1, <u>2</u>]
        q.pushMiddle(3);  // [1, <u>3</u>, 2]
        q.pushMiddle(4);  // [1, <u>4</u>, 3, 2]
        q.popFront();     // return 1 -&gt; [4, 3, 2]
        q.popMiddle();    // return 3 -&gt; [4, 2]
        q.popMiddle();    // return 4 -&gt; [2]
        q.popBack();      // return 2 -&gt; []
        q.popFront();     // return -1 -&gt; [] (The queue is empty)`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= val &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          At most&nbsp;<code>1000</code>&nbsp;calls will be made to&nbsp;
          <code>pushFront</code>,&nbsp;<code>pushMiddle</code>,&nbsp;
          <code>pushBack</code>, <code>popFront</code>, <code>popMiddle</code>,
          and <code>popBack</code>.
        </li>
      </ul>
    </div>
  ),
  1756: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            Design a queue-like data structure that moves the most recently used
            element to the end of the queue.
          </p>
          <p>
            Implement the <code>MRUQueue</code> class:
          </p>
          <ul>
            <li>
              <code>MRUQueue(int n)</code> constructs the <code>MRUQueue</code>{" "}
              with <code>n</code> elements: <code>[1,2,3,...,n]</code>.
            </li>
            <li>
              <code>fetch(int k)</code> moves the{" "}
              <code>
                k<sup>th</sup>
              </code>{" "}
              element <strong>(1-indexed)</strong> to the end of the queue and
              returns it.
            </li>
          </ul>
          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>
          <pre>
            <strong>Input:</strong> <br />
            ["MRUQueue", "fetch", "fetch", "fetch", "fetch"] <br />
            [[8], [3], [5], [2], [8]] <br />
            <strong>Output:</strong> <br />
            [null, 3, 6, 2, 2] <br />
            <strong>Explanation:</strong> <br />
            {`MRUQueue mRUQueue = new MRUQueue(8); // Initializes the queue to [1,2,3,4,5,6,7,8].
        mRUQueue.fetch(3); // Moves the 3<sup>rd</sup> element (3) to the end of the queue to become [1,2,4,5,6,7,8,3] and returns it.
        mRUQueue.fetch(5); // Moves the 5<sup>th</sup> element (6) to the end of the queue to become [1,2,4,5,7,8,3,6] and returns it.
        mRUQueue.fetch(2); // Moves the 2<sup>nd</sup> element (2) to the end of the queue to become [1,4,5,7,8,3,6,2] and returns it.
        mRUQueue.fetch(8); // The 8<sup>th</sup> element (2) is already at the end of the queue so just return it.`}
          </pre>
          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>
          <ul>
            <li>
              <code>1 &lt;= n &lt;= 2000</code>
            </li>
            <li>
              <code>1 &lt;= k &lt;= n</code>
            </li>
            <li>
              At most <code>2000</code> calls will be made to <code>fetch</code>
              .
            </li>
          </ul>
          <p>&nbsp;</p>
          <strong>Follow up:</strong> Finding an <code>O(n)</code> algorithm per{" "}
          <code>fetch</code> is a bit easy. Can you find an algorithm with a
          better complexity for each <code>fetch</code> call?
        </div>
      </div>
    </div>
  ),
  1804: (
    <div class="markdown-body div-width">
      <p>
        A trie (pronounced as "try") or prefix tree is a tree data structure
        used to efficiently store and retrieve keys in a dataset of strings.
        There are various applications of this data structure, such as
        autocomplete and spellchecker.
      </p>
      <p>Implement the Trie class:</p>

      <ul>
        <li>
          <code>Trie()</code> Initializes the trie object.
        </li>
        <li>
          <code>void insert(String word)</code> Inserts the string{" "}
          <code>word</code> into the trie.
        </li>
        <li>
          <code>int countWordsEqualTo(String word)</code> Returns the number of
          instances of the string <code>word</code> in the trie.
        </li>
        <li>
          <code>int countWordsStartingWith(String prefix)</code> Returns the
          number of strings in the trie that have the string <code>prefix</code>{" "}
          as a prefix.
        </li>
        <li>
          <code>void erase(String word)</code> Erases the string{" "}
          <code>word</code> from the trie.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        ["Trie", "insert", "insert", "countWordsEqualTo",
        "countWordsStartingWith", "erase", "countWordsEqualTo",
        "countWordsStartingWith", "erase", "countWordsStartingWith"]
        <br /> [[], ["apple"], ["apple"], ["apple"], ["app"], ["apple"],
        ["apple"], ["app"], ["apple"], ["app"]] <br />
        <strong>Output</strong> <br />
        [null, null, null, 2, 2, null, 1, 1, null, 0] <br />
        <strong>Explanation</strong> <br />
        {`Trie trie = new Trie();
        trie.insert("apple");               // Inserts "apple".
        trie.insert("apple");               // Inserts another "apple".
        trie.countWordsEqualTo("apple");    // There are two instances of "apple" so return 2.
        trie.countWordsStartingWith("app"); // "app" is a prefix of "apple" so return 2.
        trie.erase("apple");                // Erases one "apple".
        trie.countWordsEqualTo("apple");    // Now there is only one instance of "apple" so return 1.
        trie.countWordsStartingWith("app"); // return 1
        trie.erase("apple");                // Erases "apple". Now the trie is empty.
        trie.countWordsStartingWith("app"); // return 0`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= word.length, prefix.length &lt;= 2000</code>
        </li>
        <li>
          <code>word</code> and <code>prefix</code> consist only of lowercase
          English letters.
        </li>
        <li>
          At most{" "}
          <code>
            3 * 10<sup>4</sup>
          </code>{" "}
          calls <strong>in total</strong> will be made to <code>insert</code>,{" "}
          <code>countWordsEqualTo</code>, <code>countWordsStartingWith</code>,
          and <code>erase</code>.
        </li>
        <li>
          It is guaranteed that for any function call to <code>erase</code>, the
          string <code>word</code> will exist in the trie.
        </li>
      </ul>
    </div>
  ),
  2254: (
    <div class=" col-xl-8 offset-xl-2 col-lg-10 offset-lg-1 ">
      <p>
        You have a video sharing platform where users can upload and delete
        videos. Each <code>video</code> is a <strong>string</strong> of digits,
        where the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        digit of the string represents the content of the video at minute{" "}
        <code>i</code>. For example, the first digit represents the content at
        minute <code>0</code> in the video, the second digit represents the
        content at minute <code>1</code> in the video, and so on. Viewers of
        videos can also like and dislike videos. Internally, the platform keeps
        track of the <strong>number of views, likes, and dislikes</strong> on
        each video.
      </p>

      <p>
        When a video is uploaded, it is associated with the smallest available
        integer <code>videoId</code> starting from <code>0</code>. Once a video
        is deleted, the <code>videoId</code> associated with that video can be
        reused for another video.
      </p>

      <p>
        Implement the <code>VideoSharingPlatform</code> class:
      </p>

      <ul>
        <li>
          <code>VideoSharingPlatform()</code> Initializes the object.
        </li>
        <li>
          <code>int upload(String video)</code> The user uploads a{" "}
          <code>video</code>. Return the <code>videoId</code> associated with
          the video.
        </li>
        <li>
          <code>void remove(int videoId)</code> If there is a video associated
          with <code>videoId</code>, remove the video.
        </li>
        <li>
          <code>String watch(int videoId, int startMinute, int endMinute)</code>{" "}
          If there is a video associated with <code>videoId</code>, increase the
          number of views on the video by <code>1</code> and return the
          substring of the video string starting at <code>startMinute</code> and
          ending at <code>min(endMinute, video.length - 1</code>
          <code>)</code> (<strong>inclusive</strong>). Otherwise, return{" "}
          <code>"-1"</code>.
        </li>
        <li>
          <code>void like(int videoId)</code> Increases the number of likes on
          the video associated with <code>videoId</code> by <code>1</code> if
          there is a video associated with <code>videoId</code>.
        </li>
        <li>
          <code>void dislike(int videoId)</code> Increases the number of
          dislikes on the video associated with <code>videoId</code> by{" "}
          <code>1</code> if there is a video associated with{" "}
          <code>videoId</code>.
        </li>
        <li>
          <code>int[] getLikesAndDislikes(int videoId)</code> Return a{" "}
          <strong>0-indexed</strong> integer array <code>values</code> of length{" "}
          <code>2</code> where <code>values[0]</code> is the number of likes and{" "}
          <code>values[1]</code> is the number of dislikes on the video
          associated with <code>videoId</code>. If there is no video associated
          with <code>videoId</code>, return <code>[-1]</code>.
        </li>
        <li>
          <code>int getViews(int videoId)</code> Return the number of views on
          the video associated with <code>videoId</code>, if there is no video
          associated with <code>videoId</code>, return <code>-1</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        ["VideoSharingPlatform", "upload", "upload", "remove", "remove",
        "upload", "watch", "watch", "like", "dislike", "dislike",
        "getLikesAndDislikes", "getViews"] <br />
        [[], ["123"], ["456"], [4], [0], ["789"], [1, 0, 5], [1, 0, 1], [1],
        [1], [1], [1], [1]] <br />
        <strong>Output</strong> <br />
        [null, 0, 1, null, null, 0, "456", "45", null, null, null, [1, 2], 2]
        <strong>Explanation</strong> <br />
        {`VideoSharingPlatform videoSharingPlatform = new VideoSharingPlatform();
    videoSharingPlatform.upload("123");          // The smallest available videoId is 0, so return 0.
    videoSharingPlatform.upload("456");          // The smallest available <code>videoId</code> is 1, so return 1.
    videoSharingPlatform.remove(4);              // There is no video associated with videoId 4, so do nothing.
    videoSharingPlatform.remove(0);              // Remove the video associated with videoId 0.
    videoSharingPlatform.upload("789");          // Since the video associated with videoId 0 was deleted,
                                               // 0 is the smallest available <code>videoId</code>, so return 0.
    videoSharingPlatform.watch(1, 0, 5);         // The video associated with videoId 1 is "456".
                                               // The video from minute 0 to min(5, 3 - 1) = 2 is "456", so return "453".
    videoSharingPlatform.watch(1, 0, 1);         // The video associated with videoId 1 is "456".
                                               // The video from minute 0 to min(1, 3 - 1) = 1 is "45", so return "45".
    videoSharingPlatform.like(1);                // Increase the number of likes on the video associated with videoId 1.
    videoSharingPlatform.dislike(1);             // Increase the number of dislikes on the video associated with videoId 1.
    videoSharingPlatform.dislike(1);             // Increase the number of dislikes on the video associated with videoId 1.
    videoSharingPlatform.getLikesAndDislikes(1); // There is 1 like and 2 dislikes on the video associated with videoId 1, so return [1, 2].
    videoSharingPlatform.getViews(1);            // The video associated with videoId 1 has 2 views, so return 2.`}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["VideoSharingPlatform", "remove", "watch", "like", "dislike",
        "getLikesAndDislikes", "getViews"] <br />
        [[], [0], [0, 0, 1], [0], [0], [0], [0]] <br />
        <strong>Output</strong> <br />
        [null, null, "-1", null, null, [-1], -1]
        <strong>Explanation</strong> <br />
        {`VideoSharingPlatform videoSharingPlatform = new VideoSharingPlatform();
    videoSharingPlatform.remove(0);              // There is no video associated with videoId 0, so do nothing.
    videoSharingPlatform.watch(0, 0, 1);         // There is no video associated with videoId 0, so return "-1".
    videoSharingPlatform.like(0);                // There is no video associated with videoId 0, so do nothing.
    videoSharingPlatform.dislike(0);             // There is no video associated with videoId 0, so do nothing.
    videoSharingPlatform.getLikesAndDislikes(0); // There is no video associated with videoId 0, so return [-1].
    videoSharingPlatform.getViews(0);            // There is no video associated with videoId 0, so return -1.`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= video.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          The sum of <code>video.length</code> over all calls to{" "}
          <code>upload</code> does not exceed{" "}
          <code>
            10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>video</code> consists of digits.
        </li>
        <li>
          <code>
            0 &lt;= videoId &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= startMinute &lt; endMinute &lt; 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>startMinute &lt; video.length</code>
        </li>
        <li>
          The sum of <code>endMinute - startMinute</code> over all calls to{" "}
          <code>watch</code> does not exceed{" "}
          <code>
            10<sup>5</sup>
          </code>
          .
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>5</sup>
          </code>{" "}
          calls <strong>in total</strong> will be made to all functions.
        </li>
      </ul>
    </div>
  ),
  2336: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have a set which contains all positive integers{" "}
        <code>[1, 2, 3, 4, 5, ...]</code>.
      </p>

      <p>
        Implement the <code>SmallestInfiniteSet</code> class:
      </p>

      <ul>
        <li>
          <code>SmallestInfiniteSet()</code> Initializes the{" "}
          <strong>SmallestInfiniteSet</strong> object to contain{" "}
          <strong>all</strong> positive integers.
        </li>
        <li>
          <code>int popSmallest()</code> <strong>Removes</strong> and returns
          the smallest integer contained in the infinite set.
        </li>
        <li>
          <code>void addBack(int num)</code> <strong>Adds</strong> a positive
          integer <code>num</code> back into the infinite set, if it is{" "}
          <strong>not</strong> already in the infinite set.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        <br /> ["SmallestInfiniteSet", "addBack", "popSmallest", "popSmallest",
        "popSmallest", "addBack", "popSmallest", "popSmallest", "popSmallest"]
        <br /> [[], [2], [], [], [], [1], [], [], []] <br />
        <strong>Output</strong> <br />
        [null, null, 1, 2, 3, null, 1, 4, 5] <br />
        <strong>Explanation</strong> <br />
        {`SmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet();
        smallestInfiniteSet.addBack(2);    // 2 is already in the set, so no change is made.
        smallestInfiniteSet.popSmallest(); // return 1, since 1 is the smallest number, and remove it from the set.
        smallestInfiniteSet.popSmallest(); // return 2, and remove it from the set.
        smallestInfiniteSet.popSmallest(); // return 3, and remove it from the set.
        smallestInfiniteSet.addBack(1);    // 1 is added back to the set.
        smallestInfiniteSet.popSmallest(); // return 1, since 1 was added back to the set and
                                           // is the smallest number, and remove it from the set.
        smallestInfiniteSet.popSmallest(); // return 4, and remove it from the set.
        smallestInfiniteSet.popSmallest(); // return 5, and remove it from the set.`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= num &lt;= 1000</code>
        </li>
        <li>
          At most <code>1000</code> calls will be made <strong>in total</strong>{" "}
          to <code>popSmallest</code> and <code>addBack</code>.
        </li>
      </ul>
    </div>
  ),
  2353: (
    <div class="elfjS" data-track-load="description_content">
      <p>Design a food rating system that can do the following:</p>
      <ul>
        <li>
          <strong>Modify</strong> the rating of a food item listed in the
          system.
        </li>
        <li>
          Return the highest-rated food item for a type of cuisine in the
          system.
        </li>
      </ul>
      <p>
        Implement the <code>FoodRatings</code> class:
      </p>
      <ul>
        <li>
          <code>
            FoodRatings(String[] foods, String[] cuisines, int[] ratings)
          </code>{" "}
          Initializes the system. The food items are described by{" "}
          <code>foods</code>, <code>cuisines</code> and <code>ratings</code>,
          all of which have a length of <code>n</code>.
          <ul>
            <li>
              <code>foods[i]</code> is the name of the{" "}
              <code>
                i<sup>th</sup>
              </code>{" "}
              food,
            </li>
            <li>
              <code>cuisines[i]</code> is the type of cuisine of the{" "}
              <code>
                i<sup>th</sup>
              </code>{" "}
              food, and
            </li>
            <li>
              <code>ratings[i]</code> is the initial rating of the{" "}
              <code>
                i<sup>th</sup>
              </code>{" "}
              food.
            </li>
          </ul>
        </li>
        <li>
          <code>void changeRating(String food, int newRating)</code> Changes the
          rating of the food item with the name <code>food</code>.
        </li>
        <li>
          <code>String highestRated(String cuisine)</code> Returns the name of
          the food item that has the highest rating for the given type of{" "}
          <code>cuisine</code>. If there is a tie, return the item with the{" "}
          <strong>lexicographically smaller</strong> name.
        </li>
      </ul>
      <p>
        Note that a string <code>x</code> is lexicographically smaller than
        string <code>y</code> if <code>x</code> comes before <code>y</code> in
        dictionary order, that is, either <code>x</code> is a prefix of{" "}
        <code>y</code>, or if <code>i</code> is the first position such that{" "}
        <code>x[i] != y[i]</code>, then <code>x[i]</code> comes before{" "}
        <code>y[i]</code> in alphabetic order.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input</strong> <br />
        ["FoodRatings", "highestRated", "highestRated", "changeRating",
        "highestRated", "changeRating", "highestRated"]
        <br /> [[["kimchi", "miso", "sushi", "moussaka", "ramen", "bulgogi"],
        ["korean", "japanese", "japanese", "greek", "japanese", "korean"], [9,
        12, 8, 15, 14, 7]], ["korean"], ["japanese"], ["sushi", 16],
        ["japanese"], ["ramen", 16], ["japanese"]]
        <br /> <strong>Output</strong>
        <br />
        [null, "kimchi", "ramen", null, "sushi", null, "ramen"] <br />
        <strong>Explanation</strong> <br />
        {`FoodRatings foodRatings = new FoodRatings(["kimchi", "miso", "sushi", "moussaka", "ramen", "bulgogi"], ["korean", "japanese", "japanese", "greek", "japanese", "korean"], [9, 12, 8, 15, 14, 7]);
        foodRatings.highestRated("korean"); // return "kimchi"
                                            // "kimchi" is the highest rated korean food with a rating of 9.
        foodRatings.highestRated("japanese"); // return "ramen"
                                              // "ramen" is the highest rated japanese food with a rating of 14.
        foodRatings.changeRating("sushi", 16); // "sushi" now has a rating of 16.
        foodRatings.highestRated("japanese"); // return "sushi"
                                              // "sushi" is the highest rated japanese food with a rating of 16.
        foodRatings.changeRating("ramen", 16); // "ramen" now has a rating of 16.
        foodRatings.highestRated("japanese"); // return "ramen"
                                              // Both "sushi" and "ramen" have a rating of 16.
                                              // However, "ramen" is lexicographically smaller than "sushi".`}
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>n == foods.length == cuisines.length == ratings.length</code>
        </li>
        <li>
          <code>1 &lt;= foods[i].length, cuisines[i].length &lt;= 10</code>
        </li>
        <li>
          <code>foods[i]</code>, <code>cuisines[i]</code> consist of lowercase
          English letters.
        </li>
        <li>
          <code>
            1 &lt;= ratings[i] &lt;= 10<sup>8</sup>
          </code>
        </li>
        <li>
          All the strings in <code>foods</code> are <strong>distinct</strong>.
        </li>
        <li>
          <code>food</code> will be the name of a food item in the system across
          all calls to <code>changeRating</code>.
        </li>
        <li>
          <code>cuisine</code> will be a type of cuisine of{" "}
          <strong>at least one</strong> food item in the system across all calls
          to <code>highestRated</code>.
        </li>
        <li>
          At most{" "}
          <code>
            2 * 10<sup>4</sup>
          </code>{" "}
          calls <strong>in total</strong> will be made to{" "}
          <code>changeRating</code> and <code>highestRated</code>.
        </li>
      </ul>
    </div>
  ),
  2408: (
    <article role="main" class="blog-post">
      <p>
        You are given <code>n</code> tables represented with two arrays{" "}
        <code>names</code> and <code>columns</code>, where <code>names[i]</code>{" "}
        is the name of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        table and <code>columns[i]</code> is the number of columns of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        table.
      </p>

      <p>
        You should be able to perform the following <strong>operations</strong>:
      </p>

      <ul>
        <li>
          <strong>Insert</strong> a row in a specific table. Each row you insert
          has an id. The id is assigned using an auto-increment method where the
          id of the first inserted row is 1, and the id of each other row
          inserted into the same table is the id of the last inserted row (even
          if it was deleted) plus one.
        </li>
        <li>
          <strong>Delete</strong> a row from a specific table.{" "}
          <strong>Note</strong> that deleting a row does not affect the id of
          the next inserted row.
        </li>
        <li>
          <strong>Select</strong> a specific cell from any table and return its
          value.
        </li>
      </ul>

      <p>
        Implement the <code>SQL</code> class:
      </p>

      <ul>
        <li>
          <code>SQL(String[] names, int[] columns)</code> Creates the{" "}
          <code>n</code> tables.
        </li>
        <li>
          <code>void insertRow(String name, String[] row)</code> Adds a row to
          the table <code>name</code>. It is <strong>guaranteed</strong> that
          the table will exist, and the size of the array <code>row</code> is
          equal to the number of columns in the table.
        </li>
        <li>
          <code>void deleteRow(String name, int rowId)</code> Removes the row{" "}
          <code>rowId</code> from the table <code>name</code>. It is{" "}
          <strong>guaranteed</strong> that the table and row will{" "}
          <strong>exist</strong>.
        </li>
        <li>
          <code>String selectCell(String name, int rowId, int columnId)</code>{" "}
          Returns the value of the cell in the row <code>rowId</code> and the
          column <code>columnId</code> from the table <code>name</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["SQL", "insertRow", "selectCell", "insertRow", "deleteRow",
        "selectCell"] <br />
        [[["one", "two", "three"], [2, 3, 1]], ["two", ["first", "second",
        "third"]], ["two", 1, 3], ["two", ["fourth", "fifth", "sixth"]], ["two",
        1], ["two", 2, 2]]
        <br />
        <strong>Output</strong> <br />
        [null, null, "third", null, null, "fifth"] <br />
        <strong>Explanation</strong> <br />
        SQL sql = new SQL(["one", "two", "three"], [2, 3, 1]); // creates three
        tables. <br />
        sql.insertRow("two", ["first", "second", "third"]); // adds a row to the
        table "two". Its id is 1. <br />
        sql.selectCell("two", 1, 3); // return "third", finds the value of the
        third column in the row with id 1 of the table "two". <br />
        sql.insertRow("two", ["fourth", "fifth", "sixth"]); // adds another row
        to the table "two". Its id is 2. <br />
        sql.deleteRow("two", 1); // deletes the first row of the table "two".
        Note that the second row will still have the id 2. <br />
        sql.selectCell("two", 2, 2); // return "fifth", finds the value of the
        second column in the row with id 2 of the table "two".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == names.length == columns.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= names[i].length, row[i].length, name.length &lt;= 20
          </code>
        </li>
        <li>
          <code>names[i]</code>, <code>row[i]</code>, and <code>name</code>{" "}
          consist of lowercase English letters.
        </li>
        <li>
          <code>1 &lt;= columns[i] &lt;= 100</code>
        </li>
        <li>
          All the strings of <code>names</code> are <strong>distinct</strong>.
        </li>
        <li>
          <code>name</code> exists in the array <code>names</code>.
        </li>
        <li>
          <code>row.length</code> equals the number of columns in the chosen
          table.
        </li>
        <li>
          <code>rowId</code> and <code>columnId</code> will be valid.
        </li>
        <li>
          At most <code>250</code> calls will be made to <code>insertRow</code>{" "}
          and <code>deleteRow</code>.
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>selectCell</code>.
        </li>
      </ul>
    </article>
  ),
  2502: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code> representing the size of a{" "}
        <strong>0-indexed</strong> memory array. All memory units are initially
        free.
      </p>

      <p>You have a memory allocator with the following functionalities:</p>

      <ul>
        <li>
          <strong>Allocate </strong>a block of <code>size</code> consecutive
          free memory units and assign it the id <code>mID</code>.
        </li>
        <li>
          <strong>Free</strong> all memory units with the given id{" "}
          <code>mID</code>.
        </li>
      </ul>

      <p>
        <strong>Note</strong> that:
      </p>

      <ul>
        <li>
          Multiple blocks can be allocated to the same <code>mID</code>.
        </li>
        <li>
          You should free all the memory units with <code>mID</code>, even if
          they were allocated in different blocks.
        </li>
      </ul>

      <p>
        Implement the <code>Allocator</code> class:
      </p>

      <ul>
        <li>
          <code>Allocator(int n)</code> Initializes an <code>Allocator</code>{" "}
          object with a memory array of size <code>n</code>.
        </li>
        <li>
          <code>int allocate(int size, int mID)</code> Find the{" "}
          <strong>leftmost</strong> block of <code>size</code>{" "}
          <strong>consecutive</strong> free memory units and allocate it with
          the id <code>mID</code>. Return the block's first index. If such a
          block does not exist, return <code>-1</code>.
        </li>
        <li>
          <code>int freeMemory(int mID)</code> Free all memory units with the id{" "}
          <code>mID</code>. Return the number of memory units you have freed.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["Allocator", "allocate", "allocate", "allocate", "freeMemory",
        "allocate", "allocate", "allocate", "freeMemory", "allocate",
        "freeMemory"]
        <br /> [[10], [1, 1], [1, 2], [1, 3], [2], [3, 4], [1, 1], [1, 1], [1],
        [10, 2], [7]] <br />
        <strong>Output</strong> <br />
        [null, 0, 1, 2, 1, 3, 1, 6, 3, -1, 0] <br />
        <strong>Explanation</strong> <br />
        {`Allocator loc = new Allocator(10); // Initialize a memory array of size 10. All memory units are initially free.
        loc.allocate(1, 1); // The leftmost block's first index is 0. The memory array becomes [<strong>1</strong>,_,_,_,_,_,_,_,_,_]. We return 0.
        loc.allocate(1, 2); // The leftmost block's first index is 1. The memory array becomes [1,<strong>2</strong>,_,_,_,_,_,_,_,_]. We return 1.
        loc.allocate(1, 3); // The leftmost block's first index is 2. The memory array becomes [1,2,<strong>3</strong>,_,_,_,_,_,_,_]. We return 2.
        loc.freeMemory(2); // Free all memory units with mID 2. The memory array becomes [1,_, 3,_,_,_,_,_,_,_]. We return 1 since there is only 1 unit with mID 2.
        loc.allocate(3, 4); // The leftmost block's first index is 3. The memory array becomes [1,_,3,<strong>4</strong>,<strong>4</strong>,<strong>4</strong>,_,_,_,_]. We return 3.
        loc.allocate(1, 1); // The leftmost block's first index is 1. The memory array becomes [1,<strong>1</strong>,3,4,4,4,_,_,_,_]. We return 1.
        loc.allocate(1, 1); // The leftmost block's first index is 6. The memory array becomes [1,1,3,4,4,4,<strong>1</strong>,_,_,_]. We return 6.
        loc.freeMemory(1); // Free all memory units with mID 1. The memory array becomes [_,_,3,4,4,4,_,_,_,_]. We return 3 since there are 3 units with mID 1.
        loc.allocate(10, 2); // We can not find any free block with 10 consecutive free memory units, so we return -1.
        loc.freeMemory(7); // Free all memory units with mID 7. The memory array remains the same since there is no memory unit with mID 7. We return 0.`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n, size, mID &lt;= 1000</code>
        </li>
        <li>
          At most <code>1000</code> calls will be made to <code>allocate</code>{" "}
          and <code>freeMemory</code>.
        </li>
      </ul>
    </div>
  ),
  2590: (
    <article role="main" class="blog-post">
      <p>
        Design a Todo List Where users can add <strong>tasks</strong>, mark them
        as <strong>complete</strong>, or get a list of pending tasks. Users can
        also add <strong>tags</strong> to tasks and can filter the tasks by
        certain tags.
      </p>

      <p>
        Implement the <code>TodoList</code> class:
      </p>

      <ul>
        <li>
          <code>TodoList()</code> Initializes the object.
        </li>
        <li>
          <code>
            int addTask(int userId, String taskDescription, int dueDate,
            List&lt;String&gt; tags)
          </code>{" "}
          Adds a task for the user with the ID <code>userId</code> with a due
          date equal to <code>dueDate</code> and a list of tags attached to the
          task. The return value is the ID of the task. This ID starts at{" "}
          <code>1</code> and is <strong>sequentially</strong> increasing. That
          is, the first task's id should be <code>1</code>, the second task's id
          should be <code>2</code>, and so on.
        </li>
        <li>
          <code>List&lt;String&gt; getAllTasks(int userId)</code> Returns a list
          of all the tasks not marked as complete for the user with ID{" "}
          <code>userId</code>, ordered by the due date. You should return an
          empty list if the user has no uncompleted tasks.
        </li>
        <li>
          <code>List&lt;String&gt; getTasksForTag(int userId, String tag)</code>{" "}
          Returns a list of all the tasks that are not marked as complete for
          the user with the ID <code>userId</code> and have <code>tag</code> as
          one of their tags, ordered by their due date. Return an empty list if
          no such task exists.
        </li>
        <li>
          <code>void completeTask(int userId, int taskId)</code> Marks the task
          with the ID <code>taskId</code> as completed only if the task exists
          and the user with the ID <code>userId</code> has this task, and it is
          uncompleted.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["TodoList", "addTask", "addTask", "getAllTasks", "getAllTasks",
        "addTask", "getTasksForTag", "completeTask", "completeTask",
        "getTasksForTag", "getAllTasks"] <br />
        [[], [1, "Task1", 50, []], [1, "Task2", 100, ["P1"]], [1], [5], [1,
        "Task3", 30, ["P1"]], [1, "P1"], [5, 1], [1, 2], [1, "P1"], [1]] <br />
        <strong>Output</strong> <br />
        [null, 1, 2, ["Task1", "Task2"], [], 3, ["Task3", "Task2"], null, null,
        ["Task3"], ["Task3", "Task1"]] <br />
        <strong>Explanation</strong> <br />
        {`TodoList todoList = new TodoList();
    todoList.addTask(1, "Task1", 50, []); // return 1. This adds a new task for the user with id 1.
    todoList.addTask(1, "Task2", 100, ["P1"]); // return 2. This adds another task for the user with id 1.
    todoList.getAllTasks(1); // return ["Task1", "Task2"]. User 1 has two uncompleted tasks so far.
    todoList.getAllTasks(5); // return []. User 5 does not have any tasks so far.
    todoList.addTask(1, "Task3", 30, ["P1"]); // return 3. This adds another task for the user with id 1.
    todoList.getTasksForTag(1, "P1"); // return ["Task3", "Task2"]. This returns the uncompleted tasks that have the tag "P1" for the user with id 1.
    todoList.completeTask(5, 1); // This does nothing, since task 1 does not belong to user 5.
    todoList.completeTask(1, 2); // This marks task 2 as completed.
    todoList.getTasksForTag(1, "P1"); // return ["Task3"]. This returns the uncompleted tasks that have the tag "P1" for the user with id 1.
                                  // Notice that we did not include "Task2" because it is completed now.
    todoList.getAllTasks(1); // return ["Task3", "Task1"]. User 1 now has 2 uncompleted tasks.`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= userId, taskId, dueDate &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= tags.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= taskDescription.length &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= tags[i].length, tag.length &lt;= 20</code>
        </li>
        <li>
          All <code>dueDate</code> values are unique.
        </li>
        <li>
          All the strings consist of lowercase and uppercase English letters and
          digits.
        </li>
        <li>
          At most <code>100</code> calls will be made for each method.
        </li>
      </ul>
    </article>
  ),
  2642: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a <strong>directed weighted</strong> graph that consists of{" "}
        <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>.
        The edges of the graph are initially represented by the given array{" "}
        <code>edges</code> where{" "}
        <code>
          edges[i] = [from<sub>i</sub>, to<sub>i</sub>, edgeCost<sub>i</sub>]
        </code>{" "}
        meaning that there is an edge from{" "}
        <code>
          from<sub>i</sub>
        </code>{" "}
        to{" "}
        <code>
          to<sub>i</sub>
        </code>{" "}
        with the cost{" "}
        <code>
          edgeCost<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Implement the <code>Graph</code> class:
      </p>

      <ul>
        <li>
          <code>Graph(int n, int[][] edges)</code> initializes the object with{" "}
          <code>n</code> nodes and the given edges.
        </li>
        <li>
          <code>addEdge(int[] edge)</code> adds an edge to the list of edges
          where <code>edge = [from, to, edgeCost]</code>. It is guaranteed that
          there is no edge between the two nodes before adding this one.
        </li>
        <li>
          <code>int shortestPath(int node1, int node2)</code> returns the{" "}
          <strong>minimum</strong> cost of a path from <code>node1</code> to{" "}
          <code>node2</code>. If no path exists, return <code>-1</code>. The
          cost of a path is the sum of the costs of the edges in the path.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/01/11/graph3drawio-2.png"
        style={{ width: 621, height: 191 }}
      />
      <pre>
        <strong>Input</strong> <br />
        ["Graph", "shortestPath", "shortestPath", "addEdge", "shortestPath"]{" "}
        <br />
        [[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1,
        3, 4]], [0, 3]] <br />
        <strong>Output</strong> <br />
        [null, 6, -1, null, 6] <br />
        <strong>Explanation</strong> <br />
        {`Graph g = new Graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]);
        g.shortestPath(3, 2); // return 6. The shortest path from 3 to 2 in the first diagram above is 3 -&gt; 0 -&gt; 1 -&gt; 2 with a total cost of 3 + 2 + 1 = 6.
        g.shortestPath(0, 3); // return -1. There is no path from 0 to 3.
        g.addEdge([1, 3, 4]); // We add an edge from node 1 to node 3, and we get the second diagram above.
        g.shortestPath(0, 3); // return 6. The shortest path from 0 to 3 now is 0 -&gt; 1 -&gt; 3 with a total cost of 2 + 4 = 6.`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= edges.length &lt;= n * (n - 1)</code>
        </li>
        <li>
          <code>edges[i].length == edge.length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= from<sub>i</sub>, to<sub>i</sub>, from, to, node1, node2
            &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            1 &lt;= edgeCost<sub>i</sub>, edgeCost &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          There are no repeated edges and no self-loops in the graph at any
          point.
        </li>
        <li>
          At most <code>100</code> calls will be made for <code>addEdge</code>.
        </li>
        <li>
          At most <code>100</code> calls will be made for{" "}
          <code>shortestPath</code>.
        </li>
      </ul>
    </div>
  ),
  2671: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design a data structure that keeps track of the values in it and answers
        some queries regarding their frequencies.
      </p>

      <p>
        Implement the <code>FrequencyTracker</code> class.
      </p>

      <ul>
        <li>
          <code>FrequencyTracker()</code>: Initializes the{" "}
          <code>FrequencyTracker</code> object with an empty array initially.
        </li>
        <li>
          <code>void add(int number)</code>: Adds <code>number</code> to the
          data structure.
        </li>
        <li>
          <code>void deleteOne(int number)</code>: Deletes <strong>one</strong>{" "}
          occurrence of <code>number</code> from the data structure. The data
          structure <strong>may not contain</strong> <code>number</code>, and in
          this case nothing is deleted.
        </li>
        <li>
          <code>bool hasFrequency(int frequency)</code>: Returns{" "}
          <code>true</code> if there is a number in the data structure that
          occurs <code>frequency</code> number of times, otherwise, it returns{" "}
          <code>false</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["FrequencyTracker", "add", "add", "hasFrequency"] <br />
        [[], [3], [3], [2]] <br />
        <strong>Output</strong> <br />
        [null, null, null, true] <br />
        <strong>Explanation</strong> <br />
        {`FrequencyTracker frequencyTracker = new FrequencyTracker();
        frequencyTracker.add(3); // The data structure now contains [3]
        frequencyTracker.add(3); // The data structure now contains [3, 3]
        frequencyTracker.hasFrequency(2); // Returns true, because 3 occurs twice`}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["FrequencyTracker", "add", "deleteOne", "hasFrequency"] <br />
        [[], [1], [1], [1]] <br />
        <strong>Output</strong> <br />
        [null, null, null, false] <br />
        <strong>Explanation</strong> <br />
        {`FrequencyTracker frequencyTracker = new FrequencyTracker();
        frequencyTracker.add(1); // The data structure now contains [1]
        frequencyTracker.deleteOne(1); // The data structure becomes empty []
        frequencyTracker.hasFrequency(1); // Returns false, because the data structure is empty`}
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        {`["FrequencyTracker", "hasFrequency", "add", "hasFrequency"]
        [[], [2], [3], [1]]`}{" "}
        <br />
        <strong>Output</strong>
        <br />
        [null, false, null, true] <br />
        <strong>Explanation</strong> <br />
        {`FrequencyTracker frequencyTracker = new FrequencyTracker();
        frequencyTracker.hasFrequency(2); // Returns false, because the data structure is empty
        frequencyTracker.add(3); // The data structure now contains [3]
        frequencyTracker.hasFrequency(1); // Returns true, because 3 occurs once`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= number &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= frequency &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          At most,{" "}
          <code>
            2 *&nbsp;10<sup>5</sup>
          </code>
          &nbsp;calls will be made to <code>add</code>, <code>deleteOne</code>,
          and <code>hasFrequency</code>&nbsp;in <strong>total</strong>.
        </li>
      </ul>
    </div>
  ),
  1: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code>&nbsp;and an integer{" "}
        <code>target</code>, return{" "}
        <em>
          indices of the two numbers such that they add up to{" "}
          <code>target</code>
        </em>
        .
      </p>
      <p>
        You may assume that each input would have{" "}
        <strong>
          <em>exactly</em> one solution
        </strong>
        , and you may not use the <em>same</em> element twice.
      </p>
      <p>You can return the answer in any order.</p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [2,7,11,15], target = 9 <br />
        <strong>Output:</strong> [0,1] <br />
        <strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return
        [0, 1]. <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [3,2,4], target = 6 <br />
        <strong>Output:</strong> [1,2]
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [3,3], target = 6 <br />
        <strong>Output:</strong> [0,1]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            2 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <strong>Only one valid answer exists.</strong>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is
      less than{" "}
      <code>
        O(n<sup>2</sup>)
      </code>
      <font face="monospace">&nbsp;</font>time complexity?
    </div>
  ),
  41: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an unsorted integer array <code>nums</code>. Return the{" "}
        <em>smallest positive integer</em> that is <em>not present</em> in{" "}
        <code>nums</code>.
      </p>

      <p>
        You must implement an algorithm that runs in <code>O(n)</code> time and
        uses <code>O(1)</code> auxiliary space.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,0] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The numbers in the range [1,2] are all in
        the array.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,4,-1,1] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> 1 is in the array but 2 is missing.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [7,8,9,11,12] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The smallest positive integer 1 is
        missing.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  49: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of strings <code>strs</code>, group the{" "}
        <span
          data-keyword="anagram"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rme:"
              >
                <div>anagrams</div>
              </div>
            </div>
          </div>
        </span>{" "}
        together. You can return the answer in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            strs = ["eat","tea","tan","ate","nat","bat"]
          </span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">
            [["bat"],["nat","tan"],["ate","eat","tea"]]
          </span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <ul>
          <li>
            There is no string in strs that can be rearranged to form{" "}
            <code>"bat"</code>.
          </li>
          <li>
            The strings <code>"nat"</code> and <code>"tan"</code> are anagrams
            as they can be rearranged to form each other.
          </li>
          <li>
            The strings <code>"ate"</code>, <code>"eat"</code>, and{" "}
            <code>"tea"</code> are anagrams as they can be rearranged to form
            each other.
          </li>
        </ul>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">strs = [""]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[[""]]</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">strs = ["a"]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[["a"]]</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= strs.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= strs[i].length &lt;= 100</code>
        </li>
        <li>
          <code>strs[i]</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  205: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>s</code> and <code>t</code>,{" "}
        <em>determine if they are isomorphic</em>.
      </p>

      <p>
        Two strings <code>s</code> and <code>t</code> are isomorphic if the
        characters in <code>s</code> can be replaced to get <code>t</code>.
      </p>

      <p>
        All occurrences of a character must be replaced with another character
        while preserving the order of characters. No two characters may map to
        the same character, but a character may map to itself.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "egg", t = "add"</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">true</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>
          The strings <code>s</code> and <code>t</code> can be made identical
          by:
        </p>
        <ul>
          <li>
            Mapping <code>'e'</code> to <code>'a'</code>.
          </li>
          <li>
            Mapping <code>'g'</code> to <code>'d'</code>.
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "foo", t = "bar"</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">false</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>
          The strings <code>s</code> and <code>t</code> can not be made
          identical as <code>'o'</code> needs to be mapped to both{" "}
          <code>'a'</code> and <code>'r'</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "paper", t = "title"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">true</span>
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>t.length == s.length</code>
        </li>
        <li>
          <code>s</code> and <code>t</code> consist of any valid ascii
          character.
        </li>
      </ul>
    </div>
  ),
  249: (
    <div class="markdown-body div-width">
      <p>
        Given a string, we can "shift" each of its letter to its successive
        letter, for example: <code>"abc" -&gt; "bcd"</code>. We can keep
        "shifting" which forms the sequence:
      </p>

      <pre>"abc" -&gt; "bcd" -&gt; ... -&gt; "xyz"</pre>

      <p>
        Given a list of strings which contains only lowercase alphabets, group
        all strings that belong to the same shifting sequence.
      </p>

      <p>
        <b>Example:</b>
      </p>

      <pre>
        <b>Input:</b>{" "}
        <code>["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"],</code> <br />
        <b>Output:</b> <br />
        {`[
      ["abc","bcd","xyz"],
      ["az","ba"],
      ["acef"],
      ["a","z"]
    ]`}
      </pre>
    </div>
  ),
  290: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <code>pattern</code> and a string <code>s</code>, find if{" "}
        <code>s</code>&nbsp;follows the same pattern.
      </p>

      <p>
        Here <b>follow</b> means a full match, such that there is a bijection
        between a letter in <code>pattern</code> and a <b>non-empty</b> word in{" "}
        <code>s</code>. Specifically:
      </p>

      <ul>
        <li>
          Each letter in <code>pattern</code> maps to <strong>exactly</strong>{" "}
          one unique word in <code>s</code>.
        </li>
        <li>
          Each unique word in <code>s</code> maps to <strong>exactly</strong>{" "}
          one letter in <code>pattern</code>.
        </li>
        <li>
          No two letters map to the same word, and no two words map to the same
          letter.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            pattern = "abba", s = "dog cat cat dog"
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">true</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>The bijection can be established as:</p>

        <ul>
          <li>
            <code>'a'</code> maps to <code>"dog"</code>.
          </li>
          <li>
            <code>'b'</code> maps to <code>"cat"</code>.
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            pattern = "abba", s = "dog cat cat fish"
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">false</span>
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            pattern = "aaaa", s = "dog cat cat dog"
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">false</span>
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= pattern.length &lt;= 300</code>
        </li>
        <li>
          <code>pattern</code> contains only lower-case English letters.
        </li>
        <li>
          <code>1 &lt;= s.length &lt;= 3000</code>
        </li>
        <li>
          <code>s</code> contains only lowercase English letters and spaces{" "}
          <code>' '</code>.
        </li>
        <li>
          <code>s</code> <strong>does not contain</strong> any leading or
          trailing spaces.
        </li>
        <li>
          All the words in <code>s</code> are separated by a{" "}
          <strong>single space</strong>.
        </li>
      </ul>
    </div>
  ),
  356: (
    <div class="markdown-body div-width">
      <p>
        Given n points on a 2D plane, find if there is such a line parallel to
        y-axis that reflect the given points.
      </p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-1-1">[[1,1],[-1,1]]</span> <br />
        <strong>Output: </strong>
        <span id="example-output-1">true</span>
      </pre>

      <div>
        <p>
          <strong>Example 2:</strong>
        </p>

        <pre>
          <strong>Input: </strong>
          <span id="example-input-2-1">[[1,1],[-1,-1]]</span> <br />
          <strong>Output: </strong>
          <span id="example-output-2">false</span>
        </pre>
      </div>
    </div>
  ),
  448: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> of <code>n</code> integers where{" "}
        <code>nums[i]</code> is in the range <code>[1, n]</code>, return{" "}
        <em>an array of all the integers in the range</em> <code>[1, n]</code>{" "}
        <em>that do not appear in</em> <code>nums</code>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [4,3,2,7,8,2,3,1] <br />
        <strong>Output:</strong> [5,6] <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [1,1] <br />
        <strong>Output:</strong> [2]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= n</code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you do it without extra space and in{" "}
        <code>O(n)</code> runtime? You may assume the returned list does not
        count as extra space.
      </p>
    </div>
  ),
  500: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of strings <code>words</code>, return{" "}
        <em>
          the words that can be typed using letters of the alphabet on only one
          row of American keyboard like the image below
        </em>
        .
      </p>

      <p>
        <strong>Note</strong> that the strings are{" "}
        <strong>case-insensitive</strong>, both lowercased and uppercased of the
        same letter are treated as if they are at the same row.
      </p>

      <p>
        In the <strong>American keyboard</strong>:
      </p>

      <ul>
        <li>
          the first row consists of the characters <code>"qwertyuiop"</code>,
        </li>
        <li>
          the second row consists of the characters <code>"asdfghjkl"</code>,
          and
        </li>
        <li>
          the third row consists of the characters <code>"zxcvbnm"</code>.
        </li>
      </ul>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/10/12/keyboard.png"
        style={{ width: 800, maxWidth: 600, height: 267 }}
      />
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            words = ["Hello","Alaska","Dad","Peace"]
          </span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">["Alaska","Dad"]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          Both <code>"a"</code> and <code>"A"</code> are in the 2nd row of the
          American keyboard due to case insensitivity.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">words = ["omk"]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[]</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">words = ["adsdf","sfd"]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">["adsdf","sfd"]</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= words.length &lt;= 20</code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 100</code>
        </li>
        <li>
          <code>words[i]</code> consists of English letters (both lowercase and
          uppercase).&nbsp;
        </li>
      </ul>
    </div>
  ),
  522: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of strings <code>strs</code>, return{" "}
        <em>
          the length of the <strong>longest uncommon subsequence</strong>{" "}
          between them
        </em>
        . If the longest uncommon subsequence does not exist, return{" "}
        <code>-1</code>.
      </p>
      <p>
        An <strong>uncommon subsequence</strong> between an array of strings is
        a string that is a{" "}
        <strong>subsequence of one string but not the others</strong>.
      </p>
      <p>
        A <strong>subsequence</strong> of a string <code>s</code> is a string
        that can be obtained after deleting any number of characters from{" "}
        <code>s</code>.
      </p>
      <ul>
        <li>
          For example, <code>"abc"</code> is a subsequence of{" "}
          <code>"aebdc"</code> because you can delete the underlined characters
          in{" "}
          <code>
            "a<u>e</u>b<u>d</u>c"
          </code>{" "}
          to get <code>"abc"</code>. Other subsequences of <code>"aebdc"</code>{" "}
          include <code>"aebdc"</code>, <code>"aeb"</code>, and <code>""</code>{" "}
          (empty string).
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> strs = ["aba","cdc","eae"] <br />
        <strong>Output:</strong> 3 <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> strs = ["aaa","aaa","aa"] <br />
        <strong>Output:</strong> -1
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>2 &lt;= strs.length &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= strs[i].length &lt;= 10</code>
        </li>
        <li>
          <code>strs[i]</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  533: (
    <div class="markdown-body div-width">
      <p>
        Given a picture consisting of black and white pixels, and a positive
        integer N, find the number of black pixels located at some specific row{" "}
        <b>R</b> and column <b>C</b> that align with all the following rules:
      </p>

      <ul>
        <li> Row R and column C both contain exactly N black pixels.</li>
        <li>
          {" "}
          For all rows that have a black pixel at column C, they should be
          exactly the same as row R
        </li>
      </ul>

      <p>
        The picture is represented by a 2D char array consisting of 'B' and 'W',
        which means black and white pixels respectively.{" "}
      </p>

      <p>
        <b>Example:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b>
        {`[['W', 'B', 'W', 'B', 'B', 'W'],
     ['W', 'B', 'W', 'B', 'B', 'W'],
     ['W', 'B', 'W', 'B', 'B', 'W'],
     ['W', 'W', 'B', 'W', 'B', 'W']]`}
        N = 3<b>Output:</b> 6<b>Explanation:</b> All the bold 'B' are the black
        pixels we need (all 'B's at column 1 and 3).
        {`        0    1    2    3    4    5         column index
    0    [['W', <b>'B'</b>, 'W', <b>'B'</b>, 'B', 'W'],
    1     ['W', <b>'B'</b>, 'W', <b>'B'</b>, 'B', 'W'],
    2     ['W', <b>'B'</b>, 'W', <b>'B'</b>, 'B', 'W'],
    3     ['W', 'W', 'B', 'W', 'B', 'W']]`}{" "}
        <br />
        row index
        <br />
        Take 'B' at row R = 0 and column C = 1 as an example: <br />
        Rule 1, row R = 0 and column C = 1 both have exactly N = 3 black pixels.{" "}
        <br />
        Rule 2, the rows have black pixel at column C = 1 are row 0, row 1 and
        row 2. They are exactly the same as row R = 0.
      </pre>
      <p></p>

      <p>
        <b>Note:</b>
        <br />
      </p>
      <ul>
        <li>The range of width and height of the input 2D array is [1,200].</li>
      </ul>
      <p></p>
    </div>
  ),
  697: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a non-empty array of non-negative integers <code>nums</code>, the{" "}
        <b>degree</b> of this array is defined as the maximum frequency of any
        one of its elements.
      </p>

      <p>
        Your task is to find the smallest possible length of a (contiguous)
        subarray of <code>nums</code>, that has the same degree as{" "}
        <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,2,3,1] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        The input array has a degree of 2 because both elements 1 and 2 appear
        twice. <br />
        Of the subarrays that have the same degree: <br />
        [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2,
        2] <br />
        The shortest length is 2. So return 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,2,3,1,4,2] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> <br />
        The degree is 3 because the element 2 is repeated 3 times. <br />
        So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>nums.length</code> will be between 1 and 50,000.
        </li>
        <li>
          <code>nums[i]</code> will be an integer between 0 and 49,999.
        </li>
      </ul>
    </div>
  ),
  822: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two <strong>0-indexed</strong> integer arrays{" "}
        <code>fronts</code> and <code>backs</code> of length <code>n</code>,
        where the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        card has the positive integer <code>fronts[i]</code> printed on the
        front and <code>backs[i]</code> printed on the back. Initially, each
        card is placed on a table such that the front number is facing up and
        the other is facing down. You may flip over any number of cards
        (possibly zero).
      </p>

      <p>
        After flipping the cards, an integer is considered <strong>good</strong>{" "}
        if it is facing down on some card and <strong>not</strong> facing up on
        any card.
      </p>

      <p>
        Return{" "}
        <em>the minimum possible good integer after flipping the cards</em>. If
        there are no good integers, return <code>0</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> fronts = [1,2,4,4,7], backs = [1,3,4,1,3] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        If we flip the second card, the face up numbers are [1,3,4,4,7] and the
        face down are [1,2,4,1,3]. <br />
        2 is the minimum good integer as it appears facing down but not facing
        up. <br />
        It can be shown that 2 is the minimum possible good integer obtainable
        after flipping some cards.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> fronts = [1], backs = [1] <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong>
        <br />
        There are no good integers no matter how we flip the cards, so we return
        0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == fronts.length == backs.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= fronts[i], backs[i] &lt;= 2000</code>
        </li>
      </ul>
    </div>
  ),
  859: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>s</code> and <code>goal</code>, return{" "}
        <code>true</code>
        <em> if you can swap two letters in </em>
        <code>s</code>
        <em> so the result is equal to </em>
        <code>goal</code>
        <em>, otherwise, return </em>
        <code>false</code>
        <em>.</em>
      </p>

      <p>
        Swapping letters is defined as taking two indices <code>i</code> and{" "}
        <code>j</code> (0-indexed) such that <code>i != j</code> and swapping
        the characters at <code>s[i]</code> and <code>s[j]</code>.
      </p>

      <ul>
        <li>
          For example, swapping at indices <code>0</code> and <code>2</code> in{" "}
          <code>"abcd"</code> results in <code>"cbad"</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "ab", goal = "ba" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> You can swap s[0] = 'a' and s[1] = 'b' to
        get "ba", which is equal to goal.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "ab", goal = "ab" <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The only letters you can swap are s[0] =
        'a' and s[1] = 'b', which results in "ba" != goal.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aa", goal = "aa" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> You can swap s[0] = 'a' and s[1] = 'a' to
        get "aa", which is equal to goal.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length, goal.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> and <code>goal</code> consist of lowercase letters.
        </li>
      </ul>
    </div>
  ),
  1138: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        On an alphabet board, we start at position <code>(0, 0)</code>,
        corresponding to character&nbsp;<code>board[0][0]</code>.
      </p>
      <p>
        Here,{" "}
        <code>board = ["abcde", "fghij", "klmno", "pqrst", "uvwxy", "z"]</code>,
        as shown in the diagram below.
      </p>
      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/07/28/azboard.png"
          style={{ width: 250, height: 317 }}
        />
      </p>
      <p>We may make the following moves:</p>
      <ul>
        <li>
          <code>'U'</code> moves our position up one row, if the position exists
          on the board;
        </li>
        <li>
          <code>'D'</code> moves our position down one row, if the position
          exists on the board;
        </li>
        <li>
          <code>'L'</code> moves our position left one column, if the position
          exists on the board;
        </li>
        <li>
          <code>'R'</code> moves our position right one column, if the position
          exists on the board;
        </li>
        <li>
          <code>'!'</code>&nbsp;adds the character <code>board[r][c]</code> at
          our current position <code>(r, c)</code>&nbsp;to the&nbsp;answer.
        </li>
      </ul>
      <p>
        (Here, the only positions that exist on the board are positions with
        letters on them.)
      </p>
      <p>
        Return a sequence of moves that makes our answer equal to{" "}
        <code>target</code>&nbsp;in the minimum number of moves.&nbsp; You may
        return any path that does so.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> target = "leet" <br />
        <strong>Output:</strong> "DDR!UURRR!!DDD!" <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> target = "code" <br />
        <strong>Output:</strong> "RR!DDRR!UUL!R!"
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= target.length &lt;= 100</code>
        </li>
        <li>
          <code>target</code> consists only of English lowercase letters.
        </li>
      </ul>
    </div>
  ),
  1207: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>arr</code>, return <code>true</code>{" "}
        <em>
          if the number of occurrences of each value in the array is{" "}
          <strong>unique</strong> or{" "}
        </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,2,2,1,1,3] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong>&nbsp;The value 1 has 3 occurrences, 2 has
        2 and 3 has 1. No two values have the same number of occurrences.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,2] <br />
        <strong>Output:</strong> false
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [-3,0,1,-3,1,1,1,-3,10,0] <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= arr.length &lt;= 1000</code>
        </li>
        <li>
          <code>-1000 &lt;= arr[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1224: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> of positive integers, return the
        longest possible length of an array prefix of <code>nums</code>, such
        that it is possible to remove <strong>exactly one</strong> element from
        this prefix so that every number that has appeared in it will have the
        same number of occurrences.
      </p>

      <p>
        If after removing one element there are no remaining elements, it's
        still considered that every appeared number has the same number of
        ocurrences (0).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,2,1,1,5,3,3,5] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> For the subarray [2,2,1,1,5,3,3] of length
        7, if we remove nums[4] = 5, we will get [2,2,1,1,3,3], so that each
        number will appear exactly twice.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,2,2,2,3,3,3,4,4,4,5] <br />
        <strong>Output:</strong> 13
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1331: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers&nbsp;<code>arr</code>, replace each element
        with its rank.
      </p>

      <p>
        The rank represents how large the element is. The rank has the following
        rules:
      </p>

      <ul>
        <li>Rank is an integer starting from 1.</li>
        <li>
          The larger the element, the larger the rank. If two elements are
          equal, their rank must be the same.
        </li>
        <li>Rank should be as small as possible.</li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [40,10,20,30] <br />
        <strong>Output:</strong> [4,1,2,3] <br />
        <strong>Explanation</strong>: 40 is the largest element. 10 is the
        smallest. 20 is the second smallest. 30 is the third smallest.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [100,100,100] <br />
        <strong>Output:</strong> [1,1,1] <br />
        <strong>Explanation</strong>: Same elements share the same rank.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [37,12,28,9,100,56,80,5,12] <br />
        <strong>Output:</strong> [5,3,4,2,8,6,7,1,3]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= arr.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup>&nbsp;&lt;= arr[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1339: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, split the binary tree into
        two subtrees by removing one edge such that the product of the sums of
        the subtrees is maximized.
      </p>

      <p>
        Return <em>the maximum product of the sums of the two subtrees</em>.
        Since the answer may be too large, return it <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>
        <strong>Note</strong> that you need to maximize the answer before taking
        the mod and not after taking it.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/01/21/sample_1_1699.png"
        style={{ width: 500, height: 167 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3,4,5,6] <br />
        <strong>Output:</strong> 110 <br />
        <strong>Explanation:</strong> Remove the red edge and get 2 binary trees
        with sum 11 and 10. Their product is 110 (11*10)
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/01/21/sample_2_1699.png"
        style={{ width: 500, height: 211 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,null,2,3,4,null,null,5,6] <br />
        <strong>Output:</strong> 90 <br />
        <strong>Explanation:</strong> Remove the red edge and get 2 binary trees
        with sum 15 and 6.Their product is 90 (15*6)
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [2, 5 * 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1399: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code>.
      </p>

      <p>
        Each number from <code>1</code> to <code>n</code> is grouped according
        to the sum of its digits.
      </p>

      <p>
        Return <em>the number of groups that have the largest size</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 13 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> There are 9 groups in total, they are
        grouped according sum of its digits of numbers from 1 to 13:
        <br /> [1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. <br />
        There are 4 groups with largest size.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> There are 2 groups [1], [2] of size 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2190: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code>.<strong> </strong>You are also given an integer{" "}
        <code>key</code>, which is present in <code>nums</code>.
      </p>

      <p>
        For every unique integer <code>target</code> in <code>nums</code>,{" "}
        <strong>count</strong> the number of times <code>target</code>{" "}
        immediately follows an occurrence of <code>key</code> in{" "}
        <code>nums</code>. In other words, count the number of indices{" "}
        <code>i</code> such that:
      </p>

      <ul>
        <li>
          <code>0 &lt;= i &lt;= nums.length - 2</code>,
        </li>
        <li>
          <code>nums[i] == key</code> and,
        </li>
        <li>
          <code>nums[i + 1] == target</code>.
        </li>
      </ul>

      <p>
        Return <em>the </em>
        <code>target</code>
        <em>
          {" "}
          with the <strong>maximum</strong> count
        </em>
        . The test cases will be generated such that the <code>target</code>{" "}
        with maximum count is unique.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,100,200,1,100], key = 1 <br />
        <strong>Output:</strong> 100 <br />
        <strong>Explanation:</strong> For target = 100, there are 2 occurrences
        at indices 1 and 4 which follow an occurrence of key.
        <br /> No other integers follow an occurrence of key, so we return 100.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,2,2,2,3], key = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> For target = 2, there are 3 occurrences at
        indices 1, 2, and 3 which follow an occurrence of key.
        <br />
        For target = 3, there is only one occurrence at index 4 which follows an
        occurrence of key.
        <br /> target = 2 has the maximum number of occurrences following an
        occurrence of key, so we return 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 1000</code>
        </li>
        <li>
          The test cases will be generated such that the answer is unique.
        </li>
      </ul>
    </div>
  ),
  2365: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array of positive integers{" "}
        <code>tasks</code>, representing tasks that need to be completed{" "}
        <strong>in order</strong>, where <code>tasks[i]</code> represents the{" "}
        <strong>type</strong> of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        task.
      </p>

      <p>
        You are also given a positive integer <code>space</code>, which
        represents the <strong>minimum</strong> number of days that must pass{" "}
        <strong>after</strong> the completion of a task before another task of
        the <strong>same</strong> type can be performed.
      </p>

      <p>Each day, until all tasks have been completed, you must either:</p>

      <ul>
        <li>
          Complete the next task from <code>tasks</code>, or
        </li>
        <li>Take a break.</li>
      </ul>

      <p>
        Return
        <em>
          {" "}
          the <strong>minimum</strong> number of days needed to complete all
          tasks
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> tasks = [1,2,1,2,3,1], space = 3 <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> <br />
        {`One way to complete all tasks in 9 days is as follows:
        Day 1: Complete the 0th task.
        Day 2: Complete the 1st task.
        Day 3: Take a break.
        Day 4: Take a break.
        Day 5: Complete the 2nd task.
        Day 6: Complete the 3rd task.
        Day 7: Take a break.
        Day 8: Complete the 4th task.
        Day 9: Complete the 5th task.
        It can be shown that the tasks cannot be completed in less than 9 days.`}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> tasks = [5,8,8,5], space = 2 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> <br />
        {`One way to complete all tasks in 6 days is as follows:
        Day 1: Complete the 0th task.
        Day 2: Complete the 1st task.
        Day 3: Take a break.
        Day 4: Take a break.
        Day 5: Complete the 2nd task.
        Day 6: Complete the 3rd task.
        It can be shown that the tasks cannot be completed in less than 6 days.`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= tasks.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= tasks[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= space &lt;= tasks.length</code>
        </li>
      </ul>
    </div>
  ),
  2404: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return{" "}
        <em>the most frequent even element</em>.
      </p>

      <p>
        If there is a tie, return the <strong>smallest</strong> one. If there is
        no such element, return <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1,2,2,4,4,1] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        The even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.{" "}
        <br />
        We return the smallest one, which is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,4,4,9,2,4] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> 4 is the even element appears the most.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [29,47,21,41,13,37,25,7] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> There is no even element.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 2000</code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2475: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array of positive integers{" "}
        <code>nums</code>. Find the number of triplets <code>(i, j, k)</code>{" "}
        that meet the following conditions:
      </p>

      <ul>
        <li>
          <code>0 &lt;= i &lt; j &lt; k &lt; nums.length</code>
        </li>
        <li>
          <code>nums[i]</code>, <code>nums[j]</code>, and <code>nums[k]</code>{" "}
          are <strong>pairwise distinct</strong>.
          <ul>
            <li>
              In other words, <code>nums[i] != nums[j]</code>,{" "}
              <code>nums[i] != nums[k]</code>, and{" "}
              <code>nums[j] != nums[k]</code>.
            </li>
          </ul>
        </li>
      </ul>

      <p>
        Return <em>the number of triplets that meet the conditions.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,4,2,4,3] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The following triplets meet the
        conditions: <br />
        - (0, 2, 4) because 4 != 2 != 3 <br />
        - (1, 2, 4) because 4 != 2 != 3 <br />
        - (2, 3, 4) because 2 != 4 != 3 <br />
        Since there are 3 triplets, we return 3. <br />
        Note that (2, 0, 4) is not a valid triplet because 2 &gt; 0.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1,1] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> No triplets meet the conditions so we
        return 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>3 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  2598: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> and an integer <code>value</code>.
      </p>

      <p>
        In one operation, you can add or subtract <code>value</code> from any
        element of <code>nums</code>.
      </p>

      <ul>
        <li>
          For example, if <code>nums = [1,2,3]</code> and <code>value = 2</code>
          , you can choose to subtract <code>value</code> from{" "}
          <code>nums[0]</code> to make <code>nums = [-1,2,3]</code>.
        </li>
      </ul>

      <p>
        The MEX (minimum excluded) of an array is the smallest missing{" "}
        <strong>non-negative</strong> integer in it.
      </p>

      <ul>
        <li>
          For example, the MEX of <code>[-1,2,3]</code> is <code>0</code> while
          the MEX of <code>[1,0,3]</code> is <code>2</code>.
        </li>
      </ul>

      <p>
        Return <em>the maximum MEX of </em>
        <code>nums</code>
        <em>
          {" "}
          after applying the mentioned operation{" "}
          <strong>any number of times</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,-10,7,13,6,8], value = 5 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> One can achieve this result by applying
        the following operations: <br />- Add value to nums[1] twice to make
        nums = [1,
        <strong>
          <u>0</u>
        </strong>
        ,7,13,6,8]
        <br />- Subtract value from nums[2] once to make nums = [1,0,
        <strong>
          <u>2</u>
        </strong>
        ,13,6,8]
        <br />- Subtract value from nums[3] twice to make nums = [1,0,2,
        <strong>
          <u>3</u>
        </strong>
        ,6,8]
        <br />
        The MEX of nums is 4. It can be shown that 4 is the maximum MEX we can
        achieve.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,-10,7,13,6,8], value = 7<br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> One can achieve this result by applying
        the following operation:
        <br />- subtract value from nums[2] once to make nums = [1,-10,
        <u>
          <strong>0</strong>
        </u>
        ,13,6,8]
        <br />
        The MEX of nums is 2. It can be shown that 2 is the maximum MEX we can
        achieve.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length, value &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2670: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array <code>nums</code> of
        length <code>n</code>.
      </p>

      <p>
        The <strong>distinct difference</strong> array of <code>nums</code> is
        an array <code>diff</code> of length <code>n</code> such that{" "}
        <code>diff[i]</code> is equal to the number of distinct elements in the
        suffix <code>nums[i + 1, ..., n - 1]</code>{" "}
        <strong>subtracted from</strong> the number of distinct elements in the
        prefix <code>nums[0, ..., i]</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>distinct difference</strong> array of{" "}
        </em>
        <code>nums</code>.
      </p>

      <p>
        Note that <code>nums[i, ..., j]</code> denotes the subarray of{" "}
        <code>nums</code> starting at index <code>i</code> and ending at index{" "}
        <code>j</code> inclusive. Particularly, if <code>i &gt; j</code> then{" "}
        <code>nums[i, ..., j]</code> denotes an empty subarray.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5] <br />
        <strong>Output:</strong> [-3,-1,1,3,5] <br />
        <strong>Explanation:</strong> For index i = 0, there is 1 element in the
        prefix and 4 distinct elements in the suffix. Thus, diff[0] = 1 - 4 =
        -3.
        <br /> For index i = 1, there are 2 distinct elements in the prefix and
        3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.
        <br />
        For index i = 2, there are 3 distinct elements in the prefix and 2
        distinct elements in the suffix. Thus, diff[2] = 3 - 2 = 1.
        <br />
        For index i = 3, there are 4 distinct elements in the prefix and 1
        distinct element in the suffix. Thus, diff[3] = 4 - 1 = 3.
        <br /> For index i = 4, there are 5 distinct elements in the prefix and
        no elements in the suffix. Thus, diff[4] = 5 - 0 = 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,2,3,4,2] <br />
        <strong>Output:</strong> [-2,-1,0,2,3] <br />
        <strong>Explanation:</strong> For index i = 0, there is 1 element in the
        prefix and 3 distinct elements in the suffix. Thus, diff[0] = 1 - 3 =
        -2.
        <br /> For index i = 1, there are 2 distinct elements in the prefix and
        3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.
        <br /> For index i = 2, there are 2 distinct elements in the prefix and
        2 distinct elements in the suffix. Thus, diff[2] = 2 - 2 = 0.
        <br /> For index i = 3, there are 3 distinct elements in the prefix and
        1 distinct element in the suffix. Thus, diff[3] = 3 - 1 = 2.
        <br /> For index i = 4, there are 3 distinct elements in the prefix and
        no elements in the suffix. Thus, diff[4] = 3 - 0 = 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n == nums.length&nbsp;&lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  2682: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> friends that are playing a game. The friends
        are sitting in a circle and are numbered from <code>1</code> to{" "}
        <code>n</code> in <strong>clockwise order</strong>. More formally,
        moving clockwise from the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        friend brings you to the{" "}
        <code>
          (i+1)<sup>th</sup>
        </code>{" "}
        friend for <code>1 &lt;= i &lt; n</code>, and moving clockwise from the{" "}
        <code>
          n<sup>th</sup>
        </code>{" "}
        friend brings you to the{" "}
        <code>
          1<sup>st</sup>
        </code>{" "}
        friend.
      </p>

      <p>The rules of the game are as follows:</p>

      <p>
        <code>
          1<sup>st</sup>
        </code>{" "}
        friend receives the ball.
      </p>

      <ul>
        <li>
          After that,{" "}
          <code>
            1<sup>st</sup>
          </code>{" "}
          friend passes it to the friend who is <code>k</code> steps away from
          them in the <strong>clockwise</strong> direction.
        </li>
        <li>
          After that, the friend who receives the ball should pass it to the
          friend who is <code>2 * k</code> steps away from them in the{" "}
          <strong>clockwise</strong> direction.
        </li>
        <li>
          After that, the friend who receives the ball should pass it to the
          friend who is <code>3 * k</code> steps away from them in the{" "}
          <strong>clockwise</strong> direction, and so on and so forth.
        </li>
      </ul>

      <p>
        In other words, on the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        turn, the friend holding the ball should pass it to the friend who is{" "}
        <code>i * k</code> steps away from them in the{" "}
        <strong>clockwise</strong> direction.
      </p>

      <p>
        The game is finished when some friend receives the ball for the second
        time.
      </p>

      <p>
        The <strong>losers</strong> of the game are friends who did not receive
        the ball in the entire game.
      </p>

      <p>
        Given the number of friends, <code>n</code>, and an integer{" "}
        <code>k</code>, return{" "}
        <em>
          the array answer, which contains the losers of the game in the{" "}
          <strong>ascending</strong> order
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 5, k = 2 <br />
        <strong>Output:</strong> [4,5] <br />
        <strong>Explanation:</strong> The game goes as follows: <br />
        {`1)`} Start at 1<sup>st</sup>&nbsp;friend and pass the ball to the
        friend who is 2 steps away from them - 3<sup>rd</sup>&nbsp;friend.
        <br /> {`2)`} 3<sup>rd</sup>&nbsp;friend passes the ball to the friend
        who is 4 steps away from them - 2<sup>nd</sup>&nbsp;friend.
        <br /> {`3)`} 2<sup>nd</sup>&nbsp;friend passes the ball to the friend
        who is 6 steps away from them - 3<sup>rd</sup>&nbsp;friend.
        <br /> {`4)`} The game ends as 3<sup>rd</sup>&nbsp;friend receives the
        ball for the second time.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4, k = 4<br />
        <strong>Output:</strong> [2,3,4]
        <br />
        <strong>Explanation:</strong> The game goes as follows:
        <br />
        <br /> {`1)`} Start at the 1<sup>st</sup>&nbsp;friend and pass the ball
        to the friend who is 4 steps away from them - 1<sup>st</sup>
        &nbsp;friend.
        <br /> {`2)`} The game ends as 1<sup>st</sup>&nbsp;friend receives the
        ball for the second time.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= n &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  2956: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two integer arrays <code>nums1</code> and{" "}
        <code>nums2</code> of sizes <code>n</code> and <code>m</code>,
        respectively. Calculate the following values:
      </p>

      <ul>
        <li>
          <code>answer1</code> : the number of indices <code>i</code> such that{" "}
          <code>nums1[i]</code> exists in <code>nums2</code>.
        </li>
        <li>
          <code>answer2</code> : the number of indices <code>i</code> such that{" "}
          <code>nums2[i]</code> exists in <code>nums1</code>.
        </li>
      </ul>

      <p>
        Return <code>[answer1,answer2]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums1 = [2,3,2], nums2 = [1,2]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">[2,1]</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/05/26/3488_find_common_elements_between_two_arrays-t1.gif"
            style={{ width: 225, height: 150 }}
          />
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            nums1 = [4,3,2,3,1], nums2 = [2,2,5,2,3,6]
          </span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[3,4]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          The elements at indices 1, 2, and 3 in <code>nums1</code> exist in{" "}
          <code>nums2</code> as well. So <code>answer1</code> is 3.
        </p>
        <br />
        <p>
          The elements at indices 0, 1, 3, and 4 in <code>nums2</code> exist in{" "}
          <code>nums1</code>. So <code>answer2</code> is 4.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums1 = [3,4,2,3], nums2 = [1,5]</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[0,0]</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          No numbers are common between <code>nums1</code> and{" "}
          <code>nums2</code>, so answer is [0,0].
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums1.length</code>
        </li>
        <li>
          <code>m == nums2.length</code>
        </li>
        <li>
          <code>1 &lt;= n, m &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= nums1[i], nums2[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  2996: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array of integers{" "}
        <code>nums</code>.
      </p>

      <p>
        A prefix <code>nums[0..i]</code> is <strong>sequential</strong> if, for
        all <code>1 &lt;= j &lt;= i</code>,{" "}
        <code>nums[j] = nums[j - 1] + 1</code>. In particular, the prefix
        consisting only of <code>nums[0]</code> is <strong>sequential</strong>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>smallest</strong> integer
        </em>{" "}
        <code>x</code> <em>missing from</em> <code>nums</code>{" "}
        <em>such that</em> <code>x</code>{" "}
        <em>
          is greater than or equal to the sum of the <strong>longest</strong>{" "}
          sequential prefix.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,2,5] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The longest sequential prefix of nums is
        [1,2,3] with a sum of 6. 6 is not in the array, therefore 6 is the
        smallest missing integer greater than or equal to the sum of the longest
        sequential prefix.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,4,5,1,12,14,13] <br />
        <strong>Output:</strong> 15 <br />
        <strong>Explanation:</strong> The longest sequential prefix of nums is
        [3,4,5] with a sum of 12. 12, 13, and 14 belong to the array while 15
        does not. Therefore 15 is the smallest missing integer greater than or
        equal to the sum of the longest sequential prefix.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  3120: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>word</code>. A letter is called{" "}
        <strong>special</strong> if it appears <strong>both</strong> in
        lowercase and uppercase in <code>word</code>.
      </p>

      <p>
        Return the number of<em> </em>
        <strong>special</strong> letters in<em> </em>
        <code>word</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">word = "aaAbcBC"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          The special characters in <code>word</code> are <code>'a'</code>,{" "}
          <code>'b'</code>, and <code>'c'</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">word = "abc"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          No character in <code>word</code> appears in uppercase.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">word = "abBCab"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> 1
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          The only special character in <code>word</code> is <code>'b'</code>.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= word.length &lt;= 50</code>
        </li>
        <li>
          <code>word</code> consists of only lowercase and uppercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  3032: (
    <article role="main" class="blog-post">
      <p>
        Given two <strong>positive</strong> integers <code>a</code> and{" "}
        <code>b</code>, return{" "}
        <em>
          the count of numbers having&nbsp;<strong>unique</strong> digits in the
          range
        </em>{" "}
        <code>[a, b]</code>{" "}
        <em>
          (<strong>inclusive</strong>).
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 1, b = 20 <br />
        <strong>Output:</strong> 19 <br />
        <strong>Explanation:</strong> All the numbers in the range [1, 20] have
        unique digits except 11. Hence, the answer is 19.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 9, b = 19 <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation:</strong> All the numbers in the range [9, 19] have
        unique digits except 11. Hence, the answer is 10.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 80, b = 120 <br />
        <strong>Output:</strong> 27 <br />
        <strong>Explanation:</strong> There are 41 numbers in the range [80,
        120], 27 of which have unique digits.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= a &lt;= b &lt;= 1000</code>
        </li>
      </ul>
    </article>
  ),
  7: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a signed 32-bit integer <code>x</code>, return <code>x</code>
        <em> with its digits reversed</em>. If reversing <code>x</code> causes
        the value to go outside the signed 32-bit integer range{" "}
        <code>
          [-2<sup>31</sup>, 2<sup>31</sup> - 1]
        </code>
        , then return <code>0</code>.
      </p>

      <p>
        <strong>
          Assume the environment does not allow you to store 64-bit integers
          (signed or unsigned).
        </strong>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 123 <br />
        <strong>Output:</strong> 321
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = -123 <br />
        <strong>Output:</strong> -321
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 120 <br />
        <strong>Output:</strong> 21
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            -2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  9: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>x</code>, return <code>true</code>
        <em> if </em>
        <code>x</code>
        <em> is a </em>
        <span
          data-keyword="palindrome-integer"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r3a:"
              >
                <div>
                  <em>
                    <strong>palindrome</strong>
                  </em>
                </div>
              </div>
            </div>
          </div>
        </span>
        <em>, and </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> x = 121 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> 121 reads as 121 from left to right and
        from right to left.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> x = -121 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> From left to right, it reads -121. From
        right to left, it becomes 121-. Therefore it is not a palindrome.
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> x = 10 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Reads 01 from right to left. Therefore it
        is not a palindrome.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            -2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you solve it without converting the
      integer to a string?
    </div>
  ),
  12: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Seven different symbols represent Roman numerals with the following
        values:
      </p>

      <table>
        <thead>
          <tr>
            <th>Symbol</th>
            <th>Value</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>I</td>
            <td>1</td>
          </tr>
          <tr>
            <td>V</td>
            <td>5</td>
          </tr>
          <tr>
            <td>X</td>
            <td>10</td>
          </tr>
          <tr>
            <td>L</td>
            <td>50</td>
          </tr>
          <tr>
            <td>C</td>
            <td>100</td>
          </tr>
          <tr>
            <td>D</td>
            <td>500</td>
          </tr>
          <tr>
            <td>M</td>
            <td>1000</td>
          </tr>
        </tbody>
      </table>

      <p>
        Roman numerals are formed by appending&nbsp;the conversions
        of&nbsp;decimal place values&nbsp;from highest to lowest. Converting a
        decimal place value into a Roman numeral has the following rules:
      </p>

      <ul>
        <li>
          If the value does not start with 4 or&nbsp;9, select the symbol of the
          maximal value that can be subtracted from the input, append that
          symbol to the result, subtract its value, and convert the remainder to
          a Roman numeral.
        </li>
        <li>
          If the value starts with 4 or 9 use the&nbsp;
          <strong>subtractive form</strong>&nbsp;representing&nbsp;one symbol
          subtracted from the following symbol, for example,&nbsp;4 is 1 (
          <code>I</code>) less than 5 (<code>V</code>): <code>IV</code>&nbsp;and
          9 is 1 (<code>I</code>) less than 10 (<code>X</code>): <code>IX</code>
          .&nbsp;Only the following subtractive forms are used: 4 (
          <code>IV</code>), 9 (<code>IX</code>),&nbsp;40 (<code>XL</code>), 90 (
          <code>XC</code>), 400 (<code>CD</code>) and 900 (<code>CM</code>).
        </li>
        <li>
          Only powers of 10 (<code>I</code>, <code>X</code>, <code>C</code>,{" "}
          <code>M</code>) can be appended consecutively at most 3 times to
          represent multiples of 10. You cannot append 5&nbsp;(<code>V</code>),
          50 (<code>L</code>), or 500 (<code>D</code>) multiple times. If you
          need to append a symbol&nbsp;4 times&nbsp;use the{" "}
          <strong>subtractive form</strong>.
        </li>
      </ul>

      <p>Given an integer, convert it to a Roman numeral.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">num = 3749</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">"MMMDCCXLIX"</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <pre>
          3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M) 700 = DCC as 500 (D) +
          100 (C) + 100 (C) 40 = XL as 10 (X) less of 50 (L) 9 = IX as 1 (I)
          less of 10 (X) Note: 49 is not 1 (I) less of 50 (L) because the
          conversion is based on decimal places
        </pre>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">num = 58</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"LVIII"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <pre>
          {`50 = L
         8 = VIII`}
        </pre>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">num = 1994</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"MCMXCIV"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <pre>
          {`1000 = M
         900 = CM
          90 = XC
           4 = IV`}
        </pre>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= num &lt;= 3999</code>
        </li>
      </ul>
    </div>
  ),
  13: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Roman numerals are represented by seven different symbols:&nbsp;
        <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>,{" "}
        <code>C</code>, <code>D</code> and <code>M</code>.
      </p>

      <pre>
        <strong>Symbol</strong> <strong>Value</strong>
        {`I             1
        V             5
        X             10
        L             50
        C             100
        D             500
        M             1000`}
      </pre>

      <p>
        For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in
        Roman numeral, just two ones added together. <code>12</code> is written
        as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The
        number <code>27</code> is written as <code>XXVII</code>, which is{" "}
        <code>XX + V + II</code>.
      </p>

      <p>
        Roman numerals are usually written largest to smallest from left to
        right. However, the numeral for four is not <code>IIII</code>. Instead,
        the number four is written as <code>IV</code>. Because the one is before
        the five we subtract it making four. The same principle applies to the
        number nine, which is written as <code>IX</code>. There are six
        instances where subtraction is used:
      </p>

      <ul>
        <li>
          <code>I</code> can be placed before <code>V</code> (5) and{" "}
          <code>X</code> (10) to make 4 and 9.&nbsp;
        </li>
        <li>
          <code>X</code> can be placed before <code>L</code> (50) and{" "}
          <code>C</code> (100) to make 40 and 90.&nbsp;
        </li>
        <li>
          <code>C</code> can be placed before <code>D</code> (500) and{" "}
          <code>M</code> (1000) to make 400 and 900.
        </li>
      </ul>

      <p>Given a roman numeral, convert it to an integer.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "III" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> III = 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "LVIII" <br />
        <strong>Output:</strong> 58 <br />
        <strong>Explanation:</strong> L = 50, V= 5, III = 3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "MCMXCIV" <br />
        <strong>Output:</strong> 1994 <br />
        <strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 15</code>
        </li>
        <li>
          <code>s</code> contains only&nbsp;the characters{" "}
          <code>('I', 'V', 'X', 'L', 'C', 'D', 'M')</code>.
        </li>
        <li>
          It is <strong>guaranteed</strong>&nbsp;that <code>s</code> is a valid
          roman numeral in the range <code>[1, 3999]</code>.
        </li>
      </ul>
    </div>
  ),
  60: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The set <code>[1, 2, 3, ...,&nbsp;n]</code> contains a total of{" "}
        <code>n!</code> unique permutations.
      </p>
      <p>
        By listing and labeling all of the permutations in order, we get the
        following sequence for <code>n = 3</code>:
      </p>
      <ul>
        <li>
          <code>"123"</code>
        </li>
        <li>
          <code>"132"</code>
        </li>
        <li>
          <code>"213"</code>
        </li>
        <li>
          <code>"231"</code>
        </li>
        <li>
          <code>"312"</code>
        </li>
        <li>
          <code>"321"</code>
        </li>
      </ul>
      <p>
        Given <code>n</code> and <code>k</code>, return the{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        permutation sequence.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 3, k = 3 <br />
        <strong>Output:</strong> "213" <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 4, k = 9 <br />
        <strong>Output:</strong> "2314" <br />
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 3, k = 1 <br />
        <strong>Output:</strong> "123"
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= n &lt;= 9</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= n!</code>
        </li>
      </ul>
    </div>
  ),
  67: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two binary strings <code>a</code> and <code>b</code>, return{" "}
        <em>their sum as a binary string</em>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> a = "11", b = "1" <br />
        <strong>Output:</strong> "100" <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> a = "1010", b = "1011" <br />
        <strong>Output:</strong> "10101"
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= a.length, b.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>a</code> and <code>b</code> consist&nbsp;only of{" "}
          <code>'0'</code> or <code>'1'</code> characters.
        </li>
        <li>
          Each string does not contain leading zeros except for the zero itself.
        </li>
      </ul>
    </div>
  ),
  168: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>columnNumber</code>, return{" "}
        <em>its corresponding column title as it appears in an Excel sheet</em>.
      </p>

      <p>For example:</p>

      <pre>
        {`A -&gt; 1
        B -&gt; 2
        C -&gt; 3
        ...
        Z -&gt; 26
        AA -&gt; 27
        AB -&gt; 28 
        ...`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> columnNumber = 1 <br />
        <strong>Output:</strong> "A"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> columnNumber = 28 <br />
        <strong>Output:</strong> "AB"
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> columnNumber = 701 <br />
        <strong>Output:</strong> "ZY"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= columnNumber &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  172: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return{" "}
        <em>the number of trailing zeroes in </em>
        <code>n!</code>.
      </p>

      <p>
        Note that <code>n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> 3! = 6, no trailing zero.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 5 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> 5! = 120, one trailing zero.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 0 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you write a solution that works in
        logarithmic time complexity?
      </p>
    </div>
  ),
  223: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the coordinates of two <strong>rectilinear</strong> rectangles in
        a 2D plane, return <em>the total area covered by the two rectangles</em>
        .
      </p>
      <p>
        The first rectangle is defined by its <strong>bottom-left</strong>{" "}
        corner <code>(ax1, ay1)</code> and its <strong>top-right</strong> corner{" "}
        <code>(ax2, ay2)</code>.
      </p>
      <p>
        The second rectangle is defined by its <strong>bottom-left</strong>{" "}
        corner <code>(bx1, by1)</code> and its <strong>top-right</strong> corner{" "}
        <code>(bx2, by2)</code>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <img
        alt="Rectangle Area"
        src="https://assets.leetcode.com/uploads/2021/05/08/rectangle-plane.png"
        style={{ width: 700, height: 365 }}
      />
      <pre>
        <strong>Input:</strong> ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0,
        by1 = -1, bx2 = 9, by2 = 2 <br />
        <strong>Output:</strong> 45
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2,
        by1 = -2, bx2 = 2, by2 = 2 <br />
        <strong>Output:</strong> 16
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            -10<sup>4</sup> &lt;= ax1 &lt;= ax2 &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= ay1 &lt;= ay2 &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= bx1 &lt;= bx2 &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= by1 &lt;= by2 &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  231: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          <code>true</code> if it is a power of two. Otherwise, return{" "}
          <code>false</code>
        </em>
        .
      </p>
      <p>
        An integer <code>n</code> is a power of two, if there exists an integer{" "}
        <code>x</code> such that{" "}
        <code>
          n == 2<sup>x</sup>
        </code>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation: </strong>2<sup>0</sup> = 1
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 16 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation: </strong>2<sup>4</sup> = 16
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> false
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            -2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you solve it without loops/recursion?
    </div>
  ),
  263: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        An <strong>ugly number</strong> is a <em>positive</em> integer which
        does not have a prime factor other than 2, 3, and 5.
      </p>

      <p>
        Given an integer <code>n</code>, return <code>true</code> <em>if</em>{" "}
        <code>n</code>{" "}
        <em>
          is an <strong>ugly number</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 6 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> 6 = 2 × 3
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> 1 has no prime factors.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 14 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> 14 is not ugly since it includes the prime
        factor 7.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            -2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  326: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          <code>true</code> if it is a power of three. Otherwise, return{" "}
          <code>false</code>
        </em>
        .
      </p>
      <p>
        An integer <code>n</code> is a power of three, if there exists an
        integer <code>x</code> such that{" "}
        <code>
          n == 3<sup>x</sup>
        </code>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 27 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> 27 = 3<sup>3</sup>
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 0 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> There is no x where 3<sup>x</sup> = 0.
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = -1 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> There is no x where 3<sup>x</sup> = (-1).
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            -2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you solve it without loops/recursion?
    </div>
  ),
  342: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          <code>true</code> if it is a power of four. Otherwise, return{" "}
          <code>false</code>
        </em>
        .
      </p>
      <p>
        An integer <code>n</code> is a power of four, if there exists an integer{" "}
        <code>x</code> such that{" "}
        <code>
          n == 4<sup>x</sup>
        </code>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 16 <br />
        <strong>Output:</strong> true <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <br />
      <pre>
        <strong>Input:</strong> n = 5<br />
        <strong>Output:</strong> false
        <br />
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <br />
      <pre>
        <strong>Input:</strong> n = 1<br />
        <strong>Output:</strong> true
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            -2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you solve it without loops/recursion?
    </div>
  ),
  367: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a positive integer num, return <code>true</code> <em>if</em>{" "}
        <code>num</code> <em>is a perfect square or</em> <code>false</code>{" "}
        <em>otherwise</em>.
      </p>

      <p>
        A <strong>perfect square</strong> is an integer that is the square of an
        integer. In other words, it is the product of some integer with itself.
      </p>

      <p>
        You must not use any built-in library function, such as{" "}
        <code>sqrt</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 16 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> We return true because 4 * 4 = 16 and 4 is
        an integer.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 14 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> We return false because 3.742 * 3.742 = 14
        and 3.742 is not an integer.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= num &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  453: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> of size <code>n</code>, return{" "}
        <em>
          the minimum number of moves required to make all array elements equal
        </em>
        .
      </p>

      <p>
        In one move, you can increment <code>n - 1</code> elements of the array
        by <code>1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Only three moves are needed (remember each
        move increments two elements): <br />
        [1,2,3] =&gt; [2,3,3] =&gt; [3,4,3] =&gt; [4,4,4]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          The answer is guaranteed to fit in a <strong>32-bit</strong> integer.
        </li>
      </ul>
    </div>
  ),
  479: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer n, return{" "}
        <em>
          the <strong>largest palindromic integer</strong> that can be
          represented as the product of two <code>n</code>-digits integers
        </em>
        . Since the answer can be very large, return it <strong>modulo</strong>{" "}
        <code>1337</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> 987 <br />
        Explanation: 99 x 91 = 9009, 9009 % 1337 = 987
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 9
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 8</code>
        </li>
      </ul>
    </div>
  ),
  504: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>num</code>, return{" "}
        <em>
          a string of its <strong>base 7</strong> representation
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> num = 100 <br />
        <strong>Output:</strong> "202" <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> num = -7 <br />
        <strong>Output:</strong> "-10"
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            -10<sup>7</sup> &lt;= num &lt;= 10<sup>7</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  507: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A{" "}
        <a
          href="https://en.wikipedia.org/wiki/Perfect_number"
          target="_blank"
          rel="noreferrer"
        >
          <strong>perfect number</strong>
        </a>{" "}
        is a <strong>positive integer</strong> that is equal to the sum of its{" "}
        <strong>positive divisors</strong>, excluding the number itself. A{" "}
        <strong>divisor</strong> of an integer <code>x</code> is an integer that
        can divide <code>x</code> evenly.
      </p>

      <p>
        Given an integer <code>n</code>, return <code>true</code>
        <em> if </em>
        <code>n</code>
        <em> is a perfect number, otherwise return </em>
        <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 28 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> 28 = 1 + 2 + 4 + 7 + 14 <br />
        1, 2, 4, 7, and 14 are all divisors of 28.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 7 <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= num &lt;= 10<sup>8</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  564: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>n</code> representing an integer, return{" "}
        <em>
          the closest integer (not including itself), which is a palindrome
        </em>
        . If there is a tie, return{" "}
        <em>
          <strong>the smaller one</strong>
        </em>
        .
      </p>

      <p>
        The closest is defined as the absolute difference minimized between two
        integers.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = "123" <br />
        <strong>Output:</strong> "121"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = "1" <br />
        <strong>Output:</strong> "0" <br />
        <strong>Explanation:</strong> 0 and 2 are the closest palindromes but we
        return the smallest which is 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n.length &lt;= 18</code>
        </li>
        <li>
          <code>n</code> consists of only digits.
        </li>
        <li>
          <code>n</code> does not have leading zeros.
        </li>
        <li>
          <code>n</code> is representing an integer in the range{" "}
          <code>
            [1, 10<sup>18</sup> - 1]
          </code>
          .
        </li>
      </ul>
    </div>
  ),
  598: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>m x n</code> matrix <code>M</code> initialized
        with all <code>0</code>'s and an array of operations <code>ops</code>,
        where{" "}
        <code>
          ops[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        means <code>M[x][y]</code> should be incremented by one for all{" "}
        <code>
          0 &lt;= x &lt; a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          0 &lt;= y &lt; b<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Count and return{" "}
        <em>
          the number of maximum integers in the matrix after performing all the
          operations
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/02/ex1.jpg"
        style={{ width: 750, height: 176 }}
      />
      <pre>
        <strong>Input:</strong> m = 3, n = 3, ops = [[2,2],[3,3]] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The maximum integer in M is 2, and there
        are four of it in M. So return 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> m = 3, n = 3, ops =
        [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]{" "}
        <br />
        <strong>Output:</strong> 4
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> m = 3, n = 3, ops = [] <br />
        <strong>Output:</strong> 9
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= m, n &lt;= 4 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= ops.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>ops[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub> &lt;= m
          </code>
        </li>
        <li>
          <code>
            1 &lt;= b<sub>i</sub> &lt;= n
          </code>
        </li>
      </ul>
    </div>
  ),
  660: (
    <div class="markdown-body div-width">
      <p>
        Start from integer 1, remove any integer that contains 9 such as 9, 19,
        29...{" "}
      </p>

      <p>
        So now, you will have a new integer sequence: 1, 2, 3, 4, 5, 6, 7, 8,
        10, 11, ...
      </p>

      <p>
        Given a positive integer <code>n</code>, you need to return the n-th
        integer after removing. Note that 1 will be the first integer.
      </p>

      <p>
        <b>Example 1:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b> 9 <br />
        <b>Output:</b> 10
      </pre>

      <p>
        <b> Hint</b>: n will not exceed <code>9 x 10^8</code>.
      </p>
    </div>
  ),
  728: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>self-dividing number</strong> is a number that is divisible by
        every digit it contains.
      </p>
      <ul>
        <li>
          For example, <code>128</code> is{" "}
          <strong>a self-dividing number</strong> because{" "}
          <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and{" "}
          <code>128 % 8 == 0</code>.
        </li>
      </ul>
      <p>
        A <strong>self-dividing number</strong> is not allowed to contain the
        digit zero.
      </p>
      <p>
        Given two integers <code>left</code> and <code>right</code>, return{" "}
        <em>
          a list of all the <strong>self-dividing numbers</strong> in the range
        </em>{" "}
        <code>[left, right]</code> (both <strong>inclusive</strong>).
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> left = 1, right = 22 <br />
        <strong>Output:</strong> [1,2,3,4,5,6,7,8,9,11,12,15,22] <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> left = 47, right = 85 <br />
        <strong>Output:</strong> [48,55,66,77]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= left &lt;= right &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  780: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given four integers <code>sx</code>, <code>sy</code>, <code>tx</code>,
        and <code>ty</code>, return <code>true</code>
        <em> if it is possible to convert the point </em>
        <code>(sx, sy)</code>
        <em> to the point </em>
        <code>(tx, ty)</code> <em>through some operations</em>
        <em>, or </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>
        The allowed operation on some point <code>(x, y)</code> is to convert it
        to either <code>(x, x + y)</code> or <code>(x + y, y)</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> sx = 1, sy = 1, tx = 3, ty = 5 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong>
        <br />
        One series of moves that transforms the starting point to the target is:
        <br />
        {`(1, 1) -&gt; (1, 2)
      (1, 2) -&gt; (3, 2)
      (3, 2) -&gt; (3, 5)`}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> sx = 1, sy = 1, tx = 2, ty = 2 <br />
        <strong>Output:</strong> false
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> sx = 1, sy = 1, tx = 1, ty = 1 <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= sx, sy, tx, ty &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  908: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and an integer{" "}
        <code>k</code>.
      </p>

      <p>
        In one operation, you can choose any index <code>i</code> where{" "}
        <code>0 &lt;= i &lt; nums.length</code> and change <code>nums[i]</code>{" "}
        to <code>nums[i] + x</code> where <code>x</code> is an integer from the
        range <code>[-k, k]</code>. You can apply this operation{" "}
        <strong>at most once</strong> for each index <code>i</code>.
      </p>

      <p>
        The <strong>score</strong> of <code>nums</code> is the difference
        between the maximum and minimum elements in <code>nums</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum <strong>score</strong> of{" "}
        </em>
        <code>nums</code>
        <em>
          {" "}
          after applying the mentioned operation at most once for each index in
          it
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1], k = 0 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The score is max(nums) - min(nums) = 1 - 1
        = 0.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,10], k = 2 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> Change nums to be [2, 8]. The score is
        max(nums) - min(nums) = 8 - 2 = 6.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,6], k = 3 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> Change nums to be [4, 4, 4]. The score is
        max(nums) - min(nums) = 4 - 4 = 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  927: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>arr</code> which consists of only zeros and
        ones, divide the array into <strong>three non-empty parts</strong> such
        that all of these parts represent the same binary value.
      </p>
      <p>
        If it is possible, return any <code>[i, j]</code> with{" "}
        <code>i + 1 &lt; j</code>, such that:
      </p>
      <ul>
        <li>
          <code>arr[0], arr[1], ..., arr[i]</code> is the first part,
        </li>
        <li>
          <code>arr[i + 1], arr[i + 2], ..., arr[j - 1]</code> is the second
          part, and
        </li>
        <li>
          <code>arr[j], arr[j + 1], ..., arr[arr.length - 1]</code> is the third
          part.
        </li>
        <li>All three parts have equal binary values.</li>
      </ul>
      <p>
        If it is not possible, return <code>[-1, -1]</code>.
      </p>
      <p>
        Note that the entire part is used when considering what binary value it
        represents. For example, <code>[1,1,0]</code> represents <code>6</code>{" "}
        in decimal, not <code>3</code>. Also, leading zeros{" "}
        <strong>are allowed</strong>, so <code>[0,1,1]</code> and{" "}
        <code>[1,1]</code> represent the same value.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> arr = [1,0,1,0,1] <br />
        <strong>Output:</strong> [0,3] <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <br />
      <pre>
        <strong>Input:</strong> arr = [1,1,0,1,1] <br />
        <strong>Output:</strong> [-1,-1] <br />
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> arr = [1,1,0,0,1] <br />
        <strong>Output:</strong> [0,2]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            3 &lt;= arr.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>arr[i]</code> is <code>0</code> or <code>1</code>
        </li>
      </ul>
    </div>
  ),
  1017: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return{" "}
        <em>a binary string representing its representation in base</em>{" "}
        <code>-2</code>.
      </p>

      <p>
        <strong>Note</strong> that the returned string should not have leading
        zeros unless the string is <code>"0"</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> "110" <br />
        <strong>Explantion:</strong> (-2)<sup>2</sup> + (-2)<sup>1</sup> = 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> "111" <br />
        <strong>Explantion:</strong> (-2)<sup>2</sup> + (-2)<sup>1</sup> + (-2)
        <sup>0</sup> = 3
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> "100" <br />
        <strong>Explantion:</strong> (-2)<sup>2</sup> = 4
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1056: (
    <div class="markdown-body div-width">
      <p>
        Given a number <code>N</code>, return <code>true</code> if and only if
        it is a <em>confusing number</em>, which satisfies the following
        condition:
      </p>

      <p>
        We can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8,
        9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When
        2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid. A{" "}
        <em>confusing number</em> is a number that when rotated 180 degrees
        becomes a <strong>different</strong> number with each digit valid.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/03/23/1268_1.png"
          style={{ width: 180, height: 90 }}
        />
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-1-1">6</span> <br />
        <strong>Output: </strong>
        <span id="example-output-1">true</span> <br />
        <strong>Explanation: </strong> <br />
        We get <code>9</code> after rotating <code>6</code>, <code>9</code> is a
        valid number and <code>9!=6</code>.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/03/23/1268_2.png"
          style={{ width: 180, height: 90 }}
        />
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-2-1">89</span> <br />
        <strong>Output: </strong>
        <span id="example-output-2">true</span> <br />
        <strong>Explanation: </strong> <br />
        We get <code>68</code> after rotating <code>89</code>, <code>86</code>{" "}
        is a valid number and <code>86!=89</code>.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/03/26/1268_3.png"
          style={{ width: 301, height: 121 }}
        />
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-3-1">11</span>
        <strong>Output: </strong>
        <span id="example-output-3">false</span> <br />
        <strong>Explanation: </strong> <br />
        We get <code>11</code> after rotating <code>11</code>, <code>11</code>{" "}
        is a valid number but the value remains the same, thus <code>11</code>{" "}
        is not a confusing number.
      </pre>

      <p>
        <strong>Example 4:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/03/23/1268_4.png"
          style={{ width: 180, height: 90 }}
        />
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-4-1">25</span>
        <strong>Output: </strong>
        <span id="example-output-4">false</span> <br />
        <strong>Explanation: </strong> <br />
        We get an invalid number after rotating <code>25</code>.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= N &lt;= 10^9</code>
        </li>
        <li>
          After the rotation we can ignore leading zeros, for example if after
          rotation we have
          <code>0008</code>&nbsp;then this number is considered as just{" "}
          <code>8</code>.
        </li>
      </ul>
    </div>
  ),
  1073: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two numbers <code>arr1</code> and <code>arr2</code> in base{" "}
        <strong>-2</strong>, return the result of adding them together.
      </p>

      <p>
        Each number is given in <em>array format</em>:&nbsp; as an array of 0s
        and 1s, from most significant bit to least significant bit.&nbsp; For
        example, <code>arr = [1,1,0,1]</code> represents the number{" "}
        <code>(-2)^3&nbsp;+ (-2)^2 + (-2)^0 = -3</code>.&nbsp; A number{" "}
        <code>arr</code> in <em>array, format</em> is also guaranteed to have no
        leading zeros: either&nbsp;<code>arr == [0]</code> or{" "}
        <code>arr[0] == 1</code>.
      </p>

      <p>
        Return the result of adding <code>arr1</code> and <code>arr2</code> in
        the same format: as an array of 0s and 1s with no leading zeros.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr1 = [1,1,1,1,1], arr2 = [1,0,1] <br />
        <strong>Output:</strong> [1,0,0,0,0] <br />
        <strong>Explanation: </strong>arr1 represents 11, arr2 represents 5, the
        output represents 16.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr1 = [0], arr2 = [0] <br />
        <strong>Output:</strong> [0]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr1 = [0], arr2 = [1] <br />
        <strong>Output:</strong> [1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= arr1.length,&nbsp;arr2.length &lt;= 1000</code>
        </li>
        <li>
          <code>arr1[i]</code>&nbsp;and <code>arr2[i]</code> are&nbsp;
          <code>0</code> or <code>1</code>
        </li>
        <li>
          <code>arr1</code> and <code>arr2</code> have no leading zeros
        </li>
      </ul>
    </div>
  ),
  1118: (
    <div class="markdown-body div-width">
      <p>
        Given a year <code>Y</code> and a month <code>M</code>, return how many
        days there are in that month.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input: </strong>Y = <span id="example-input-1-1">1992</span>, M
        = <span id="example-input-1-2">7</span>
        <br /> <strong>Output: </strong>
        <span id="example-output-1">31</span>
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input: </strong>Y = <span id="example-input-2-1">2000</span>, M
        = <span id="example-input-2-2">2</span>
        <br /> <strong>Output: </strong>
        <span id="example-output-2">29</span>
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input: </strong>Y = <span id="example-input-3-1">1900</span>, M
        = <span id="example-input-3-2">2</span>
        <br /> <strong>Output: </strong>
        <span id="example-output-3">28</span>
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          <code>1583 &lt;= Y &lt;= 2100</code>
        </li>
        <li>
          <code>1 &lt;= M &lt;= 12</code>
        </li>
      </ul>
    </div>
  ),
  1134: (
    <article role="main" class="blog-post">
      <p>
        Given an integer <code>n</code>, return <code>true</code>{" "}
        <em>
          if and only if it is an <strong>Armstrong number</strong>
        </em>
        .
      </p>

      <p>
        The <code>k</code>-digit number <code>n</code> is an Armstrong number if
        and only if the{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        power of each digit sums to <code>n</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 153 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> 153 is a 3-digit number, and 153 = 1
        <sup>3</sup> + 5<sup>3</sup> + 3<sup>3</sup>.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 123 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> 123 is a 3-digit number, and 123 != 1
        <sup>3</sup> + 2<sup>3</sup> + 3<sup>3</sup> = 36.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>8</sup>
          </code>
        </li>
      </ul>
    </article>
  ),
  1185: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a date, return the corresponding day of the week for that date.
      </p>

      <p>
        The input is given as three integers representing the <code>day</code>,{" "}
        <code>month</code> and <code>year</code> respectively.
      </p>

      <p>
        Return the answer as one of the following values&nbsp;
        <code>
          {`("Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday")
              `}
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> day = 31, month = 8, year = 2019 <br />
        <strong>Output:</strong> "Saturday"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> day = 18, month = 7, year = 1999 <br />
        <strong>Output:</strong> "Sunday"
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> day = 15, month = 8, year = 1993
        <br />
        <strong>Output:</strong> "Sunday"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The given dates are valid dates between the years <code>1971</code>{" "}
          and <code>2100</code>.
        </li>
      </ul>
    </div>
  ),
  1228: (
    <div class="markdown-body div-width">
      <p>
        In some array <code>arr</code>, the values were in arithmetic
        progression: the values&nbsp;<code>arr[i+1] - arr[i]</code>&nbsp;are
        all&nbsp;equal for every&nbsp;<code>0 &lt;= i &lt; arr.length - 1</code>
        .
      </p>

      <p>
        Then, a value from <code>arr</code>&nbsp;was removed that{" "}
        <strong>was&nbsp;not the first or last value in the array</strong>.
      </p>

      <p>Return the removed value.</p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [5,7,11,13] <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation: </strong>The previous array was [5,7,
        <strong>9</strong>,11,13].
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [15,13,12] <br />
        <strong>Output:</strong> 14 <br />
        <strong>Explanation: </strong>The previous array was [15,
        <strong>14</strong>,13,12].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>3 &lt;= arr.length &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= arr[i] &lt;= 10^5</code>
        </li>
      </ul>
    </div>
  ),
  1276: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integers <code>tomatoSlices</code> and{" "}
        <code>cheeseSlices</code>. The ingredients of different burgers are as
        follows:
      </p>

      <ul>
        <li>
          <strong>Jumbo Burger:</strong> <code>4</code> tomato slices and{" "}
          <code>1</code> cheese slice.
        </li>
        <li>
          <strong>Small Burger:</strong> <code>2</code> Tomato slices and{" "}
          <code>1</code> cheese slice.
        </li>
      </ul>

      <p>
        Return <code>[total_jumbo, total_small]</code> so that the number of
        remaining <code>tomatoSlices</code> equal to <code>0</code> and the
        number of remaining <code>cheeseSlices</code> equal to <code>0</code>.
        If it is not possible to make the remaining <code>tomatoSlices</code>{" "}
        and <code>cheeseSlices</code> equal to <code>0</code> return{" "}
        <code>[]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> tomatoSlices = 16, cheeseSlices = 7 <br />
        <strong>Output:</strong> [1,6] <br />
        <strong>Explantion:</strong> To make one jumbo burger and 6 small
        burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese.
        <br /> There will be no remaining ingredients.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> tomatoSlices = 17, cheeseSlices = 4 <br />
        <strong>Output:</strong> [] <br />
        <strong>Explantion:</strong> There will be no way to use all ingredients
        to make small and jumbo burgers.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> tomatoSlices = 4, cheeseSlices = 17 <br />
        <strong>Output:</strong> [] <br />
        <strong>Explantion:</strong> Making 1 jumbo burger there will be 16
        cheese remaining and making 2 small burgers there will be 15 cheese
        remaining.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= tomatoSlices, cheeseSlices &lt;= 10<sup>7</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1281: (
    <div class="elfjS" data-track-load="description_content">
      Given an integer number <code>n</code>, return the difference between the
      product of its digits and the sum of its digits.
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 234 <br />
        <strong>Output:</strong> 15 <br />
        <b>Explanation:</b> <br />
        Product of digits = 2 * 3 * 4 = 24 <br />
        Sum of digits = 2 + 3 + 4 = 9 <br />
        Result = 24 - 9 = 15
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 4421 <br />
        <strong>Output:</strong> 21 <br />
        <b>
          Explanation: <br />
        </b>
        Product of digits = 4 * 4 * 2 * 1 = 32 <br />
        Sum of digits = 4 + 4 + 2 + 1 = 11 <br />
        Result = 32 - 11 = 21
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= n &lt;= 10^5</code>
        </li>
      </ul>
    </div>
  ),
  1304: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return <strong>any</strong> array
        containing <code>n</code> <strong>unique</strong> integers such that
        they add up to <code>0</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 5 <br />
        <strong>Output:</strong> [-7,-1,1,3,4] <br />
        <strong>Explanation:</strong> These arrays also are accepted
        [-5,-1,1,2,3] , [-3,-1,2,-2,4].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> [-1,0,1]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> [0]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1317: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        <strong>No-Zero integer</strong> is a positive integer that{" "}
        <strong>
          does not contain any <code>0</code>
        </strong>{" "}
        in its decimal representation.
      </p>

      <p>
        Given an integer <code>n</code>, return <em>a list of two integers</em>{" "}
        <code>[a, b]</code> <em>where</em>:
      </p>

      <ul>
        <li>
          <code>a</code> and <code>b</code> are{" "}
          <strong>No-Zero integers</strong>.
        </li>
        <li>
          <code>a + b = n</code>
        </li>
      </ul>

      <p>
        The test cases are generated so that there is at least one valid
        solution. If there are many valid solutions, you can return any of them.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> [1,1] <br />
        <strong>Explanation:</strong> Let a = 1 and b = 1. <br />
        Both a and b are no-zero integers, and a + b = 2 = n.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 11 <br />
        <strong>Output:</strong> [2,9] <br />
        <strong>Explanation:</strong> Let a = 2 and b = 9. <br />
        Both a and b are no-zero integers, and a + b = 11 = n. <br />
        Note that there are other valid answers as [8, 3] that can be accepted.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1323: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a positive integer <code>num</code> consisting only of
        digits <code>6</code> and <code>9</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the maximum number you can get by changing <strong>at most</strong>{" "}
          one digit (
        </em>
        <code>6</code>
        <em> becomes </em>
        <code>9</code>
        <em>, and </em>
        <code>9</code>
        <em> becomes </em>
        <code>6</code>
        <em>)</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 9669 <br />
        <strong>Output:</strong> 9969 <br />
        <strong>Explanation:</strong> <br />
        Changing the first digit results in 6669. <br />
        Changing the second digit results in 9969. <br />
        Changing the third digit results in 9699. <br />
        Changing the fourth digit results in 9666. <br />
        The maximum number is 9969.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 9996 <br />
        <strong>Output:</strong> 9999 <br />
        <strong>Explanation:</strong> Changing the last digit 6 to 9 results in
        the maximum number.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 9999 <br />
        <strong>Output:</strong> 9999 <br />
        <strong>Explanation:</strong> It is better not to apply any change.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= num &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>num</code>&nbsp;consists of only <code>6</code> and{" "}
          <code>9</code> digits.
        </li>
      </ul>
    </div>
  ),
  1414: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer&nbsp;<code>k</code>,{" "}
        <em>
          return the minimum number of Fibonacci numbers whose sum is equal to{" "}
        </em>
        <code>k</code>. The same Fibonacci number can be used multiple times.
      </p>
      <p>The Fibonacci numbers are defined as:</p>
      <ul>
        <li>
          <code>
            F<sub>1</sub> = 1
          </code>
        </li>
        <li>
          <code>
            F<sub>2</sub> = 1
          </code>
        </li>
        <li>
          <code>
            F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub>
          </code>{" "}
          for <code>n &gt; 2.</code>
        </li>
      </ul>
      It is guaranteed that for the given constraints we can always find such
      Fibonacci numbers that sum up to <code>k</code>.<p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> k = 7 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The Fibonacci numbers are: 1, 1, 2, 3, 5,
        8, 13, ... <br />
        For k = 7 we can use 2 + 5 = 7.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> k = 10 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> For k = 10 we can use 2 + 8 = 10.
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> k = 19 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> For k = 19 we can use 1 + 5 + 13 = 19.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1518: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>numBottles</code> water bottles that are initially full
        of water. You can exchange <code>numExchange</code> empty water bottles
        from the market with one full water bottle.
      </p>

      <p>
        The operation of drinking a full water bottle turns it into an empty
        bottle.
      </p>

      <p>
        Given the two integers <code>numBottles</code> and{" "}
        <code>numExchange</code>, return{" "}
        <em>
          the <strong>maximum</strong> number of water bottles you can drink
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/07/01/sample_1_1875.png"
        style={{ width: 500, height: 245 }}
      />
      <pre>
        <strong>Input:</strong> numBottles = 9, numExchange = 3 <br />
        <strong>Output:</strong> 13 <br />
        <strong>Explanation:</strong> You can exchange 3 empty bottles to get 1
        full water bottle. <br />
        Number of water bottles you can drink: 9 + 3 + 1 = 13.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/07/01/sample_2_1875.png"
        style={{ width: 500, height: 183 }}
      />
      <pre>
        <strong>Input:</strong> numBottles = 15, numExchange = 4 <br />
        <strong>Output:</strong> 19 <br />
        <strong>Explanation:</strong> You can exchange 4 empty bottles to get 1
        full water bottle. <br />
        Number of water bottles you can drink: 15 + 3 + 1 = 19.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= numBottles &lt;= 100</code>
        </li>
        <li>
          <code>2 &lt;= numExchange &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1523: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two non-negative integers <code>low</code> and{" "}
        <code>
          <font face="monospace">high</font>
        </code>
        . Return the <em>count of odd numbers between </em>
        <code>low</code>
        <em> and </em>
        <code>
          <font face="monospace">high</font>
        </code>
        <em>&nbsp;(inclusive)</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> low = 3, high = 7 <br />
        <strong>Output:</strong> 3 <br />
        <b>Explanation: </b>The odd numbers between 3 and 7 are [3,5,7].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> low = 8, high = 10 <br />
        <strong>Output:</strong> 1 <br />
        <b>Explanation: </b>The odd numbers between 8 and 10 are [9].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= low &lt;= high&nbsp;&lt;= 10^9</code>
        </li>
      </ul>
    </div>
  ),
  1551: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have an array <code>arr</code> of length <code>n</code> where{" "}
        <code>arr[i] = (2 * i) + 1</code> for all valid values of <code>i</code>{" "}
        (i.e.,&nbsp;<code>0 &lt;= i &lt; n</code>).
      </p>

      <p>
        In one operation, you can select two indices <code>x</code> and{" "}
        <code>y</code> where <code>0 &lt;= x, y &lt; n</code> and subtract{" "}
        <code>1</code> from <code>arr[x]</code> and add <code>1</code> to{" "}
        <code>arr[y]</code> (i.e., perform <code>arr[x] -=1 </code>and{" "}
        <code>arr[y] += 1</code>). The goal is to make all the elements of the
        array <strong>equal</strong>. It is <strong>guaranteed</strong> that all
        the elements of the array can be made equal using some operations.
      </p>

      <p>
        Given an integer <code>n</code>, the length of the array, return{" "}
        <em>the minimum number of operations</em> needed to make all the
        elements of arr equal.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> arr = [1, 3, 5] <br />
        First operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]{" "}
        <br />
        In the second operation choose x = 2 and y = 0 again, thus arr = [3, 3,
        3].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 6 <br />
        <strong>Output:</strong> 9
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1716: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Hercy wants to save money for his first car. He puts money in the
        Leetcode&nbsp;bank <strong>every day</strong>.
      </p>

      <p>
        He starts by putting in <code>$1</code> on Monday, the first day. Every
        day from Tuesday to Sunday, he will put in <code>$1</code> more than the
        day before. On every subsequent Monday, he will put in <code>$1</code>{" "}
        more than the <strong>previous Monday</strong>.
      </p>

      <p>
        Given <code>n</code>, return{" "}
        <em>
          the total amount of money he will have in the Leetcode bank at the end
          of the{" "}
        </em>
        <code>
          n<sup>th</sup>
        </code>
        <em> day.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation:</strong>&nbsp;After the 4<sup>th</sup> day, the
        total is 1 + 2 + 3 + 4 = 10.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 10 <br />
        <strong>Output:</strong> 37 <br />
        <strong>Explanation:</strong>&nbsp;After the 10<sup>th</sup> day, the
        total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on
        the 2<sup>nd</sup> Monday, Hercy only puts in $2.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 20 <br />
        <strong>Output:</strong> 96 <br />
        <strong>Explanation:</strong>&nbsp;After the 20<sup>th</sup> day, the
        total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3
        + 4 + 5 + 6 + 7 + 8) = 96.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1780: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return <code>true</code>{" "}
        <em>if it is possible to represent </em>
        <code>n</code>
        <em> as the sum of distinct powers of three.</em> Otherwise, return{" "}
        <code>false</code>.
      </p>

      <p>
        An integer <code>y</code> is a power of three if there exists an integer{" "}
        <code>x</code> such that{" "}
        <code>
          y == 3<sup>x</sup>
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 12 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> 12 = 3<sup>1</sup> + 3<sup>2</sup>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 91 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> 91 = 3<sup>0</sup> + 3<sup>2</sup> + 3
        <sup>4</sup>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 21 <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>7</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1822: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Implement a function <code>signFunc(x)</code> that returns:
      </p>

      <ul>
        <li>
          <code>1</code> if <code>x</code> is positive.
        </li>
        <li>
          <code>-1</code> if <code>x</code> is negative.
        </li>
        <li>
          <code>0</code> if <code>x</code> is equal to <code>0</code>.
        </li>
      </ul>

      <p>
        You are given an integer array <code>nums</code>. Let{" "}
        <code>product</code> be the product of all values in the array{" "}
        <code>nums</code>.
      </p>

      <p>
        Return <code>signFunc(product)</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-1,-2,-3,-4,3,2,1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The product of all values in the array is
        144, and signFunc(144) = 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,5,0,2,-3] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The product of all values in the array is
        0, and signFunc(0) = 0
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-1,1,-1,1,-1] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> The product of all values in the array is
        -1, and signFunc(-1) = -1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>-100 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1903: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>num</code>, representing a large integer.
        Return{" "}
        <em>
          the <strong>largest-valued odd</strong> integer (as a string) that is
          a <strong>non-empty substring</strong> of{" "}
        </em>
        <code>num</code>
        <em>, or an empty string </em>
        <code>""</code>
        <em> if no odd integer exists</em>.
      </p>

      <p>
        A <strong>substring</strong> is a contiguous sequence of characters
        within a string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = "52" <br />
        <strong>Output:</strong> "5" <br />
        <strong>Explanation:</strong> The only non-empty substrings are "5",
        "2", and "52". "5" is the only odd number.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = "4206" <br />
        <strong>Output:</strong> "" <br />
        <strong>Explanation:</strong> There are no odd numbers in "4206".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = "35427" <br />
        <strong>Output:</strong> "35427" <br />
        <strong>Explanation:</strong> "35427" is already an odd number.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= num.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>num</code> only consists of digits and does not contain any
          leading zeros.
        </li>
      </ul>
    </div>
  ),
  1925: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>square triple</strong> <code>(a,b,c)</code> is a triple where{" "}
        <code>a</code>, <code>b</code>, and <code>c</code> are{" "}
        <strong>integers</strong> and{" "}
        <code>
          a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup>
        </code>
        .
      </p>

      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          the number of <strong>square triples</strong> such that{" "}
        </em>
        <code>1 &lt;= a, b, c &lt;= n</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong> <br />
      </p>

      <pre>
        <strong>Input:</strong> n = 5 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation</strong>: The square triples are (3,4,5) and
        (4,3,5).
      </pre>

      <p>
        <strong class="example">Example 2:</strong> <br />
      </p>

      <pre>
        <strong>Input:</strong> n = 10 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation</strong>: The square triples are (3,4,5), (4,3,5),
        (6,8,10), and (8,6,10).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 250</code>
        </li>
      </ul>
    </div>
  ),
  2119: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        <strong>Reversing</strong> an integer means to reverse all its digits.
      </p>

      <ul>
        <li>
          For example, reversing <code>2021</code> gives <code>1202</code>.
          Reversing <code>12300</code> gives <code>321</code> as the{" "}
          <strong>leading zeros are not retained</strong>.
        </li>
      </ul>

      <p>
        Given an integer <code>num</code>, <strong>reverse</strong>{" "}
        <code>num</code> to get <code>reversed1</code>,{" "}
        <strong>then reverse</strong> <code>reversed1</code> to get{" "}
        <code>reversed2</code>. Return <code>true</code> <em>if</em>{" "}
        <code>reversed2</code> <em>equals</em> <code>num</code>. Otherwise
        return <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 526 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Reverse num to get 625, then reverse 625
        to get 526, which equals num.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 1800 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Reverse num to get 81, then reverse 81 to
        get 18, which does not equal num.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 0 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Reverse num to get 0, then reverse 0 to
        get 0, which equals num.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= num &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2217: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>queries</code> and a{" "}
        <strong>positive</strong> integer <code>intLength</code>, return{" "}
        <em>an array</em> <code>answer</code> <em>where</em>{" "}
        <code>answer[i]</code> <em>is either the </em>
        <code>
          queries[i]<sup>th</sup>
        </code>{" "}
        <em>
          smallest <strong>positive palindrome</strong> of length
        </em>{" "}
        <code>intLength</code> <em>or</em> <code>-1</code>
        <em> if no such palindrome exists</em>.
      </p>

      <p>
        A <strong>palindrome</strong> is a number that reads the same backwards
        and forwards. Palindromes cannot have leading zeros.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queries = [1,2,3,4,5,90], intLength = 3 <br />
        <strong>Output:</strong> [101,111,121,131,141,999] <br />
        <strong>Explanation:</strong> <br />
        The first few palindromes of length 3 are: <br />
        101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, ... <br />
        The 90<sup>th</sup> palindrome of length 3 is 999.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queries = [2,4,6], intLength = 4 <br />
        <strong>Output:</strong> [1111,1331,1551] <br />
        <strong>Explanation:</strong> <br />
        The first six palindromes of length 4 are: <br />
        1001, 1111, 1221, 1331, 1441, and 1551.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= queries.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= queries[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= intLength&nbsp;&lt;= 15</code>
        </li>
      </ul>
    </div>
  ),
  2235: (
    <div class="elfjS" data-track-load="description_content">
      Given two integers <code>num1</code> and <code>num2</code>, return{" "}
      <em>
        the <strong>sum</strong> of the two integers
      </em>
      .<p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong> <br />
      </p>
      <pre>
        <strong>Input:</strong> num1 = 12, num2 = 5 <br />
        <strong>Output:</strong> 17 <br />
        <strong>Explanation:</strong> num1 is 12, num2 is 5, and their sum is 12
        + 5 = 17, so 17 is returned.
      </pre>
      <p>
        <strong class="example">Example 2:</strong> <br />
      </p>
      <pre>
        <strong>Input:</strong> num1 = -10, num2 = 4 <br />
        <strong>Output:</strong> -6 <br />
        <strong>Explanation:</strong> num1 + num2 = -6, so -6 is returned.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>-100 &lt;= num1, num2 &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  2409: (
    <div class="elfjS" data-track-load="description_content">
      <p>Alice and Bob are traveling to Rome for separate business meetings.</p>

      <p>
        You are given 4 strings <code>arriveAlice</code>,{" "}
        <code>leaveAlice</code>, <code>arriveBob</code>, and{" "}
        <code>leaveBob</code>. Alice will be in the city from the dates{" "}
        <code>arriveAlice</code> to <code>leaveAlice</code> (
        <strong>inclusive</strong>), while Bob will be in the city from the
        dates <code>arriveBob</code> to <code>leaveBob</code> (
        <strong>inclusive</strong>). Each will be a 5-character string in the
        format <code>"MM-DD"</code>, corresponding to the month and day of the
        date.
      </p>

      <p>
        Return
        <em>
          {" "}
          the total number of days that Alice and Bob are in Rome together.
        </em>
      </p>

      <p>
        You can assume that all dates occur in the <strong>same</strong>{" "}
        calendar year, which is <strong>not</strong> a leap year. Note that the
        number of days per month can be represented as:{" "}
        <code>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong> <br />
      </p>

      <pre>
        <strong>Input:</strong> arriveAlice = "08-15", leaveAlice = "08-18",
        arriveBob = "08-16", leaveBob = "08-19" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Alice will be in Rome from August 15 to
        August 18. Bob will be in Rome from August 16 to August 19. They are
        both in Rome together on August 16th, 17th, and 18th, so the answer is
        3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong> <br />
      </p>

      <pre>
        <strong>Input:</strong> arriveAlice = "10-01", leaveAlice = "10-31",
        arriveBob = "11-01", leaveBob = "12-31" <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There is no day when Alice and Bob are in
        Rome together, so we return 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          All dates are provided in the format <code>"MM-DD"</code>.
        </li>
        <li>
          Alice and Bob's arrival dates are{" "}
          <strong>earlier than or equal to</strong> their leaving dates.
        </li>
        <li>
          The given dates are valid dates of a <strong>non-leap</strong> year.
        </li>
      </ul>
    </div>
  ),
  2469: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a non-negative floating point number rounded to two
        decimal places <code>celsius</code>, that denotes the{" "}
        <strong>temperature in Celsius</strong>.
      </p>

      <p>
        You should convert Celsius into <strong>Kelvin</strong> and{" "}
        <strong>Fahrenheit</strong> and return it as an array{" "}
        <code>ans = [kelvin, fahrenheit]</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the array <code>ans</code>.{" "}
        </em>
        Answers within{" "}
        <code>
          10<sup>-5</sup>
        </code>{" "}
        of the actual answer will be accepted.
      </p>

      <p>
        <strong>Note that:</strong>
      </p>

      <ul>
        <li>
          <code>Kelvin = Celsius + 273.15</code>
        </li>
        <li>
          <code>Fahrenheit = Celsius * 1.80 + 32.00</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> celsius = 36.50 <br />
        <strong>Output:</strong> [309.65000,97.70000] <br />
        <strong>Explanation:</strong> Temperature at 36.50 Celsius converted in
        Kelvin is 309.65 and converted in Fahrenheit is 97.70.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> celsius = 122.11 <br />
        <strong>Output:</strong> [395.26000,251.79800] <br />
        <strong>Explanation:</strong> Temperature at 122.11 Celsius converted in
        Kelvin is 395.26 and converted in Fahrenheit is 251.798.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= celsius &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  2514: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> containing one or more words.
        Every consecutive pair of words is separated by a single space{" "}
        <code>' '</code>.
      </p>

      <p>
        A string <code>t</code> is an <strong>anagram</strong> of string{" "}
        <code>s</code> if the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        word of <code>t</code> is a <strong>permutation</strong> of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        word of <code>s</code>.
      </p>

      <ul>
        <li>
          For example, <code>"acb dfe"</code> is an anagram of{" "}
          <code>"abc def"</code>, but <code>"def cab"</code>&nbsp;and{" "}
          <code>"adc bef"</code> are not.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the number of <strong>distinct anagrams</strong> of{" "}
        </em>
        <code>s</code>. Since the answer may be very large, return it{" "}
        <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "too hot" <br />
        <strong>Output:</strong> 18 <br />
        <strong>Explanation:</strong> Some of the anagrams of the given string
        are "too hot", "oot hot", "oto toh", "too toh", and "too oht".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aa" <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> There is only one anagram possible for the
        given string.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters and spaces{" "}
          <code>' '</code>.
        </li>
        <li>There is single space between consecutive words.</li>
      </ul>
    </div>
  ),
  2544: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a positive integer <code>n</code>. Each digit of{" "}
        <code>n</code> has a sign according to the following rules:
      </p>

      <ul>
        <li>
          The <strong>most significant digit</strong> is assigned a{" "}
          <strong>positive</strong> sign.
        </li>
        <li>Each other digit has an opposite sign to its adjacent digits.</li>
      </ul>

      <p>
        Return <em>the sum of all digits with their corresponding sign</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 521 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> (+5) + (-2) + (+1) = 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 111 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> (+1) + (-1) + (+1) = 1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 886996 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> (+8) + (-8) + (+6) + (-9) + (+9) + (-6) =
        0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2647: (
    <article role="main" class="blog-post">
      <p>
        You are given an integer <code>n</code>. Consider an equilateral
        triangle of side length <code>n</code>, broken up into{" "}
        <code>
          n<sup>2</sup>
        </code>{" "}
        unit equilateral triangles. The triangle has <code>n</code>{" "}
        <strong>1-indexed</strong> rows where the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        row has <code>2i - 1</code> unit equilateral triangles.
      </p>

      <p>
        The triangles in the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        row are also <strong>1-indexed</strong> with coordinates from{" "}
        <code>(i, 1)</code> to <code>(i, 2i - 1)</code>. The following image
        shows a triangle of side length <code>4</code> with the indexing of its
        triangle.
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2600-2699/2647.Color%20the%20Triangle%20Red/images/triangle4.jpg"
          style={{ width: 402, height: 242 }}
        />
      </p>
      <p>
        Two triangles are <strong>neighbors</strong> if they{" "}
        <strong>share a side</strong>. For example:
      </p>

      <ul>
        <li>
          Triangles <code>(1,1)</code> and <code>(2,2)</code> are neighbors
        </li>
        <li>
          Triangles <code>(3,2)</code> and <code>(3,3)</code> are neighbors.
        </li>
        <li>
          Triangles <code>(2,2)</code> and <code>(3,3)</code> are not neighbors
          because they do not share any side.
        </li>
      </ul>

      <p>
        Initially, all the unit triangles are <strong>white</strong>. You want
        to choose <code>k</code> triangles and color them <strong>red</strong>.
        We will then run the following algorithm:
      </p>

      <ul>
        <li>
          Choose a white triangle that has <strong>at least two</strong> red
          neighbors.
          <ul>
            <li>If there is no such triangle, stop the algorithm.</li>
          </ul>
        </li>
        <li>
          Color that triangle <strong>red</strong>.
        </li>
        <li>Go to step 1.</li>
      </ul>

      <p>
        Choose the minimum <code>k</code> possible and set <code>k</code>{" "}
        triangles red before running this algorithm such that after the
        algorithm stops, all unit triangles are colored red.
      </p>

      <p>
        Return{" "}
        <em>
          a 2D list of the coordinates of the triangles that you will color red
          initially
        </em>
        . The answer has to be of the smallest size possible. If there are
        multiple valid solutions, return any.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2600-2699/2647.Color%20the%20Triangle%20Red/images/example1.jpg"
          style={{ width: 500, height: 263 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> [[1,1],[2,1],[2,3],[3,1],[3,5]] <br />
        <strong>Explanation:</strong> Initially, we choose the shown 5 triangles
        to be red. Then, we run the algorithm: <br />
        - Choose (2,2) that has three red neighbors and color it red. <br />
        - Choose (3,2) that has two red neighbors and color it red. <br />
        - Choose (3,4) that has three red neighbors and color it red. <br />
        - Choose (3,3) that has three red neighbors and color it red. <br />
        It can be shown that choosing any 4 triangles and running the algorithm
        will not make all triangles red.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2600-2699/2647.Color%20the%20Triangle%20Red/images/example2.jpg"
          style={{ width: 300, height: 101 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> [[1,1],[2,1],[2,3]] <br />
        <strong>Explanation:</strong> Initially, we choose the shown 3 triangles
        to be red. Then, we run the algorithm: <br />
        - Choose (2,2) that has three red neighbors and color it red. <br />
        It can be shown that choosing any 2 triangles and running the algorithm
        will not make all triangles red.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
      </ul>
    </article>
  ),
  2681: (
    <article role="main" class="blog-post">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> representing the strength of some heroes. The
        <b> power</b> of a group of heroes is defined as follows:
      </p>

      <ul>
        <li>
          Let{" "}
          <code>
            i<sub>0</sub>
          </code>
          ,{" "}
          <code>
            i<sub>1</sub>
          </code>
          , ... ,
          <code>
            i<sub>k</sub>
          </code>{" "}
          be the indices of the heroes in a group. Then, the power of this group
          is{" "}
          <code>
            max(nums[i<sub>0</sub>], nums[i<sub>1</sub>], ... ,nums[i
            <sub>k</sub>])<sup>2</sup> * min(nums[i<sub>0</sub>], nums[i
            <sub>1</sub>], ... ,nums[i<sub>k</sub>])
          </code>
          .
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the sum of the <strong>power</strong> of all{" "}
          <strong>non-empty</strong> groups of heroes possible.
        </em>{" "}
        Since the sum could be very large, return it <strong>modulo</strong>{" "}
        <code>
          10<sup>9 </sup>+ 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1,4] <br />
        <strong>Output:</strong> 141 <br />
        <strong>Explanation:</strong> <br />1<sup>st</sup>&nbsp;group: [2] has
        power = 2<sup>2</sup>&nbsp;* 2 = 8. <br />2<sup>nd</sup>&nbsp;group: [1]
        has power = 1<sup>2</sup> * 1 = 1. <br />3<sup>rd</sup>&nbsp;group: [4]
        has power = 4<sup>2</sup> * 4 = 64. <br />4<sup>th</sup>&nbsp;group:
        [2,1] has power = 2<sup>2</sup> * 1 = 4. <br />5<sup>th</sup>
        &nbsp;group: [2,4] has power = 4<sup>2</sup> * 2 = 32. <br />6
        <sup>th</sup>&nbsp;group: [1,4] has power = 4<sup>2</sup> * 1 = 16.{" "}
        <br />
        ​​​​​​​7<sup>th</sup>&nbsp;group: [2,1,4] has power = 4<sup>2</sup>
        ​​​​​​​ * 1 = 16. <br />
        The sum of powers of all groups is 8 + 1 + 64 + 4 + 32 + 16 + 16 = 141.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> A total of 7 groups are possible, and the
        power of each group will be 1. Therefore, the sum of the powers of all
        groups is 7.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </article>
  ),
  2739: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A truck has two fuel tanks. You are given two integers,{" "}
        <code>mainTank</code> representing the fuel present in the main tank in
        liters and <code>additionalTank</code> representing the fuel present in
        the additional tank in liters.
      </p>
      <p>
        The truck has a mileage of <code>10</code> km per liter. Whenever{" "}
        <code>5</code> liters of fuel get&nbsp;used up in the main tank,&nbsp;if
        the additional tank has at least <code>1</code> liters of fuel,{" "}
        <code>1</code> liters of fuel will be transferred from the additional
        tank to the main tank.
      </p>
      <p>
        Return <em>the maximum distance which can be traveled.</em>
      </p>
      <p>
        <strong>Note: </strong>Injection from the additional tank is not
        continuous. It happens suddenly and immediately for every 5 liters
        consumed.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <br />
      <pre>
        <strong>Input:</strong> mainTank = 5, additionalTank = 10 <br />
        <strong>Output:</strong> 60 <br />
        <strong>Explanation:</strong> <br />
        After spending 5 litre of fuel, fuel remaining is (5 - 5 + 1) = 1 litre
        and distance traveled is 50km. <br />
        After spending another 1 litre of fuel, no fuel gets injected in the
        main tank and the main tank becomes empty. <br />
        Total distance traveled is 60km.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> mainTank = 1, additionalTank = 2 <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation:</strong> <br />
        After spending 1 litre of fuel, the main tank becomes empty. <br />
        Total distance traveled is 10km.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= mainTank, additionalTank &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  3099: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        An integer divisible by the <strong>sum</strong> of its digits is said
        to be a <strong>Harshad</strong> number. You are given an integer{" "}
        <code>x</code>. Return<em> the sum of the digits </em>of<em> </em>
        <code>x</code>
        <em> </em>if<em> </em>
        <code>x</code>
        <em> </em>is a <strong>Harshad</strong> number, otherwise, return
        <em> </em>
        <code>-1</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">x = 18</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">9</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>
          The sum of digits of <code>x</code> is <code>9</code>. <code>18</code>{" "}
          is divisible by <code>9</code>. So <code>18</code> is a Harshad number
          and the answer is <code>9</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">x = 23</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">-1</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>
          The sum of digits of <code>x</code> is <code>5</code>. <code>23</code>{" "}
          is not divisible by <code>5</code>. So <code>23</code> is not a
          Harshad number and the answer is <code>-1</code>.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= x &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  3101: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a{" "}
        <span
          data-keyword="binary-array"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r85:"
              >
                <div>binary array</div>
              </div>
            </div>
          </div>
        </span>{" "}
        <code>nums</code>.
      </p>

      <p>
        We call a{" "}
        <span
          data-keyword="subarray-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r87:"
              >
                <div>subarray</div>
              </div>
            </div>
          </div>
        </span>{" "}
        <strong>alternating</strong> if <strong>no</strong> two{" "}
        <strong>adjacent</strong> elements in the subarray have the{" "}
        <strong>same</strong> value.
      </p>

      <p>
        Return <em>the number of alternating subarrays in </em>
        <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [0,1,1,1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">5</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          The following subarrays are alternating: <code>[0]</code>,{" "}
          <code>[1]</code>, <code>[1]</code>, <code>[1]</code>, and{" "}
          <code>[0,1]</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,0,1,0]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">10</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          Every subarray of the array is alternating. There are 10 possible
          subarrays that we can choose.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>nums[i]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  3128: (
    <div>
      <p>
        You are given a 2D boolean matrix <code>grid</code>.
      </p>

      <p>
        A collection of 3 elements of <code>grid</code> is a{" "}
        <strong>right triangle</strong> if one of its elements is in the{" "}
        <strong>same row</strong> with another element and in the{" "}
        <strong>same column</strong> with the third element. The 3 elements may{" "}
        <strong>not</strong> be next to each other.
      </p>

      <p>
        Return an integer that is the number of <strong>right triangles</strong>{" "}
        that can be made with 3 elements of <code>grid</code> such that{" "}
        <strong>all</strong> of them have a value of 1.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div>
        <table
          border="1"
          cellspacing="3"
          style={{ borderCollapse: "separate", textAlign: "center" }}
        >
          <tbody>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
            </tr>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
            </tr>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
            </tr>
          </tbody>
        </table>

        <table
          border="1"
          cellspacing="3"
          style={{ borderCollapse: "separate", textAlign: "center" }}
        >
          <tbody>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
            </tr>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
            </tr>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
            </tr>
          </tbody>
        </table>

        <table
          border="1"
          cellspacing="3"
          style={{ borderCollapse: "separate", textAlign: "center" }}
        >
          <tbody>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
            </tr>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
            </tr>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">grid = [[0,1,0],[0,1,1],[0,1,0]]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          There are two right triangles with elements of the value 1. Notice
          that the blue ones do <strong>not&nbsp;</strong>form a right triangle
          because the 3 elements are in the same column.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div>
        <table
          border="1"
          cellspacing="3"
          style={{ borderCollapse: "separate", textAlign: "center" }}
        >
          <tbody>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
            </tr>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
            </tr>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">grid = [[1,0,0,0],[0,1,0,1],[1,0,0,0]]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          There are no right triangles with elements of the value 1.
          &nbsp;Notice that the blue ones do <strong>not</strong> form a right
          triangle.
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div>
        <table
          border="1"
          cellspacing="3"
          style={{ borderCollapse: "separate", textAlign: "center" }}
        >
          <tbody>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
            </tr>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
            </tr>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
            </tr>
          </tbody>
        </table>

        <table
          border="1"
          cellspacing="3"
          style={{ borderCollapse: "separate", textAlign: "center" }}
        >
          <tbody>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
            </tr>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
            </tr>
            <tr>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                1
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
              <td
                data-darkreader-inline-border-bottom=""
                data-darkreader-inline-border-left=""
                data-darkreader-inline-border-right=""
                data-darkreader-inline-border-top=""
              >
                0
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">grid = [[1,0,1],[1,0,0],[1,0,0]]</span>
        </p>

        <p>
          <strong>Output: </strong>2
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>There are two right triangles with elements of the value 1.</p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= grid.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= grid[i].length &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= grid[i][j] &lt;= 1</code>
        </li>
      </ul>
    </div>
  ),
  3178: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two <strong>positive</strong> integers <code>n</code> and{" "}
        <code>k</code>. There are <code>n</code> children numbered from{" "}
        <code>0</code> to <code>n - 1</code> standing in a queue{" "}
        <em>in order</em> from left to right.
      </p>

      <p>
        Initially, child 0 holds a ball and the direction of passing the ball is
        towards the right direction. After each second, the child holding the
        ball passes it to the child next to them. Once the ball reaches{" "}
        <strong>either</strong> end of the line, i.e. child 0 or child{" "}
        <code>n - 1</code>, the direction of passing is{" "}
        <strong>reversed</strong>.
      </p>

      <p>
        Return the number of the child who receives the ball after{" "}
        <code>k</code> seconds.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 3, k = 5</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <table>
          <tbody>
            <tr>
              <th>Time elapsed</th>
              <th>Children</th>
            </tr>
            <tr>
              <td>
                <code>0</code>
              </td>
              <td>
                <code>
                  [<u>0</u>, 1, 2]
                </code>
              </td>
            </tr>
            <tr>
              <td>
                <code>1</code>
              </td>
              <td>
                <code>
                  [0, <u>1</u>, 2]
                </code>
              </td>
            </tr>
            <tr>
              <td>
                <code>2</code>
              </td>
              <td>
                <code>
                  [0, 1, <u>2</u>]
                </code>
              </td>
            </tr>
            <tr>
              <td>
                <code>3</code>
              </td>
              <td>
                <code>
                  [0, <u>1</u>, 2]
                </code>
              </td>
            </tr>
            <tr>
              <td>
                <code>4</code>
              </td>
              <td>
                <code>
                  [<u>0</u>, 1, 2]
                </code>
              </td>
            </tr>
            <tr>
              <td>
                <code>5</code>
              </td>
              <td>
                <code>
                  [0, <u>1</u>, 2]
                </code>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 5, k = 6</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <table>
          <tbody>
            <tr>
              <th>Time elapsed</th>
              <th>Children</th>
            </tr>
            <tr>
              <td>
                <code>0</code>
              </td>
              <td>
                <code>
                  [<u>0</u>, 1, 2, 3, 4]
                </code>
              </td>
            </tr>
            <tr>
              <td>
                <code>1</code>
              </td>
              <td>
                <code>
                  [0, <u>1</u>, 2, 3, 4]
                </code>
              </td>
            </tr>
            <tr>
              <td>
                <code>2</code>
              </td>
              <td>
                <code>
                  [0, 1, <u>2</u>, 3, 4]
                </code>
              </td>
            </tr>
            <tr>
              <td>
                <code>3</code>
              </td>
              <td>
                <code>
                  [0, 1, 2, <u>3</u>, 4]
                </code>
              </td>
            </tr>
            <tr>
              <td>
                <code>4</code>
              </td>
              <td>
                <code>
                  [0, 1, 2, 3, <u>4</u>]
                </code>
              </td>
            </tr>
            <tr>
              <td>
                <code>5</code>
              </td>
              <td>
                <code>
                  [0, 1, 2, <u>3</u>, 4]
                </code>
              </td>
            </tr>
            <tr>
              <td>
                <code>6</code>
              </td>
              <td>
                <code>
                  [0, 1, <u>2</u>, 3, 4]
                </code>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 4, k = 2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <table>
          <tbody>
            <tr>
              <th>Time elapsed</th>
              <th>Children</th>
            </tr>
            <tr>
              <td>
                <code>0</code>
              </td>
              <td>
                <code>
                  [<u>0</u>, 1, 2, 3]
                </code>
              </td>
            </tr>
            <tr>
              <td>
                <code>1</code>
              </td>
              <td>
                <code>
                  [0, <u>1</u>, 2, 3]
                </code>
              </td>
            </tr>
            <tr>
              <td>
                <code>2</code>
              </td>
              <td>
                <code>
                  [0, 1, <u>2</u>, 3]
                </code>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= 50</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Note:</strong> This question is the same as{" "}
        <a
          href="https://leetcode.com/problems/pass-the-pillow/description/"
          target="_blank"
          rel="noreferrer"
        >
          {" "}
          2582: Pass the Pillow.
        </a>
      </p>
    </div>
  ),
  134: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> gas stations along a circular route, where the
        amount of gas at the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        station is <code>gas[i]</code>.
      </p>

      <p>
        You have a car with an unlimited gas tank and it costs{" "}
        <code>cost[i]</code> of gas to travel from the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        station to its next{" "}
        <code>
          (i + 1)<sup>th</sup>
        </code>{" "}
        station. You begin the journey with an empty tank at one of the gas
        stations.
      </p>

      <p>
        Given two integer arrays <code>gas</code> and <code>cost</code>, return{" "}
        <em>
          the starting gas station's index if you can travel around the circuit
          once in the clockwise direction, otherwise return
        </em>{" "}
        <code>-1</code>. If there exists a solution, it is{" "}
        <strong>guaranteed</strong> to be <strong>unique</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> gas = [1,2,3,4,5], cost = [3,4,5,1,2] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> <br />
        Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank =
        0 + 4 = 4 <br />
        Travel to station 4. Your tank = 4 - 1 + 5 = 8 <br />
        Travel to station 0. Your tank = 8 - 2 + 1 = 7 <br />
        Travel to station 1. Your tank = 7 - 3 + 2 = 6 <br />
        Travel to station 2. Your tank = 6 - 4 + 3 = 5 <br />
        Travel to station 3. The cost is 5. Your gas is just enough to travel
        back to station 3. <br />
        Therefore, return 3 as the starting index.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> gas = [2,3,4], cost = [3,4,3] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> <br />
        You can't start at station 0 or 1, as there is not enough gas to travel
        to the next station. <br />
        Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 +
        4 = 4 <br />
        Travel to station 0. Your tank = 4 - 3 + 2 = 3 <br />
        Travel to station 1. Your tank = 3 - 3 + 3 = 3 <br />
        You cannot travel back to station 2, as it requires 4 unit of gas but
        you only have 3. <br />
        Therefore, you can't travel around the circuit once no matter where you
        start.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == gas.length == cost.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= gas[i], cost[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  135: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> children standing in a line. Each child is
        assigned a rating value given in the integer array <code>ratings</code>.
      </p>

      <p>
        You are giving candies to these children subjected to the following
        requirements:
      </p>

      <ul>
        <li>Each child must have at least one candy.</li>
        <li>
          Children with a higher rating get more candies than their neighbors.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the minimum number of candies you need to have to distribute the
          candies to the children
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> ratings = [1,0,2] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> You can allocate to the first, second and
        third child with 2, 1, 2 candies respectively.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> ratings = [1,2,2] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> You can allocate to the first, second and
        third child with 1, 2, 1 candies respectively.
        <br /> The third child gets 1 candy because it satisfies the above two
        conditions.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == ratings.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= ratings[i] &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  330: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a sorted integer array <code>nums</code> and an integer{" "}
        <code>n</code>, add/patch elements to the array such that any number in
        the range <code>[1, n]</code> inclusive can be formed by the sum of some
        elements in the array.
      </p>

      <p>
        Return <em>the minimum number of patches required</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3], n = 6 <br />
        <strong>Output:</strong> 1 <br />
        Explanation: <br />
        Combinations of nums are [1], [3], [1,3], which form possible sums of:
        1, 3, 4. <br />
        Now if we add/patch 2 to nums, the combinations are: [1], [2], [3],
        [1,3], [2,3], [1,2,3]. <br />
        Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].{" "}
        <br />
        So we only need 1 patch.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,5,10], n = 20 <br />
        <strong>Output:</strong> 2 <br />
        Explanation: The two patches can be [2, 4].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,2], n = 5 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>nums</code> is sorted in <strong>ascending order</strong>.
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  452: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are some spherical balloons taped onto a flat wall that represents
        the XY-plane. The balloons are represented as a 2D integer array{" "}
        <code>points</code> where{" "}
        <code>
          points[i] = [x<sub>start</sub>, x<sub>end</sub>]
        </code>{" "}
        denotes a balloon whose <strong>horizontal diameter</strong> stretches
        between{" "}
        <code>
          x<sub>start</sub>
        </code>{" "}
        and{" "}
        <code>
          x<sub>end</sub>
        </code>
        . You do not know the exact y-coordinates of the balloons.
      </p>

      <p>
        Arrows can be shot up <strong>directly vertically</strong> (in the
        positive y-direction) from different points along the x-axis. A balloon
        with{" "}
        <code>
          x<sub>start</sub>
        </code>{" "}
        and{" "}
        <code>
          x<sub>end</sub>
        </code>{" "}
        is <strong>burst</strong> by an arrow shot at <code>x</code> if{" "}
        <code>
          x<sub>start</sub> &lt;= x &lt;= x<sub>end</sub>
        </code>
        . There is <strong>no limit</strong> to the number of arrows that can be
        shot. A shot arrow keeps traveling up infinitely, bursting any balloons
        in its path.
      </p>

      <p>
        Given the array <code>points</code>, return{" "}
        <em>
          the <strong>minimum</strong> number of arrows that must be shot to
          burst all balloons
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> points = [[10,16],[2,8],[1,6],[7,12]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The balloons can be burst by 2 arrows:{" "}
        <br />
        - Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6]. <br />
        - Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> points = [[1,2],[3,4],[5,6],[7,8]] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> One arrow needs to be shot for each
        balloon for a total of 4 arrows.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> points = [[1,2],[2,3],[3,4],[4,5]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The balloons can be burst by 2 arrows:{" "}
        <br />
        - Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3]. <br />
        - Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= points.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>points[i].length == 2</code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= x<sub>start</sub> &lt; x<sub>end</sub> &lt;= 2
            <sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  455: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Assume you are an awesome parent and want to give your children some
        cookies. But, you should give each child at most one cookie.
      </p>

      <p>
        Each child <code>i</code> has a greed factor <code>g[i]</code>, which is
        the minimum size of a cookie that the child will be content with; and
        each cookie <code>j</code> has a size <code>s[j]</code>. If{" "}
        <code>s[j] &gt;= g[i]</code>, we can assign the cookie <code>j</code> to
        the child <code>i</code>, and the child <code>i</code> will be content.
        Your goal is to maximize the number of your content children and output
        the maximum number.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> g = [1,2,3], s = [1,1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> You have 3 children and 2 cookies. The
        greed factors of 3 children are 1, 2, 3. <br />
        And even though you have 2 cookies, since their size is both 1, you
        could only make the child whose greed factor is 1 content. <br />
        You need to output 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> g = [1,2], s = [1,2,3] <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> You have 2 children and 3 cookies. The
        greed factors of 2 children are 1, 2. <br />
        You have 3 cookies and their sizes are big enough to gratify all of the
        children, <br />
        You need to output 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= g.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= s.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= g[i], s[j] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Note:</strong> This question is the same as{" "}
        <a
          href="https://leetcode.com/problems/maximum-matching-of-players-with-trainers/description/"
          target="_blank"
          rel="noreferrer"
        >
          {" "}
          2410: Maximum Matching of Players With Trainers.
        </a>
      </p>
    </div>
  ),
  334: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return <code>true</code>
        <em> if there exists a triple of indices </em>
        <code>(i, j, k)</code>
        <em> such that </em>
        <code>i &lt; j &lt; k</code>
        <em> and </em>
        <code>nums[i] &lt; nums[j] &lt; nums[k]</code>. If no such indices
        exists, return <code>false</code>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Any triplet where i &lt; j &lt; k is
        valid.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [5,4,3,2,1] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> No triplet exists.
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [2,1,5,0,4,6] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The triplet (3, 4, 5) is valid because
        nums[3] == 0 &lt; nums[4] == 4 &lt; nums[5] == 6.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 5 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you implement a solution that runs in{" "}
      <code>O(n)</code> time complexity and <code>O(1)</code> space complexity?
    </div>
  ),
  484: (
    <div class="markdown-body div-width">
      <p>
        By now, you are given a <b>secret signature</b> consisting of character
        'D' and 'I'. 'D' represents a decreasing relationship between two
        numbers, 'I' represents an increasing relationship between two numbers.
        And our <b>secret signature</b> was constructed by a special integer
        array, which contains uniquely all the different number from 1 to n (n
        is the length of the secret signature plus 1). For example, the secret
        signature "DI" can be constructed by array [2,1,3] or [3,1,2], but won't
        be constructed by array [3,2,4] or [2,1,3,4], which are both illegal
        constructing special string that can't represent the "DI"
        <b>secret signature</b>.
      </p>

      <p>
        On the other hand, now your job is to find the lexicographically
        smallest permutation of [1, 2, ... n] could refer to the given{" "}
        <b>secret signature</b> in the input.
      </p>

      <p>
        <b>Example 1:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b> "I" <br />
        <b>Output:</b> [1,2] <br />
        <b>Explanation:</b> [1,2] is the only legal initial spectial string can
        construct secret signature "I", where the number 1 and 2 construct an
        increasing relationship.
      </pre>
      <p></p>

      <p>
        <b>Example 2:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b> "DI" <br />
        <b>Output:</b> [2,1,3] <br />
        <b>Explanation:</b> Both [2,1,3] and [3,1,2] can construct the secret
        signature "DI", <br />
        but since we want to find the one with the smallest lexicographical
        permutation, you need to output [2,1,3]
      </pre>
      <p></p>

      <p>
        <b>Note:</b>
      </p>
      <li>The input string will only contain the character 'D' and 'I'.</li>
      <li>
        The length of input string is a positive integer and will not exceed
        10,000
      </li>
      <p></p>
    </div>
  ),
  502: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Suppose LeetCode will start its <strong>IPO</strong> soon. In order to
        sell a good price of its shares to Venture Capital, LeetCode would like
        to work on some projects to increase its capital before the{" "}
        <strong>IPO</strong>. Since it has limited resources, it can only finish
        at most <code>k</code> distinct projects before the <strong>IPO</strong>
        . Help LeetCode design the best way to maximize its total capital after
        finishing at most <code>k</code> distinct projects.
      </p>

      <p>
        You are given <code>n</code> projects where the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        project has a pure profit <code>profits[i]</code> and a minimum capital
        of <code>capital[i]</code> is needed to start it.
      </p>

      <p>
        Initially, you have <code>w</code> capital. When you finish a project,
        you will obtain its pure profit and the profit will be added to your
        total capital.
      </p>

      <p>
        Pick a list of <strong>at most</strong> <code>k</code> distinct projects
        from given projects to <strong>maximize your final capital</strong>, and
        return <em>the final maximized capital</em>.
      </p>

      <p>The answer is guaranteed to fit in a 32-bit signed integer.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> k = 2, w = 0, profits = [1,2,3], capital =
        [0,1,1] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> Since your initial capital is 0, you can
        only start the project indexed 0. <br />
        After finishing it you will obtain profit 1 and your capital becomes 1.
        <br />
        With capital 1, you can either start the project indexed 1 or the
        project indexed 2. <br />
        Since you can choose at most 2 projects, you need to finish the project
        indexed 2 to get the maximum capital. <br />
        Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> k = 3, w = 0, profits = [1,2,3], capital =
        [0,1,2] <br />
        <strong>Output:</strong> 6
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= w &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>n == profits.length</code>
        </li>
        <li>
          <code>n == capital.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= profits[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= capital[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  517: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have <code>n</code> super washing machines on a line. Initially,
        each washing machine has some dresses or is empty.
      </p>

      <p>
        For each move, you could choose any <code>m</code> (
        <code>1 &lt;= m &lt;= n</code>) washing machines, and pass one dress of
        each washing machine to one of its adjacent washing machines at the same
        time.
      </p>

      <p>
        Given an integer array <code>machines</code> representing the number of
        dresses in each washing machine from left to right on the line, return{" "}
        <em>
          the minimum number of moves to make all the washing machines have the
          same number of dresses
        </em>
        . If it is not possible to do it, return <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> machines = [1,0,5] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> <br />
        {`1st move:    1     0 &lt;-- 5    =&gt;    1     1     4 
        2nd move:    1 &lt;-- 1 &lt;-- 4    =&gt;    2     1     3
        3rd move:    2     1 &lt;-- 3    =&gt;    2     2     2`}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> machines = [0,3,0] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong>
        {`1st move:    0 &lt;-- 3     0    =&gt;    1     2     0
        2nd move:    1     2 --&gt; 0    =&gt;    1     1     1`}
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> machines = [0,2,0] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> <br />
        It's impossible to make all three washing machines have the same number
        of dresses.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == machines.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= machines[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  527: (
    <div class="markdown-body div-width">
      <p>
        Given an array of n distinct non-empty strings, you need to generate{" "}
        <b>minimal</b> possible abbreviations for every word following rules
        below.
      </p>

      <ul>
        <li>
          Begin with the first character and then the number of characters
          abbreviated, which followed by the last character.
        </li>
        <li>
          If there are any conflict, that is more than one words share the same
          abbreviation, a longer prefix is used instead of only the first
          character until making the map from word to abbreviation become
          unique. In other words, a final abbreviation cannot map to more than
          one original words.
        </li>
        <li>
          {" "}
          If the abbreviation doesn't make the word shorter, then keep it as
          original.
        </li>
      </ul>

      <p>
        <b>Example:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b> ["like", "god", "internal", "me", "internet", "interval",
        "intension", "face", "intrusion"] <br />
        <b>Output:</b>{" "}
        ["l2e","god","internal","me","i6t","interval","inte4n","f2e","intr4n"]
      </pre>
      <p></p>

      <b>Note:</b>
      <ul>
        <li> Both n and the length of each word will not exceed 400.</li>
        <li> The length of each word is greater than 1.</li>
        <li> The words consist of lowercase English letters only.</li>
        <li>
          {" "}
          The return answers should be <b>in the same order</b> as the original
          array.
        </li>
      </ul>
    </div>
  ),
  605: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have a long flowerbed in which some of the plots are planted, and
        some are not. However, flowers cannot be planted in{" "}
        <strong>adjacent</strong> plots.
      </p>
      <p>
        Given an integer array <code>flowerbed</code> containing <code>0</code>
        's and <code>1</code>'s, where <code>0</code> means empty and{" "}
        <code>1</code> means not empty, and an integer <code>n</code>, return{" "}
        <code>true</code>&nbsp;<em>if</em> <code>n</code>{" "}
        <em>new flowers can be planted in the</em> <code>flowerbed</code>{" "}
        <em>without violating the no-adjacent-flowers rule and</em>{" "}
        <code>false</code> <em>otherwise</em>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 1 <br />
        <strong>Output:</strong> true <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 2 <br />
        <strong>Output:</strong> false
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= flowerbed.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>flowerbed[i]</code> is <code>0</code> or <code>1</code>.
        </li>
        <li>
          There are no two adjacent flowers in <code>flowerbed</code>.
        </li>
        <li>
          <code>0 &lt;= n &lt;= flowerbed.length</code>
        </li>
      </ul>
    </div>
  ),
  624: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given <code>m</code> <code>arrays</code>, where each array is
        sorted in <strong>ascending order</strong>.
      </p>

      <p>
        You can pick up two integers from two different arrays (each array picks
        one) and calculate the distance. We define the distance between two
        integers <code>a</code> and <code>b</code> to be their absolute
        difference <code>|a - b|</code>.
      </p>

      <p>
        Return <em>the maximum distance</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arrays = [[1,2,3],[4,5],[1,2,3]] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> One way to reach the maximum distance 4 is
        to pick 1 in the first or third array and pick 5 in the second array.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arrays = [[1],[1]] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == arrays.length</code>
        </li>
        <li>
          <code>
            2 &lt;= m &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= arrays[i].length &lt;= 500</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= arrays[i][j] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>arrays[i]</code> is sorted in <strong>ascending order</strong>.
        </li>
        <li>
          There will be at most{" "}
          <code>
            10<sup>5</sup>
          </code>{" "}
          integers in all the arrays.
        </li>
      </ul>
    </div>
  ),
  625: (
    <div class="markdown-body div-width">
      <p>
        Given a positive integer <code>a</code>, find the smallest positive
        integer <code>b</code>
        whose multiplication of each digit equals to <code>a</code>.{" "}
      </p>
      <p>
        If there is no answer or the answer is not fit in 32-bit signed integer,
        then return 0.
      </p>
      <p>
        <b>Example 1</b>
        <br />
        Input:
      </p>
      <pre>48 </pre> <br />
      Output:
      <pre>68</pre>
      <p></p>
      <p>
        <b>Example 2</b>
        <br />
        Input:
      </p>
      <pre>15</pre> <br />
      Output:
      <pre>35</pre>
      <p></p>
    </div>
  ),
  670: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>num</code>. You can swap two digits at
        most once to get the maximum valued number.
      </p>

      <p>
        Return <em>the maximum valued number you can get</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 2736 <br />
        <strong>Output:</strong> 7236 <br />
        <strong>Explanation:</strong> Swap the number 2 and the number 7.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 9973 <br />
        <strong>Output:</strong> 9973 <br />
        <strong>Explanation:</strong> No swap.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= num &lt;= 10<sup>8</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  807: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a city composed of <code>n x n</code> blocks, where each block
        contains a single building shaped like a vertical square prism. You are
        given a <strong>0-indexed</strong> <code>n x n</code> integer matrix{" "}
        <code>grid</code> where <code>grid[r][c]</code> represents the{" "}
        <strong>height</strong> of the building located in the block at row{" "}
        <code>r</code> and column <code>c</code>.
      </p>

      <p>
        A city's <strong>skyline</strong> is the&nbsp;outer contour formed by
        all the building when viewing the side of the city from a distance. The{" "}
        <strong>skyline</strong> from each cardinal direction north, east,
        south, and west may be different.
      </p>

      <p>
        We are allowed to increase the height of{" "}
        <strong>any number of buildings by any amount</strong> (the amount can
        be different per building). The height of a <code>0</code>-height
        building can also be increased. However, increasing the height of a
        building should <strong>not</strong> affect the city's{" "}
        <strong>skyline</strong> from any cardinal direction.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum total sum</strong> that the height of the
          buildings can be increased by <strong>without</strong> changing the
          city's <strong>skyline</strong> from any cardinal direction
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/06/21/807-ex1.png"
        style={{ width: 700, height: 603 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]{" "}
        <br />
        <strong>Output:</strong> 35 <br />
        <strong>Explanation:</strong> The building heights are shown in the
        center of the above image. <br />
        The skylines when viewed from each cardinal direction are drawn in red.{" "}
        <br />
        The grid after increasing the height of buildings without affecting
        skylines is: <br />
        {`gridNew = [ [8, 4, 8, 7],
                    [7, 4, 7, 7],
                    [9, 4, 8, 7],
                    [3, 3, 3, 3] ]`}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[0,0,0],[0,0,0],[0,0,0]] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> Increasing the height of any building will
        result in the skyline changing.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == grid.length</code>
        </li>
        <li>
          <code>n == grid[r].length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 50</code>
        </li>
        <li>
          <code>0 &lt;= grid[r][c] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  921: (
    <div class="elfjS" data-track-load="description_content">
      <p>A parentheses string is valid if and only if:</p>

      <ul>
        <li>It is the empty string,</li>
        <li>
          It can be written as <code>AB</code> (<code>A</code> concatenated with{" "}
          <code>B</code>), where <code>A</code> and <code>B</code> are valid
          strings, or
        </li>
        <li>
          It can be written as <code>(A)</code>, where <code>A</code> is a valid
          string.
        </li>
      </ul>

      <p>
        You are given a parentheses string <code>s</code>. In one move, you can
        insert a parenthesis at any position of the string.
      </p>

      <ul>
        <li>
          For example, if <code>s = {`"()))"`}</code>, you can insert an opening
          parenthesis to be{" "}
          <code>
            {`"(`}
            <strong>(</strong>
            {`})))"`}
          </code>{" "}
          or a closing parenthesis to be{" "}
          <code>
            {`"())`}
            <strong>)</strong>
            {`)"`}
          </code>
          .
        </li>
      </ul>

      <p>
        Return <em>the minimum number of moves required to make </em>
        <code>s</code>
        <em> valid</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = {`"())"`} <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = {`"((("`} <br />
        <strong>Output:</strong> 3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>s[i]</code> is either <code>'('</code> or <code>')'</code>.
        </li>
      </ul>
    </div>
  ),
  984: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integers <code>a</code> and <code>b</code>, return{" "}
        <strong>any</strong> string <code>s</code> such that:
      </p>

      <ul>
        <li>
          <code>s</code> has length <code>a + b</code> and contains exactly{" "}
          <code>a</code> <code>'a'</code> letters, and exactly <code>b</code>{" "}
          <code>'b'</code> letters,
        </li>
        <li>
          The substring <code>'aaa'</code> does not occur in <code>s</code>, and
        </li>
        <li>
          The substring <code>'bbb'</code> does not occur in <code>s</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 1, b = 2 <br />
        <strong>Output:</strong> "abb" <br />
        <strong>Explanation:</strong> "abb", "bab" and "bba" are all correct
        answers.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 4, b = 1 <br />
        <strong>Output:</strong> "aabaa"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= a, b &lt;= 100</code>
        </li>
        <li>
          It is guaranteed such an <code>s</code> exists for the given{" "}
          <code>a</code> and <code>b</code>.
        </li>
      </ul>
    </div>
  ),
  1013: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>arr</code>, return <code>true</code> if
        we can partition the array into three <strong>non-empty</strong> parts
        with equal sums.
      </p>

      <p>
        Formally, we can partition the array if we can find indexes{" "}
        <code>i + 1 &lt; j</code> with{" "}
        <code>
          (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... +
          arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])
        </code>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [0,2,1,-6,6,-7,9,1,2,0,1] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation: </strong>0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [0,2,1,-6,6,7,9,-1,2,0,1] <br />
        <strong>Output:</strong> false
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [3,3,6,5,-2,2,5,1,-9,4] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation: </strong>3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= arr.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= arr[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1053: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of positive integers <code>arr</code> (not necessarily
        distinct), return <em>the </em>
        <span
          data-keyword="lexicographically-smaller-array"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rih:"
              >
                <div>
                  <em>lexicographically</em>
                </div>
              </div>
            </div>
          </div>
        </span>
        <em> largest permutation that is smaller than</em> <code>arr</code>,
        that can be <strong>made with exactly one swap</strong>. If it cannot be
        done, then return the same array.
      </p>

      <p>
        <strong>Note</strong> that a <em>swap</em> exchanges the positions of
        two numbers <code>arr[i]</code> and <code>arr[j]</code>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [3,2,1] <br />
        <strong>Output:</strong> [3,1,2] <br />
        <strong>Explanation:</strong> Swapping 2 and 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,1,5] <br />
        <strong>Output:</strong> [1,1,5] <br />
        <strong>Explanation:</strong> This is already the smallest permutation.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,9,4,6,7] <br />
        <strong>Output:</strong> [1,7,4,6,9] <br />
        <strong>Explanation:</strong> Swapping 9 and 7.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= arr.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= arr[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1144: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> of integers, a <em>move</em>
        &nbsp;consists of choosing any element and{" "}
        <strong>decreasing it by 1</strong>.
      </p>

      <p>
        An array <code>A</code> is a&nbsp;<em>zigzag array</em>&nbsp;if either:
      </p>

      <ul>
        <li>
          Every even-indexed element is greater than adjacent elements,
          ie.&nbsp;
          <code>A[0] &gt; A[1] &lt; A[2] &gt; A[3] &lt; A[4] &gt; ...</code>
        </li>
        <li>
          OR, every odd-indexed element is greater than adjacent elements,
          ie.&nbsp;
          <code>A[0] &lt; A[1] &gt; A[2] &lt; A[3] &gt; A[4] &lt; ...</code>
        </li>
      </ul>

      <p>
        Return the minimum number of moves to transform the given array{" "}
        <code>nums</code> into a zigzag array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> We can decrease 2 to 0 or 3 to 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [9,6,1,6,2] <br />
        <strong>Output:</strong> 4
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1183: (
    <div class="markdown-body div-width">
      <p>
        Consider a matrix <code>M</code> with dimensions{" "}
        <code>width * height</code>, such that every cell has value{" "}
        <code>0</code>&nbsp;or <code>1</code>, and any <strong>square</strong>
        &nbsp;sub-matrix of <code>M</code> of size{" "}
        <code>sideLength * sideLength</code>&nbsp;has at most{" "}
        <code>maxOnes</code>&nbsp;ones.
      </p>

      <p>
        Return the maximum possible number of ones that the matrix{" "}
        <code>M</code> can have.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> width = 3, height = 3, sideLength = 2, maxOnes =
        1 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> <br />
        In a 3*3 matrix, no 2*2 sub-matrix can have more than 1 one. <br />
        The best solution that has 4 ones is: <br />
        {`[1,0,1]
    [0,0,0]
    [1,0,1]`}
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> width = 3, height = 3, sideLength = 2, maxOnes =
        2 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> <br />
        {`[1,0,1]
    [1,0,1]
    [1,0,1]`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= width, height &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= sideLength &lt;= width, height</code>
        </li>
        <li>
          <code>0 &lt;= maxOnes &lt;= sideLength * sideLength</code>
        </li>
      </ul>
    </div>
  ),
  1338: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>arr</code>. You can choose a set of
        integers and remove all the occurrences of these integers in the array.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum size of the set so that <strong>at least</strong> half of
          the integers of the array are removed
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [3,3,3,3,5,5,5,2,2,7] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> Choosing {`{(3, 7)}`} will make the new
        array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the
        old array).
        <br /> Possible sets of size 2 are {`{(3, 5)},{(3, 2)},{(5, 2)}`}.
        <br /> Choosing set {`{(2, 7)}`} is not possible as it will make the new
        array [3,3,3,3,5,5,5] which has a size greater than half of the size of
        the old array.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [7,7,7,7,7,7] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The only possible set you can choose is{" "}
        {7}. This will make the new array empty.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= arr.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>arr.length</code> is even.
        </li>
        <li>
          <code>
            1 &lt;= arr[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1520: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> of lowercase letters, you need to find the
        maximum number of <strong>non-empty</strong> substrings of{" "}
        <code>s</code> that meet the following conditions:
      </p>

      <ul>
        <li>
          The substrings do not overlap, that is for any two substrings{" "}
          <code>s[i..j]</code> and <code>s[x..y]</code>, either{" "}
          <code>j &lt; x</code> or <code>i &gt; y</code> is true.
        </li>
        <li>
          A substring that contains a certain character <code>c</code> must also
          contain all occurrences of <code>c</code>.
        </li>
      </ul>

      <p>
        Find{" "}
        <em>the maximum number of substrings that meet the above conditions</em>
        . If there are multiple solutions with the same number of substrings,{" "}
        <em>return the one with minimum total length. </em>It can be shown that
        there exists a unique solution of minimum total length.
      </p>

      <p>
        Notice that you can return the substrings in <strong>any</strong> order.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "adefaddaccc" <br />
        <strong>Output:</strong> ["e","f","ccc"] <br />
        <b>Explanation:</b>&nbsp;The following are all the possible substrings
        that meet the conditions: <br />
        {`[
        &nbsp; "adefaddaccc"
        &nbsp; "adefadda",
        &nbsp; "ef",
        &nbsp; "e",
          "f",
        &nbsp; "ccc",
        ]`}{" "}
        <br />
        If we choose the first string, we cannot choose anything else and we'd
        get only 1. If we choose "adefadda", we are left with "ccc" which is the
        only one that doesn't overlap, thus obtaining 2 substrings. Notice also,
        that it's not optimal to choose "ef" since it can be split into two.
        Therefore, the optimal way is to choose ["e","f","ccc"] which gives us 3
        substrings. No other solution of the same number of substrings exist.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abbaccd" <br />
        <strong>Output:</strong> ["d","bb","cc"] <br />
        <b>Explanation: </b>Notice that while the set of substrings
        ["d","abba","cc"] also has length 3, it's considered incorrect since it
        has larger total length.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> contains only lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  1578: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice has <code>n</code> balloons arranged on a rope. You are given a{" "}
        <strong>0-indexed</strong> string <code>colors</code> where{" "}
        <code>colors[i]</code> is the color of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        balloon.
      </p>

      <p>
        Alice wants the rope to be <strong>colorful</strong>. She does not want{" "}
        <strong>two consecutive balloons</strong> to be of the same color, so
        she asks Bob for help. Bob can remove some balloons from the rope to
        make it <strong>colorful</strong>. You are given a{" "}
        <strong>0-indexed</strong> integer array <code>neededTime</code> where{" "}
        <code>neededTime[i]</code> is the time (in seconds) that Bob needs to
        remove the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        balloon from the rope.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum time</strong> Bob needs to make the rope{" "}
          <strong>colorful</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/12/13/ballon1.jpg"
        style={{ width: 404, height: 243 }}
      />
      <pre>
        <strong>Input:</strong> colors = "abaac", neededTime = [1,2,3,4,5]{" "}
        <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> In the above image, 'a' is blue, 'b' is
        red, and 'c' is green. <br />
        Bob can remove the blue balloon at index 2. This takes 3 seconds. <br />
        There are no longer two consecutive balloons of the same color. Total
        time = 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/12/13/balloon2.jpg"
        style={{ width: 244, height: 243 }}
      />
      <pre>
        <strong>Input:</strong> colors = "abc", neededTime = [1,2,3] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The rope is already colorful. Bob does not
        need to remove any balloons from the rope.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/12/13/balloon3.jpg"
        style={{ width: 404, height: 243 }}
      />
      <pre>
        <strong>Input:</strong> colors = "aabaa", neededTime = [1,2,3,4,1]{" "}
        <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> Bob will remove the balloons at indices 0
        and 4. Each balloons takes 1 second to remove.
        <br /> There are no longer two consecutive balloons of the same color.
        Total time = 1 + 1 = 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == colors.length == neededTime.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= neededTime[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>colors</code> contains only lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  1663: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>numeric value</strong> of a{" "}
        <strong>lowercase character</strong> is defined as its position{" "}
        <code>(1-indexed)</code> in the alphabet, so the numeric value of{" "}
        <code>a</code> is <code>1</code>, the numeric value of <code>b</code> is{" "}
        <code>2</code>, the numeric value of <code>c</code> is <code>3</code>,
        and so on.
      </p>

      <p>
        The <strong>numeric value</strong> of a <strong>string</strong>{" "}
        consisting of lowercase characters is defined as the sum of its
        characters' numeric values. For example, the numeric value of the string{" "}
        <code>"abe"</code> is equal to <code>1 + 2 + 5 = 8</code>.
      </p>

      <p>
        You are given two integers <code>n</code> and <code>k</code>. Return{" "}
        <em>
          the <strong>lexicographically smallest string</strong> with{" "}
          <strong>length</strong> equal to <code>n</code> and{" "}
          <strong>numeric value</strong> equal to <code>k</code>.
        </em>
      </p>

      <p>
        Note that a string <code>x</code> is lexicographically smaller than
        string <code>y</code> if <code>x</code> comes before <code>y</code> in
        dictionary order, that is, either <code>x</code> is a prefix of{" "}
        <code>y</code>, or if <code>i</code> is the first position such that{" "}
        <code>x[i] != y[i]</code>, then <code>x[i]</code> comes before{" "}
        <code>y[i]</code> in alphabetic order.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, k = 27 <br />
        <strong>Output:</strong> "aay" <br />
        <strong>Explanation:</strong> The numeric value of the string is 1 + 1 +
        25 = 27, and it is the smallest string with such a value and length
        equal to 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 5, k = 73 <br />
        <strong>Output:</strong> "aaszz"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>n &lt;= k &lt;= 26 * n</code>
        </li>
      </ul>
    </div>
  ),
  1702: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a binary string <code>binary</code> consisting of only{" "}
        <code>0</code>'s or <code>1</code>'s. You can apply each of the
        following operations any number of times:
      </p>

      <ul>
        <li>
          Operation 1: If the number contains the substring <code>"00"</code>,
          you can replace it with <code>"10"</code>.
          <ul>
            <li>
              For example,{" "}
              <code>
                "<u>00</u>010" -&gt; "<u>10</u>010
              </code>
              "
            </li>
          </ul>
        </li>
        <li>
          Operation 2: If the number contains the substring <code>"10"</code>,
          you can replace it with <code>"01"</code>.
          <ul>
            <li>
              For example,{" "}
              <code>
                "000<u>10</u>" -&gt; "000<u>01</u>"
              </code>
            </li>
          </ul>
        </li>
      </ul>

      <p>
        <em>
          Return the <strong>maximum binary string</strong> you can obtain after
          any number of operations. Binary string <code>x</code> is greater than
          binary string <code>y</code> if <code>x</code>'s decimal
          representation is greater than <code>y</code>'s decimal
          representation.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> binary = "000110" <br />
        <strong>Output:</strong> "111011" <br />
        <strong>Explanation:</strong> A valid transformation sequence can be:{" "}
        <br />
        "0001<u>10</u>" -&gt; "0001<u>01</u>" <br />"<u>00</u>0101" -&gt; "
        <u>10</u>0101" <br />
        "1<u>00</u>101" -&gt; "1<u>10</u>101" <br />
        "110<u>10</u>1" -&gt; "110<u>01</u>1" <br />
        "11<u>00</u>11" -&gt; "11<u>10</u>11"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> binary = "01" <br />
        <strong>Output:</strong> "01" <br />
        <strong>Explanation:</strong>&nbsp;"01" cannot be transformed any
        further.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= binary.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>binary</code> consist of <code>'0'</code> and <code>'1'</code>.
        </li>
      </ul>
    </div>
  ),
  1785: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and two integers{" "}
        <code>limit</code> and <code>goal</code>. The array <code>nums</code>{" "}
        has an interesting property that <code>abs(nums[i]) &lt;= limit</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum number of elements you need to add to make the sum of the
          array equal to{" "}
        </em>
        <code>goal</code>. The array must maintain its property that{" "}
        <code>abs(nums[i]) &lt;= limit</code>.
      </p>

      <p>
        Note that <code>abs(x)</code> equals <code>x</code> if{" "}
        <code>x &gt;= 0</code>, and <code>-x</code> otherwise.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,-1,1], limit = 3, goal = -4 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> You can add -2 and -3, then the sum of the
        array will be 1 - 1 + 1 - 2 - 3 = -4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,-10,9,1], limit = 100, goal = 0 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= limit &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>-limit &lt;= nums[i] &lt;= limit</code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= goal &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1864: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a binary string <code>s</code>, return{" "}
        <em>
          the <strong>minimum</strong> number of character swaps to make it{" "}
          <strong>alternating</strong>, or{" "}
        </em>
        <code>-1</code>
        <em> if it is impossible.</em>
      </p>

      <p>
        The string is called <strong>alternating</strong> if no two adjacent
        characters are equal. For example, the strings <code>"010"</code> and{" "}
        <code>"1010"</code> are alternating, while the string{" "}
        <code>"0100"</code> is not.
      </p>

      <p>
        Any two characters may be swapped, even if they are&nbsp;
        <strong>not adjacent</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "111000" <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> Swap positions 1 and 4: "1<u>1</u>10
        <u>0</u>0" -&gt; "1<u>0</u>10<u>1</u>0" <br />
        The string is now alternating.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "010" <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The string is already alternating, no
        swaps are needed.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "1110" <br />
        <strong>Output:</strong> -1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.
        </li>
      </ul>
    </div>
  ),
  1899: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>triplet</strong> is an array of three integers. You are given
        a 2D integer array <code>triplets</code>, where{" "}
        <code>
          triplets[i] = [a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>]
        </code>{" "}
        describes the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        <strong>triplet</strong>. You are also given an integer array{" "}
        <code>target = [x, y, z]</code> that describes the{" "}
        <strong>triplet</strong> you want to obtain.
      </p>

      <p>
        To obtain <code>target</code>, you may apply the following operation on{" "}
        <code>triplets</code> <strong>any number</strong> of times (possibly{" "}
        <strong>zero</strong>):
      </p>

      <ul>
        <li>
          Choose two indices (<strong>0-indexed</strong>) <code>i</code> and{" "}
          <code>j</code> (<code>i != j</code>) and <strong>update</strong>{" "}
          <code>triplets[j]</code> to become{" "}
          <code>
            [max(a<sub>i</sub>, a<sub>j</sub>), max(b<sub>i</sub>, b<sub>j</sub>
            ), max(c<sub>i</sub>, c<sub>j</sub>)]
          </code>
          .
          <ul>
            <li>
              For example, if <code>triplets[i] = [2, 5, 3]</code> and{" "}
              <code>triplets[j] = [1, 7, 5]</code>, <code>triplets[j]</code>{" "}
              will be updated to{" "}
              <code>[max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5]</code>.
            </li>
          </ul>
        </li>
      </ul>

      <p>
        Return <code>true</code> <em>if it is possible to obtain the </em>
        <code>target</code>
        <em>
          {" "}
          <strong>triplet</strong>{" "}
        </em>
        <code>[x, y, z]</code>
        <em>
          {" "}
          as an<strong> element</strong> of{" "}
        </em>
        <code>triplets</code>
        <em>, or </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> triplets = [[2,5,3],[1,8,4],[1,7,5]], target =
        [2,7,5] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Perform the following operations: <br />-
        Choose the first and last triplets [<u>[2,5,3]</u>,[1,8,4],
        <u>[1,7,5]</u>]. Update the last triplet to be [max(2,1), max(5,7),
        max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],<u>[2,7,5]</u>]
        <br /> The target triplet [2,7,5] is now an element of triplets.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> triplets = [[3,4,5],[4,5,6]], target = [3,2,5]{" "}
        <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> It is impossible to have [3,2,5] as an
        element because there is no 2 in any of the triplets.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]],
        target = [5,5,5] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation: </strong>Perform the following operations: <br />-
        Choose the first and third triplets [<u>[2,5,3]</u>,[2,3,4],
        <u>[1,2,5]</u>,[5,2,3]]. Update the third triplet to be [max(2,1),
        max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],
        <u>[2,5,5]</u>,[5,2,3]].
        <br /> - Choose the third and fourth triplets [[2,5,3],[2,3,4],
        <u>[2,5,5]</u>,<u>[5,2,3]</u>]. Update the fourth triplet to be
        [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets =
        [[2,5,3],[2,3,4],[2,5,5],<u>[5,5,5]</u>].
        <br /> The target triplet [5,5,5] is now an element of triplets.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= triplets.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>triplets[i].length == target.length == 3</code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>, x, y, z &lt;=
            1000
          </code>
        </li>
      </ul>
    </div>
  ),
  1953: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> projects numbered from <code>0</code> to{" "}
        <code>n - 1</code>. You are given an integer array{" "}
        <code>milestones</code> where each <code>milestones[i]</code> denotes
        the number of milestones the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        project has.
      </p>

      <p>You can work on the projects following these two rules:</p>

      <ul>
        <li>
          Every week, you will finish <strong>exactly one</strong> milestone of{" "}
          <strong>one</strong> project. You&nbsp;<strong>must</strong>&nbsp;work
          every week.
        </li>
        <li>
          You <strong>cannot</strong> work on two milestones from the same
          project for two <strong>consecutive</strong> weeks.
        </li>
      </ul>

      <p>
        Once all the milestones of all the projects are finished, or if the only
        milestones that you can work on will cause you to violate the above
        rules, you will <strong>stop working</strong>. Note that you may not be
        able to finish every project's milestones due to these constraints.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong> number of weeks you would be able to work
          on the projects without violating the rules mentioned above
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> milestones = [1,2,3] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> One possible scenario is: <br />
        ​​​​- During the 1<sup>st</sup> week, you will work on a milestone of
        project 0. <br />- During the 2<sup>nd</sup> week, you will work on a
        milestone of project 2. <br />- During the 3<sup>rd</sup> week, you will
        work on a milestone of project 1. <br />- During the 4<sup>th</sup>{" "}
        week, you will work on a milestone of project 2. <br />- During the 5
        <sup>th</sup> week, you will work on a milestone of project 1. <br />-
        During the 6<sup>th</sup> week, you will work on a milestone of project
        2. <br />
        The total number of weeks is 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> milestones = [5,2,1] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> One possible scenario is: <br />- During
        the 1<sup>st</sup> week, you will work on a milestone of project 0.{" "}
        <br />- During the 2<sup>nd</sup> week, you will work on a milestone of
        project 1. <br />- During the 3<sup>rd</sup> week, you will work on a
        milestone of project 0. <br />- During the 4<sup>th</sup> week, you will
        work on a milestone of project 1. <br />- During the 5<sup>th</sup>{" "}
        week, you will work on a milestone of project 0. <br />- During the 6
        <sup>th</sup> week, you will work on a milestone of project 2. <br />-
        During the 7<sup>th</sup> week, you will work on a milestone of project
        0. <br />
        The total number of weeks is 7. <br />
        Note that you cannot work on the last milestone of project 0 on 8
        <sup>th</sup> week because it would violate the rules.
        <br /> Thus, one milestone in project 0 will remain unfinished.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == milestones.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= milestones[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1968: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array <code>nums</code> of{" "}
        <strong>distinct</strong> integers. You want to rearrange the elements
        in the array such that every element in the rearranged array is{" "}
        <strong>not</strong> equal to the <strong>average</strong> of its
        neighbors.
      </p>

      <p>
        More formally, the rearranged array should have the property such that
        for every <code>i</code> in the range{" "}
        <code>1 &lt;= i &lt; nums.length - 1</code>,{" "}
        <code>(nums[i-1] + nums[i+1]) / 2</code> is <strong>not</strong> equal
        to <code>nums[i]</code>.
      </p>

      <p>
        Return{" "}
        <em>
          <strong>any</strong> rearrangement of{" "}
        </em>
        <code>nums</code>
        <em> that meets the requirements</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5] <br />
        <strong>Output:</strong> [1,2,4,5,3] <br />
        <strong>Explanation:</strong> <br />
        When i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 =
        2.5. <br />
        When i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 =
        3.5. <br />
        When i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 =
        3.5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [6,2,0,9,7] <br />
        <strong>Output:</strong> [9,7,6,2,0] <br />
        <strong>Explanation:</strong> <br />
        When i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 =
        7.5. <br />
        When i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 =
        4.5. <br />
        When i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 =
        3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1974: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a special typewriter with lowercase English letters{" "}
        <code>'a'</code> to <code>'z'</code> arranged in a{" "}
        <strong>circle</strong> with a <strong>pointer</strong>. A character can{" "}
        <strong>only</strong> be typed if the pointer is pointing to that
        character. The pointer is <strong>initially</strong> pointing to the
        character <code>'a'</code>.
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/31/chart.jpg"
        style={{ width: 530, height: 410 }}
      />
      <p>Each second, you may perform one of the following operations:</p>

      <ul>
        <li>
          Move the pointer one character <strong>counterclockwise</strong> or{" "}
          <strong>clockwise</strong>.
        </li>
        <li>
          Type the character the pointer is <strong>currently</strong> on.
        </li>
      </ul>

      <p>
        Given a string <code>word</code>, return the<strong> minimum</strong>{" "}
        number of seconds to type out the characters in <code>word</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "abc" <br />
        <strong>Output:</strong> 5 <br />
        <strong>
          Explanation: <br />
        </strong>
        The characters are printed as follows: <br />
        - Type the character 'a' in 1 second since the pointer is initially on
        'a'. <br />
        - Move the pointer clockwise to 'b' in 1 second. <br />
        - Type the character 'b' in 1 second. <br />
        - Move the pointer clockwise to 'c' in 1 second. <br />- Type the
        character 'c' in 1 second.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "bza" <br />
        <strong>Output:</strong> 7 <br />
        <strong>
          Explanation: <br />
        </strong>
        The characters are printed as follows: <br />
        - Move the pointer clockwise to 'b' in 1 second. <br />
        - Type the character 'b' in 1 second. <br />
        - Move the pointer counterclockwise to 'z' in 2 seconds. <br />
        - Type the character 'z' in 1 second. <br />
        - Move the pointer clockwise to 'a' in 1 second. <br />- Type the
        character 'a' in 1 second.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "zjpc" <br />
        <strong>Output:</strong> 34 <br />
        <strong>Explanation:</strong> <br />
        The characters are printed as follows: <br />
        - Move the pointer counterclockwise to 'z' in 1 second. <br />
        - Type the character 'z' in 1 second. <br />
        - Move the pointer clockwise to 'j' in 10 seconds. <br />
        - Type the character 'j' in 1 second. <br />
        - Move the pointer clockwise to 'p' in 6 seconds. <br />
        - Type the character 'p' in 1 second. <br />
        - Move the pointer counterclockwise to 'c' in 13 seconds. <br />- Type
        the character 'c' in 1 second.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= word.length &lt;= 100</code>
        </li>
        <li>
          <code>word</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  2116: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A parentheses string is a <strong>non-empty</strong> string consisting
        only of <code>'('</code> and <code>')'</code>. It is valid if{" "}
        <strong>any</strong> of the following conditions is{" "}
        <strong>true</strong>:
      </p>

      <ul>
        <li>
          It is <code>()</code>.
        </li>
        <li>
          It can be written as <code>AB</code> (<code>A</code> concatenated with{" "}
          <code>B</code>), where <code>A</code> and <code>B</code> are valid
          parentheses strings.
        </li>
        <li>
          It can be written as <code>(A)</code>, where <code>A</code> is a valid
          parentheses string.
        </li>
      </ul>

      <p>
        You are given a parentheses string <code>s</code> and a string{" "}
        <code>locked</code>, both of length <code>n</code>. <code>locked</code>{" "}
        is a binary string consisting only of <code>'0'</code>s and{" "}
        <code>'1'</code>s. For <strong>each</strong> index <code>i</code> of{" "}
        <code>locked</code>,
      </p>

      <ul>
        <li>
          If <code>locked[i]</code> is <code>'1'</code>, you{" "}
          <strong>cannot</strong> change <code>s[i]</code>.
        </li>
        <li>
          But if <code>locked[i]</code> is <code>'0'</code>, you{" "}
          <strong>can</strong> change <code>s[i]</code> to either{" "}
          <code>'('</code> or <code>')'</code>.
        </li>
      </ul>

      <p>
        Return <code>true</code>{" "}
        <em>
          if you can make <code>s</code> a valid parentheses string
        </em>
        . Otherwise, return <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/11/06/eg1.png"
        style={{ width: 311, height: 101 }}
      />
      <pre>
        <strong>Input:</strong> s = {`"))()))"`}, locked = "010100" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> locked[1] == '1' and locked[3] == '1', so
        we cannot change s[1] or s[3]. <br />
        We change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to
        make s valid.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = {`"()()"`}, locked = "0000" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> We do not need to make any changes because
        s is already valid.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = ")", locked = "0" <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> locked permits us to change s[0]. <br />
        Changing s[0] to either '(' or ')' will not make s valid.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == s.length == locked.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s[i]</code> is either <code>'('</code> or <code>')'</code>.
        </li>
        <li>
          <code>locked[i]</code> is either <code>'0'</code> or <code>'1'</code>.
        </li>
      </ul>
    </div>
  ),
  2160: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>positive</strong> integer <code>num</code>{" "}
        consisting of exactly four digits. Split <code>num</code> into two new
        integers <code>new1</code> and <code>new2</code> by using the{" "}
        <strong>digits</strong> found in <code>num</code>.{" "}
        <strong>Leading zeros</strong> are allowed in <code>new1</code> and{" "}
        <code>new2</code>, and <strong>all</strong> the digits found in{" "}
        <code>num</code> must be used.
      </p>

      <ul>
        <li>
          For example, given <code>num = 2932</code>, you have the following
          digits: two <code>2</code>'s, one <code>9</code> and one{" "}
          <code>3</code>. Some of the possible pairs <code>[new1, new2]</code>{" "}
          are <code>[22, 93]</code>, <code>[23, 92]</code>,{" "}
          <code>[223, 9]</code> and <code>[2, 329]</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> possible sum of{" "}
        </em>
        <code>new1</code>
        <em> and </em>
        <code>new2</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 2932 <br />
        <strong>Output:</strong> 52 <br />
        <strong>Explanation:</strong> Some possible pairs [new1, new2] are [29,
        23], [223, 9], etc. <br />
        The minimum sum can be obtained by the pair [29, 23]: 29 + 23 = 52.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 4009 <br />
        <strong>Output:</strong> 13 <br />
        <strong>Explanation:</strong> Some possible pairs [new1, new2] are [0,
        49], [490, 0], etc. <br />
        The minimum sum can be obtained by the pair [4, 9]: 4 + 9 = 13.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1000 &lt;= num &lt;= 9999</code>
        </li>
      </ul>
    </div>
  ),
  2202: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> representing the contents of a <b>pile</b>, where{" "}
        <code>nums[0]</code> is the topmost element of the pile.
      </p>

      <p>
        In one move, you can perform <strong>either</strong> of the following:
      </p>

      <ul>
        <li>
          If the pile is not empty, <strong>remove</strong> the topmost element
          of the pile.
        </li>
        <li>
          If there are one or more removed elements, <strong>add</strong> any
          one of them back onto the pile. This element becomes the new topmost
          element.
        </li>
      </ul>

      <p>
        You are also given an integer <code>k</code>, which denotes the total
        number of moves to be made.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum value</strong> of the topmost element of the pile
          possible after <strong>exactly</strong>
        </em>{" "}
        <code>k</code> <em>moves</em>. In case it is not possible to obtain a
        non-empty pile after <code>k</code> moves, return <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,2,2,4,0,6], k = 4 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> <br />
        One of the ways we can end with 5 at the top of the pile after 4 moves
        is as follows: <br />- Step 1: Remove the topmost element = 5. The pile
        becomes [2,2,4,0,6]. <br />
        - Step 2: Remove the topmost element = 2. The pile becomes [2,4,0,6].
        <br />
        - Step 3: Remove the topmost element = 2. The pile becomes [4,0,6].
        <br />
        - Step 4: Add 5 back onto the pile. The pile becomes [5,4,0,6].
        <br />
        Note that this is not the only way to end with 5 at the top of the pile.
        It can be shown that 5 is the largest answer possible after 4 moves.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2], k = 1<br />
        <strong>Output:</strong> -1
        <br />
        <strong>Explanation:</strong> <br />
        In the first move, our only option is to pop the topmost element of the
        pile. <br />
        Since it is not possible to obtain a non-empty pile after one move, we
        return -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i], k &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2383: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are entering a competition, and are given two{" "}
        <strong>positive</strong> integers <code>initialEnergy</code> and{" "}
        <code>initialExperience</code> denoting your initial energy and initial
        experience respectively.
      </p>

      <p>
        You are also given two <strong>0-indexed</strong> integer arrays{" "}
        <code>energy</code> and <code>experience</code>, both of length{" "}
        <code>n</code>.
      </p>

      <p>
        You will face <code>n</code> opponents <strong>in order</strong>. The
        energy and experience of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        opponent is denoted by <code>energy[i]</code> and{" "}
        <code>experience[i]</code> respectively. When you face an opponent, you
        need to have both <strong>strictly</strong> greater experience and
        energy to defeat them and move to the next opponent if available.
      </p>

      <p>
        Defeating the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        opponent <strong>increases</strong> your experience by{" "}
        <code>experience[i]</code>, but <strong>decreases</strong> your energy
        by <code>energy[i]</code>.
      </p>

      <p>
        Before starting the competition, you can train for some number of hours.
        After each hour of training, you can <strong>either</strong> choose to
        increase your initial experience by one, or increase your initial energy
        by one.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of training hours required to
          defeat all{" "}
        </em>
        <code>n</code>
        <em> opponents</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> initialEnergy = 5, initialExperience = 3, energy
        = [1,4,3,2], experience = [2,6,3,1] <br />
        <strong>Output:</strong> 8 <br />
        <strong>Explanation:</strong> You can increase your energy to 11 after 6
        hours of training, and your experience to 5 after 2 hours of training.{" "}
        <br />
        You face the opponents in the following order: <br />- You have more
        energy and experience than the 0<sup>th</sup> opponent so you win.{" "}
        <br />
        Your energy becomes 11 - 1 = 10, and your experience becomes 5 + 2 = 7.{" "}
        <br />- You have more energy and experience than the 1<sup>st</sup>{" "}
        opponent so you win. <br />
        Your energy becomes 10 - 4 = 6, and your experience becomes 7 + 6 = 13.{" "}
        <br />- You have more energy and experience than the 2<sup>nd</sup>{" "}
        opponent so you win. <br />
        Your energy becomes 6 - 3 = 3, and your experience becomes 13 + 3 = 16.{" "}
        <br />- You have more energy and experience than the 3<sup>rd</sup>{" "}
        opponent so you win. <br />
        Your energy becomes 3 - 2 = 1, and your experience becomes 16 + 1 = 17.{" "}
        <br />
        You did a total of 6 + 2 = 8 hours of training before the competition,
        so we return 8. It can be proven that no smaller answer exists.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> initialEnergy = 2, initialExperience = 4, energy
        = [1], experience = [3] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> You do not need any additional energy or
        experience to win the competition, so we return 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == energy.length == experience.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= initialEnergy, initialExperience, energy[i], experience[i]
            &lt;= 100
          </code>
        </li>
      </ul>
    </div>
  ),
  2578: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a positive integer <code>num</code>, split it into two
        non-negative integers <code>num1</code> and <code>num2</code> such that:
      </p>

      <ul>
        <li>
          The concatenation of <code>num1</code> and <code>num2</code> is a
          permutation of <code>num</code>.
          <ul>
            <li>
              In other words, the sum of the number of occurrences of each digit
              in <code>num1</code> and <code>num2</code> is equal to the number
              of occurrences of that digit in <code>num</code>.
            </li>
          </ul>
        </li>
        <li>
          <code>num1</code> and <code>num2</code> can contain leading zeros.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> possible sum of
        </em>{" "}
        <code>num1</code> <em>and</em> <code>num2</code>.
      </p>

      <p>
        <strong>Notes:</strong>
      </p>

      <ul>
        <li>
          It is guaranteed that <code>num</code> does not contain any leading
          zeros.
        </li>
        <li>
          The order of occurrence of the digits in <code>num1</code> and{" "}
          <code>num2</code> may differ from the order of occurrence of{" "}
          <code>num</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 4325 <br />
        <strong>Output:</strong> 59 <br />
        <strong>Explanation:</strong> We can split 4325 so that{" "}
        <code>num1</code> is 24 and <code>num2</code> is 35, giving a sum of 59.
        We can prove that 59 is indeed the minimal possible sum.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 687 <br />
        <strong>Output:</strong> 75 <br />
        <strong>Explanation:</strong> We can split 687 so that <code>num1</code>{" "}
        is 68 and <code>num2</code> is 7, which would give an optimal sum of 75.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            10 &lt;= num &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2611: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are two mice and <code>n</code> different types of cheese, each
        type of cheese should be eaten by exactly one mouse.
      </p>

      <p>
        A point of the cheese with index <code>i</code> (
        <strong>0-indexed</strong>) is:
      </p>

      <ul>
        <li>
          <code>reward1[i]</code> if the first mouse eats it.
        </li>
        <li>
          <code>reward2[i]</code> if the second mouse eats it.
        </li>
      </ul>

      <p>
        You are given a positive integer array <code>reward1</code>, a positive
        integer array <code>reward2</code>, and a non-negative integer{" "}
        <code>k</code>.
      </p>

      <p>
        Return{" "}
        <em>
          <strong>the maximum</strong> points the mice can achieve if the first
          mouse eats exactly{" "}
        </em>
        <code>k</code>
        <em> types of cheese.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> reward1 = [1,1,3,4], reward2 = [4,4,1,1], k = 2{" "}
        <br />
        <strong>Output:</strong> 15 <br />
        <strong>Explanation:</strong> In this example, the first mouse eats the
        2<sup>nd</sup>&nbsp;(0-indexed) and the 3<sup>rd</sup>&nbsp;types of
        cheese, and the second mouse eats the 0<sup>th</sup>&nbsp;and the 1
        <sup>st</sup> types of cheese. <br />
        The total points are 4 + 4 + 3 + 4 = 15. <br />
        It can be proven that 15 is the maximum total points that the mice can
        achieve.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> reward1 = [1,1], reward2 = [1,1], k = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> In this example, the first mouse eats the
        0<sup>th</sup>&nbsp;(0-indexed) and 1<sup>st</sup>&nbsp;types of cheese,
        and the second mouse does not eat any cheese.
        <br /> The total points are 1 + 1 = 2. <br />
        It can be proven that 2 is the maximum total points that the mice can
        achieve.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n == reward1.length == reward2.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= reward1[i],&nbsp;reward2[i] &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= k &lt;= n</code>
        </li>
      </ul>
    </div>
  ),
  2847: (
    <article role="main" class="blog-post">
      <p>
        Given a <strong>positive</strong> integer <code>n</code>, return{" "}
        <em>
          a string representing the <strong>smallest positive</strong> integer
          such that the product of its digits is equal to
        </em>{" "}
        <code>n</code>
        <em>, or </em>
        <code>"-1"</code>
        <em> if no such number exists</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 105 <br />
        <strong>Output:</strong> "357" <br />
        <strong>Explanation:</strong> 3 * 5 * 7 = 105. It can be shown that 357
        is the smallest number with a product of digits equal to 105. So the
        answer would be "105".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 7 <br />
        <strong>Output:</strong> "7" <br />
        <strong>Explanation:</strong> Since 7 has only one digit, its product of
        digits would be 7. We will show that 7 is the smallest number with a
        product of digits equal to 7. Since the product of numbers 1 to 6 is 1
        to 6 respectively, so "7" would be the answer.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 44 <br />
        <strong>Output:</strong> "-1" <br />
        <strong>Explanation:</strong> It can be shown that there is no number
        such that its product of digits is equal to 44. So the answer would be
        "-1".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>18</sup>
          </code>
        </li>
      </ul>
    </article>
  ),
  3106: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> and an integer <code>k</code>.
      </p>

      <p>
        Define a function{" "}
        <code>
          distance(s<sub>1</sub>, s<sub>2</sub>)
        </code>{" "}
        between two strings{" "}
        <code>
          s<sub>1</sub>
        </code>{" "}
        and{" "}
        <code>
          s<sub>2</sub>
        </code>{" "}
        of the same length <code>n</code> as:
      </p>

      <ul>
        <li>
          The<strong> sum</strong> of the <strong>minimum distance</strong>{" "}
          between{" "}
          <code>
            s<sub>1</sub>[i]
          </code>{" "}
          and{" "}
          <code>
            s<sub>2</sub>[i]
          </code>{" "}
          when the characters from <code>'a'</code> to <code>'z'</code> are
          placed in a <strong>cyclic</strong> order, for all <code>i</code> in
          the range <code>[0, n - 1]</code>.
        </li>
      </ul>

      <p>
        For example, <code>distance("ab", "cd") == 4</code>, and{" "}
        <code>distance("a", "z") == 1</code>.
      </p>

      <p>
        You can <strong>change</strong> any letter of <code>s</code> to{" "}
        <strong>any</strong> other lowercase English letter,{" "}
        <strong>any</strong> number of times.
      </p>

      <p>
        Return a string denoting the{" "}
        <strong>
          <span
            data-keyword="lexicographically-smaller-string"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:rq3:"
                >
                  <div>lexicographically smallest</div>
                </div>
              </div>
            </div>
          </span>
        </strong>{" "}
        string <code>t</code> you can get after some changes, such that{" "}
        <code>distance(s, t) &lt;= k</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "zbbz", k = 3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"aaaz"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          Change <code>s</code> to <code>"aaaz"</code>. The distance between{" "}
          <code>"zbbz"</code> and <code>"aaaz"</code> is equal to{" "}
          <code>k = 3</code>.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "xaxcd", k = 4</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"aawcd"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>The distance between "xaxcd" and "aawcd" is equal to k = 4.</p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "lol", k = 0</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"lol"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          It's impossible to change any character as <code>k = 0</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= k &lt;= 2000</code>
        </li>
        <li>
          <code>s</code> consists only of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  3207: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>enemyEnergies</code> denoting the
        energy values of various enemies.
      </p>

      <p>
        You are also given an integer <code>currentEnergy</code> denoting the
        amount of energy you have initially.
      </p>

      <p>
        You start with 0 points, and all the enemies are unmarked initially.
      </p>

      <p>
        You can perform <strong>either</strong> of the following operations{" "}
        <strong>zero </strong>or multiple times to gain points:
      </p>

      <ul>
        <li>
          Choose an <strong>unmarked</strong> enemy, <code>i</code>, such that{" "}
          <code>currentEnergy &gt;= enemyEnergies[i]</code>. By choosing this
          option:
          <ul>
            <li>You gain 1 point.</li>
            <li>
              Your energy is reduced by the enemy's energy, i.e.{" "}
              <code>currentEnergy = currentEnergy - enemyEnergies[i]</code>.
            </li>
          </ul>
        </li>
        <li>
          If you have <strong>at least</strong> 1 point, you can choose an{" "}
          <strong>unmarked</strong> enemy, <code>i</code>. By choosing this
          option:
          <ul>
            <li>
              Your energy increases by the enemy's energy, i.e.{" "}
              <code>currentEnergy = currentEnergy + enemyEnergies[i]</code>.
            </li>
            <li>
              The <font face="monospace">e</font>nemy <code>i</code> is{" "}
              <strong>marked</strong>.
            </li>
          </ul>
        </li>
      </ul>

      <p>
        Return an integer denoting the <strong>maximum</strong> points you can
        get in the end by optimally performing operations.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            enemyEnergies = [3,2,2], currentEnergy = 2
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          The following operations can be performed to get 3 points, which is
          the maximum:
        </p>{" "}
        <br />
        <ul>
          <li>
            First operation on enemy 1: <code>points</code> increases by 1, and{" "}
            <code>currentEnergy</code> decreases by 2. So,{" "}
            <code>points = 1</code>, and <code>currentEnergy = 0</code>.
          </li>
          <li>
            Second operation on enemy 0: <code>currentEnergy</code> increases by
            3, and enemy 0 is marked. So, <code>points = 1</code>,{" "}
            <code>currentEnergy = 3</code>, and marked enemies ={" "}
            <code>[0]</code>.
          </li>
          <li>
            First operation on enemy 2: <code>points</code> increases by 1, and{" "}
            <code>currentEnergy</code> decreases by 2. So,{" "}
            <code>points = 2</code>, <code>currentEnergy = 1</code>, and marked
            enemies = <code>[0]</code>.
          </li>
          <li>
            Second operation on enemy 2: <code>currentEnergy</code> increases by
            2, and enemy 2 is marked. So, <code>points = 2</code>,{" "}
            <code>currentEnergy = 3</code>, and marked enemies ={" "}
            <code>[0, 2]</code>.
          </li>
          <li>
            First operation on enemy 1: <code>points</code> increases by 1, and{" "}
            <code>currentEnergy</code> decreases by 2. So,{" "}
            <code>points = 3</code>, <code>currentEnergy = 1</code>, and marked
            enemies = <code>[0, 2]</code>.
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">enemyEnergies = </span>[2]
          <span class="example-io">, currentEnergy = 10</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">5</span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong>
        </p>
        <br />

        <p>
          Performing the first operation 5 times on enemy 0 results in the
          maximum number of points.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= enemyEnergies.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= enemyEnergies[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= currentEnergy &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3218: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an <code>m x n</code> cake that needs to be cut into{" "}
        <code>1 x 1</code> pieces.
      </p>

      <p>
        You are given integers <code>m</code>, <code>n</code>, and two arrays:
      </p>

      <ul>
        <li>
          <code>horizontalCut</code> of size <code>m - 1</code>, where{" "}
          <code>horizontalCut[i]</code> represents the cost to cut along the
          horizontal line <code>i</code>.
        </li>
        <li>
          <code>verticalCut</code> of size <code>n - 1</code>, where{" "}
          <code>verticalCut[j]</code> represents the cost to cut along the
          vertical line <code>j</code>.
        </li>
      </ul>

      <p>
        In one operation, you can choose any piece of cake that is not yet a{" "}
        <code>1 x 1</code> square and perform one of the following cuts:
      </p>

      <ul>
        <li>
          Cut along a horizontal line <code>i</code> at a cost of{" "}
          <code>horizontalCut[i]</code>.
        </li>
        <li>
          Cut along a vertical line <code>j</code> at a cost of{" "}
          <code>verticalCut[j]</code>.
        </li>
      </ul>

      <p>
        After the cut, the piece of cake is divided into two distinct pieces.
      </p>

      <p>
        The cost of a cut depends only on the initial cost of the line and does
        not change.
      </p>

      <p>
        Return the <strong>minimum</strong> total cost to cut the entire cake
        into <code>1 x 1</code> pieces.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">13</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/06/04/ezgifcom-animated-gif-maker-1.gif"
            style={{ width: 280, height: 320 }}
          />
        </p>

        <ul>
          <li>
            Perform a cut on the vertical line 0 with cost 5, current total cost
            is 5.
          </li>
          <li>
            Perform a cut on the horizontal line 0 on <code>3 x 1</code> subgrid
            with cost 1.
          </li>
          <li>
            Perform a cut on the horizontal line 0 on <code>3 x 1</code> subgrid
            with cost 1.
          </li>
          <li>
            Perform a cut on the horizontal line 1 on <code>2 x 1</code> subgrid
            with cost 3.
          </li>
          <li>
            Perform a cut on the horizontal line 1 on <code>2 x 1</code> subgrid
            with cost 3.
          </li>
        </ul>

        <p>
          The total cost is <code>5 + 1 + 1 + 3 + 3 = 13</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            m = 2, n = 2, horizontalCut = [7], verticalCut = [4]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">15</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <ul>
          <li>Perform a cut on the horizontal line 0 with cost 7.</li>
          <li>
            Perform a cut on the vertical line 0 on <code>1 x 2</code> subgrid
            with cost 4.
          </li>
          <li>
            Perform a cut on the vertical line 0 on <code>1 x 2</code> subgrid
            with cost 4.
          </li>
        </ul>
        <p>
          The total cost is <code>7 + 4 + 4 = 15</code>.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= m, n &lt;= 20</code>
        </li>
        <li>
          <code>horizontalCut.length == m - 1</code>
        </li>
        <li>
          <code>verticalCut.length == n - 1</code>
        </li>
        <li>
          <code>
            1 &lt;= horizontalCut[i], verticalCut[i] &lt;= 10<sup>3</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3219: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an <code>m x n</code> cake that needs to be cut into{" "}
        <code>1 x 1</code> pieces.
      </p>

      <p>
        You are given integers <code>m</code>, <code>n</code>, and two arrays:
      </p>

      <ul>
        <li>
          <code>horizontalCut</code> of size <code>m - 1</code>, where{" "}
          <code>horizontalCut[i]</code> represents the cost to cut along the
          horizontal line <code>i</code>.
        </li>
        <li>
          <code>verticalCut</code> of size <code>n - 1</code>, where{" "}
          <code>verticalCut[j]</code> represents the cost to cut along the
          vertical line <code>j</code>.
        </li>
      </ul>

      <p>
        In one operation, you can choose any piece of cake that is not yet a{" "}
        <code>1 x 1</code> square and perform one of the following cuts:
      </p>

      <ol>
        <li>
          Cut along a horizontal line <code>i</code> at a cost of{" "}
          <code>horizontalCut[i]</code>.
        </li>
        <li>
          Cut along a vertical line <code>j</code> at a cost of{" "}
          <code>verticalCut[j]</code>.
        </li>
      </ol>

      <p>
        After the cut, the piece of cake is divided into two distinct pieces.
      </p>

      <p>
        The cost of a cut depends only on the initial cost of the line and does
        not change.
      </p>

      <p>
        Return the <strong>minimum</strong> total cost to cut the entire cake
        into <code>1 x 1</code> pieces.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">13</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/06/04/ezgifcom-animated-gif-maker-1.gif"
            style={{ width: 280, height: 320 }}
          />
        </p>
        <br />
        <ul>
          <li>
            Perform a cut on the vertical line 0 with cost 5, current total cost
            is 5.
          </li>
          <li>
            Perform a cut on the horizontal line 0 on <code>3 x 1</code> subgrid
            with cost 1.
          </li>
          <li>
            Perform a cut on the horizontal line 0 on <code>3 x 1</code> subgrid
            with cost 1.
          </li>
          <li>
            Perform a cut on the horizontal line 1 on <code>2 x 1</code> subgrid
            with cost 3.
          </li>
          <li>
            Perform a cut on the horizontal line 1 on <code>2 x 1</code> subgrid
            with cost 3.
          </li>
        </ul>

        <p>
          The total cost is <code>5 + 1 + 1 + 3 + 3 = 13</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            m = 2, n = 2, horizontalCut = [7], verticalCut = [4]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">15</span>
        </p>{" "}
        <br />
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <ul>
          <li>Perform a cut on the horizontal line 0 with cost 7.</li>
          <li>
            Perform a cut on the vertical line 0 on <code>1 x 2</code> subgrid
            with cost 4.
          </li>
          <li>
            Perform a cut on the vertical line 0 on <code>1 x 2</code> subgrid
            with cost 4.
          </li>
        </ul>
        <p>
          The total cost is <code>7 + 4 + 4 = 15</code>.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= m, n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>horizontalCut.length == m - 1</code>
        </li>
        <li>
          <code>verticalCut.length == n - 1</code>
        </li>
        <li>
          <code>
            1 &lt;= horizontalCut[i], verticalCut[i] &lt;= 10<sup>3</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  94: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>the inorder traversal of its nodes' values</em>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [1,null,2,3]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1,3,2]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/08/29/screenshot-2024-08-29-202743.png"
            style={{ width: 200, height: 264 }}
          />
        </p>
      </div>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            root = [1,2,3,4,5,null,8,null,null,6,7,9]
          </span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">[4,2,6,5,7,1,3,9,8]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/08/29/tree_2.png"
            style={{ width: 350, height: 286 }}
          />
        </p>
      </div>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">root = []</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[]</span>
        </p>
      </div>
      <p>
        <strong class="example">Example 4:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">root = [1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1]</span>
        </p>
      </div>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 100]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Recursive solution is trivial, could you do it
      iteratively?
    </div>
  ),
  112: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree and an integer{" "}
        <code>targetSum</code>, return <code>true</code> if the tree has a{" "}
        <strong>root-to-leaf</strong> path such that adding up all the values
        along the path equals <code>targetSum</code>.
      </p>
      <p>
        A <strong>leaf</strong> is a node with no children.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg"
        style={{ width: 500, height: 356 }}
      />
      <pre>
        <strong>Input:</strong> root =
        [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The root-to-leaf path with the target sum
        is shown.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg"
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> root = [1,2,3], targetSum = 5 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> There are two root-to-leaf paths in the
        tree: <br />
        (1 --&gt; 2): The sum is 3. <br />
        (1 --&gt; 3): The sum is 4. <br />
        There is no root-to-leaf path with sum = 5.
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> root = [], targetSum = 0 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Since the tree is empty, there are no
        root-to-leaf paths.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 5000]</code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
        <li>
          <code>-1000 &lt;= targetSum &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  113: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree and an integer{" "}
        <code>targetSum</code>, return{" "}
        <em>
          all <strong>root-to-leaf</strong> paths where the sum of the node
          values in the path equals{" "}
        </em>
        <code>targetSum</code>
        <em>
          . Each path should be returned as a list of the node{" "}
          <strong>values</strong>, not node references
        </em>
        .
      </p>
      <p>
        A <strong>root-to-leaf</strong> path is a path starting from the root
        and ending at any leaf node. A <strong>leaf</strong> is a node with no
        children.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg"
        style={{ width: 500, height: 356 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,4,8,11,null,13,4,7,2,null,null,5,1],
        targetSum = 22 <br />
        <strong>Output:</strong> [[5,4,11,2],[5,8,4,5]] <br />
        <strong>Explanation:</strong> There are two paths whose sum equals
        targetSum: 5 + 4 + 11 + 2 = 22 5 + 8 + 4 + 5 = 22
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg"
        style={{ width: 212, height: 181 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> root = [1,2,3], targetSum = 5 <br />
        <strong>Output:</strong> []
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> root = [1,2], targetSum = 0 <br />
        <strong>Output:</strong> []
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 5000]</code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
        <li>
          <code>-1000 &lt;= targetSum &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  114: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, flatten the tree into a
        "linked list":
      </p>
      <ul>
        <li>
          The "linked list" should use the same <code>TreeNode</code> class
          where the <code>right</code> child pointer points to the next node in
          the list and the <code>left</code> child pointer is always{" "}
          <code>null</code>.
        </li>
        <li>
          The "linked list" should be in the same order as a{" "}
          <a
            href="https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR"
            target="_blank"
            rel="noreferrer"
          >
            <strong>pre-order</strong>
            <strong> traversal</strong>
          </a>{" "}
          of the binary tree.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg"
        style={{ width: 500, height: 226 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,5,3,4,null,6] <br />
        <strong>Output:</strong> [1,null,2,null,3,null,4,null,5,null,6]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> []
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> root = [0] <br />
        <strong>Output:</strong> [0]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 2000]</code>
          .
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Can you flatten the tree in-place (with{" "}
      <code>O(1)</code> extra space)?
    </div>
  ),
  116: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>perfect binary tree</strong> where all leaves
        are on the same level, and every parent has two children. The binary
        tree has the following definition:
      </p>

      <pre>
        {`struct Node {
          int val;
          Node *left;
          Node *right;
          Node *next;
        }`}
      </pre>

      <p>
        Populate each next pointer to point to its next right node. If there is
        no next right node, the next pointer should be set to <code>NULL</code>.
      </p>

      <p>
        Initially, all next pointers are set to <code>NULL</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/02/14/116_sample.png"
        style={{ width: 500, height: 171 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3,4,5,6,7] <br />
        <strong>Output:</strong> [1,#,2,3,#,4,5,6,7,#] <br />
        <strong>Explanation: </strong>Given the above perfect binary tree
        (Figure A), your function should populate each next pointer to point to
        its next right node, just like in Figure B. The serialized output is in
        level order as connected by the next pointers, with '#' signifying the
        end of each level.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [0, 2<sup>12</sup> - 1]
          </code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow-up:</strong>
      </p>

      <ul>
        <li>You may only use constant extra space.</li>
        <li>
          The recursive approach is fine. You may assume implicit stack space
          does not count as extra space for this problem.
        </li>
      </ul>
    </div>
  ),
  117: (
    <div class="elfjS" data-track-load="description_content">
      <p>Given a binary tree</p>

      <pre>
        {`struct Node {
          int val;
          Node *left;
          Node *right;
          Node *next;
        }`}
      </pre>

      <p>
        Populate each next pointer to point to its next right node. If there is
        no next right node, the next pointer should be set to <code>NULL</code>.
      </p>

      <p>
        Initially, all next pointers are set to <code>NULL</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/02/15/117_sample.png"
        style={{ width: 500, height: 171 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3,4,5,null,7] <br />
        <strong>Output:</strong> [1,#,2,3,#,4,5,7,#] <br />
        <strong>Explanation: </strong>Given the above binary tree (Figure A),
        your function should populate each next pointer to point to its next
        right node, just like in Figure B. The serialized output is in level
        order as connected by the next pointers, with '#' signifying the end of
        each level.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 6000]</code>
          .
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow-up:</strong>
      </p>

      <ul>
        <li>You may only use constant extra space.</li>
        <li>
          The recursive approach is fine. You may assume implicit stack space
          does not count as extra space for this problem.
        </li>
      </ul>
    </div>
  ),
  124: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>path</strong> in a binary tree is a sequence of nodes where
        each pair of adjacent nodes in the sequence has an edge connecting them.
        A node can only appear in the sequence <strong>at most once</strong>.
        Note that the path does not need to pass through the root.
      </p>

      <p>
        The <strong>path sum</strong> of a path is the sum of the node's values
        in the path.
      </p>

      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>
          the maximum <strong>path sum</strong> of any{" "}
          <strong>non-empty</strong> path
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg"
        style={{ width: 322, height: 182 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The optimal path is 2 -&gt; 1 -&gt; 3 with
        a path sum of 2 + 1 + 3 = 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg"
      />
      <pre>
        <strong>Input:</strong> root = [-10,9,20,null,null,15,7] <br />
        <strong>Output:</strong> 42 <br />
        <strong>Explanation:</strong> The optimal path is 15 -&gt; 20 -&gt; 7
        with a path sum of 15 + 20 + 7 = 42.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 3 * 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  129: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>root</code> of a binary tree containing digits
        from <code>0</code> to <code>9</code> only.
      </p>

      <p>Each root-to-leaf path in the tree represents a number.</p>

      <ul>
        <li>
          For example, the root-to-leaf path <code>1 -&gt; 2 -&gt; 3</code>{" "}
          represents the number <code>123</code>.
        </li>
      </ul>

      <p>
        Return <em>the total sum of all root-to-leaf numbers</em>. Test cases
        are generated so that the answer will fit in a <strong>32-bit</strong>{" "}
        integer.
      </p>

      <p>
        A <strong>leaf</strong> node is a node with no children.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg"
        style={{ width: 212, height: 182 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3] <br />
        <strong>Output:</strong> 25 <br />
        <strong>Explanation:</strong> <br />
        The root-to-leaf path <code>1-&gt;2</code> represents the number{" "}
        <code>12</code>. <br />
        The root-to-leaf path <code>1-&gt;3</code> represents the number{" "}
        <code>13</code>. <br />
        Therefore, sum = 12 + 13 = <code>25</code>.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg"
        style={{ width: 292, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,9,0,5,1] <br />
        <strong>Output:</strong> 1026 <br />
        <strong>Explanation:</strong> <br />
        The root-to-leaf path <code>4-&gt;9-&gt;5</code> represents the number
        495. <br />
        The root-to-leaf path <code>4-&gt;9-&gt;1</code> represents the number
        491. <br />
        The root-to-leaf path <code>4-&gt;0</code> represents the number 40.{" "}
        <br />
        Therefore, sum = 495 + 491 + 40 = <code>1026</code>.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 1000]</code>
          .
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 9</code>
        </li>
        <li>
          The depth of the tree will not exceed <code>10</code>.
        </li>
      </ul>
    </div>
  ),
  144: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>the preorder traversal of its nodes' values</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [1,null,2,3]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1,2,3]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/08/29/screenshot-2024-08-29-202743.png"
            style={{ width: 200, height: 264 }}
          />
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            root = [1,2,3,4,5,null,8,null,null,6,7,9]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">[1,2,4,5,6,7,3,8,9]</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/08/29/tree_2.png"
            style={{ width: 350, height: 286 }}
          />
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">root = []</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[]</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 4:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">root = [1]</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1]</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 100]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Recursive solution is trivial, could you do
        it iteratively?
      </p>
    </div>
  ),
  145: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a&nbsp;binary tree, return{" "}
        <em>the postorder traversal of its nodes' values</em>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [1,null,2,3]</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[3,2,1]</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/08/29/screenshot-2024-08-29-202743.png"
            style={{ width: 200, height: 264 }}
          />
        </p>
      </div>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            root = [1,2,3,4,5,null,8,null,null,6,7,9]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">[4,6,7,5,2,9,8,3,1]</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/08/29/tree_2.png"
            style={{ width: 350, height: 286 }}
          />
        </p>
      </div>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">root = []</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[]</span>
        </p>
      </div>
      <p>
        <strong class="example">Example 4:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">root = [1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1]</span>
        </p>
      </div>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of the nodes in the tree is in the range{" "}
          <code>[0, 100]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Recursive solution is trivial, could you do it
      iteratively?
    </div>
  ),
  156: (
    <div class="markdown-body div-width">
      <p>
        Given a binary tree where all the right nodes are either leaf nodes with
        a sibling (a left node that shares the same parent node) or empty, flip
        it upside down and turn it into a tree where the original right nodes
        turned into left leaf nodes. Return the new root.
      </p>
      <p>
        <strong>Example:</strong>
      </p>
      <pre>
        <strong>Input: </strong>[1,2,3,4,5] <br />
        {`1
       / \
      2   3
     / \
    4   5`}{" "}
        <br />
        <strong>Output:</strong> return the root of the binary tree
        [4,5,2,#,#,3,1] <br />
        {`4
      / \
     5   2
        / \
       3   1`}
      </pre>
      <br />
      <p>
        <strong>Clarification:</strong>
      </p>
      <p>
        Confused what{" "}
        <code>
          [4,5,2,#,#,3,1<font face="monospace">]</font>
        </code>
        &nbsp;means? Read more below on how binary tree is serialized on OJ.
      </p>
      <p>
        The serialization of a binary tree follows a level order traversal,
        where '#' signifies a path terminator where no node exists below.
      </p>
      <p>Here's an example:</p> <br />
      <pre>
        {" "}
        {`1
      / \
     2   3
        /
       4
        \
         5`}
      </pre>{" "}
      <br />
      <p>
        The above binary tree is serialized as <code>[1,2,3,#,#,4,#,#,5]</code>.
      </p>
    </div>
  ),
  236: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a binary tree, find the lowest common ancestor (LCA) of two given
        nodes in the tree.
      </p>

      <p>
        According to the{" "}
        <a
          alt=""
          href="https://en.wikipedia.org/wiki/Lowest_common_ancestor"
          target="_blank"
          rel="noreferrer"
        >
          definition of LCA on Wikipedia
        </a>
        : “The lowest common ancestor is defined between two nodes{" "}
        <code>p</code> and <code>q</code> as the lowest node in <code>T</code>{" "}
        that has both <code>p</code> and <code>q</code> as descendants (where we
        allow <b>a node to be a descendant of itself</b>).”
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"
        style={{ width: 200, height: 190 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q =
        1 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The LCA of nodes 5 and 1 is 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"
        style={{ width: 200, height: 190 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q =
        4 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The LCA of nodes 5 and 4 is 5, since a
        node can be a descendant of itself according to the LCA definition.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1,2], p = 1, q = 2 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [2, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          All <code>Node.val</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>p != q</code>
        </li>
        <li>
          <code>p</code> and <code>q</code> will exist in the tree.
        </li>
      </ul>
    </div>
  ),
  298: (
    <div class="markdown-body div-width">
      <p>
        Given a binary tree, find the length of the longest consecutive sequence
        path.
      </p>
      <br />
      <p>
        The path refers to any sequence of nodes from some starting node to any
        node in the tree along the parent-child connections. The longest
        consecutive path need to be from parent to child (cannot be the
        reverse).
      </p>
      <br />
      <p>
        <strong>Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong>
        {`1
        \
         3
        / \
       2   4
            \
             5`}
        <br />
        <strong>Output:</strong> <code>3</code>
        <br />
        <strong>Explanation: </strong>Longest consecutive sequence path is{" "}
        <code>3-4-5</code>
        <span>, so return </span>
        <code>3</code>
        <span>.</span>
      </pre>
      <br />
      <p>
        <strong>Example 2:</strong>
      </p>
      <br />
      <pre>
        <strong>
          Input:
          <br />
        </strong>
        {`   2
        \
         3
        /
       2
      /
     1`}
        <br />
        <strong>
          Output: 2
          <br />
          Explanation:{" "}
        </strong>
        Longest consecutive sequence path is <code>2-3</code>
        <span>, not </span>
        <code>3-2-1</code>
        <span>, so return </span>
        <code>2</code>
        <span>.</span>
      </pre>
    </div>
  ),
  404: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>the sum of all left leaves.</em>
      </p>

      <p>
        A <strong>leaf</strong> is a node with no children. A{" "}
        <strong>left leaf</strong> is a leaf that is the left child of another
        node.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/08/leftsum-tree.jpg"
        style={{ width: 277, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> 24 <br />
        <strong>Explanation:</strong> There are two left leaves in the binary
        tree, with values 9 and 15 respectively.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 1000]</code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  437: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree and an integer{" "}
        <code>targetSum</code>, return{" "}
        <em>
          the number of paths where the sum of the values&nbsp;along the path
          equals
        </em>
        &nbsp;<code>targetSum</code>.
      </p>

      <p>
        The path does not need to start or end at the root or a leaf, but it
        must go downwards (i.e., traveling only from parent nodes to child
        nodes).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg"
        style={{ width: 450, height: 386 }}
      />
      <pre>
        <strong>Input:</strong> root = [10,5,-3,3,2,null,11,3,-2,null,1],
        targetSum = 8 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The paths that sum to 8 are shown.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [5,4,8,11,null,13,4,7,2,null,null,5,1],
        targetSum = 22 <br />
        <strong>Output:</strong> 3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 1000]</code>
          .
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>-1000 &lt;= targetSum &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  513: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return the leftmost value
        in the last row of the tree.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/14/tree1.jpg"
        style={{ width: 302, height: 182 }}
      />
      <pre>
        <strong>Input:</strong> root = [2,1,3] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg"
        style={{ width: 432, height: 421 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3,4,null,5,6,null,null,7] <br />
        <strong>Output:</strong> 7
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  563: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>
          the sum of every tree node's <strong>tilt</strong>.
        </em>
      </p>

      <p>
        The <strong>tilt</strong> of a tree node is the{" "}
        <strong>absolute difference</strong> between the sum of all left subtree
        node <strong>values</strong> and all right subtree node{" "}
        <strong>values</strong>. If a node does not have a left child, then the
        sum of the left subtree node <strong>values</strong> is treated as{" "}
        <code>0</code>. The rule is similar if the node does not have a right
        child.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/20/tilt1.jpg"
        style={{ width: 712, height: 182 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3]
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> <br />
        Tilt of node 2 : |0-0| = 0 (no children)
        <br />
        Tilt of node 3 : |0-0| = 0 (no children)
        <br />
        Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is
        2; right subtree is just right child, so sum is 3)
        <br /> Sum of every tilt : 0 + 0 + 1 = 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/20/tilt2.jpg"
        style={{ width: 800, height: 203 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,2,9,3,5,null,7]
        <br />
        <strong>Output:</strong> 15 <br />
        <strong>Explanation:</strong> <br />
        Tilt of node 3 : |0-0| = 0 (no children) <br />
        Tilt of node 5 : |0-0| = 0 (no children)
        <br />
        Tilt of node 7 : |0-0| = 0 (no children)
        <br />
        Tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is
        3; right subtree is just right child, so sum is 5) <br />
        Tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is
        just right child, so sum is 7)
        <br />
        Tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are
        3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which
        sums to 16)
        <br />
        Sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/20/tilt3.jpg"
        style={{ width: 800, height: 293 }}
      />
      <pre>
        <strong>Input:</strong> root = [21,7,14,1,1,2,2,3,3]
        <br />
        <strong>Output:</strong> 9
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  572: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the roots of two binary trees <code>root</code> and{" "}
        <code>subRoot</code>, return <code>true</code> if there is a subtree of{" "}
        <code>root</code> with the same structure and node values of
        <code> subRoot</code> and <code>false</code> otherwise.
      </p>

      <p>
        A subtree of a binary tree <code>tree</code> is a tree that consists of
        a node in <code>tree</code> and all of this node's descendants. The tree{" "}
        <code>tree</code> could also be considered as a subtree of itself.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg"
        style={{ width: 532, height: 400 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,4,5,1,2], subRoot = [4,1,2] <br />
        <strong>Output:</strong> true <br />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/28/subtree2-tree.jpg"
        style={{ width: 502, height: 458 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,4,5,1,2,null,null,null,null,0],
        subRoot = [4,1,2] <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the <code>root</code> tree is in the range{" "}
          <code>[1, 2000]</code>.
        </li>
        <li>
          The number of nodes in the <code>subRoot</code> tree is in the range{" "}
          <code>[1, 1000]</code>.
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= root.val &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= subRoot.val &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  652: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code>&nbsp;of a binary tree, return all{" "}
        <strong>duplicate subtrees</strong>.
      </p>

      <p>
        For each kind of duplicate subtrees, you only need to return the root
        node of any <b>one</b> of them.
      </p>

      <p>
        Two trees are <strong>duplicate</strong> if they have the{" "}
        <strong>same structure</strong> with the{" "}
        <strong>same node values</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/16/e1.jpg"
        style={{ width: 450, height: 354 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3,4,null,2,4,null,null,4] <br />
        <strong>Output:</strong> [[2,4],[4]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/16/e2.jpg"
        style={{ width: 321, height: 201 }}
      />
      <pre>
        <strong>Input:</strong> root = [2,1,1] <br />
        <strong>Output:</strong> [[1]]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/16/e33.jpg"
        style={{ width: 450, height: 303 }}
      />
      <pre>
        <strong>Input:</strong> root = [2,2,2,3,null,3,null] <br />
        <strong>Output:</strong> [[2,3],[3]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of the nodes in the tree will be in the range{" "}
          <code>[1, 5000]</code>
        </li>
        <li>
          <code>-200 &lt;= Node.val &lt;= 200</code>
        </li>
      </ul>
    </div>
  ),
  694: (
    <div class="markdown-body div-width">
      <p>
        Given a non-empty 2D array <code>grid</code> of 0's and 1's, an{" "}
        <b>island</b> is a group of
        <code>1</code>'s (representing land) connected 4-directionally
        (horizontal or vertical.) You may assume all four edges of the grid are
        surrounded by water.
      </p>
      <p>
        Count the number of <b>distinct</b> islands. An island is considered to
        be the same as another if and only if one island can be translated (and
        not rotated or reflected) to equal the other.
      </p>
      <p>
        <b>Example 1:</b>
        <br />
      </p>
      <pre>
        {`11000
    11000
    00011
    00011`}
      </pre>{" "}
      <br />
      Given the above grid map, return <code>1</code>.<p></p>
      <p>
        <b>Example 2:</b>
        <br />
      </p>
      <pre>{`11011
    10000
    00001
    11011`}</pre>{" "}
      <br />
      Given the above grid map, return <code>3</code>.<br />
      <br />
      Notice that:
      <pre>11 1</pre>
      and
      <pre>
        {` 1
    11`}
      </pre>
      are considered different island shapes, because we do not consider
      reflection / rotation.
      <p></p>
      <p>
        <b>Note:</b>
        The length of each dimension in the given <code>grid</code> does not
        exceed 50.
      </p>
    </div>
  ),
  711: (
    <div class="markdown-body div-width">
      <p>
        Given a non-empty 2D array <code>grid</code> of 0's and 1's, an{" "}
        <b>island</b> is a group of
        <code>1</code>'s (representing land) connected 4-directionally
        (horizontal or vertical.) You may assume all four edges of the grid are
        surrounded by water.
      </p>
      <p>
        Count the number of <b>distinct</b> islands. An island is considered to
        be the same as another if they have the same shape, or have the same
        shape after <b>rotation</b> (90, 180, or 270 degrees only) or{" "}
        <b>reflection</b> (left/right direction or up/down direction).
      </p>
      <p>
        <b>Example 1:</b>
        <br />
      </p>
      <pre>
        {`11000
    10000
    00001
    00011`}
      </pre>
      Given the above grid map, return <code>1</code>.
      <br />
      <br />
      Notice that:
      <pre>
        {`11
    1`}
      </pre>
      and
      <pre>
        {" "}
        {`1
    11`}
      </pre>
      are considered <b>same</b> island shapes. Because if we make a 180 degrees
      clockwise rotation on the first island, then two islands will have the
      same shapes.
      <p></p>
      <p>
        <b>Example 2:</b>
        <br />
      </p>
      <pre>{`11100
    10001
    01001
    01110`}</pre>
      Given the above grid map, return <code>2</code>.<br />
      <br />
      Here are the two distinct islands:
      <pre>
        {`111
    1`}
      </pre>
      and
      <pre>
        {`1
    1`}
      </pre>
      <br />
      Notice that:
      <pre>
        {`111
    1`}
      </pre>
      and
      <pre>
        {`1
    111`}
      </pre>
      are considered <b>same</b> island shapes. Because if we flip the first
      array in the up/down direction, then they have the same shapes.
      <p></p>
      <p>
        <b>Note:</b>
        The length of each dimension in the given <code>grid</code> does not
        exceed 50.
      </p>
    </div>
  ),
  865: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, the depth of each node is{" "}
        <strong>the shortest distance to the root</strong>.
      </p>

      <p>
        Return <em>the smallest subtree</em> such that it contains{" "}
        <strong>all the deepest nodes</strong> in the original tree.
      </p>

      <p>
        A node is called <strong>the deepest</strong> if it has the largest
        depth possible among any node in the entire tree.
      </p>

      <p>
        The <strong>subtree</strong> of a node is a tree consisting of that
        node, plus the set of all descendants of that node.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png"
        style={{ width: 600, height: 510 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4] <br />
        <strong>Output:</strong> [2,7,4] <br />
        <strong>Explanation:</strong> We return the node with value 2, colored
        in yellow in the diagram. <br />
        The nodes coloured in blue are the deepest nodes of the tree. <br />
        Notice that nodes 5, 3 and 2 contain the deepest nodes in the tree but
        node 2 is the smallest subtree among them, so we return it.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> [1] <br />
        <strong>Explanation:</strong> The root is the deepest node in the tree.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [0,1,3,null,2] <br />
        <strong>Output:</strong> [2] <br />
        <strong>Explanation:</strong> The deepest node in the tree is 2, the
        valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of
        node 2 is the smallest.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree will be in the range{" "}
          <code>[1, 500]</code>.
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 500</code>
        </li>
        <li>
          The values of the nodes in the tree are <strong>unique</strong>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Note:</strong> This question is the same as 1123:{" "}
        <a
          href="https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/"
          target="_blank"
        >
          https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/
        </a>
      </p>
    </div>
  ),
  1022: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>root</code> of a binary tree where each node has
        a value <code>0</code> or <code>1</code>. Each root-to-leaf path
        represents a binary number starting with the most significant bit.
      </p>

      <ul>
        <li>
          For example, if the path is{" "}
          <code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>, then this could
          represent <code>01101</code> in binary, which is <code>13</code>.
        </li>
      </ul>

      <p>
        For all leaves in the tree, consider the numbers represented by the path
        from the root to that leaf. Return <em>the sum of these numbers</em>.
      </p>

      <p>
        The test cases are generated so that the answer fits in a{" "}
        <strong>32-bits</strong> integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/04/04/sum-of-root-to-leaf-binary-numbers.png"
        style={{ width: 400, height: 263 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,0,1,0,1,0,1] <br />
        <strong>Output:</strong> 22 <br />
        <strong>Explanation: </strong>(100) + (101) + (110) + (111) = 4 + 5 + 6
        + 7 = 22
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [0] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 1000]</code>
          .
        </li>
        <li>
          <code>Node.val</code> is <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  1161: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, the level of its root is{" "}
        <code>1</code>, the level of its children is <code>2</code>, and so on.
      </p>

      <p>
        Return the <strong>smallest</strong> level <code>x</code> such that the
        sum of all the values of nodes at level <code>x</code> is{" "}
        <strong>maximal</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/05/03/capture.JPG"
        style={{ width: 200, height: 175 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,7,0,7,-8,null,null] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation: </strong> <br />
        Level 1 sum = 1. <br />
        Level 2 sum = 7 + 0 = 7. <br />
        Level 3 sum = 7 + -8 = -1. <br />
        So we return the level with the maximum sum which is level 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root =
        [989,null,10250,98693,-89388,null,null,null,-32127] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1325: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a binary tree <code>root</code> and an integer <code>target</code>
        , delete all the <strong>leaf nodes</strong> with value{" "}
        <code>target</code>.
      </p>

      <p>
        Note that once you delete a leaf node with value <code>target</code>
        <strong>, </strong>if its parent node becomes a leaf node and has the
        value <code>target</code>, it should also be deleted (you need to
        continue doing that until you cannot).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/01/09/sample_1_1684.png"
            style={{ width: 500, height: 112 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1,2,3,2,null,2,4], target = 2 <br />
        <strong>Output:</strong> [1,null,3,null,4] <br />
        <strong>Explanation:</strong> Leaf nodes in green with value (target =
        2) are removed (Picture in left). <br />
        After removing, new nodes become leaf nodes with value (target = 2)
        (Picture in center).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/01/09/sample_2_1684.png"
            style={{ width: 400, height: 154 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1,3,3,3,2], target = 3 <br />
        <strong>Output:</strong> [1,3,null,null,2]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/01/15/sample_3_1684.png"
            style={{ width: 500, height: 166 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1,2,null,2,null,2], target = 2 <br />
        <strong>Output:</strong> [1] <br />
        <strong>Explanation:</strong> Leaf nodes in green with value (target =
        2) are removed at each step.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 3000]</code>
          .
        </li>
        <li>
          <code>1 &lt;= Node.val, target &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1102: (
    <div class="markdown-body div-width">
      <p>
        Given a&nbsp;matrix of integers <code>A</code>&nbsp;with&nbsp;
        <font face="monospace">R</font>&nbsp;rows and{" "}
        <font face="monospace">C</font>&nbsp;columns, find&nbsp;the{" "}
        <strong>maximum</strong>&nbsp;score&nbsp;of a path starting at&nbsp;
        <code>[0,0]</code>&nbsp;and ending at <code>[R-1,C-1]</code>.
      </p>

      <p>
        The <em>score</em> of a path is the <strong>minimum</strong> value in
        that path.&nbsp; For example, the value of the path 8 →&nbsp; 4 →&nbsp;
        5 →&nbsp; 9 is 4.
      </p>

      <p>
        A <em>path</em> moves some number of times from one visited cell to any
        neighbouring unvisited cell in one of the 4 cardinal directions (north,
        east, west, south).
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/04/23/1313_ex1.JPG"
            style={{ width: 70, height: 59 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-1-1">[[5,4,5],[1,2,6],[7,4,6]]</span> <br />
        <strong>Output: </strong>
        <span id="example-output-1">4</span> <br />
        <strong>Explanation: </strong> <br />
        The path with the maximum score is highlighted in yellow.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/04/23/1313_ex2.JPG"
            style={{ width: 134, height: 39 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span>[[2,2,1,2,2,2],[1,2,2,2,1,2]]</span> <br />
        <strong>Output: 2</strong>
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/04/23/1313_ex3.JPG"
          />
        </strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span>
          [[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8],[4,1,2,0,0],[4,6,5,4,3]]
        </span>
        <br />
        <strong>Output: 3</strong>
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= R, C&nbsp;&lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= A[i][j] &lt;= 10^9</code>
        </li>
      </ul>
    </div>
  ),
  1372: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>root</code> of a binary tree.
      </p>

      <p>A ZigZag path for a binary tree is defined as follow:</p>

      <ul>
        <li>
          Choose <strong>any </strong>node in the binary tree and a direction
          (right or left).
        </li>
        <li>
          If the current direction is right, move to the right child of the
          current node; otherwise, move to the left child.
        </li>
        <li>Change the direction from right to left or from left to right.</li>
        <li>
          Repeat the second and third steps until you can't move in the tree.
        </li>
      </ul>

      <p>
        Zigzag length is defined as the number of nodes visited - 1. (A single
        node has a length of 0).
      </p>

      <p>
        Return{" "}
        <em>
          the longest <strong>ZigZag</strong> path contained in that tree
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/01/22/sample_1_1702.png"
        style={{ width: 221, height: 383 }}
      />
      <pre>
        <strong>Input:</strong> root =
        [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Longest ZigZag path in blue nodes (right
        -&gt; left -&gt; right).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/01/22/sample_2_1702.png"
        style={{ width: 157, height: 329 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,1,1,null,1,null,null,1,1,null,1]{" "}
        <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> Longest ZigZag path in blue nodes (left
        -&gt; right -&gt; left -&gt; right).
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 5 * 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>1 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1469: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            In a binary tree, a <strong>lonely</strong> node is a node that is
            the only child of its parent node. The root of the tree is not
            lonely because it does not have a parent node.
          </p>

          <p>
            Given the <code>root</code> of a binary tree, return{" "}
            <em>an array containing the values of all lonely nodes</em> in the
            tree. Return the list <strong>in any order</strong>.
          </p>

          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/06/03/e1.png"
            style={{ width: 203, height: 202 }}
          />
          <pre>
            <strong>Input:</strong> root = [1,2,3,null,4] <br />
            <strong>Output:</strong> [4] <br />
            <strong>Explanation:</strong> Light blue node is the only lonely
            node. <br />
            Node 1 is the root and is not lonely. <br />
            Nodes 2 and 3 have the same parent and are not lonely.
          </pre>

          <p>
            <strong>Example 2:</strong>
          </p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/06/03/e2.png"
            style={{ width: 442, height: 282 }}
          />
          <pre>
            <strong>Input:</strong> root =
            [7,1,4,6,null,5,3,null,null,null,null,null,2] <br />
            <strong>Output:</strong> [6,2] <br />
            <strong>Explanation:</strong> Light blue nodes are lonely nodes.{" "}
            <br />
            Please remember that order doesn't matter, [2,6] is also an
            acceptable answer.
          </pre>

          <p>
            <strong>Example 3:</strong>
          </p>
          <strong>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2020/06/03/tree.png"
              style={{ width: 363, height: 202 }}
            />{" "}
          </strong>

          <pre>
            <strong>Input:</strong> root =
            [11,99,88,77,null,null,66,55,null,null,44,33,null,null,22] <br />
            <strong>Output:</strong> [77,55,33,66,44,22] <br />
            <strong>Explanation:</strong> Nodes 99 and 88 share the same parent.
            Node 11 is the root. <br />
            All other nodes are lonely.
          </pre>

          <p>
            <strong>Example 4:</strong>
          </p>

          <pre>
            <strong>Input:</strong> root = [197] <br />
            <strong>Output:</strong> []
          </pre>

          <p>
            <strong>Example 5:</strong>
          </p>

          <pre>
            <strong>Input:</strong> root = [31,null,78,null,28] <br />
            <strong>Output:</strong> [78,28]
          </pre>

          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              The number of nodes in the&nbsp;<code>tree</code>&nbsp;is in the
              range&nbsp;<code>[1, 1000].</code>
            </li>
            <li>
              Each node's value is between&nbsp;<code>[1, 10^6]</code>.
            </li>
          </ul>
        </div>
      </div>
    </div>
  ),
  1559: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a 2D array of characters <code>grid</code> of size{" "}
        <code>m x n</code>, you need to find if there exists any cycle
        consisting of the <strong>same value</strong> in <code>grid</code>.
      </p>

      <p>
        A cycle is a path of <strong>length 4 or more</strong> in the grid that
        starts and ends at the same cell. From a given cell, you can move to one
        of the cells adjacent to it - in one of the four directions (up, down,
        left, or right), if it has the <strong>same value</strong> of the
        current cell.
      </p>

      <p>
        Also, you cannot move to the cell that you visited in your last move.
        For example, the cycle <code>(1, 1) -&gt; (1, 2) -&gt; (1, 1)</code> is
        invalid because from <code>(1, 2)</code> we visited <code>(1, 1)</code>{" "}
        which was the last visited cell.
      </p>

      <p>
        Return <code>true</code> if any cycle of the same value exists in{" "}
        <code>grid</code>, otherwise, return <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/07/15/1.png"
            style={{ width: 231, height: 152 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> grid =
        [["a","a","a","a"],["a","b","b","a"],["a","b","b","a"],["a","a","a","a"]]{" "}
        <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation: </strong>There are two valid cycles shown in
        different colors in the image below:
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/07/15/11.png"
          style={{ width: 225, height: 163 }}
        />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/07/15/22.png"
            style={{ width: 236, height: 154 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> grid =
        [["c","c","c","a"],["c","d","c","c"],["c","c","e","c"],["f","c","c","c"]]{" "}
        <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation: </strong>There is only one valid cycle highlighted
        in the image below:
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/07/15/2.png"
          style={{ width: 229, height: 157 }}
        />
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/07/15/3.png"
            style={{ width: 183, height: 120 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> grid =
        [["a","b","b"],["b","z","b"],["b","b","a"]] <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 500</code>
        </li>
        <li>
          <code>grid</code> consists only of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  2415: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a <strong>perfect</strong> binary tree,
        reverse the node values at each <strong>odd</strong> level of the tree.
      </p>

      <ul>
        <li>
          For example, suppose the node values at level 3 are{" "}
          <code>[2,1,3,4,7,11,29,18]</code>, then it should become{" "}
          <code>[18,29,11,7,4,3,1,2]</code>.
        </li>
      </ul>

      <p>
        Return <em>the root of the reversed tree</em>.
      </p>

      <p>
        A binary tree is <strong>perfect</strong> if all parent nodes have two
        children and all leaves are on the same level.
      </p>

      <p>
        The <strong>level</strong> of a node is the number of edges along the
        path between it and the root node.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/07/28/first_case1.png"
        style={{ width: 626, height: 191 }}
      />
      <pre>
        <strong>Input:</strong> root = [2,3,5,8,13,21,34]
        <br />
        <strong>Output:</strong> [2,5,3,8,13,21,34]
        <br />
        <strong>Explanation:</strong> <br />
        The tree has only one odd level.
        <br />
        The nodes at level 1 are 3, 5 respectively, which are reversed and
        become 5, 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/07/28/second_case3.png"
        style={{ width: 591, height: 111 }}
      />
      <pre>
        <strong>Input:</strong> root = [7,13,11] <br />
        <strong>Output:</strong> [7,11,13] <br />
        <strong>Explanation:</strong> <br />
        The nodes at level 1 are 13, 11, which are reversed and become 11, 13.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [0,1,2,0,0,0,0,1,1,1,1,2,2,2,2] <br />
        <strong>Output:</strong> [0,2,1,0,0,0,0,2,2,2,2,1,1,1,1] <br />
        <strong>Explanation:</strong> <br />
        The odd levels have non-zero values.
        <br />
        The nodes at level 1 were 1, 2, and are 2, 1 after the reversal.
        <br />
        The nodes at level 3 were 1, 1, 1, 1, 2, 2, 2, 2, and are 2, 2, 2, 2, 1,
        1, 1, 1 after the reversal.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 2<sup>14</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            0 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>root</code> is a <strong>perfect</strong> binary tree.
        </li>
      </ul>
    </div>
  ),
  2445: (
    <article role="main" class="blog-post">
      <p>
        There is an <strong>undirected</strong> connected tree with{" "}
        <code>n</code> nodes labeled from <code>1</code> to <code>n</code> and{" "}
        <code>n - 1</code> edges. You are given the integer <code>n</code>. The
        parent node of a node with a label <code>v</code> is the node with the
        label <code>floor (v / 2)</code>. The root of the tree is the node with
        the label <code>1</code>.
      </p>

      <ul>
        <li>
          For example, if <code>n = 7</code>, then the node with the label{" "}
          <code>3</code> has the node with the label{" "}
          <code>floor(3 / 2) = 1</code> as its parent, and the node with the
          label <code>7</code> has the node with the label{" "}
          <code>floor(7 / 2) = 3</code> as its parent.
        </li>
      </ul>

      <p>
        You are also given an integer array <code>queries</code>. Initially,
        every node has a value <code>0</code> on it. For each query{" "}
        <code>queries[i]</code>, you should flip all values in the subtree of
        the node with the label <code>queries[i]</code>.
      </p>

      <p>
        Return <em>the total number of nodes with the value </em>
        <code>1</code>
        <em>
          {" "}
          <strong>after processing all the queries</strong>
        </em>
        .
      </p>

      <p>
        <strong>Note</strong> that:
      </p>

      <ul>
        <li>
          Flipping the value of a node means that the node with the value{" "}
          <code>0</code> becomes <code>1</code> and vice versa.
        </li>
        <li>
          <code>floor(x)</code> is equivalent to rounding <code>x</code> down to
          the nearest integer.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2400-2499/2445.Number%20of%20Nodes%20With%20Value%20One/images/ex1.jpg"
          style={{ width: 600, height: 297 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> n = 5 , queries = [1,2,5] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The diagram above shows the tree structure
        and its status after performing the queries. The blue node represents
        the value 0, and the red node represents the value 1. <br />
        After processing the queries, there are three red nodes (nodes with
        value 1): 1, 3, and 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2400-2499/2445.Number%20of%20Nodes%20With%20Value%20One/images/ex2.jpg"
          style={{ width: 650, height: 88 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> n = 3, queries = [2,3,3] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The diagram above shows the tree structure
        and its status after performing the queries. The blue node represents
        the value 0, and the red node represents the value 1. <br />
        After processing the queries, there are one red node (node with value
        1): 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= queries.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= queries[i] &lt;= n</code>
        </li>
      </ul>
    </article>
  ),
  2458: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>root</code> of a <strong>binary tree</strong>{" "}
        with <code>n</code> nodes. Each node is assigned a unique value from{" "}
        <code>1</code> to <code>n</code>. You are also given an array{" "}
        <code>queries</code> of size <code>m</code>.
      </p>

      <p>
        You have to perform <code>m</code> <strong>independent</strong> queries
        on the tree where in the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        query you do the following:
      </p>

      <ul>
        <li>
          <strong>Remove</strong> the subtree rooted at the node with the value{" "}
          <code>queries[i]</code> from the tree. It is{" "}
          <strong>guaranteed</strong> that <code>queries[i]</code> will{" "}
          <strong>not</strong> be equal to the value of the root.
        </li>
      </ul>

      <p>
        Return <em>an array </em>
        <code>answer</code>
        <em> of size </em>
        <code>m</code>
        <em> where </em>
        <code>answer[i]</code>
        <em> is the height of the tree after performing the </em>
        <code>
          i<sup>th</sup>
        </code>
        <em> query</em>.
      </p>

      <p>
        <strong>Note</strong>:
      </p>

      <ul>
        <li>
          The queries are independent, so the tree returns to its{" "}
          <strong>initial</strong> state after each query.
        </li>
        <li>
          The height of a tree is the{" "}
          <strong>number of edges in the longest simple path</strong> from the
          root to some node in the tree.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/09/07/binaryytreeedrawio-1.png"
        style={{ width: 495, height: 281 }}
      />
      <pre>
        <strong>Input:</strong> root =
        [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4] <br />
        <strong>Output:</strong> [2] <br />
        <strong>Explanation:</strong> The diagram above shows the tree after
        removing the subtree rooted at node with value 4. <br />
        The height of the tree is 2 (The path 1 -&gt; 3 -&gt; 2).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/09/07/binaryytreeedrawio-2.png"
        style={{ width: 301, height: 284 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]{" "}
        <br />
        <strong>Output:</strong> [3,2,3,2] <br />
        <strong>Explanation:</strong> We have the following queries: <br />
        - Removing the subtree rooted at node with value 3. The height of the
        tree becomes 3 (The path 5 -&gt; 8 -&gt; 2 -&gt; 4). <br />
        - Removing the subtree rooted at node with value 2. The height of the
        tree becomes 2 (The path 5 -&gt; 8 -&gt; 1). <br />
        - Removing the subtree rooted at node with value 4. The height of the
        tree becomes 3 (The path 5 -&gt; 8 -&gt; 2 -&gt; 6). <br />- Removing
        the subtree rooted at node with value 8. The height of the tree becomes
        2 (The path 5 -&gt; 9 -&gt; 3).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is <code>n</code>.
        </li>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= Node.val &lt;= n</code>
        </li>
        <li>
          All the values in the tree are <strong>unique</strong>.
        </li>
        <li>
          <code>m == queries.length</code>
        </li>
        <li>
          <code>
            1 &lt;= m &lt;= min(n, 10<sup>4</sup>)
          </code>
        </li>
        <li>
          <code>1 &lt;= queries[i] &lt;= n</code>
        </li>
        <li>
          <code>queries[i] != root.val</code>
        </li>
      </ul>
    </div>
  ),
  2467: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an undirected tree with <code>n</code> nodes labeled from{" "}
        <code>0</code> to <code>n - 1</code>, rooted at node <code>0</code>. You
        are given a 2D integer array <code>edges</code> of length{" "}
        <code>n - 1</code> where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        in the tree.
      </p>

      <p>
        At every node <code>i</code>, there is a gate. You are also given an
        array of even integers <code>amount</code>, where <code>amount[i]</code>{" "}
        represents:
      </p>

      <ul>
        <li>
          the price needed to open the gate at node <code>i</code>, if{" "}
          <code>amount[i]</code> is negative, or,
        </li>
        <li>
          the cash reward obtained on opening the gate at node <code>i</code>,
          otherwise.
        </li>
      </ul>

      <p>The game goes on as follows:</p>

      <ul>
        <li>
          Initially, Alice is at node <code>0</code> and Bob is at node{" "}
          <code>bob</code>.
        </li>
        <li>
          At every second, Alice and Bob <b>each</b> move to an adjacent node.
          Alice moves towards some <strong>leaf node</strong>, while Bob moves
          towards node <code>0</code>.
        </li>
        <li>
          For <strong>every</strong> node along their path, Alice and Bob either
          spend money to open the gate at that node, or accept the reward. Note
          that:
          <ul>
            <li>
              If the gate is <strong>already open</strong>, no price will be
              required, nor will there be any cash reward.
            </li>
            <li>
              If Alice and Bob reach the node <strong>simultaneously</strong>,
              they share the price/reward for opening the gate there. In other
              words, if the price to open the gate is <code>c</code>, then both
              Alice and Bob pay&nbsp;<code>c / 2</code> each. Similarly, if the
              reward at the gate is <code>c</code>, both of them receive{" "}
              <code>c / 2</code> each.
            </li>
          </ul>
        </li>
        <li>
          If Alice reaches a leaf node, she stops moving. Similarly, if Bob
          reaches node <code>0</code>, he stops moving. Note that these events
          are <strong>independent</strong> of each other.
        </li>
      </ul>

      <p>
        Return
        <em>
          {" "}
          the <strong>maximum</strong> net income Alice can have if she travels
          towards the optimal leaf node.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/29/eg1.png"
        style={{ width: 275, height: 275 }}
      />
      <pre>
        <strong>Input:</strong> edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3,
        amount = [-2,4,2,-4,6]
        <br />
        <strong>Output:</strong> 6<br />
        <strong>Explanation:</strong> <br />
        The above diagram represents the given tree. The game goes as follows:
        <br />
        - Alice is initially on node 0, Bob on node 3. They open the gates of
        their respective nodes.
        <br />
        Alice's net income is now -2.
        <br />
        - Both Alice and Bob move to node 1.
        <br />
        &nbsp; Since they reach here simultaneously, they open the gate together
        and share the reward.
        <br />
        &nbsp; Alice's net income becomes -2 + (4 / 2) = 0.
        <br />
        - Alice moves on to node 3. Since Bob already opened its gate, Alice's
        income remains unchanged.
        <br />
        &nbsp; Bob moves on to node 0, and stops moving.
        <br />
        - Alice moves on to node 4 and opens the gate there. Her net income
        becomes 0 + 6 = 6.
        <br />
        Now, neither Alice nor Bob can make any further moves, and the game
        ends.
        <br />
        It is not possible for Alice to get a higher net income.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/29/eg2.png"
        style={{ width: 250, height: 78 }}
      />
      <pre>
        <strong>Input:</strong> edges = [[0,1]], bob = 1, amount = [-7280,2350]{" "}
        <br />
        <strong>Output:</strong> -7280
        <br />
        <strong>Explanation:</strong> <br />
        Alice follows the path 0-&gt;1 whereas Bob follows the path 1-&gt;0.{" "}
        <br />
        Thus, Alice opens the gate at node 0 only. Hence, her net income is
        -7280.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          <code>edges</code> represents a valid tree.
        </li>
        <li>
          <code>1 &lt;= bob &lt; n</code>
        </li>
        <li>
          <code>amount.length == n</code>
        </li>
        <li>
          <code>amount[i]</code> is an <strong>even</strong> integer in the
          range{" "}
          <code>
            [-10<sup>4</sup>, 10<sup>4</sup>]
          </code>
          .
        </li>
      </ul>
    </div>
  ),
  2791: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code>. We say that two integers{" "}
        <code>x</code> and <code>y</code> form a prime number pair if:
      </p>

      <ul>
        <li>
          <code>1 &lt;= x &lt;= y &lt;= n</code>
        </li>
        <li>
          <code>x + y == n</code>
        </li>
        <li>
          <code>x</code> and <code>y</code> are prime numbers
        </li>
      </ul>

      <p>
        Return <em>the 2D sorted list of prime number pairs</em>{" "}
        <code>
          [x<sub>i</sub>, y<sub>i</sub>]
        </code>
        . The list should be sorted in <strong>increasing</strong> order of{" "}
        <code>
          x<sub>i</sub>
        </code>
        . If there are no prime number pairs at all, return{" "}
        <em>an empty array</em>.
      </p>

      <p>
        <strong>Note:</strong> A prime number is a natural number greater than{" "}
        <code>1</code> with only two factors, itself and <code>1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 10 <br />
        <strong>Output:</strong> [[3,7],[5,5]] <br />
        <strong>Explanation:</strong> In this example, there are two prime pairs
        that satisfy the criteria. <br />
        These pairs are [3,7] and [5,5], and we return them in the sorted order
        as described in the problem statement.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> We can show that there is no prime number
        pair that gives a sum of 2, so we return an empty array.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2867: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an undirected tree with <code>n</code> nodes labeled from{" "}
        <code>1</code> to <code>n</code>. You are given the integer{" "}
        <code>n</code> and a 2D integer array <code>edges</code> of length{" "}
        <code>n - 1</code>, where{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        in the tree.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>number of valid paths</strong> in the tree
        </em>
        .
      </p>

      <p>
        A path <code>(a, b)</code> is <strong>valid</strong> if there exists{" "}
        <strong>exactly one</strong> prime number among the node labels in the
        path from <code>a</code> to <code>b</code>.
      </p>

      <p>
        <strong>Note</strong> that:
      </p>

      <ul>
        <li>
          The path <code>(a, b)</code> is a sequence of{" "}
          <strong>distinct</strong> nodes starting with node <code>a</code> and
          ending with node <code>b</code> such that every two adjacent nodes in
          the sequence share an edge in the tree.
        </li>
        <li>
          Path <code>(a, b)</code> and path <code>(b, a)</code> are considered
          the <strong>same</strong> and counted only <strong>once</strong>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/08/27/example1.png"
        style={{ width: 440, height: 357 }}
      />
      <pre>
        <strong>Input:</strong> n = 5, edges = [[1,2],[1,3],[2,4],[2,5]]
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> The pairs with exactly one prime number on
        the path between them are: <br />
        - (1, 2) since the path from 1 to 2 contains prime number 2. <br />
        - (1, 3) since the path from 1 to 3 contains prime number 3.
        <br />
        - (1, 4) since the path from 1 to 4 contains prime number 2.
        <br />
        - (2, 4) since the path from 2 to 4 contains prime number 2.
        <br />
        It can be shown that there are only 4 valid paths.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/08/27/example2.png"
        style={{ width: 488, height: 384 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]]
        <br />
        <strong>Output:</strong> 6<br />
        <strong>Explanation:</strong> The pairs with exactly one prime number on
        the path between them are: <br />
        - (1, 2) since the path from 1 to 2 contains prime number 2. <br />
        - (1, 3) since the path from 1 to 3 contains prime number 3. <br />
        - (1, 4) since the path from 1 to 4 contains prime number 2.
        <br />
        - (1, 6) since the path from 1 to 6 contains prime number 3.
        <br />
        - (2, 4) since the path from 2 to 4 contains prime number 2.
        <br />
        - (3, 6) since the path from 3 to 6 contains prime number 3.
        <br />
        It can be shown that there are only 6 valid paths.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          The input is generated such that <code>edges</code> represent a valid
          tree.
        </li>
      </ul>
    </div>
  ),
  3004: (
    <article role="main" class="blog-post">
      <p>
        You are given a 2D integer array <code>edges</code> representing a tree
        with <code>n</code> nodes, numbered from <code>0</code> to{" "}
        <code>n - 1</code>, rooted at node <code>0</code>, where{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        means there is an edge between the nodes{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          u<sub>i</sub>
        </code>
        .
      </p>

      <p>
        You are also given a <strong>0-indexed</strong> integer array{" "}
        <code>colors</code> of size <code>n</code>, where <code>colors[i]</code>{" "}
        is the color assigned to node <code>i</code>.
      </p>

      <p>
        We want to find a node <code>v</code> such that every node in the{" "}
        <span data-keyword="subtree-of-node">subtree</span> of <code>v</code>{" "}
        has the <strong>same</strong> color.
      </p>

      <p>
        Return{" "}
        <em>
          the size of such subtree with the <strong>maximum</strong> number of
          nodes possible.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>
          <img
            alt=""
            src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/3000-3099/3004.Maximum%20Subtree%20of%20the%20Same%20Color/images/20231216-134026.png"
            style={{
              padding: 10,
              background: "rgb(255, 255, 255)",
              borderRadius: "0.5rem",
              width: 221,
              height: 221,
            }}
          />
        </strong>
      </p>

      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> edges = [[0,1],[0,2],[0,3]], colors = [1,1,2,3]{" "}
        <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> Each color is represented as: 1 -&gt; Red,
        2 -&gt; Green, 3 -&gt; Blue. We can see that the subtree rooted at node
        0 has children with different colors. Any other subtree is of the same
        color and has a size of 1. Hence, we return 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> edges = [[0,1],[0,2],[0,3]], colors = [1,1,1,1]{" "}
        <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The whole tree has the same color, and the
        subtree rooted at node 0 has the most number of nodes which is 4. Hence,
        we return 4.
      </pre>

      <p>
        <strong>
          <img
            alt=""
            src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/3000-3099/3004.Maximum%20Subtree%20of%20the%20Same%20Color/images/20231216-134017.png"
            style={{
              padding: 10,
              background: "rgb(255, 255, 255)",
              borderRadius: "0.5rem",
              width: 221,
              height: 221,
            }}
          />
        </strong>
      </p>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> edges = [[0,1],[0,2],[2,3],[2,4]], colors =
        [1,2,3,3,3] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Each color is represented as: 1 -&gt; Red,
        2 -&gt; Green, 3 -&gt; Blue. We can see that the subtree rooted at node
        0 has children with different colors. Any other subtree is of the same
        color, but the subtree rooted at node 2 has a size of 3 which is the
        maximum. Hence, we return 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == edges.length + 1</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            edges[i] == [u<sub>i</sub>, v<sub>i</sub>]
          </code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>colors.length == n</code>
        </li>
        <li>
          <code>
            1 &lt;= colors[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          The input is generated such that the graph represented by{" "}
          <code>edges</code> is a tree.
        </li>
      </ul>
    </article>
  ),
  100: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the roots of two binary trees <code>p</code> and <code>q</code>,
        write a function to check if they are the same or not.
      </p>

      <p>
        Two binary trees are considered the same if they are structurally
        identical, and the nodes have the same value.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg"
        style={{ width: 622, height: 182 }}
      />
      <pre>
        <strong>Input:</strong> p = [1,2,3], q = [1,2,3] <br />
        <strong>Output:</strong> true <br />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg"
        style={{ width: 382, height: 182 }}
      />
      <pre>
        <strong>Input:</strong> p = [1,2], q = [1,null,2] <br />
        <strong>Output:</strong> false
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg"
        style={{ width: 622, height: 182 }}
      />
      <pre>
        <strong>Input:</strong> p = [1,2,1], q = [1,1,2] <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in both trees is in the range{" "}
          <code>[0, 100]</code>.
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  101: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree,{" "}
        <em>check whether it is a mirror of itself</em> (i.e., symmetric around
        its center).
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg"
        style={{ width: 354, height: 291 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,2,3,4,4,3] <br />
        <strong>Output:</strong> true
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg"
        style={{ width: 308, height: 258 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,2,null,3,null,3] <br />
        <strong>Output:</strong> false
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 1000]</code>
          .
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you solve it both recursively and
      iteratively?
    </div>
  ),
  105: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integer arrays <code>preorder</code> and <code>inorder</code>{" "}
        where <code>preorder</code> is the preorder traversal of a binary tree
        and <code>inorder</code> is the inorder traversal of the same tree,
        construct and return <em>the binary tree</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg"
        style={{ width: 277, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> preorder = [3,9,20,15,7], inorder =
        [9,3,15,20,7] <br />
        <strong>Output:</strong> [3,9,20,null,null,15,7]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> preorder = [-1], inorder = [-1] <br />
        <strong>Output:</strong> [-1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= preorder.length &lt;= 3000</code>
        </li>
        <li>
          <code>inorder.length == preorder.length</code>
        </li>
        <li>
          <code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code>
        </li>
        <li>
          <code>preorder</code> and <code>inorder</code> consist of{" "}
          <strong>unique</strong> values.
        </li>
        <li>
          Each value of <code>inorder</code> also appears in{" "}
          <code>preorder</code>.
        </li>
        <li>
          <code>preorder</code> is <strong>guaranteed</strong> to be the
          preorder traversal of the tree.
        </li>
        <li>
          <code>inorder</code> is <strong>guaranteed</strong> to be the inorder
          traversal of the tree.
        </li>
      </ul>
    </div>
  ),
  106: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integer arrays <code>inorder</code> and <code>postorder</code>{" "}
        where <code>inorder</code> is the inorder traversal of a binary tree and{" "}
        <code>postorder</code> is the postorder traversal of the same tree,
        construct and return <em>the binary tree</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg"
        style={{ width: 277, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> inorder = [9,3,15,20,7], postorder =
        [9,15,7,20,3] <br />
        <strong>Output:</strong> [3,9,20,null,null,15,7]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> inorder = [-1], postorder = [-1] <br />
        <strong>Output:</strong> [-1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= inorder.length &lt;= 3000</code>
        </li>
        <li>
          <code>postorder.length == inorder.length</code>
        </li>
        <li>
          <code>-3000 &lt;= inorder[i], postorder[i] &lt;= 3000</code>
        </li>
        <li>
          <code>inorder</code> and <code>postorder</code> consist of{" "}
          <strong>unique</strong> values.
        </li>
        <li>
          Each value of <code>postorder</code> also appears in{" "}
          <code>inorder</code>.
        </li>
        <li>
          <code>inorder</code> is <strong>guaranteed</strong> to be the inorder
          traversal of the tree.
        </li>
        <li>
          <code>postorder</code> is <strong>guaranteed</strong> to be the
          postorder traversal of the tree.
        </li>
      </ul>
    </div>
  ),
  110: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a binary tree, determine if it is{" "}
        <span
          data-keyword="height-balanced"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r9f:"
              >
                <div>
                  <strong>height-balanced</strong>
                </div>
              </div>
            </div>
          </div>
        </span>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg"
        style={{ width: 342, height: 221 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg"
        style={{ width: 452, height: 301 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,2,3,3,null,null,4,4] <br />
        <strong>Output:</strong> false
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 5000]</code>
          .
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  222: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a <strong>complete</strong> binary tree,
        return the number of the nodes in the tree.
      </p>

      <p>
        According to{" "}
        <strong>
          <a
            href="http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees"
            target="_blank"
            rel="noreferrer"
          >
            Wikipedia
          </a>
        </strong>
        , every level, except possibly the last, is completely filled in a
        complete binary tree, and all nodes in the last level are as far left as
        possible. It can have between <code>1</code> and{" "}
        <code>
          2<sup>h</sup>
        </code>{" "}
        nodes inclusive at the last level <code>h</code>.
      </p>

      <p>
        Design an algorithm that runs in less than&nbsp;
        <code data-stringify-type="code">O(n)</code>&nbsp;time complexity.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/14/complete.jpg"
        style={{ width: 372, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3,4,5,6] <br />
        <strong>Output:</strong> 6
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [0, 5 * 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            0 &lt;= Node.val &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          The tree is guaranteed to be <strong>complete</strong>.
        </li>
      </ul>
    </div>
  ),
  314: (
    <div class="markdown-body div-width">
      <p>
        Given a binary tree, return the <i>vertical order</i> traversal of its
        nodes' values. (ie, from top to bottom, column by column).
      </p>

      <p>
        If two nodes are in the same row and column, the order should be from{" "}
        <b>left to right</b>.
      </p>

      <p>
        <b>Examples 1:</b>
      </p>

      <pre>
        <strong>Input:</strong>{" "}
        <code>
          [3,9,20,null,null,15,7] <br />
        </code>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/image1.png"
          style={{ width: 400, height: 273 }}
        />
        <br />
        <strong>Output:</strong> <br />
        {`[
      [9],
      [3,15],
      [20],
      [7]
    ]`}
      </pre>

      <p>
        <b>Examples 2:</b>
      </p>

      <pre>
        <strong>Input: </strong>
        <code>
          [3,9,8,4,0,1,7] <br />
        </code>{" "}
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/image3.png"
          style={{ width: 450, height: 285 }}
        />{" "}
        <br />
        <strong>Output:</strong> <br />
        {`[
      [4],
      [9],
      [3,0,1],
      [8],
      [7]
    ]`}
      </pre>

      <p>
        <b>Examples 3:</b>
      </p>

      <pre>
        <strong>Input:</strong> <code>[3,9,8,4,0,1,7,null,null,null,2,5]</code>{" "}
        (0's right child is 2 and 1's left child is 5)
        <br />
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/image2.png"
          style={{ width: 350, height: 342 }}
        />
        <br />
        <strong>Output:</strong>
        {`[
      [4],
      [9,5],
      [3,0,1],
      [8,2],
      [7]
    ]`}
      </pre>
    </div>
  ),
  366: (
    <article role="main" class="blog-post">
      <p>
        Given the <code>root</code> of a binary tree, collect a tree's nodes as
        if you were doing this:
      </p>

      <ul>
        <li>Collect all the leaf nodes.</li>
        <li>Remove all the leaf&nbsp;nodes.</li>
        <li>Repeat until the tree is empty.</li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0366.Find%20Leaves%20of%20Binary%20Tree/images/remleaves-tree.jpg"
          style={{ width: 500, height: 215 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> root = [1,2,3,4,5] <br />
        <strong>Output:</strong> [[4,5,3],[2],[1]] <br />
        Explanation: <br />
        [[3,5,4],[2],[1]] and [[3,4,5],[2],[1]] are also considered correct
        answers since per each level it does not matter the order on which
        elements are returned.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> [[1]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 100]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </article>
  ),
  508: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return the most frequent{" "}
        <strong>subtree sum</strong>. If there is a tie, return all the values
        with the highest frequency in any order.
      </p>

      <p>
        The <strong>subtree sum</strong> of a node is defined as the sum of all
        the node values formed by the subtree rooted at that node (including the
        node itself).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/24/freq1-tree.jpg"
        style={{ width: 207, height: 183 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,2,-3] <br />
        <strong>Output:</strong> [2,-3,4]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/24/freq2-tree.jpg"
        style={{ width: 207, height: 183 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,2,-5] <br />
        <strong>Output:</strong> [2]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  515: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>an array of the largest value in each row</em> of the tree{" "}
        <strong>(0-indexed)</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/21/largest_e1.jpg"
        style={{ width: 300, height: 172 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,3,2,5,3,null,9] <br />
        <strong>Output:</strong> [1,3,9]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1,2,3] <br />
        <strong>Output:</strong> [1,3]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree will be in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  543: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>
          the length of the <strong>diameter</strong> of the tree
        </em>
        .
      </p>

      <p>
        The <strong>diameter</strong> of a binary tree is the{" "}
        <strong>length</strong> of the longest path between any two nodes in a
        tree. This path may or may not pass through the <code>root</code>.
      </p>

      <p>
        The <strong>length</strong> of a path between two nodes is represented
        by the number of edges between them.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg"
        style={{ width: 292, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3,4,5] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> 3 is the length of the path [4,2,1,3] or
        [5,2,1,3].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1,2] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  545: (
    <article role="main" class="blog-post">
      <p>
        The <strong>boundary</strong> of a binary tree is the concatenation of
        the <strong>root</strong>, the <strong>left boundary</strong>, the{" "}
        <strong>leaves</strong> ordered from left-to-right, and the{" "}
        <strong>reverse order</strong> of the <strong>right boundary</strong>.
      </p>

      <p>
        The <strong>left boundary</strong> is the set of nodes defined by the
        following:
      </p>

      <ul>
        <li>
          The root node's left child is in the left boundary. If the root does
          not have a left child, then the left boundary is{" "}
          <strong>empty</strong>.
        </li>
        <li>
          If a node in the left boundary and has a left child, then the left
          child is in the left boundary.
        </li>
        <li>
          If a node is in the left boundary, has <strong>no</strong> left child,
          but has a right child, then the right child is in the left boundary.
        </li>
        <li>
          The leftmost leaf is <strong>not</strong> in the left boundary.
        </li>
      </ul>

      <p>
        The <strong>right boundary</strong> is similar to the{" "}
        <strong>left boundary</strong>, except it is the right side of the
        root's right subtree. Again, the leaf is <strong>not</strong> part of
        the <strong>right boundary</strong>, and the{" "}
        <strong>right boundary</strong> is empty if the root does not have a
        right child.
      </p>

      <p>
        The <strong>leaves</strong> are nodes that do not have any children. For
        this problem, the root is <strong>not</strong> a leaf.
      </p>

      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>
          the values of its <strong>boundary</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0545.Boundary%20of%20Binary%20Tree/images/boundary1.jpg"
          style={{ width: 299, height: 290 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> root = [1,null,2,3,4] <br />
        <strong>Output:</strong> [1,3,4,2] <br />
        <b>Explanation:</b> <br />
        - The left boundary is empty because the root does not have a left
        child. <br />
        - The right boundary follows the path starting from the root's right
        child 2 -&gt; 4. <br />
        4 is a leaf, so the right boundary is [2]. <br />
        - The leaves from left to right are [3,4]. <br />
        Concatenating everything results in [1] + [] + [3,4] + [2] = [1,3,4,2].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0545.Boundary%20of%20Binary%20Tree/images/boundary2.jpg"
          style={{ width: 599, height: 411 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> root = [1,2,3,4,5,6,null,null,null,7,8,9,10]{" "}
        <br />
        <strong>Output:</strong> [1,2,4,7,8,9,10,6,3] <br />
        <b>Explanation:</b> <br />
        - The left boundary follows the path starting from the root's left child
        2 -&gt; 4. <br />
        4 is a leaf, so the left boundary is [2]. <br />
        - The right boundary follows the path starting from the root's right
        child 3 -&gt; 6 -&gt; 10. <br />
        10 is a leaf, so the right boundary is [3,6], and in reverse order is
        [6,3]. <br />
        - The leaves from left to right are [4,7,8,9,10]. <br />
        Concatenating everything results in [1] + [2] + [4,7,8,9,10] + [6,3] =
        [1,2,4,7,8,9,10,6,3].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </article>
  ),
  617: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two binary trees <code>root1</code> and <code>root2</code>
        .
      </p>

      <p>
        Imagine that when you put one of them to cover the other, some nodes of
        the two trees are overlapped while the others are not. You need to merge
        the two trees into a new binary tree. The merge rule is that if two
        nodes overlap, then sum node values up as the new value of the merged
        node. Otherwise, the NOT null node will be used as the node of the new
        tree.
      </p>

      <p>
        Return <em>the merged tree</em>.
      </p>

      <p>
        <strong>Note:</strong> The merging process must start from the root
        nodes of both trees.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/05/merge.jpg"
        style={{ width: 600, height: 163 }}
      />
      <pre>
        <strong>Input:</strong> root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]{" "}
        <br />
        <strong>Output:</strong> [3,4,5,5,4,null,7]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root1 = [1], root2 = [1,2] <br />
        <strong>Output:</strong> [2,2]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in both trees is in the range{" "}
          <code>[0, 2000]</code>.
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  623: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree and two integers{" "}
        <code>val</code> and <code>depth</code>, add a row of nodes with value{" "}
        <code>val</code> at the given depth <code>depth</code>.
      </p>

      <p>
        Note that the <code>root</code> node is at depth <code>1</code>.
      </p>

      <p>The adding rule is:</p>

      <ul>
        <li>
          Given the integer <code>depth</code>, for each not null tree node{" "}
          <code>cur</code> at the depth <code>depth - 1</code>, create two tree
          nodes with value <code>val</code> as <code>cur</code>'s left subtree
          root and right subtree root.
        </li>
        <li>
          <code>cur</code>'s original left subtree should be the left subtree of
          the new left subtree root.
        </li>
        <li>
          <code>cur</code>'s original right subtree should be the right subtree
          of the new right subtree root.
        </li>
        <li>
          If <code>depth == 1</code> that means there is no depth{" "}
          <code>depth - 1</code> at all, then create a tree node with value{" "}
          <code>val</code> as the new root of the whole original tree, and the
          original tree is the new root's left subtree.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/15/addrow-tree.jpg"
        style={{ width: 500, height: 231 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,2,6,3,1,5], val = 1, depth = 2 <br />
        <strong>Output:</strong> [4,1,1,2,null,null,6,3,1,5]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/11/add2-tree.jpg"
        style={{ width: 500, height: 277 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,2,null,3,1], val = 1, depth = 3 <br />
        <strong>Output:</strong> [4,2,null,1,1,3,null,null,1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          The depth of the tree is in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= val &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= depth &lt;= the depth of tree + 1</code>
        </li>
      </ul>
    </div>
  ),
  637: (
    <div class="elfjS" data-track-load="description_content">
      Given the <code>root</code> of a binary tree, return{" "}
      <em>
        the average value of the nodes on each level in the form of an array
      </em>
      . Answers within{" "}
      <code>
        10<sup>-5</sup>
      </code>{" "}
      of the actual answer will be accepted.
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/09/avg1-tree.jpg"
        style={{ width: 277, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> [3.00000,14.50000,11.00000] <br />
        Explanation: The average value of nodes on level 0 is 3, on level 1 is
        14.5, and on level 2 is 11. <br />
        Hence return [3, 14.5, 11].
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/09/avg2-tree.jpg"
        style={{ width: 292, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,9,20,15,7] <br />
        <strong>Output:</strong> [3.00000,14.50000,11.00000]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  654: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> with no duplicates. A{" "}
        <strong>maximum binary tree</strong> can be built recursively from{" "}
        <code>nums</code> using the following algorithm:
      </p>

      <ul>
        <li>
          Create a root node whose value is the maximum value in{" "}
          <code>nums</code>.
        </li>
        <li>
          Recursively build the left subtree on the{" "}
          <strong>subarray prefix</strong> to the <strong>left</strong> of the
          maximum value.
        </li>
        <li>
          Recursively build the right subtree on the{" "}
          <strong>subarray suffix</strong> to the <strong>right</strong> of the
          maximum value.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>maximum binary tree</strong> built from{" "}
        </em>
        <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/24/tree1.jpg"
        style={{ width: 302, height: 421 }}
      />
      <pre>
        <strong>Input:</strong> nums = [3,2,1,6,0,5] <br />
        <strong>Output:</strong> [6,3,5,null,2,0,null,null,1] <br />
        <strong>Explanation:</strong> The recursive calls are as follow: <br />
        - The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and
        right suffix is [0,5]. <br />
        - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix
        is [2,1].
        <br />
        - Empty array, so no child.
        <br />
        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is
        [1].
        <br />
        - Empty array, so no child.
        <br />
        - Only one element, so child is a node with value 1.
        <br />
        - The largest value in [0,5] is 5. Left prefix is [0] and right suffix
        is [].
        <br />
        - Only one element, so child is a node with value 0.
        <br />- Empty array, so no child.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/24/tree2.jpg"
        style={{ width: 182, height: 301 }}
      />
      <pre>
        <strong>Input:</strong> nums = [3,2,1] <br />
        <strong>Output:</strong> [3,null,2,null,1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 1000</code>
        </li>
        <li>
          All integers in <code>nums</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  655: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, construct a{" "}
        <strong>0-indexed</strong> <code>m x n</code> string matrix{" "}
        <code>res</code> that represents a <strong>formatted layout</strong> of
        the tree. The formatted layout matrix should be constructed using the
        following rules:
      </p>

      <ul>
        <li>
          The <strong>height</strong> of the tree is <code>height</code>
          &nbsp;and the number of rows <code>m</code> should be equal to{" "}
          <code>height + 1</code>.
        </li>
        <li>
          The number of columns <code>n</code> should be equal to{" "}
          <code>
            2<sup>height+1</sup> - 1
          </code>
          .
        </li>
        <li>
          Place the <strong>root node</strong> in the <strong>middle</strong> of
          the <strong>top row</strong> (more formally, at location{" "}
          <code>res[0][(n-1)/2]</code>).
        </li>
        <li>
          For each node that has been placed in the matrix at position{" "}
          <code>res[r][c]</code>, place its <strong>left child</strong> at{" "}
          <code>
            res[r+1][c-2<sup>height-r-1</sup>]
          </code>{" "}
          and its <strong>right child</strong> at{" "}
          <code>
            res[r+1][c+2<sup>height-r-1</sup>]
          </code>
          .
        </li>
        <li>
          Continue this process until all the nodes in the tree have been
          placed.
        </li>
        <li>
          Any empty cells should contain the empty string <code>""</code>.
        </li>
      </ul>

      <p>
        Return <em>the constructed matrix </em>
        <code>res</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/03/print1-tree.jpg"
        style={{ width: 141, height: 181 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2] <br />
        <strong>Output:</strong> <br />
        [["","1",""], <br />
        &nbsp;["2","",""]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/03/print2-tree.jpg"
        style={{ width: 207, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3,null,4] <br />
        <strong>Output:</strong> <br />
        [["","","","1","","",""], <br />
        &nbsp;["","2","","","","3",""], <br />
        &nbsp;["","","4","","","",""]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 2<sup>10</sup>]
          </code>
          .
        </li>
        <li>
          <code>-99 &lt;= Node.val &lt;= 99</code>
        </li>
        <li>
          The depth of the tree will be in the range <code>[1, 10]</code>.
        </li>
      </ul>
    </div>
  ),
  662: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>
          the <strong>maximum width</strong> of the given tree
        </em>
        .
      </p>

      <p>
        The <strong>maximum width</strong> of a tree is the maximum{" "}
        <strong>width</strong> among all levels.
      </p>

      <p>
        The <strong>width</strong> of one level is defined as the length between
        the end-nodes (the leftmost and rightmost non-null nodes), where the
        null nodes between the end-nodes that would be present in a complete
        binary tree extending down to that level are also counted into the
        length calculation.
      </p>

      <p>
        It is <strong>guaranteed</strong> that the answer will in the range of a{" "}
        <strong>32-bit</strong> signed integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg"
        style={{ width: 359, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,3,2,5,3,null,9] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The maximum width exists in the third
        level with length 4 (5,3,null,9).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/03/14/maximum-width-of-binary-tree-v3.jpg"
        style={{ width: 442, height: 422 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,3,2,5,null,null,9,6,null,7] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> The maximum width exists in the fourth
        level with length 7 (6,null,null,null,null,null,7).
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/03/width3-tree.jpg"
        style={{ width: 289, height: 299 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,3,2,5] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The maximum width exists in the second
        level with length 2 (3,2).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 3000]</code>
          .
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  671: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a non-empty special binary tree consisting of nodes with the
        non-negative value, where each node in this tree has exactly{" "}
        <code>two</code> or <code>zero</code> sub-node. If the node has two
        sub-nodes, then this node's value is the smaller value among its two
        sub-nodes. More formally, the property&nbsp;
        <code>root.val = min(root.left.val, root.right.val)</code>&nbsp;always
        holds.
      </p>

      <p>
        Given such a binary tree, you need to output the <b>second minimum</b>{" "}
        value in the set made of all the nodes' value in the whole tree.
      </p>

      <p>If no such second minimum value exists, output -1 instead.</p>

      <p>&nbsp;</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg"
        style={{ width: 431, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [2,2,5,null,null,5,7] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The smallest value is 2, the second
        smallest value is 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg"
        style={{ width: 321, height: 182 }}
      />
      <pre>
        <strong>Input:</strong> root = [2,2,2] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> The smallest value is 2, but there isn't
        any second smallest value.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 25]</code>.
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          <code>root.val == min(root.left.val, root.right.val)</code>&nbsp;for
          each internal node of the tree.
        </li>
      </ul>
    </div>
  ),
  687: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>
          the length of the longest path, where each node in the path has the
          same value
        </em>
        . This path may or may not pass through the root.
      </p>

      <p>
        <strong>The length of the path</strong> between two nodes is represented
        by the number of edges between them.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/13/ex1.jpg"
        style={{ width: 450, height: 238 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,4,5,1,1,null,5] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The shown image shows that the longest
        path of the same value (i.e. 5).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/13/ex2.jpg"
        style={{ width: 450, height: 238 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,4,5,4,4,null,5] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The shown image shows that the longest
        path of the same value (i.e. 4).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
        <li>
          The depth of the tree will not exceed <code>1000</code>.
        </li>
      </ul>
    </div>
  ),
  742: (
    <article role="main" class="blog-post">
      <p>
        Given the <code>root</code> of a binary tree where every node has{" "}
        <strong>a unique value</strong> and a target integer <code>k</code>,
        return{" "}
        <em>
          the value of the <strong>nearest leaf node</strong> to the target{" "}
        </em>
        <code>k</code>
        <em> in the tree</em>.
      </p>

      <p>
        <strong>Nearest to a leaf</strong> means the least number of edges
        traveled on the binary tree to reach any leaf of the tree. Also, a node
        is called a leaf if it has no children.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0742.Closest%20Leaf%20in%20a%20Binary%20Tree/images/closest1-tree.jpg"
          style={{ width: 224, height: 145 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> root = [1,3,2], k = 1 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> Either 2 or 3 is the nearest leaf node to
        the target of 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0742.Closest%20Leaf%20in%20a%20Binary%20Tree/images/closest2-tree.jpg"
          style={{ width: 64, height: 65 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> root = [1], k = 1 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The nearest leaf node is the root node
        itself.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0742.Closest%20Leaf%20in%20a%20Binary%20Tree/images/closest3-tree.jpg"
          style={{ width: 464, height: 384 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> root = [1,2,3,4,null,null,null,5,null,6], k = 2{" "}
        <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The leaf node with value 3 (and not the
        leaf node with value 6) is nearest to the node with value 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 1000]</code>
          .
        </li>
        <li>
          <code>1 &lt;= Node.val &lt;= 1000</code>
        </li>
        <li>
          All the values of the tree are <strong>unique</strong>.
        </li>
        <li>
          There exist some node in the tree where <code>Node.val == k</code>.
        </li>
      </ul>
    </article>
  ),
  863: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, the value of a target node{" "}
        <code>target</code>, and an integer <code>k</code>, return{" "}
        <em>an array of the values of all nodes that have a distance </em>
        <code>k</code>
        <em> from the target node.</em>
      </p>

      <p>
        You can return the answer in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png"
        style={{ width: 500, height: 429 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], target =
        5, k = 2 <br />
        <strong>Output:</strong> [7,4,1] <br />
        Explanation: The nodes that are a distance 2 from the target node (with
        value 5) have values 7, 4, and 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1], target = 1, k = 3 <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 500]</code>.
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 500</code>
        </li>
        <li>
          All the values <code>Node.val</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>target</code> is the value of one of the nodes in the tree.
        </li>
        <li>
          <code>0 &lt;= k &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  951: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        For a binary tree <strong>T</strong>, we can define a{" "}
        <strong>flip operation</strong> as follows: choose any node, and swap
        the left and right child subtrees.
      </p>

      <p>
        A binary tree <strong>X</strong>&nbsp;is <em>flip equivalent</em> to a
        binary tree <strong>Y</strong> if and only if we can make{" "}
        <strong>X</strong> equal to <strong>Y</strong> after some number of flip
        operations.
      </p>

      <p>
        Given the roots of two binary trees <code>root1</code> and{" "}
        <code>root2</code>, return <code>true</code> if the two trees are flip
        equivalent or <code>false</code> otherwise.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt="Flipped Trees Diagram"
        src="https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png"
        style={{ width: 500, height: 220 }}
      />
      <pre>
        <strong>Input:</strong> root1 = [1,2,3,4,5,6,null,null,null,7,8], root2
        = [1,3,2,null,6,4,5,null,null,null,null,8,7] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation: </strong>We flipped at nodes with values 1, 3, and
        5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root1 = [], root2 = [] <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root1 = [], root2 = [1] <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in each tree is in the range <code>[0, 100]</code>
          .
        </li>
        <li>
          Each tree will have <strong>unique node values</strong> in the range{" "}
          <code>[0, 99]</code>.
        </li>
      </ul>
    </div>
  ),
  971: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>root</code> of a binary tree with <code>n</code>{" "}
        nodes, where each node is uniquely assigned a value from <code>1</code>{" "}
        to <code>n</code>. You are also given a sequence of <code>n</code>{" "}
        values <code>voyage</code>, which is the <strong>desired</strong>{" "}
        <a
          href="https://en.wikipedia.org/wiki/Tree_traversal#Pre-order"
          target="_blank"
          rel="noreferrer"
        >
          <strong>pre-order traversal</strong>
        </a>{" "}
        of the binary tree.
      </p>

      <p>
        Any node in the binary tree can be <strong>flipped</strong> by swapping
        its left and right subtrees. For example, flipping node 1 will have the
        following effect:
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/15/fliptree.jpg"
        style={{ width: 400, height: 187 }}
      />
      <p>
        Flip the <strong>smallest</strong> number of nodes so that the{" "}
        <strong>pre-order traversal</strong> of the tree{" "}
        <strong>matches</strong> <code>voyage</code>.
      </p>

      <p>
        Return{" "}
        <em>
          a list of the values of all <strong>flipped</strong> nodes. You may
          return the answer in <strong>any order</strong>. If it is{" "}
          <strong>impossible</strong> to flip the nodes in the tree to make the
          pre-order traversal match{" "}
        </em>
        <code>voyage</code>
        <em>, return the list </em>
        <code>[-1]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/01/02/1219-01.png"
        style={{ width: 150, height: 205 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2], voyage = [2,1] <br />
        <strong>Output:</strong> [-1] <br />
        <strong>Explanation:</strong> It is impossible to flip the nodes such
        that the pre-order traversal matches voyage.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/01/02/1219-02.png"
        style={{ width: 150, height: 142 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3], voyage = [1,3,2] <br />
        <strong>Output:</strong> [1] <br />
        <strong>Explanation:</strong> Flipping node 1 swaps nodes 2 and 3, so
        the pre-order traversal matches voyage.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/01/02/1219-02.png"
        style={{ width: 150, height: 142 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3], voyage = [1,2,3] <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> The tree's pre-order traversal already
        matches voyage, so no nodes need to be flipped.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is <code>n</code>.
        </li>
        <li>
          <code>n == voyage.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= Node.val, voyage[i] &lt;= n</code>
        </li>
        <li>
          All the values in the tree are <strong>unique</strong>.
        </li>
        <li>
          All the values in <code>voyage</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  987: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, calculate the{" "}
        <strong>vertical order traversal</strong> of the binary tree.
      </p>

      <p>
        For each node at position <code>(row, col)</code>, its left and right
        children will be at positions <code>(row + 1, col - 1)</code> and{" "}
        <code>(row + 1, col + 1)</code> respectively. The root of the tree is at{" "}
        <code>(0, 0)</code>.
      </p>

      <p>
        The <strong>vertical order traversal</strong> of a binary tree is a list
        of top-to-bottom orderings for each column index starting from the
        leftmost column and ending on the rightmost column. There may be
        multiple nodes in the same row and same column. In such a case, sort
        these nodes by their values.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>vertical order traversal</strong> of the binary tree
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/29/vtree1.jpg"
        style={{ width: 431, height: 304 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> [[9],[3,15],[20],[7]]
        <br />
        <strong>Explanation:</strong>
        <br />
        Column -1: Only node 9 is in this column.
        <br />
        Column 0: Nodes 3 and 15 are in this column in that order from top to
        bottom.
        <br />
        Column 1: Only node 20 is in this column.
        <br />
        Column 2: Only node 7 is in this column.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/29/vtree2.jpg"
        style={{ width: 512, height: 304 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3,4,5,6,7] <br />
        <strong>Output:</strong> [[4],[2],[1,5,6],[3],[7]] <br />
        <strong>Explanation:</strong> <br />
        Column -2: Only node 4 is in this column. <br />
        Column -1: Only node 2 is in this column. <br />
        Column 0: Nodes 1, 5, and 6 are in this column. <br />
        1 is at the top, so it comes first. <br />
        5 and 6 are at the same position (2, 0), so we order them by their
        value, 5 before 6. <br />
        Column 1: Only node 3 is in this column. <br />
        Column 2: Only node 7 is in this column.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/29/vtree3.jpg"
        style={{ width: 512, height: 304 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3,4,6,5,7] <br />
        <strong>Output:</strong> [[4],[2],[1,5,6],[3],[7]] <br />
        <strong>Explanation:</strong> <br />
        This case is the exact same as example 2, but with nodes 5 and 6
        swapped. <br />
        Note that the solution remains the same since 5 and 6 are in the same
        location and should be ordered by their values.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 1000]</code>
          .
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  998: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>maximum tree</strong> is a tree where every node has a value
        greater than any other value in its subtree.
      </p>

      <p>
        You are given the <code>root</code> of a maximum binary tree and an
        integer <code>val</code>.
      </p>

      <p>
        Just as in the{" "}
        <a
          href="https://leetcode.com/problems/maximum-binary-tree/"
          target="_blank"
          rel="noreferrer"
        >
          previous problem
        </a>
        , the given tree was constructed from a list <code>a</code> (
        <code>root = Construct(a)</code>) recursively with the following{" "}
        <code>Construct(a)</code> routine:
      </p>

      <ul>
        <li>
          If <code>a</code> is empty, return <code>null</code>.
        </li>
        <li>
          Otherwise, let <code>a[i]</code> be the largest element of{" "}
          <code>a</code>. Create a <code>root</code> node with the value{" "}
          <code>a[i]</code>.
        </li>
        <li>
          The left child of <code>root</code> will be{" "}
          <code>Construct([a[0], a[1], ..., a[i - 1]])</code>.
        </li>
        <li>
          The right child of <code>root</code> will be{" "}
          <code>Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]])</code>.
        </li>
        <li>
          Return <code>root</code>.
        </li>
      </ul>

      <p>
        Note that we were not given <code>a</code> directly, only a root node{" "}
        <code>root = Construct(a)</code>.
      </p>

      <p>
        Suppose <code>b</code> is a copy of <code>a</code> with the value{" "}
        <code>val</code> appended to it. It is guaranteed that <code>b</code>{" "}
        has unique values.
      </p>

      <p>
        Return <code>Construct(b)</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/09/maxtree1.JPG"
        style={{ width: 376, height: 235 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,1,3,null,null,2], val = 5 <br />
        <strong>Output:</strong> [5,4,null,1,3,null,null,2] <br />
        <strong>Explanation:</strong> a = [1,4,2,3], b = [1,4,2,3,5]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/09/maxtree21.JPG"
        style={{ width: 358, height: 156 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,2,4,null,1], val = 3 <br />
        <strong>Output:</strong> [5,2,4,null,1,null,3] <br />
        <strong>Explanation:</strong> a = [2,1,5,4], b = [2,1,5,4,3]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/09/maxtree3.JPG"
        style={{ width: 404, height: 180 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,2,3,null,1], val = 4 <br />
        <strong>Output:</strong> [5,2,4,null,1,3] <br />
        <strong>Explanation:</strong> a = [2,1,5,3], b = [2,1,5,3,4]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 100]</code>.
        </li>
        <li>
          <code>1 &lt;= Node.val &lt;= 100</code>
        </li>
        <li>
          All the values of the tree are <strong>unique</strong>.
        </li>
        <li>
          <code>1 &lt;= val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1026: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, find the maximum value{" "}
        <code>v</code> for which there exist <strong>different</strong> nodes{" "}
        <code>a</code> and <code>b</code> where <code>v = |a.val - b.val|</code>{" "}
        and <code>a</code> is an ancestor of <code>b</code>.
      </p>

      <p>
        A node <code>a</code> is an ancestor of <code>b</code> if either: any
        child of <code>a</code> is equal to <code>b</code>&nbsp;or any child of{" "}
        <code>a</code> is an ancestor of <code>b</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/09/tmp-tree.jpg"
        style={{ width: 400, height: 390 }}
      />
      <pre>
        <strong>Input:</strong> root = [8,3,10,1,6,null,14,null,null,4,7,13]{" "}
        <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation: </strong>We have various ancestor-node differences,
        some of which are given below : <br />
        |8 - 3| = 5 <br />
        |3 - 7| = 4 <br />
        |8 - 1| = 7 <br />
        |10 - 13| = 3 <br />
        Among all possible differences, the maximum value of 7 is obtained by |8
        - 1| = 7.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/09/tmp-tree-1.jpg"
        style={{ width: 250, height: 349 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,null,2,null,0,3] <br />
        <strong>Output:</strong> 3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[2, 5000]</code>
          .
        </li>
        <li>
          <code>
            0 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1028: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        We run a&nbsp;preorder&nbsp;depth-first search (DFS) on the{" "}
        <code>root</code> of a binary tree.
      </p>

      <p>
        At each node in this traversal, we output <code>D</code> dashes (where{" "}
        <code>D</code> is the depth of this node), then we output the value of
        this node.&nbsp; If the depth of a node is <code>D</code>, the depth of
        its immediate child is <code>D + 1</code>.&nbsp; The depth of the{" "}
        <code>root</code> node is <code>0</code>.
      </p>

      <p>
        If a node has only one child, that child is guaranteed to be{" "}
        <strong>the left child</strong>.
      </p>

      <p>
        Given the output <code>traversal</code> of this traversal, recover the
        tree and return <em>its</em> <code>root</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2024/09/10/recover_tree_ex1.png"
        style={{ width: 423, height: 200 }}
      />
      <pre>
        <strong>Input:</strong> traversal = "1-2--3--4-5--6--7" <br />
        <strong>Output:</strong> [1,2,5,3,4,6,7]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2024/09/10/recover_tree_ex2.png"
        style={{ width: 432, height: 250 }}
      />
      <pre>
        <strong>Input:</strong> traversal = "1-2--3---4-5--6---7" <br />
        <strong>Output:</strong> [1,2,5,3,null,6,null,4,null,7]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2024/09/10/recover_tree_ex3.png"
        style={{ width: 305, height: 250 }}
      />
      <pre>
        <strong>Input:</strong> traversal = "1-401--349---90--88" <br />
        <strong>Output:</strong> [1,401,null,349,88,90]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the original tree is in the range{" "}
          <code>[1, 1000]</code>.
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1080: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree and an integer{" "}
        <code>limit</code>, delete all <strong>insufficient nodes</strong> in
        the tree simultaneously, and return{" "}
        <em>the root of the resulting binary tree</em>.
      </p>

      <p>
        A node is <strong>insufficient</strong> if every root to{" "}
        <strong>leaf</strong> path intersecting this node has a sum strictly
        less than <code>limit</code>.
      </p>

      <p>
        A <strong>leaf</strong> is a node with no children.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/06/05/insufficient-11.png"
        style={{ width: 500, height: 207 }}
      />
      <pre>
        <strong>Input:</strong> root =
        [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1 <br />
        <strong>Output:</strong> [1,2,3,4,null,null,7,8,9,null,14]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/06/05/insufficient-3.png"
        style={{ width: 400, height: 274 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,4,8,11,null,17,4,7,1,null,null,5,3],
        limit = 22 <br />
        <strong>Output:</strong> [5,4,8,11,null,17,4,7,null,null,null,5]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/06/11/screen-shot-2019-06-11-at-83301-pm.png"
        style={{ width: 250, height: 199 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,-3,-5,null,4,null], limit = -1{" "}
        <br />
        <strong>Output:</strong> [1,null,-3,4]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 5000]</code>
          .
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= limit &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1104: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        In an infinite binary tree where every node has two children, the nodes
        are labelled in row order.
      </p>

      <p>
        In the odd numbered rows (ie., the first, third, fifth,...), the
        labelling is left to right, while in the even numbered rows (second,
        fourth, sixth,...), the labelling is right to left.
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/06/24/tree.png"
          style={{ width: 300, height: 138 }}
        />
      </p>

      <p>
        Given the <code>label</code> of a node in this tree, return the labels
        in the path from the root of the tree to the&nbsp;node with that{" "}
        <code>label</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> label = 14 <br />
        <strong>Output:</strong> [1,3,4,14]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> label = 26 <br />
        <strong>Output:</strong> [1,2,6,10,26]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= label &lt;= 10^6</code>
        </li>
      </ul>
    </div>
  ),
  1120: (
    <div class="markdown-body div-width">
      <p>
        Given the <code>root</code> of a binary tree, find the maximum average
        value of any subtree of that tree.
      </p>

      <p>
        (A subtree of a tree is any node of that tree plus all its descendants.
        The average value of a tree is the sum of its values, divided by the
        number of nodes.)
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <img src="img/1120.png" alt="" />
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-1-1">[5,6,1]</span> <br />
        <strong>Output: </strong>
        <span id="example-output-1">6.00000</span> <br />
        <strong>Explanation: </strong> <br />
        For the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.{" "}
        <br />
        For the node with value = 6 we have an average of 6 / 1 = 6. <br />
        For the node with value = 1 we have an average of 1 / 1 = 1. <br />
        So the answer is 6 which is the maximum.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is between <code>1</code> and{" "}
          <code>5000</code>.
        </li>
        <li>
          Each node will have a value between <code>0</code> and{" "}
          <code>100000</code>.
        </li>
        <li>
          Answers will be accepted as correct if they are within{" "}
          <code>10^-5</code> of the correct answer.
        </li>
      </ul>
    </div>
  ),
  1123: (
    <article role="main" class="blog-post">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>the lowest common ancestor of its deepest leaves</em>.
      </p>

      <p>Recall that:</p>

      <ul>
        <li>
          The node of a binary tree is a leaf if and only if it has no children
        </li>
        <li>
          The depth of the root of the tree is <code>0</code>. if the depth of a
          node is <code>d</code>, the depth of each of its children is{" "}
          <code>d + 1</code>.
        </li>
        <li>
          The lowest common ancestor of a set <code>S</code> of nodes, is the
          node <code>A</code> with the largest depth such that every node in{" "}
          <code>S</code> is in the subtree with root <code>A</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1100-1199/1123.Lowest%20Common%20Ancestor%20of%20Deepest%20Leaves/images/sketch1.png"
          style={{ width: 600, height: 510 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4] <br />
        <strong>Output:</strong> [2,7,4] <br />
        <strong>Explanation:</strong> We return the node with value 2, colored
        in yellow in the diagram. <br />
        The nodes coloured in blue are the deepest leaf-nodes of the tree.
        <br />
        Note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them
        is 2, but the depth of nodes 7 and 4 is 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1]
        <br />
        <strong>Output:</strong> [1]
        <br />
        <strong>Explanation:</strong> The root is the deepest node in the tree,
        and it's the lca of itself.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [0,1,3,null,2]
        <br />
        <strong>Output:</strong> [2]
        <br />
        <strong>Explanation:</strong> The deepest leaf node in the tree is 2,
        the lca of one node is itself.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree will be in the range{" "}
          <code>[1, 1000]</code>.
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 1000</code>
        </li>
        <li>
          The values of the nodes in the tree are <strong>unique</strong>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Note:</strong> This question is the same as 865:{" "}
        <a
          href="https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/"
          target="_blank"
          rel="noreferrer"
        >
          https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/
        </a>
      </p>
    </article>
  ),
  1302: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          Given a binary tree, return the sum of values of its deepest leaves.
          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>
          <p>
            <strong>
              <img
                alt=""
                src="https://assets.leetcode.com/uploads/2019/07/31/1483_ex1.png"
                style={{ width: 273, height: 265 }}
              />
            </strong>
          </p>
          <pre>
            <strong>Input:</strong> root =
            [1,2,3,4,5,null,6,7,null,null,null,null,8] <br />
            <strong>Output:</strong> 15
          </pre>
          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>
          <ul>
            <li>
              The number of nodes in the tree is between&nbsp;<code>1</code>
              &nbsp;and&nbsp;<code>10^4</code>.
            </li>
            <li>
              The value of nodes is between&nbsp;<code>1</code>&nbsp;and&nbsp;
              <code>100</code>.
            </li>
          </ul>
        </div>
      </div>
    </div>
  ),
  1367: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a binary tree <code>root</code> and a&nbsp;linked list with&nbsp;
        <code>head</code>&nbsp;as the first node.&nbsp;
      </p>

      <p>
        Return True if all the elements in the linked list starting from the{" "}
        <code>head</code> correspond to some <em>downward path</em> connected in
        the binary tree&nbsp;otherwise return False.
      </p>

      <p>
        In this context downward path means a path that starts at some node and
        goes downwards.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/02/12/sample_1_1720.png"
            style={{ width: 220, height: 280 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [4,2,8], root =
        [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Nodes in blue form a subpath in the binary
        Tree.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/02/12/sample_2_1720.png"
            style={{ width: 220, height: 280 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [1,4,2,6], root =
        [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [1,4,2,6,8], root =
        [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> There is no path in the binary tree that
        contains all the elements of the linked list from <code>head</code>.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree will be in the range{" "}
          <code>[1, 2500]</code>.
        </li>
        <li>
          The number of nodes in the list will be in the range{" "}
          <code>[1, 100]</code>.
        </li>
        <li>
          <code>1 &lt;= Node.val&nbsp;&lt;= 100</code>&nbsp;for each node in the
          linked list and binary tree.
        </li>
      </ul>
    </div>
  ),
  1612: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            A{" "}
            <strong>
              <a
                href="https://en.wikipedia.org/wiki/Binary_expression_tree"
                target="_blank"
                rel="noreferrer"
              >
                binary expression tree
              </a>
            </strong>{" "}
            is a kind of binary tree used to represent arithmetic expressions.
            Each node of a binary expression tree has either zero or two
            children. Leaf nodes (nodes with 0 children) correspond to operands
            (variables), and internal nodes (nodes with two children) correspond
            to the operators. In this problem, we only consider the{" "}
            <code>'+'</code> operator (i.e. addition).
          </p>

          <p>
            You are given the roots of two binary expression trees,{" "}
            <code>root1</code> and <code>root2</code>. Return <code>true</code>
            <em> if the two binary expression trees are equivalent</em>.
            Otherwise, return <code>false</code>.
          </p>

          <p>
            Two binary expression trees are equivalent if they{" "}
            <strong>evaluate to the same value</strong> regardless of what the
            variables are set to.
          </p>

          <p>
            <strong>Follow up:</strong> What will you change in your solution if
            the tree also supports the <code>'-'</code> operator (i.e.
            subtraction)?
          </p>

          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>

          <pre>
            <strong>Input:</strong> root1 = [x], root2 = [x] <br />
            <strong>Output:</strong> true
          </pre>

          <p>
            <strong>Example 2:</strong>
          </p>

          <p>
            <strong>
              <img
                alt=""
                src="https://assets.leetcode.com/uploads/2020/10/04/tree1.png"
                style={{ width: 211, height: 131 }}
              />
            </strong>
          </p>

          <pre>
            <strong>Input:</strong> root1 = [+,a,+,null,null,b,c], root2 =
            [+,+,b,c,a] <br />
            <strong>Output:</strong> true <br />
            <strong>Explaination:</strong>{" "}
            <code>a + (b + c) == (b + c) + a</code>
          </pre>

          <p>
            <strong>Example 3:</strong>
          </p>

          <p>
            <strong>
              <img
                alt=""
                src="https://assets.leetcode.com/uploads/2020/10/04/tree2.png"
                style={{ width: 211, height: 131 }}
              />
            </strong>
          </p>

          <pre>
            <strong>Input:</strong> root1 = [+,a,+,null,null,b,c], root2 =
            [+,+,b,d,a] <br />
            <strong>Output:</strong> false
            <br />
            <strong>Explaination:</strong>{" "}
            <code>a + (b + c) != (b + d) + a</code>
          </pre>

          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              The number of nodes in both trees are equal, odd and, in the range{" "}
              <code>[1, 4999]</code>.
            </li>
            <li>
              <code>Node.val</code> is <code>'+'</code> or a lower-case English
              letter.
            </li>
            <li>
              It's <strong>guaranteed</strong> that the tree given is a valid
              binary expression tree.
            </li>
          </ul>
        </div>
      </div>
    </div>
  ),
  1660: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            You have a binary tree with a small defect. There is{" "}
            <strong>exactly one</strong>
            invalid node where its right child incorrectly points to another
            node at the <strong>same depth</strong> but to the{" "}
            <b>invalid node's right</b>.
          </p>

          <p>
            Given the root of the binary tree with this defect,{" "}
            <code>root</code>, return{" "}
            <em>
              the root of the binary tree after <strong>removing</strong> this
              invalid node <strong>and every node underneath it</strong> (minus
              the node it incorrectly points to).
            </em>
          </p>

          <p>
            <strong>Custom testing:</strong>
          </p>

          <p>The test input is read as 3 lines:</p>

          <ul>
            <li>
              <code>TreeNode root</code>
            </li>
            <li>
              <code>int fromNode</code> (<strong>not available to </strong>
              <code>correctBinaryTree</code>)
            </li>
            <li>
              <code>int toNode</code> (<strong>not available to </strong>
              <code>correctBinaryTree</code>)
            </li>
          </ul>

          <p>
            After the binary tree rooted at <code>root</code> is parsed, the
            <code>TreeNode</code> with value of <code>fromNode</code> will have
            its right child pointer pointing to the <code>TreeNode</code> with a
            value of <code>toNode</code>. Then, <code>root</code> is passed to{" "}
            <code>correctBinaryTree</code>.
          </p>

          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>

          <p>
            <strong>
              <img
                alt=""
                src="https://assets.leetcode.com/uploads/2020/10/22/ex1v2.png"
              />
            </strong>
          </p>

          <pre>
            <strong>Input:</strong> root = [1,2,3], fromNode = 2, toNode = 3{" "}
            <br />
            <strong>Output:</strong> [1,null,3] <br />
            <strong>Explanation:</strong> The node with value 2 is invalid, so
            remove it.
          </pre>

          <p>
            <strong>Example 2:</strong>
          </p>

          <p>
            <strong>
              <img
                alt=""
                src="https://assets.leetcode.com/uploads/2020/10/22/ex2v3.png"
              />
            </strong>
          </p>

          <pre>
            <strong>Input:</strong> root =
            [8,3,1,7,null,9,4,2,null,null,null,5,6], fromNode = 7, toNode = 4{" "}
            <br />
            <strong>Output:</strong> [8,3,1,null,null,9,4,null,null,5,6] <br />
            <strong>Explanation:</strong> The node with value 7 is invalid, so
            remove it and the node underneath it, node 2.
          </pre>

          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              The number of nodes in the tree is in the range{" "}
              <code>
                [3, 10<sup>4</sup>]
              </code>
              .
            </li>
            <li>
              <code>
                -10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup>
              </code>
            </li>
            <li>
              All <code>Node.val</code> are <strong>unique</strong>.
            </li>
            <li>
              <code>fromNode != toNode</code>
            </li>
            <li>
              <code>fromNode</code> and <code>toNode</code> will exist in the
              tree and will be on the same depth.
            </li>
            <li>
              <code>toNode</code> is to the <strong>right</strong> of{" "}
              <code>fromNode</code>.
            </li>
            <li>
              <code>fromNode.right</code> is <code>null</code> in the initial
              tree from the test data.
            </li>
          </ul>
        </div>
      </div>
    </div>
  ),
  1666: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            Given the <code>root</code> of a binary tree and a <code>leaf</code>{" "}
            node, reroot the tree so that the <code>leaf</code> is the new root.
          </p>

          <p>
            You can reroot the tree with the following steps for each node{" "}
            <code>cur</code> on the path <strong>starting from the </strong>
            <code>leaf</code> up to the
            <code>root</code>​​​ <strong>excluding the root</strong>:
          </p>

          <ul>
            <li>
              If <code>cur</code> has a left child, then that child becomes{" "}
              <code>cur</code>'s right child. Note that it is guaranteed that{" "}
              <code>cur</code> will have at most one child.
            </li>
            <li>
              <code>cur</code>'s original parent becomes <code>cur</code>'s left
              child.
            </li>
          </ul>

          <p>
            Return <em>the new root </em>
            <em>of the rerooted tree.</em>
          </p>

          <p>
            <strong>Note:</strong> Ensure that your solution sets the{" "}
            <code>Node.parent</code>
            pointers correctly after rerooting or you will receive "Wrong
            Answer".
          </p>

          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/11/24/fliptree.png"
            style={{ width: 400, height: 298 }}
          />
          <pre>
            <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], leaf =
            7 <br />
            <strong>Output:</strong>{" "}
            [7,2,null,5,4,3,6,null,null,null,1,null,null,0,8]
          </pre>

          <p>
            <strong>Example 2:</strong>
          </p>

          <pre>
            <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], leaf =
            0 <br />
            <strong>Output:</strong>{" "}
            [0,1,null,3,8,5,null,null,null,6,2,null,null,7,4]
          </pre>

          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              The number of nodes in the tree is in the range{" "}
              <code>[2, 100]</code>.
            </li>
            <li>
              <code>
                -10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup>
              </code>
            </li>
            <li>
              All <code>Node.val</code> are <strong>unique</strong>.
            </li>
            <li>
              <code>leaf</code> exist in the tree.
            </li>
          </ul>
        </div>
      </div>
    </div>
  ),
  1740: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            Given the root of a binary tree and two integers <code>p</code> and{" "}
            <code>q</code>, return{" "}
            <em>
              the <strong>distance</strong> between the nodes of value
            </em>
            <code>p</code>
            <em> and value </em>
            <code>q</code>
            <em> in the tree</em>.
          </p>

          <p>
            The <strong>distance</strong> between two nodes is the number of
            edges on the path from one to the other.
          </p>

          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"
          />
          <pre>
            <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5,
            q = 0 <br />
            <strong>Output:</strong> 3 <br />
            <strong>Explanation:</strong> There are 3 edges between 5 and 0:
            5-3-1-0.
          </pre>

          <p>
            <strong>Example 2:</strong>
          </p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"
          />
          <pre>
            <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5,
            q = 7 <br />
            <strong>Output:</strong> 2 <br />
            <strong>Explanation:</strong> There are 2 edges between 5 and 7:
            5-2-7.
          </pre>

          <p>
            <strong>Example 3:</strong>
          </p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"
          />
          <pre>
            <strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5,
            q = 5 <br />
            <strong>Output:</strong> 0 <br />
            <strong>Explanation:</strong> The distance between a node and itself
            is 0.
          </pre>

          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              The number of nodes in the tree is in the range{" "}
              <code>
                [1, 10<sup>4</sup>]
              </code>
              .
            </li>
            <li>
              <code>
                0 &lt;= Node.val &lt;= 10<sup>9</sup>
              </code>
            </li>
            <li>
              All <code>Node.val</code> are <strong>unique</strong>.
            </li>
            <li>
              <code>p</code> and <code>q</code> are values in the tree.
            </li>
          </ul>
        </div>
      </div>
    </div>
  ),
  2236: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>root</code> of a <strong>binary tree</strong>{" "}
        that consists of exactly <code>3</code> nodes: the root, its left child,
        and its right child.
      </p>

      <p>
        Return <code>true</code>{" "}
        <em>
          if the value of the root is equal to the <strong>sum</strong> of the
          values of its two children, or{" "}
        </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/04/08/graph3drawio.png"
        style={{ width: 281, height: 199 }}
      />
      <pre>
        <strong>Input:</strong> root = [10,4,6] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The values of the root, its left child,
        and its right child are 10, 4, and 6, respectively. <br />
        10 is equal to 4 + 6, so we return true.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/04/08/graph3drawio-1.png"
        style={{ width: 281, height: 199 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,3,1] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The values of the root, its left child,
        and its right child are 5, 3, and 1, respectively. <br />5 is not equal
        to 3 + 1, so we return false.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The tree consists only of the root, its left child, and its right
          child.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  2265: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>
          the number of nodes where the value of the node is equal to the{" "}
          <strong>average</strong> of the values in its <strong>subtree</strong>
        </em>
        .
      </p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          The <strong>average</strong> of <code>n</code> elements is the{" "}
          <strong>sum</strong> of the <code>n</code> elements divided by{" "}
          <code>n</code> and <strong>rounded down</strong> to the nearest
          integer.
        </li>
        <li>
          A <strong>subtree</strong> of <code>root</code> is a tree consisting
          of <code>root</code> and all of its descendants.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/03/15/image-20220315203925-1.png"
        style={{ width: 300, height: 212 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,8,5,0,1,null,6] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> <br />
        For the node with value 4: The average of its subtree is (4 + 8 + 5 + 0
        + 1 + 6) / 6 = 24 / 6 = 4. <br />
        For the node with value 5: The average of its subtree is (5 + 6) / 2 =
        11 / 2 = 5. <br />
        For the node with value 0: The average of its subtree is 0 / 1 = 0.{" "}
        <br />
        For the node with value 1: The average of its subtree is 1 / 1 = 1.{" "}
        <br />
        For the node with value 6: The average of its subtree is 6 / 1 = 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/03/26/image-20220326133920-1.png"
        style={{ width: 80, height: 76 }}
      />
      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> For the node with value 1: The average of
        its subtree is 1 / 1 = 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 1000]</code>
          .
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  2583: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>root</code> of a binary tree and a positive
        integer <code>k</code>.
      </p>

      <p>
        The <strong>level sum</strong> in the tree is the sum of the values of
        the nodes that are on the <strong>same</strong> level.
      </p>

      <p>
        Return<em> the </em>
        <code>
          k<sup>th</sup>
        </code>
        <em>
          {" "}
          <strong>largest</strong> level sum in the tree (not necessarily
          distinct)
        </em>
        . If there are fewer than <code>k</code> levels in the tree, return{" "}
        <code>-1</code>.
      </p>

      <p>
        <strong>Note</strong> that two nodes are on the same level if they have
        the same distance from the root.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/12/14/binaryytreeedrawio-2.png"
        style={{ width: 301, height: 284 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,8,9,2,1,3,7,4,6], k = 2 <br />
        <strong>Output:</strong> 13 <br />
        <strong>Explanation:</strong> The level sums are the following: <br />
        - Level 1: 5. <br />
        - Level 2: 8 + 9 = 17.
        <br />
        - Level 3: 2 + 1 + 3 + 7 = 13. <br />
        - Level 4: 4 + 6 = 10.
        <br />
        The 2<sup>nd</sup> largest level sum is 13.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/12/14/treedrawio-3.png"
        style={{ width: 181, height: 181 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,null,3], k = 1 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The largest level sum is 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is <code>n</code>.
        </li>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= n</code>
        </li>
      </ul>
    </div>
  ),
  2673: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code> representing the number of nodes
        in a <strong>perfect binary tree</strong> consisting of nodes numbered
        from <code>1</code> to <code>n</code>. The root of the tree is node{" "}
        <code>1</code> and each node <code>i</code> in the tree has two children
        where the left child is the node <code>2 * i</code> and the right child
        is <code>2 * i + 1</code>.
      </p>

      <p>
        Each node in the tree also has a <strong>cost</strong> represented by a
        given <strong>0-indexed</strong> integer array <code>cost</code> of size{" "}
        <code>n</code> where <code>cost[i]</code> is the cost of node{" "}
        <code>i + 1</code>. You are allowed to <strong>increment</strong> the
        cost of <strong>any</strong> node by <code>1</code> <strong>any</strong>{" "}
        number of times.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of increments you need to make the
          cost of paths from the root to each <strong>leaf</strong> node equal
        </em>
        .
      </p>

      <p>
        <strong>Note</strong>:
      </p>

      <ul>
        <li>
          A <strong>perfect binary tree </strong>is a tree where each node,
          except the leaf nodes, has exactly 2 children.
        </li>
        <li>
          The <strong>cost of a path</strong> is the sum of costs of nodes in
          the path.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/04/04/binaryytreeedrawio-4.png"
      />
      <pre>
        <strong>Input:</strong> n = 7, cost = [1,5,2,2,3,3,1] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> We can do the following increments: <br />
        - Increase the cost of node 4 one time. <br />
        - Increase the cost of node 3 three times. <br />
        - Increase the cost of node 7 two times. <br />
        Each path from the root to a leaf will have a total cost of 9. <br />
        The total increments we did is 1 + 3 + 2 = 6. <br />
        It can be shown that this is the minimum answer we can achieve.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/04/04/binaryytreee2drawio.png"
        style={{ width: 205, height: 151 }}
      />
      <pre>
        <strong>Input:</strong> n = 3, cost = [5,3,3] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The two paths already have equal total
        costs, so no increments are needed.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>n + 1</code> is a power of <code>2</code>
        </li>
        <li>
          <code>cost.length == n</code>
        </li>
        <li>
          <code>
            1 &lt;= cost[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2689: (
    <article role="main" class="blog-post">
      <p>
        You are given the&nbsp;<code>root</code> of a binary tree&nbsp;and an
        integer <code>k</code>. Besides&nbsp;the left and right children, every
        node of this tree has two other properties, a&nbsp;
        <strong>string&nbsp;</strong>
        <code>node.val</code>&nbsp;containing only lowercase English letters
        (possibly empty) and a non-negative integer&nbsp;<code>node.len</code>
        .&nbsp;There are two types of nodes in this tree:
      </p>

      <ul>
        <li>
          <strong>Leaf</strong>: These nodes have no children,{" "}
          <code>node.len = 0</code>, and <code>node.val</code> is some{" "}
          <strong>non-empty</strong> string.
        </li>
        <li>
          <strong>Internal</strong>: These nodes have at least one child (also
          at most two children),&nbsp;<code>node.len&nbsp;&gt; 0</code>
          ,&nbsp;and <code>node.val</code> is an <strong>empty</strong> string.
        </li>
      </ul>

      <p>
        The tree described above is called a <em>Rope</em> binary tree. Now we
        define <code>S[node]</code>&nbsp;recursively as follows:
      </p>

      <ul>
        <li>
          If <code>node</code>&nbsp;is some leaf node,{" "}
          <code>S[node] = node.val</code>,
        </li>
        <li>
          Otherwise if <code>node</code> is some internal node,{" "}
          <code>S[node] = concat(S[node.left], S[node.right])</code>.
        </li>
      </ul>

      <p>
        &nbsp;Return<em> k-th character of the string&nbsp;</em>
        <code>S[root]</code>.
      </p>

      <p>
        <strong>Note:</strong> If <code>s</code> and <code>p</code> are two
        strings, <code>concat(s, p)</code> is a string obtained by concatenating{" "}
        <code>p</code> to&nbsp;<code>s</code>. For example,{" "}
        <code>concat("ab", "zz") = "abzz"</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [10,4,"abcpoe","g","rta"], k = 6 <br />
        <strong>Output:</strong> "b" <br />
        <strong>Explanation:</strong> In the picture below, we put an integer on
        internal nodes that represents node.len, and a string on leaf nodes that
        represents node.val. <br />
        You can see that S[root] = concat(concat("g", "rta"), "abcpoe") =
        "grtaabcpoe". So S[root][5], which represents 6th character&nbsp;of it,
        is equal to "b".
      </pre>

      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2600-2699/2689.Extract%20Kth%20Character%20From%20The%20Rope%20Tree/images/example1.png"
          style={{ width: 300, height: 213, marginLeft: 280, marginRight: 280 }}
        />
      </p>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [12,6,6,"abc","efg","hij","klm"], k = 3
        <br />
        <strong>Output:</strong> "c"
        <br />
        <strong>Explanation:</strong> In the picture below, we put an integer on
        internal nodes that represents node.len, and a string on leaf nodes that
        represents node.val. <br />
        You can see that S[root] = concat(concat("abc", "efg"), concat("hij",
        "klm")) = "abcefghijklm". So S[root][2], which represents the 3rd
        character of it, is equal to "c".
      </pre>

      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2600-2699/2689.Extract%20Kth%20Character%20From%20The%20Rope%20Tree/images/example2.png"
          style={{ width: 400, height: 232, marginLeft: 255, marginRight: 255 }}
        />
      </p>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = ["ropetree"], k = 8<br />
        <strong>Output:</strong> "e"
        <br />
        <strong>Explanation:</strong> In the picture below, we put an integer on
        internal nodes that represents node.len, and a string on leaf nodes that
        represents node.val.
        <br />
        You can see that S[root] = "ropetree". So S[root][7], which represents
        8th character of it, is equal to "e".
      </pre>

      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2600-2699/2689.Extract%20Kth%20Character%20From%20The%20Rope%20Tree/images/example3.png"
          style={{ width: 80, height: 78, marginLeft: 400, marginRight: 400 }}
        />
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>3</sup>]
          </code>
        </li>
        <li>
          <code>node.val</code> contains only lowercase English letters
        </li>
        <li>
          <code>0 &lt;= node.val.length &lt;= 50</code>
        </li>
        <li>
          <code>
            0 &lt;= node.len &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          for leaf nodes, <code>node.len = 0</code> and <code>node.val</code> is
          non-empty
        </li>
        <li>
          for internal nodes, <code>node.len &gt; 0</code> and{" "}
          <code>node.val</code> is empty
        </li>
        <li>
          <code>1 &lt;= k &lt;= S[root].length</code>
        </li>
      </ul>
    </article>
  ),
  2764: (
    <article class="md-content__inner md-typeset">
      <p>
        Given a <strong>0-indexed</strong> integer <strong>2D array</strong>{" "}
        <code>nodes</code>, your task is to determine if the given array
        represents the <strong>preorder</strong> traversal of some{" "}
        <strong>binary</strong> tree.
      </p>

      <p>
        For each index <code>i</code>, <code>nodes[i] = [id, parentId]</code>,
        where <code>id</code> is the id of the node at the index <code>i</code>{" "}
        and <code>parentId</code> is the id of its parent in the tree (if the
        node has no parent, then <code>parentId == -1</code>).
      </p>

      <p>
        Return <code>true</code> <em>if the given array </em>
        <em>represents the preorder traversal of some tree, and</em>{" "}
        <code>false</code> <em>otherwise.</em>
      </p>

      <p>
        <strong>Note:</strong> the <strong>preorder</strong> traversal of a tree
        is a recursive way to traverse a tree in which we first visit the
        current node, then we do the preorder traversal for the left child, and
        finally, we do it for the right child.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2]] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The given nodes make the tree in the
        picture below. <br />
        We can show that this is the preorder traversal of the tree, first we
        visit node 0, then we do the preorder traversal of the right child which
        is [1], then we do the preorder traversal of the left child which is
        [2,3,4].
      </pre>

      <p>
        <a
          class="glightbox"
          href="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2764.Is%20Array%20a%20Preorder%20of%20Some%20%E2%80%8CBinary%20Tree/images/1.png"
          data-type="image"
          data-width="auto"
          data-height="auto"
          data-desc-position="bottom"
        >
          <img
            alt=""
            src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2764.Is%20Array%20a%20Preorder%20of%20Some%20%E2%80%8CBinary%20Tree/images/1.png"
            style={{
              padding: 10,
              background: "#fff",
              borderRadius: "0.5rem",
              width: 250,
              height: 251,
            }}
          />
        </a>
      </p>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1]] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The given nodes make the tree in the
        picture below. <br />
        For the preorder traversal, first we visit node 0, then we do the
        preorder traversal of the right child which is [1,3,4], but we can see
        that in the given order, 2 comes between 1 and 3, so, it's not the
        preorder traversal of the tree.
      </pre>

      <p>
        <a
          class="glightbox"
          href="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2764.Is%20Array%20a%20Preorder%20of%20Some%20%E2%80%8CBinary%20Tree/images/2.png"
          data-type="image"
          data-width="auto"
          data-height="auto"
          data-desc-position="bottom"
        >
          <img
            alt=""
            src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2764.Is%20Array%20a%20Preorder%20of%20Some%20%E2%80%8CBinary%20Tree/images/2.png"
            style={{
              padding: 10,
              background: "#fff",
              borderRadius: "0.5rem",
              width: 250,
              height: 251,
            }}
          />
        </a>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nodes.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>nodes[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= nodes[i][0] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -1 &lt;= nodes[i][1] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          The input is generated such that <code>nodes</code> make a binary
          tree.
        </li>
      </ul>
    </article>
  ),
  2773: (
    <article role="main" class="blog-post">
      <p>
        You are given a <code>root</code>, which is the root of a{" "}
        <strong>special</strong> binary tree with <code>n</code> nodes. The
        nodes of the special binary tree are numbered from <code>1</code> to{" "}
        <code>n</code>. Suppose the tree has <code>k</code> leaves in the
        following order:{" "}
        <code>
          b<sub>1 </sub>&lt;<sub> </sub>b<sub>2 </sub>&lt; ... &lt; b
          <sub>k</sub>
        </code>
        .
      </p>

      <p>
        The leaves of this tree have a <strong>special</strong> property! That
        is, for every leaf{" "}
        <code>
          b<sub>i</sub>
        </code>
        , the following conditions hold:
      </p>

      <ul>
        <li>
          The right child of{" "}
          <code>
            b<sub>i</sub>
          </code>{" "}
          is{" "}
          <code>
            b<sub>i + 1</sub>
          </code>{" "}
          if <code>i &lt; k</code>, and{" "}
          <code>
            b<sub>1</sub>
          </code>{" "}
          otherwise.
        </li>
        <li>
          The left child of{" "}
          <code>
            b<sub>i</sub>
          </code>{" "}
          is{" "}
          <code>
            b<sub>i - 1</sub>
          </code>{" "}
          if <code>i &gt; 1</code>, and{" "}
          <code>
            b<sub>k</sub>
          </code>{" "}
          otherwise.
        </li>
      </ul>

      <p>
        Return<em> the height of the given tree.</em>
      </p>

      <p>
        <strong>Note:</strong> The height of a binary tree is the length of the{" "}
        <strong>longest path</strong> from the root to any other node.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1,2,3,null,null,4,5] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation: </strong>The given tree is shown in the following
        picture. Each leaf's left child is the leaf to its left (shown with the
        blue edges). Each leaf's right child is the leaf to its right (shown
        with the red edges). We can see that the graph has a height of 2.
      </pre>

      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2773.Height%20of%20Special%20Binary%20Tree/images/1.png"
          style={{
            padding: 10,
            background: "rgb(255, 255, 255)",
            borderRadius: "0.5rem",
            width: 200,
            height: 280,
          }}
        />
      </p>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1,2] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation: </strong>The given tree is shown in the following
        picture. There is only one leaf, so it doesn't have any left or right
        child. We can see that the graph has a height of 1.
      </pre>

      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2773.Height%20of%20Special%20Binary%20Tree/images/2.png"
          style={{
            padding: 10,
            background: "rgb(255, 255, 255)",
            borderRadius: "0.5rem",
            width: 95,
            height: 122,
          }}
        />
      </p>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1,2,3,null,null,4,null,5,6] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation: </strong>The given tree is shown in the following
        picture. Each leaf's left child is the leaf to its left (shown with the
        blue edges). Each leaf's right child is the leaf to its right (shown
        with the red edges). We can see that the graph has a height of 3.
      </pre>

      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2773.Height%20of%20Special%20Binary%20Tree/images/3.png"
          style={{
            padding: 10,
            background: "rgb(255, 255, 255)",
            borderRadius: "0.5rem",
            width: 200,
            height: 280,
          }}
        />
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == number of nodes in the tree</code>
        </li>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= node.val &lt;= n</code>
        </li>
        <li>
          The input is generated such that each <code>node.val</code> is unique.
        </li>
      </ul>
    </article>
  ),
  2792: (
    <article role="main" class="blog-post">
      <p>
        You are given a <code>root</code> to a binary tree and an integer{" "}
        <code>k</code>. A node of this tree is called{" "}
        <strong>great enough</strong> if the followings hold:
      </p>

      <ul>
        <li>
          Its subtree has <strong>at least</strong> <code>k</code> nodes.
        </li>
        <li>
          Its value is <b>greater</b> than the value of{" "}
          <strong>at least</strong> <code>k</code> nodes in its subtree.
        </li>
      </ul>

      <p>
        Return<em> the number of nodes in this tree that are great enough.</em>
      </p>

      <p>
        The node <code>u</code> is in the <strong>subtree</strong> of the
        node&nbsp;<code>v</code>, if{" "}
        <code>
          <font face="monospace">u == v</font>
        </code>
        &nbsp;or&nbsp;<code>v</code>&nbsp;is an&nbsp;ancestor of <code>u</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [7,6,5,4,3,2,1], k = 2 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Number the nodes from 1 to 7. <br />
        The values in the subtree of node 1: {(1, 2, 3, 4, 5, 6, 7)}. Since
        node.val == 7, there are 6 nodes having a smaller value than its value.
        So it's great enough.
        <br />
        The values in the subtree of node 2: {(3, 4, 6)}. Since node.val == 6,
        there are 2 nodes having a smaller value than its value. So it's great
        enough.
        <br />
        The values in the subtree of node 3: {(1, 2, 5)}. Since node.val == 5,
        there are 2 nodes having a smaller value than its value. So it's great
        enough.
        <br />
        It can be shown that other nodes are not great enough.
        <br />
        See the picture below for a better understanding.
      </pre>

      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2792.Count%20Nodes%20That%20Are%20Great%20Enough/images/1.png"
          style={{
            padding: 10,
            background: "rgb(255, 255, 255)",
            borderRadius: "0.5rem",
            width: 300,
            height: 167,
          }}
        />
      </p>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1,2,3], k = 1<br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation: </strong>Number the nodes from 1 to 3.
        <br />
        The values in the subtree of node 1: {(1, 2, 3)}. Since node.val == 1,
        there are no nodes having a smaller value than its value. So it's not
        great enough.
        <br />
        The values in the subtree of node 2: {2}. Since node.val == 2, there are
        no nodes having a smaller value than its value. So it's not great
        enough.
        <br />
        The values in the subtree of node 3: {3}. Since node.val == 3, there are
        no nodes having a smaller value than its value. So it's not great
        enough.
        <br />
        See the picture below for a better understanding.
      </pre>

      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2792.Count%20Nodes%20That%20Are%20Great%20Enough/images/2.png"
          style={{
            padding: 10,
            background: "rgb(255, 255, 255)",
            borderRadius: "0.5rem",
            width: 123,
            height: 101,
          }}
        />
      </p>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [3,2,2], k = 2<br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation: </strong>Number the nodes from 1 to 3.
        <br />
        The values in the subtree of node 1: {(2, 2, 3)}. Since node.val == 3,
        there are 2 nodes having a smaller value than its value. So it's great
        enough.
        <br />
        The values in the subtree of node 2: {2}. Since node.val == 2, there are
        no nodes having a smaller value than its value. So it's not great
        enough.
        <br />
        The values in the subtree of node 3: {2}. Since node.val == 2, there are
        no nodes having a smaller value than its value. So it's not great
        enough.
        <br />
        See the picture below for a better understanding.
      </pre>

      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2792.Count%20Nodes%20That%20Are%20Great%20Enough/images/3.png"
          style={{
            padding: 10,
            background: "rgb(255, 255, 255)",
            borderRadius: "0.5rem",
            width: 123,
            height: 101,
          }}
        />
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range&nbsp;
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= 10</code>
        </li>
      </ul>
    </article>
  ),
  10: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>,
        implement regular expression matching with support for <code>'.'</code>{" "}
        and <code>'*'</code> where:
      </p>

      <ul>
        <li>
          <code>'.'</code> Matches any single character.​​​​
        </li>
        <li>
          <code>'*'</code> Matches zero or more of the preceding element.
        </li>
      </ul>

      <p>
        The matching should cover the <strong>entire</strong> input string (not
        partial).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aa", p = "a" <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> "a" does not match the entire string "aa".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aa", p = "a*" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> '*' means zero or more of the preceding
        element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "ab", p = ".*" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> ".*" means "zero or more (*) of any
        character (.)".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length&nbsp;&lt;= 20</code>
        </li>
        <li>
          <code>1 &lt;= p.length&nbsp;&lt;= 20</code>
        </li>
        <li>
          <code>s</code> contains only lowercase English letters.
        </li>
        <li>
          <code>p</code> contains only lowercase English letters,{" "}
          <code>'.'</code>, and&nbsp;<code>'*'</code>.
        </li>
        <li>
          It is guaranteed for each appearance of the character <code>'*'</code>
          , there will be a previous valid character to match.
        </li>
      </ul>
    </div>
  ),
  22: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given <code>n</code> pairs of parentheses, write a function to{" "}
        <em>generate all combinations of well-formed parentheses</em>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>
          Output:
        </strong> ["((()))","(()())","(())()","()(())","()()()"] <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> ["()"]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= n &lt;= 8</code>
        </li>
      </ul>
    </div>
  ),
  44: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an input string (<code>s</code>) and a pattern (<code>p</code>),
        implement wildcard pattern matching with support for <code>'?'</code>{" "}
        and <code>'*'</code> where:
      </p>

      <ul>
        <li>
          <code>'?'</code> Matches any single character.
        </li>
        <li>
          <code>'*'</code> Matches any sequence of characters (including the
          empty sequence).
        </li>
      </ul>

      <p>
        The matching should cover the <strong>entire</strong> input string (not
        partial).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aa", p = "a" <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> "a" does not match the entire string "aa".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aa", p = "*" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong>&nbsp;'*' matches any sequence.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "cb", p = "?a" <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong>&nbsp;'?' matches 'c', but the second
        letter is 'a', which does not match 'b'.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= s.length, p.length &lt;= 2000</code>
        </li>
        <li>
          <code>s</code> contains only lowercase English letters.
        </li>
        <li>
          <code>p</code> contains only lowercase English letters,{" "}
          <code>'?'</code> or <code>'*'</code>.
        </li>
      </ul>
    </div>
  ),
  45: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array of integers{" "}
        <code>nums</code> of length <code>n</code>. You are initially positioned
        at <code>nums[0]</code>.
      </p>

      <p>
        Each element <code>nums[i]</code> represents the maximum length of a
        forward jump from index <code>i</code>. In other words, if you are at{" "}
        <code>nums[i]</code>, you can jump to any <code>nums[i + j]</code>{" "}
        where:
      </p>

      <ul>
        <li>
          <code>0 &lt;= j &lt;= nums[i]</code> and
        </li>
        <li>
          <code>i + j &lt; n</code>
        </li>
      </ul>

      <p>
        Return <em>the minimum number of jumps to reach </em>
        <code>nums[n - 1]</code>. The test cases are generated such that you can
        reach <code>nums[n - 1]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,1,1,4] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The minimum number of jumps to reach the
        last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last
        index.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,0,1,4] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 1000</code>
        </li>
        <li>
          It's guaranteed that you can reach <code>nums[n - 1]</code>.
        </li>
      </ul>
    </div>
  ),
  53: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, find the{" "}
        <span
          data-keyword="subarray-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rk7:"
              >
                <div>subarray</div>
              </div>
            </div>
          </div>
        </span>{" "}
        with the largest sum, and return <em>its sum</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The subarray [4,-1,2,1] has the largest
        sum 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The subarray [1] has the largest sum 1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,4,-1,7,8] <br />
        <strong>Output:</strong> 23 <br />
        <strong>Explanation:</strong> The subarray [5,4,-1,7,8] has the largest
        sum 23.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> If you have figured out the{" "}
        <code>O(n)</code> solution, try coding another solution using the{" "}
        <strong>divide and conquer</strong> approach, which is more subtle.
      </p>
    </div>
  ),
  55: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>. You are initially
        positioned at the array's <strong>first index</strong>, and each element
        in the array represents your maximum jump length at that position.
      </p>

      <p>
        Return <code>true</code>
        <em> if you can reach the last index, or </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,1,1,4] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Jump 1 step from index 0 to 1, then 3
        steps to the last index.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,2,1,0,4] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> You will always arrive at index 3 no
        matter what. Its maximum jump length is 0, which makes it impossible to
        reach the last index.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  62: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a robot on an <code>m x n</code> grid. The robot is initially
        located at the <strong>top-left corner</strong> (i.e.,{" "}
        <code>grid[0][0]</code>). The robot tries to move to the{" "}
        <strong>bottom-right corner</strong> (i.e.,{" "}
        <code>grid[m - 1][n - 1]</code>). The robot can only move either down or
        right at any point in time.
      </p>

      <p>
        Given the two integers <code>m</code> and <code>n</code>, return{" "}
        <em>
          the number of possible unique paths that the robot can take to reach
          the bottom-right corner
        </em>
        .
      </p>

      <p>
        The test cases are generated so that the answer will be less than or
        equal to{" "}
        <code>
          2 * 10<sup>9</sup>
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png"
        style={{ width: 400, height: 183 }}
      />
      <pre>
        <strong>Input:</strong> m = 3, n = 7 <br />
        <strong>Output:</strong> 28
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> m = 3, n = 2 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> From the top-left corner, there are a
        total of 3 ways to reach the bottom-right corner: <br />
        1. Right -&gt; Down -&gt; Down <br />
        2. Down -&gt; Down -&gt; Right <br />
        3. Down -&gt; Right -&gt; Down
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  63: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>m x n</code> integer array <code>grid</code>.
        There is a robot initially located at the <b>top-left corner</b> (i.e.,{" "}
        <code>grid[0][0]</code>). The robot tries to move to the{" "}
        <strong>bottom-right corner</strong> (i.e.,{" "}
        <code>grid[m - 1][n - 1]</code>). The robot can only move either down or
        right at any point in time.
      </p>

      <p>
        An obstacle and space are marked as <code>1</code> or <code>0</code>{" "}
        respectively in <code>grid</code>. A path that the robot takes cannot
        include <strong>any</strong> square that is an obstacle.
      </p>

      <p>
        Return{" "}
        <em>
          the number of possible unique paths that the robot can take to reach
          the bottom-right corner
        </em>
        .
      </p>

      <p>
        The testcases are generated so that the answer will be less than or
        equal to{" "}
        <code>
          2 * 10<sup>9</sup>
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg"
        style={{ width: 242, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> There is one obstacle in the middle of the
        3x3 grid above. <br />
        There are two ways to reach the bottom-right corner: <br />
        1. Right -&gt; Right -&gt; Down -&gt; Down <br />
        2. Down -&gt; Down -&gt; Right -&gt; Right
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg"
        style={{ width: 162, height: 162 }}
      />
      <pre>
        <strong>Input:</strong> obstacleGrid = [[0,1],[0,0]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == obstacleGrid.length</code>
        </li>
        <li>
          <code>n == obstacleGrid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
        <li>
          <code>obstacleGrid[i][j]</code> is <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  64: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <code>m x n</code> <code>grid</code> filled with non-negative
        numbers, find a path from top left to bottom right, which minimizes the
        sum of all numbers along its path.
      </p>

      <p>
        <strong>Note:</strong> You can only move either down or right at any
        point in time.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg"
        style={{ width: 242, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[1,3,1],[1,5,1],[4,2,1]] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> Because the path 1 → 3 → 1 → 1 → 1
        minimizes the sum.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[1,2,3],[4,5,6]] <br />
        <strong>Output:</strong> 12
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 200</code>
        </li>
        <li>
          <code>0 &lt;= grid[i][j] &lt;= 200</code>
        </li>
      </ul>
    </div>
  ),
  70: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are climbing a staircase. It takes <code>n</code> steps to reach the
        top.
      </p>

      <p>
        Each time you can either climb <code>1</code> or <code>2</code> steps.
        In how many distinct ways can you climb to the top?
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> There are two ways to climb to the top.{" "}
        <br />
        1. 1 step + 1 step <br />
        2. 2 steps
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> There are three ways to climb to the top.{" "}
        <br />
        1. 1 step + 1 step + 1 step <br />
        2. 1 step + 2 steps <br />
        3. 2 steps + 1 step
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 45</code>
        </li>
      </ul>
    </div>
  ),
  72: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>word1</code> and <code>word2</code>, return{" "}
        <em>
          the minimum number of operations required to convert{" "}
          <code>word1</code> to <code>word2</code>
        </em>
        .
      </p>

      <p>You have the following three operations permitted on a word:</p>

      <ul>
        <li>Insert a character</li>
        <li>Delete a character</li>
        <li>Replace a character</li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = "horse", word2 = "ros" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> <br />
        horse -&gt; rorse (replace 'h' with 'r') <br />
        rorse -&gt; rose (remove 'r') <br />
        rose -&gt; ros (remove 'e')
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = "intention", word2 = "execution" <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> <br />
        intention -&gt; inention (remove 't') <br />
        inention -&gt; enention (replace 'i' with 'e') <br />
        enention -&gt; exention (replace 'n' with 'x') <br />
        exention -&gt; exection (replace 'n' with 'c') <br />
        exection -&gt; execution (insert 'u')
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= word1.length, word2.length &lt;= 500</code>
        </li>
        <li>
          <code>word1</code> and <code>word2</code> consist of lowercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  87: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        We can scramble a string s to get a string t using the following
        algorithm:
      </p>

      <ul>
        <li>If the length of the string is 1, stop.</li>
        <li>
          If the length of the string is &gt; 1, do the following:
          <ul>
            <li>
              Split the string into two non-empty substrings at a random index,
              i.e., if the string is <code>s</code>, divide it to <code>x</code>{" "}
              and <code>y</code> where <code>s = x + y</code>.
            </li>
            <li>
              <strong>Randomly</strong>&nbsp;decide to swap the two substrings
              or to keep them in the same order. i.e., after this step,{" "}
              <code>s</code> may become <code>s = x + y</code> or{" "}
              <code>s = y + x</code>.
            </li>
            <li>
              Apply step 1 recursively on each of the two substrings{" "}
              <code>x</code> and <code>y</code>.
            </li>
          </ul>
        </li>
      </ul>

      <p>
        Given two strings <code>s1</code> and <code>s2</code> of{" "}
        <strong>the same length</strong>, return <code>true</code> if{" "}
        <code>s2</code> is a scrambled string of <code>s1</code>, otherwise,
        return <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "great", s2 = "rgeat" <br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong> One possible scenario applied on s1 is:
        <br />
        "great" --&gt; "gr/eat" // divide at random index.
        <br />
        "gr/eat" --&gt; "gr/eat" // random decision is not to swap the two
        substrings and keep them in order.
        <br />
        "gr/eat" --&gt; "g/r / e/at" // apply the same algorithm recursively on
        both substrings. divide at random index each of them.
        <br />
        "g/r / e/at" --&gt; "r/g / e/at" // random decision was to swap the
        first substring and to keep the second substring in the same order.
        <br />
        "r/g / e/at" --&gt; "r/g / e/ a/t" // again apply the algorithm
        recursively, divide "at" to "a/t".
        <br />
        "r/g / e/ a/t" --&gt; "r/g / e/ a/t" // random decision is to keep both
        substrings in the same order.
        <br />
        The algorithm stops now, and the result string is "rgeat" which is s2.
        <br />
        As one possible scenario led s1 to be scrambled to s2, we return true.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "abcde", s2 = "caebd" <br />
        <strong>Output:</strong> false
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "a", s2 = "a" <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>s1.length == s2.length</code>
        </li>
        <li>
          <code>1 &lt;= s1.length &lt;= 30</code>
        </li>
        <li>
          <code>s1</code> and <code>s2</code> consist of lowercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  91: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have intercepted a secret message encoded as a string of numbers.
        The message is <strong>decoded</strong> via the following mapping:
      </p>

      <p>
        <code>
          "1" -&gt; 'A'
          <br />
          "2" -&gt; 'B'
          <br />
          ...
          <br />
          "25" -&gt; 'Y'
          <br />
          "26" -&gt; 'Z'
        </code>
      </p>

      <p>
        However, while decoding the message, you realize that there are many
        different ways you can decode the message because some codes are
        contained in other codes (<code>"2"</code> and <code>"5"</code> vs{" "}
        <code>"25"</code>).
      </p>

      <p>
        For example, <code>"11106"</code> can be decoded into:
      </p>

      <ul>
        <li>
          <code>"AAJF"</code> with the grouping <code>(1, 1, 10, 6)</code>
        </li>
        <li>
          <code>"KJF"</code> with the grouping <code>(11, 10, 6)</code>
        </li>
        <li>
          The grouping <code>(1, 11, 06)</code> is invalid because{" "}
          <code>"06"</code> is not a valid code (only <code>"6"</code> is
          valid).
        </li>
      </ul>

      <p>
        Note: there may be strings that are impossible to decode.
        <br />
        <br />
        Given a string s containing only digits, return the{" "}
        <strong>number of ways</strong> to <strong>decode</strong> it. If the
        entire string cannot be decoded in any valid way, return <code>0</code>.
      </p>

      <p>
        The test cases are generated so that the answer fits in a{" "}
        <strong>32-bit</strong> integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "12"</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>"12" could be decoded as "AB" (1 2) or "L" (12).</p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "226"</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>
          "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "06"</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>
          "06" cannot be mapped to "F" because of the leading zero ("6" is
          different from "06"). In this case, the string is not a valid
          encoding, so return 0.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code> contains only digits and may contain leading zero(s).
        </li>
      </ul>
    </div>
  ),
  97: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given strings <code>s1</code>, <code>s2</code>, and <code>s3</code>,
        find whether <code>s3</code> is formed by an{" "}
        <strong>interleaving</strong> of <code>s1</code> and <code>s2</code>.
      </p>

      <p>
        An <strong>interleaving</strong> of two strings <code>s</code> and{" "}
        <code>t</code> is a configuration where <code>s</code> and{" "}
        <code>t</code> are divided into <code>n</code> and <code>m</code>{" "}
        <span
          data-keyword="substring-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r1eu:"
              >
                <div>substrings</div>
              </div>
            </div>
          </div>
        </span>{" "}
        respectively, such that:
      </p>

      <ul>
        <li>
          <code>
            s = s<sub>1</sub> + s<sub>2</sub> + ... + s<sub>n</sub>
          </code>
        </li>
        <li>
          <code>
            t = t<sub>1</sub> + t<sub>2</sub> + ... + t<sub>m</sub>
          </code>
        </li>
        <li>
          <code>|n - m| &lt;= 1</code>
        </li>
        <li>
          The <strong>interleaving</strong> is{" "}
          <code>
            s<sub>1</sub> + t<sub>1</sub> + s<sub>2</sub> + t<sub>2</sub> + s
            <sub>3</sub> + t<sub>3</sub> + ...
          </code>{" "}
          or{" "}
          <code>
            t<sub>1</sub> + s<sub>1</sub> + t<sub>2</sub> + s<sub>2</sub> + t
            <sub>3</sub> + s<sub>3</sub> + ...
          </code>
        </li>
      </ul>

      <p>
        <strong>Note:</strong> <code>a + b</code> is the concatenation of
        strings <code>a</code> and <code>b</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg"
        style={{ width: 561, height: 203 }}
      />
      <pre>
        <strong>Input:</strong> s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"{" "}
        <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> One way to obtain s3 is: <br />
        Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".{" "}
        <br />
        Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" =
        "aadbbcbcac". <br />
        Since s3 can be obtained by interleaving s1 and s2, we return true.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"{" "}
        <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Notice how it is impossible to interleave
        s2 with any other string to obtain s3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "", s2 = "", s3 = "" <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= s1.length, s2.length &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= s3.length &lt;= 200</code>
        </li>
        <li>
          <code>s1</code>, <code>s2</code>, and <code>s3</code> consist of
          lowercase English letters.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you solve it using only{" "}
        <code>O(s2.length)</code> additional memory space?
      </p>
    </div>
  ),
  115: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings s and t, return <i>the number of distinct</i>{" "}
        <b>
          <i>subsequences</i>
        </b>
        <i> of </i>s<i> which equals </i>t.
      </p>

      <p>
        The test cases are generated so that the answer fits on a 32-bit signed
        integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "rabbbit", t = "rabbit" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> <br />
        As shown below, there are 3 ways you can generate "rabbit" from s.{" "}
        <br />
        <code>
          <strong>
            <u>rabb</u>
          </strong>
          b
          <strong>
            <u>it</u>
          </strong>
        </code>{" "}
        <br />
        <code>
          <strong>
            <u>ra</u>
          </strong>
          b
          <strong>
            <u>bbit</u>
          </strong>
        </code>
        <br />
        <code>
          <strong>
            <u>rab</u>
          </strong>
          b
          <strong>
            <u>bit</u>
          </strong>
        </code>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "babgbag", t = "bag"
        <br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation:</strong>
        <br />
        As shown below, there are 5 ways you can generate "bag" from s.
        <br />
        <code>
          <strong>
            <u>ba</u>
          </strong>
          b
          <u>
            <strong>g</strong>
          </u>
          bag
        </code>
        <br />
        <code>
          <strong>
            <u>ba</u>
          </strong>
          bgba
          <strong>
            <u>g</u>
          </strong>
        </code>
        <br />
        <code>
          <u>
            <strong>b</strong>
          </u>
          abgb
          <strong>
            <u>ag</u>
          </strong>
        </code>
        <br />
        <code>
          ba
          <u>
            <strong>b</strong>
          </u>
          gb
          <u>
            <strong>ag</strong>
          </u>
        </code>
        <br />
        <code>
          babg
          <strong>
            <u>bag</u>
          </strong>
        </code>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length, t.length &lt;= 1000</code>
        </li>
        <li>
          <code>s</code> and <code>t</code> consist of English letters.
        </li>
      </ul>
    </div>
  ),
  118: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>numRows</code>, return the first numRows of{" "}
        <strong>Pascal's triangle</strong>.
      </p>

      <p>
        In <strong>Pascal's triangle</strong>, each number is the sum of the two
        numbers directly above it as shown:
      </p>
      <img
        alt=""
        src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif"
        style={{ height: 240, width: 260 }}
      />
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> numRows = 5 <br />
        <strong>Output:</strong> [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]{" "}
        <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> numRows = 1 <br />
        <strong>Output:</strong> [[1]]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= numRows &lt;= 30</code>
        </li>
      </ul>
    </div>
  ),
  119: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>rowIndex</code>, return the{" "}
        <code>
          rowIndex<sup>th</sup>
        </code>{" "}
        (<strong>0-indexed</strong>) row of the{" "}
        <strong>Pascal's triangle</strong>.
      </p>
      <p>
        In <strong>Pascal's triangle</strong>, each number is the sum of the two
        numbers directly above it as shown:
      </p>
      <img
        alt=""
        src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif"
        style={{ height: 240, width: 260 }}
      />
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> rowIndex = 3 <br />
        <strong>Output:</strong> [1,3,3,1] <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> rowIndex = 0 <br />
        <strong>Output:</strong> [1] <br />
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> rowIndex = 1 <br />
        <strong>Output:</strong> [1,1]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>0 &lt;= rowIndex &lt;= 33</code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you optimize your algorithm to use
        only <code>O(rowIndex)</code> extra space?
      </p>
    </div>
  ),
  120: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <code>triangle</code> array, return{" "}
        <em>the minimum path sum from top to bottom</em>.
      </p>
      <p>
        For each step, you may move to an adjacent number of the row below. More
        formally, if you are on index <code>i</code> on the current row, you may
        move to either index <code>i</code> or index <code>i + 1</code> on the
        next row.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> triangle = [[2],[3,4],[6,5,7],[4,1,8,3]] <br />
        <strong>Output:</strong> 11 <br />
        <strong>Explanation:</strong> The triangle looks like: <br />
        <u>2</u> <br />
        <u>3</u> 4 <br />6 <u>5</u> 7 <br />4 <u>1</u> 8 3 <br />
        The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11
        (underlined above).
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> triangle = [[-10]] <br />
        <strong>Output:</strong> -10
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= triangle.length &lt;= 200</code>
        </li>
        <li>
          <code>triangle[0].length == 1</code>
        </li>
        <li>
          <code>triangle[i].length == triangle[i - 1].length + 1</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= triangle[i][j] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you&nbsp;do this using only{" "}
      <code>O(n)</code> extra space, where <code>n</code> is the total number of
      rows in the triangle?
    </div>
  ),
  121: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>prices</code> where <code>prices[i]</code>{" "}
        is the price of a given stock on the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        day.
      </p>

      <p>
        You want to maximize your profit by choosing a{" "}
        <strong>single day</strong> to buy one stock and choosing a{" "}
        <strong>different day in the future</strong> to sell that stock.
      </p>

      <p>
        Return <em>the maximum profit you can achieve from this transaction</em>
        . If you cannot achieve any profit, return <code>0</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [7,1,5,3,6,4] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> Buy on day 2 (price = 1) and sell on day 5
        (price = 6), profit = 6-1 = 5. <br />
        Note that buying on day 2 and selling on day 1 is not allowed because
        you must buy before you sell.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [7,6,4,3,1] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> In this case, no transactions are done and
        the max profit = 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= prices.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= prices[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  122: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>prices</code> where{" "}
        <code>prices[i]</code> is the price of a given stock on the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        day.
      </p>

      <p>
        On each day, you may decide to buy and/or sell the stock. You can only
        hold <strong>at most one</strong> share of the stock at any time.
        However, you can buy it then immediately sell it on the{" "}
        <strong>same day</strong>.
      </p>

      <p>
        Find and return{" "}
        <em>
          the <strong>maximum</strong> profit you can achieve
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [7,1,5,3,6,4]
        <br />
        <strong>Output:</strong> 7<br />
        <strong>Explanation:</strong> Buy on day 2 (price = 1) and sell on day 3
        (price = 5), profit = 5-1 = 4. <br />
        Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit =
        6-3 = 3. <br />
        Total profit is 4 + 3 = 7.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [1,2,3,4,5] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> Buy on day 1 (price = 1) and sell on day 5
        (price = 5), profit = 5-1 = 4.
        <br />
        Total profit is 4.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [7,6,4,3,1]
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> There is no way to make a positive profit,
        so we never buy the stock to achieve the maximum profit of 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= prices.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= prices[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  123: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>prices</code> where <code>prices[i]</code>{" "}
        is the price of a given stock on the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        day.
      </p>

      <p>
        Find the maximum profit you can achieve. You may complete{" "}
        <strong>at most two transactions</strong>.
      </p>

      <p>
        <strong>Note:</strong> You may not engage in multiple transactions
        simultaneously (i.e., you must sell the stock before you buy again).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [3,3,5,0,0,3,1,4]
        <br />
        <strong>Output:</strong> 6<br />
        <strong>Explanation:</strong> Buy on day 4 (price = 0) and sell on day 6
        (price = 3), profit = 3-0 = 3. <br />
        Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit =
        4-1 = 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [1,2,3,4,5] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> Buy on day 1 (price = 1) and sell on day 5
        (price = 5), profit = 5-1 = 4. <br />
        Note that you cannot buy on day 1, buy on day 2 and sell them later, as
        you are engaging multiple transactions at the same time. You must sell
        before buying again.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [7,6,4,3,1]
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> In this case, no transaction is done, i.e.
        max profit = 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= prices.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= prices[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  139: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> and a dictionary of strings{" "}
        <code>wordDict</code>, return <code>true</code> if <code>s</code> can be
        segmented into a space-separated sequence of one or more dictionary
        words.
      </p>

      <p>
        <strong>Note</strong> that the same word in the dictionary may be reused
        multiple times in the segmentation.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "leetcode", wordDict = ["leet","code"]{" "}
        <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Return true because "leetcode" can be
        segmented as "leet code".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "applepenapple", wordDict = ["apple","pen"]{" "}
        <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Return true because "applepenapple" can be
        segmented as "apple pen apple". <br />
        Note that you are allowed to reuse a dictionary word.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "catsandog", wordDict =
        ["cats","dog","sand","and","cat"] <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 300</code>
        </li>
        <li>
          <code>1 &lt;= wordDict.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= wordDict[i].length &lt;= 20</code>
        </li>
        <li>
          <code>s</code> and <code>wordDict[i]</code> consist of only lowercase
          English letters.
        </li>
        <li>
          All the strings of <code>wordDict</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  152: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, find a{" "}
        <span
          data-keyword="subarray-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r1rl:"
              >
                <div>subarray</div>
              </div>
            </div>
          </div>
        </span>{" "}
        that has the largest product, and return <em>the product</em>.
      </p>

      <p>
        The test cases are generated so that the answer will fit in a{" "}
        <strong>32-bit</strong> integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,-2,4] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> [2,3] has the largest product 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-2,0,-1] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The result cannot be 2, because [-2,-1] is
        not a subarray.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>-10 &lt;= nums[i] &lt;= 10</code>
        </li>
        <li>
          The product of any subarray of <code>nums</code> is{" "}
          <strong>guaranteed</strong> to fit in a <strong>32-bit</strong>{" "}
          integer.
        </li>
      </ul>
    </div>
  ),
  188: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>prices</code> where{" "}
        <code>prices[i]</code> is the price of a given stock on the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        day, and an integer <code>k</code>.
      </p>

      <p>
        Find the maximum profit you can achieve. You may complete at most{" "}
        <code>k</code> transactions: i.e. you may buy at most <code>k</code>{" "}
        times and sell at most <code>k</code> times.
      </p>

      <p>
        <strong>Note:</strong> You may not engage in multiple transactions
        simultaneously (i.e., you must sell the stock before you buy again).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> k = 2, prices = [2,4,1] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> Buy on day 1 (price = 2) and sell on day 2
        (price = 4), profit = 4-2 = 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> k = 2, prices = [3,2,6,5,0,3] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> Buy on day 2 (price = 2) and sell on day 3
        (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on
        day 6 (price = 3), profit = 3-0 = 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= prices.length &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= prices[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  198: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are a professional robber planning to rob houses along a street.
        Each house has a certain amount of money stashed, the only constraint
        stopping you from robbing each of them is that adjacent houses have
        security systems connected and{" "}
        <b>
          it will automatically contact the police if two adjacent houses were
          broken into on the same night
        </b>
        .
      </p>

      <p>
        Given an integer array <code>nums</code> representing the amount of
        money of each house, return{" "}
        <em>
          the maximum amount of money you can rob tonight{" "}
          <b>without alerting the police</b>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,1] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house
        3 (money = 3). <br />
        Total amount you can rob = 1 + 3 = 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,7,9,3,1] <br />
        <strong>Output:</strong> 12 <br />
        <strong>Explanation:</strong> Rob house 1 (money = 2), rob house 3
        (money = 9) and rob house 5 (money = 1). <br />
        Total amount you can rob = 2 + 9 + 1 = 12.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 400</code>
        </li>
      </ul>
    </div>
  ),
  213: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are a professional robber planning to rob houses along a street.
        Each house has a certain amount of money stashed. All houses at this
        place are <strong>arranged in a circle.</strong> That means the first
        house is the neighbor of the last one. Meanwhile, adjacent houses have a
        security system connected, and&nbsp;
        <b>
          it will automatically contact the police if two adjacent houses were
          broken into on the same night
        </b>
        .
      </p>

      <p>
        Given an integer array <code>nums</code> representing the amount of
        money of each house, return{" "}
        <em>
          the maximum amount of money you can rob tonight{" "}
          <strong>without alerting the police</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,2] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> You cannot rob house 1 (money = 2) and
        then rob house 3 (money = 2), because they are adjacent houses.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,1] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house
        3 (money = 3). <br />
        Total amount you can rob = 1 + 3 = 4.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> 3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  221: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> binary <code>matrix</code> filled with{" "}
        <code>0</code>'s and <code>1</code>'s,{" "}
        <em>find the largest square containing only</em> <code>1</code>'s{" "}
        <em>and return its area</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg"
        style={{ width: 400, height: 319 }}
      />
      <pre>
        <strong>Input:</strong> matrix =
        [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]{" "}
        <br />
        <strong>Output:</strong> 4
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg"
        style={{ width: 165, height: 165 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [["0","1"],["1","0"]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [["0"]] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == matrix.length</code>
        </li>
        <li>
          <code>n == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 300</code>
        </li>
        <li>
          <code>matrix[i][j]</code> is <code>'0'</code> or <code>'1'</code>.
        </li>
      </ul>
    </div>
  ),
  233: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, count{" "}
        <em>the total number of digit </em>
        <code>1</code>
        <em>
          {" "}
          appearing in all non-negative integers less than or equal to
        </em>{" "}
        <code>n</code>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 13 <br />
        <strong>Output:</strong> 6
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 0 <br />
        <strong>Output:</strong> 0
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            0 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  256: (
    <div class="markdown-body div-width">
      <p>
        There are a row of <i>n</i> houses, each house can be painted with one
        of the three colors: red, blue or green. The cost of painting each house
        with a certain color is different. You have to paint all the houses such
        that no two adjacent houses have the same color.
      </p>

      <p>
        The cost of painting each house with a certain color is represented by a{" "}
        <code>
          <i>n</i> x <i>3</i>
        </code>
        cost matrix. For example, <code>costs[0][0]</code> is the cost of
        painting house 0 with color red; <code>costs[1][2]</code> is the cost of
        painting house 1 with color green, and so on... Find the minimum cost to
        paint all houses.
      </p>

      <p>
        <b>Note:</b>
        <br />
        All costs are positive integers.
      </p>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input:</strong> [[17,2,17],[16,16,5],[14,3,19]] <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation: </strong>Paint house 0 into blue, paint house 1
        into green, paint house 2 into blue. <br />
        &nbsp; Minimum cost: 2 + 5 + 3 = 10.
      </pre>
    </div>
  ),
  264: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        An <strong>ugly number</strong> is a positive integer whose prime
        factors are limited to <code>2</code>, <code>3</code>, and{" "}
        <code>5</code>.
      </p>

      <p>
        Given an integer <code>n</code>, return <em>the</em>{" "}
        <code>
          n<sup>th</sup>
        </code>{" "}
        <em>
          <strong>ugly number</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 10 <br />
        <strong>Output:</strong> 12 <br />
        <strong>Explanation:</strong> [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the
        sequence of the first 10 ugly numbers.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> 1 has no prime factors, therefore all of
        its prime factors are limited to 2, 3, and 5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 1690</code>
        </li>
      </ul>
    </div>
  ),
  265: (
    <div class="markdown-body div-width">
      <p>
        There are a row of <i>n</i> houses, each house can be painted with one
        of the <i>k</i>
        colors. The cost of paint all the houses such that no two adjacent
        houses have the same color.
      </p>

      <p>
        The cost of painting each house with a certain color is represented by a{" "}
        <code>
          <i>n</i> x <i>k</i>
        </code>
        cost matrix. For example, <code>costs[0][0]</code> is the cost of
        painting house 0 with color 0; <code>costs[1][2]</code> is the cost of
        painting house 1 with color 2, and so on... Find the minimum cost to
        paint all houses.
      </p>

      <p>
        <b>Note:</b>
        <br />
        All costs are positive integers.
      </p>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input:</strong> [[1,5,3],[2,9,4]] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation: </strong>Paint house 0 into color 0, paint house 1
        into color 2. Minimum cost: 1 + 4 = 5; <br />
        &nbsp; Or paint house 0 into color 2, paint house 1 into color 0.
        Minimum cost: 3 + 2 = 5.
      </pre>

      <p>
        <b>Follow up:</b>
        <br />
        Could you solve it in <i>O</i>(<i>nk</i>) runtime?
      </p>
    </div>
  ),
  276: (
    <article role="main" class="blog-post">
      <p>
        You are painting a fence of <code>n</code> posts with <code>k</code>{" "}
        different colors. You must paint the posts following these rules:
      </p>

      <ul>
        <li>
          Every post must be painted <strong>exactly one</strong> color.
        </li>
        <li>
          There <strong>cannot</strong> be three or more{" "}
          <strong>consecutive</strong> posts with the same color.
        </li>
      </ul>

      <p>
        Given the two integers <code>n</code> and <code>k</code>, return{" "}
        <em>
          the <strong>number of ways</strong> you can paint the fence
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0200-0299/0276.Paint%20Fence/images/paintfenceex1.png"
          style={{ width: 507, height: 313 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> n = 3, k = 2 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation: </strong>All the possibilities are shown.
        <br />
        Note that painting all the posts red or all the posts green is invalid
        because there cannot be three posts in a row with the same color.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1, k = 1<br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 7, k = 2<br />
        <strong>Output:</strong> 42
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 50</code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          The testcases are generated such that the answer is in the range{" "}
          <code>
            [0, 2<sup>31</sup> - 1]
          </code>{" "}
          for the given <code>n</code> and <code>k</code>.
        </li>
      </ul>
    </article>
  ),
  279: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return{" "}
        <em>the least number of perfect square numbers that sum to</em>{" "}
        <code>n</code>.
      </p>

      <p>
        A <strong>perfect square</strong> is an integer that is the square of an
        integer; in other words, it is the product of some integer with itself.
        For example, <code>1</code>, <code>4</code>, <code>9</code>, and{" "}
        <code>16</code> are perfect squares while <code>3</code> and{" "}
        <code>11</code> are not.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 12 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> 12 = 4 + 4 + 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 13 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> 13 = 4 + 9.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  300: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return{" "}
        <em>
          the length of the longest <strong>strictly increasing </strong>
        </em>
        <span
          data-keyword="subsequence-array"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r6a:"
              >
                <div>
                  <em>
                    <strong>subsequence</strong>
                  </em>
                </div>
              </div>
            </div>
          </div>
        </span>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [10,9,2,5,3,7,101,18] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The longest increasing subsequence is
        [2,3,7,101], therefore the length is 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1,0,3,2,3] <br />
        <strong>Output:</strong> 4
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [7,7,7,7,7,7,7] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 2500</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <b>Follow up:</b>&nbsp;Can you come up with an algorithm that runs
        in&nbsp;<code>O(n log(n))</code> time complexity?
      </p>
    </div>
  ),
  309: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>prices</code> where <code>prices[i]</code>{" "}
        is the price of a given stock on the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        day.
      </p>

      <p>
        Find the maximum profit you can achieve. You may complete as many
        transactions as you like (i.e., buy one and sell one share of the stock
        multiple times) with the following restrictions:
      </p>

      <ul>
        <li>
          After you sell your stock, you cannot buy stock on the next day (i.e.,
          cooldown one day).
        </li>
      </ul>

      <p>
        <strong>Note:</strong> You may not engage in multiple transactions
        simultaneously (i.e., you must sell the stock before you buy again).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [1,2,3,0,2] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> transactions = [buy, sell, cooldown, buy,
        sell]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [1] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= prices.length &lt;= 5000</code>
        </li>
        <li>
          <code>0 &lt;= prices[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  312: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given <code>n</code> balloons, indexed from <code>0</code> to{" "}
        <code>n - 1</code>. Each balloon is painted with a number on it
        represented by an array <code>nums</code>. You are asked to burst all
        the balloons.
      </p>

      <p>
        If you burst the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        balloon, you will get <code>nums[i - 1] * nums[i] * nums[i + 1]</code>{" "}
        coins. If <code>i - 1</code> or <code>i + 1</code> goes out of bounds of
        the array, then treat it as if there is a balloon with a <code>1</code>{" "}
        painted on it.
      </p>

      <p>
        Return{" "}
        <em>
          the maximum coins you can collect by bursting the balloons wisely
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,1,5,8] <br />
        <strong>Output:</strong> 167 <br />
        <strong>Explanation:</strong>
        <br />
        nums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; []
        <br />
        coins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,5]
        <br />
        <strong>Output:</strong> 10
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 300</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  313: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>super ugly number</strong> is a positive integer whose prime
        factors are in the array <code>primes</code>.
      </p>

      <p>
        Given an integer <code>n</code> and an array of integers{" "}
        <code>primes</code>, return <em>the</em>{" "}
        <code>
          n<sup>th</sup>
        </code>{" "}
        <em>
          <strong>super ugly number</strong>
        </em>
        .
      </p>

      <p>
        The{" "}
        <code>
          n<sup>th</sup>
        </code>{" "}
        <strong>super ugly number</strong> is <strong>guaranteed</strong> to fit
        in a <strong>32-bit</strong> signed integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 12, primes = [2,7,13,19] <br />
        <strong>Output:</strong> 32 <br />
        <strong>Explanation:</strong> [1,2,4,7,8,13,14,16,19,26,28,32] is the
        sequence of the first 12 super ugly numbers given primes = [2,7,13,19].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1, primes = [2,3,5] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> 1 has no prime factors, therefore all of
        its prime factors are in the array primes = [2,3,5].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= primes.length &lt;= 100</code>
        </li>
        <li>
          <code>2 &lt;= primes[i] &lt;= 1000</code>
        </li>
        <li>
          <code>primes[i]</code> is <strong>guaranteed</strong> to be a prime
          number.
        </li>
        <li>
          All the values of <code>primes</code> are <strong>unique</strong> and
          sorted in <strong>ascending order</strong>.
        </li>
      </ul>
    </div>
  ),
  337: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The thief has found himself a new place for his thievery again. There is
        only one entrance to this area, called <code>root</code>.
      </p>

      <p>
        Besides the <code>root</code>, each house has one and only one parent
        house. After a tour, the smart thief realized that all houses in this
        place form a binary tree. It will automatically contact the police if{" "}
        <strong>
          two directly-linked houses were broken into on the same night
        </strong>
        .
      </p>

      <p>
        Given the <code>root</code> of the binary tree, return{" "}
        <em>
          the maximum amount of money the thief can rob{" "}
          <strong>without alerting the police</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/10/rob1-tree.jpg"
        style={{ width: 277, height: 293 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,2,3,null,3,null,1] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> Maximum amount of money the thief can rob
        = 3 + 3 + 1 = 7.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/10/rob2-tree.jpg"
        style={{ width: 357, height: 293 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,4,5,1,3,null,1] <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> Maximum amount of money the thief can rob
        = 4 + 5 = 9.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            0 &lt;= Node.val &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  354: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a 2D array of integers <code>envelopes</code> where{" "}
        <code>
          envelopes[i] = [w<sub>i</sub>, h<sub>i</sub>]
        </code>{" "}
        represents the width and the height of an envelope.
      </p>

      <p>
        One envelope can fit into another if and only if both the width and
        height of one envelope are greater than the other envelope's width and
        height.
      </p>

      <p>
        Return{" "}
        <em>
          the maximum number of envelopes you can Russian doll (i.e., put one
          inside the other)
        </em>
        .
      </p>

      <p>
        <strong>Note:</strong> You cannot rotate an envelope.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> envelopes = [[5,4],[6,4],[6,7],[2,3]] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The maximum number of envelopes you can
        Russian doll is <code>3</code> ([2,3] =&gt; [5,4] =&gt; [6,7]).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> envelopes = [[1,1],[1,1],[1,1]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= envelopes.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>envelopes[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= w<sub>i</sub>, h<sub>i</sub> &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  357: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return the count of all numbers with
        unique digits, <code>x</code>, where{" "}
        <code>
          0 &lt;= x &lt; 10<sup>n</sup>
        </code>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> 91 <br />
        <strong>Explanation:</strong> The answer should be the total numbers in
        the range of 0 ≤ x &lt; 100, excluding 11,22,33,44,55,66,77,88,99
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 0 <br />
        <strong>Output:</strong> 1
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>0 &lt;= n &lt;= 8</code>
        </li>
      </ul>
    </div>
  ),
  361: (
    <div class="markdown-body div-width">
      <p>
        Given a 2D grid, each cell is either a wall <code>'W'</code>, an enemy{" "}
        <code>'E'</code>
        or empty <code>'0'</code> (the number zero), return the maximum enemies
        you can kill using one bomb.
        <br />
        The bomb kills all the enemies in the same row and column from the
        planted point until it hits the wall since the wall is too strong to be
        destroyed.
        <br />
        <strong>Note: </strong>You can only put the bomb at an empty cell.
      </p>

      <p>
        <strong>Example:</strong>
      </p>

      <div>
        <pre>
          <strong>Input: </strong>
          <img
            alt=""
            src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0361.Bomb%20Enemy/images/bomb1-grid.jpg"
            style={{ width: 600, height: 187 }}
          />
          <br />
          <span id="example-input-1-1">
            [["0","E","0","0"],["E","0","W","E"],["0","E","0","0"]]
          </span>{" "}
          <br />
          <strong>Output: </strong>
          <span id="example-output-1">
            3<br />
            <strong>Explanation: </strong>
          </span>
          For the given grid,
          <br />
          0 E 0 0<br />
          E 0 W E<br />
          0 E 0 0
          <br />
          Placing a bomb at (1,1) kills 3 enemies.
        </pre>
      </div>
    </div>
  ),
  377: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of <strong>distinct</strong> integers <code>nums</code>{" "}
        and a target integer <code>target</code>, return{" "}
        <em>the number of possible combinations that add up to</em>&nbsp;
        <code>target</code>.
      </p>

      <p>
        The test cases are generated so that the answer can fit in a{" "}
        <strong>32-bit</strong> integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3], target = 4 <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> <br />
        The possible combination ways are: <br />
        (1, 1, 1, 1) <br />
        (1, 1, 2) <br />
        (1, 2, 1) <br />
        (1, 3) <br />
        (2, 1, 1) <br />
        (2, 2) <br />
        (3, 1) <br />
        Note that different sequences are counted as different combinations.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [9], target = 3 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 200</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 1000</code>
        </li>
        <li>
          All the elements of <code>nums</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>1 &lt;= target &lt;= 1000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> What if negative numbers are allowed in the
        given array? How does it change the problem? What limitation we need to
        add to the question to allow negative numbers?
      </p>
    </div>
  ),
  403: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A frog is crossing a river. The river is divided into some number of
        units, and at each unit, there may or may not exist a stone. The frog
        can jump on a stone, but it must not jump into the water.
      </p>

      <p>
        Given a list of <code>stones</code>&nbsp;positions (in units) in sorted{" "}
        <strong>ascending order</strong>, determine if the frog can cross the
        river by landing on the last stone. Initially, the frog is on the first
        stone and assumes the first jump must be <code>1</code> unit.
      </p>

      <p>
        If the frog's last jump was <code>k</code> units, its next jump must be
        either <code>k - 1</code>, <code>k</code>, or <code>k + 1</code> units.
        The frog can only jump in the forward direction.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [0,1,3,5,6,8,12,17] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The frog can jump to the last stone by
        jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2
        units to the 4th stone, then 3 units to the 6th stone, 4 units to the
        7th stone, and 5 units to the 8th stone.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [0,1,2,3,4,8,9,11] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> There is no way to jump to the last stone
        as the gap between the 5th and 6th stone is too large.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= stones.length &lt;= 2000</code>
        </li>
        <li>
          <code>
            0 &lt;= stones[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          <code>stones[0] == 0</code>
        </li>
        <li>
          <code>stones</code>&nbsp;is sorted in a strictly increasing order.
        </li>
      </ul>
    </div>
  ),
  474: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of binary strings <code>strs</code> and two
        integers <code>m</code> and <code>n</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the size of the largest subset of <code>strs</code> such that there
          are <strong>at most</strong>{" "}
        </em>
        <code>m</code>
        <em> </em>
        <code>0</code>
        <em>'s and </em>
        <code>n</code>
        <em> </em>
        <code>1</code>
        <em>'s in the subset</em>.
      </p>

      <p>
        A set <code>x</code> is a <strong>subset</strong> of a set{" "}
        <code>y</code> if all elements of <code>x</code> are also elements of{" "}
        <code>y</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> strs = ["10","0001","111001","1","0"], m = 5, n
        = 3 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The largest subset with at most 5 0's and
        3 1's is {'{"10", "0001", "1", "0"}'}, so the answer is 4. <br />
        Other valid but smaller subsets include {'{"0001", "1"}'} and{" "}
        {'{"10", "1", "0"}'}. <br />
        {'{"111001"}'} is an invalid subset because it contains 4 1's, greater
        than the maximum of 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> strs = ["10","0","1"], m = 1, n = 1<br />
        <strong>Output:</strong> 2<br />
        <b>Explanation:</b> The largest subset is {`{"0", "1"}`}, so the answer
        is 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= strs.length &lt;= 600</code>
        </li>
        <li>
          <code>1 &lt;= strs[i].length &lt;= 100</code>
        </li>
        <li>
          <code>strs[i]</code> consists only of digits <code>'0'</code> and{" "}
          <code>'1'</code>.
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  650: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is only one character <code>'A'</code> on the screen of a notepad.
        You can perform one of two operations on this notepad for each step:
      </p>

      <ul>
        <li>
          Copy All: You can copy all the characters present on the screen (a
          partial copy is not allowed).
        </li>
        <li>Paste: You can paste the characters which are copied last time.</li>
      </ul>

      <p>
        Given an integer <code>n</code>, return{" "}
        <em>the minimum number of operations to get the character</em>{" "}
        <code>'A'</code> <em>exactly</em> <code>n</code>{" "}
        <em>times on the screen</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Initially, we have one character 'A'.{" "}
        <br />
        In step 1, we use Copy All operation.
        <br />
        In step 2, we use Paste operation to get 'AA'.
        <br />
        In step 3, we use Paste operation to get 'AAA'.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  651: (
    <div class="markdown-body div-width">
      <p>Imagine you have a special keyboard with the following keys: </p>
      <p>
        <code>Key 1: (A)</code>: Print one 'A' on screen.
      </p>
      <p>
        <code>Key 2: (Ctrl-A)</code>: Select the whole screen.
      </p>
      <p>
        <code>Key 3: (Ctrl-C)</code>: Copy selection to buffer.
      </p>
      <p>
        <code>Key 4: (Ctrl-V)</code>: Print buffer on screen appending it after
        what has already been printed.{" "}
      </p>

      <p>
        Now, you can only press the keyboard for <b>N</b> times (with the above
        four keys), find out the maximum numbers of 'A' you can print on screen.
      </p>

      <p>
        <b>Example 1:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b> N = 3 <br />
        <b>Output:</b> 3 <br />
        <b>Explanation:</b> <br />
        We can at most get 3 A's on screen by pressing following key sequence:{" "}
        <br />
        A, A, A
      </pre>
      <p></p>

      <p>
        <b>Example 2:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b> N = 7 <br />
        <b>Output:</b> 9 <br />
        <b>Explanation:</b> <br />
        We can at most get 9 A's on screen by pressing following key sequence:{" "}
        <br />
        A, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V
      </pre>
      <p></p>

      <p>
        <b>Note:</b>
        <br />
      </p>
      <ul>
        <li>1 &lt;= N &lt;= 50</li>
        <li>Answers will be in the range of 32-bit signed integer.</li>
      </ul>
      <p></p>
    </div>
  ),
  673: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array&nbsp;<code>nums</code>, return{" "}
        <em>the number of longest increasing subsequences.</em>
      </p>

      <p>
        <strong>Notice</strong> that the sequence has to be{" "}
        <strong>strictly</strong> increasing.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,5,4,7] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The two longest increasing subsequences
        are [1, 3, 4, 7] and [1, 3, 5, 7].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,2,2,2,2] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The length of the longest increasing
        subsequence is 1, and there are 5 increasing subsequences of length 1,
        so output 5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 2000</code>
        </li>
        <li>
          <code>
            -10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>The answer is guaranteed to fit inside a 32-bit integer.</li>
      </ul>
    </div>
  ),
  678: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> containing only three types of characters:{" "}
        <code>'('</code>, <code>')'</code> and <code>'*'</code>, return{" "}
        <code>true</code> <em>if</em> <code>s</code>{" "}
        <em>
          is <strong>valid</strong>
        </em>
        .
      </p>
      <p>
        The following rules define a <strong>valid</strong> string:
      </p>
      <ul>
        <li>
          Any left parenthesis <code>{"'('"}</code> must have a corresponding
          right parenthesis <code>{"')'"}</code>.
        </li>
        <li>
          Any right parenthesis <code>{"')'"}</code> must have a corresponding
          left parenthesis <code>'('</code>.
        </li>
        <li>
          Left parenthesis <code>{"'('"}</code> must go before the corresponding
          right parenthesis <code>')'</code>.
        </li>
        <li>
          <code>'*'</code> could be treated as a single right parenthesis{" "}
          <code>{"')'"}</code> or a single left parenthesis <code>{"'('"}</code>{" "}
          or an empty string <code>""</code>.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> s = "()" <br />
        <strong>Output:</strong> true <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> s = "(*)"
        <br />
        <strong>Output:</strong> true
        <br />
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <br />
      <pre>
        <strong>Input:</strong> s = {'"(*))"'}
        <br />
        <strong>Output:</strong> true
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s[i]</code> is <code>'('</code>, <code>')'</code> or{" "}
          <code>'*'</code>.
        </li>
      </ul>
    </div>
  ),
  714: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>prices</code> where <code>prices[i]</code>{" "}
        is the price of a given stock on the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        day, and an integer <code>fee</code> representing a transaction fee.
      </p>

      <p>
        Find the maximum profit you can achieve. You may complete as many
        transactions as you like, but you need to pay the transaction fee for
        each transaction.
      </p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          You may not engage in multiple transactions simultaneously (i.e., you
          must sell the stock before you buy again).
        </li>
        <li>
          The transaction fee is only charged once for each stock purchase and
          sale.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [1,3,2,8,4,9], fee = 2 <br />
        <strong>Output:</strong> 8 <br />
        <strong>Explanation:</strong> The maximum profit can be achieved by:{" "}
        <br />
        - Buying at prices[0] = 1<br />
        - Selling at prices[3] = 8<br />
        - Buying at prices[4] = 4<br />
        - Selling at prices[5] = 9<br />
        The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [1,3,7,5,10,3], fee = 3 <br />
        <strong>Output:</strong> 6
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= prices.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= prices[i] &lt; 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= fee &lt; 5 * 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  746: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>cost</code> where{" "}
        <code>cost[i]</code> is the cost of{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        step on a staircase. Once you pay the cost, you can either climb one or
        two steps.
      </p>

      <p>
        You can either start from the step with index <code>0</code>, or the
        step with index <code>1</code>.
      </p>

      <p>
        Return <em>the minimum cost to reach the top of the floor</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> cost = [10,<u>15</u>,20] <br />
        <strong>Output:</strong> 15 <br />
        <strong>Explanation:</strong> You will start at index 1. <br />
        - Pay 15 and climb two steps to reach the top. <br />
        The total cost is 15.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> cost = [<u>1</u>,100,<u>1</u>,1,<u>1</u>,100,
        <u>1</u>,<u>1</u>,100,<u>1</u>] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> You will start at index 0. - Pay 1 and
        climb two steps to reach index 2. <br />
        - Pay 1 and climb two steps to reach index 4. <br />
        - Pay 1 and climb two steps to reach index 6. <br />
        - Pay 1 and climb one step to reach index 7. <br />
        - Pay 1 and climb two steps to reach index 9. <br />
        - Pay 1 and climb one step to reach the top. <br />
        The total cost is 6.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= cost.length &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= cost[i] &lt;= 999</code>
        </li>
      </ul>
    </div>
  ),
  750: (
    <div class="markdown-body div-width">
      <p>
        Given a grid where each entry is only 0 or 1, find the number of corner
        rectangles.
      </p>

      <p>
        A <em>corner rectangle</em> is 4 distinct 1s on the grid that form an
        axis-aligned rectangle. Note that only the corners need to have the
        value 1. Also, all four 1s used must be distinct.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = <br />
        [[1, 0, 0, 1, 0], <br />
        [0, 0, 1, 0, 1], <br />
        [0, 0, 0, 1, 0], <br />
        [1, 0, 1, 0, 1]] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> There is only one corner rectangle, with
        corners grid[1][2], grid[1][4], grid[3][2], grid[3][4].
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = <br />
        [[1, 1, 1], <br />
        [1, 1, 1], <br />
        [1, 1, 1]] <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> There are four 2x2 rectangles, four 2x3
        and 3x2 rectangles, and one 3x3 rectangle.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = <br />
        [[1, 1, 1, 1]] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> Rectangles must have four distinct
        corners.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ol>
        <li>
          The number of rows and columns of <code>grid</code> will each be in
          the range <code>[1, 200]</code>.
        </li>
        <li>
          Each <code>grid[i][j]</code> will be either <code>0</code> or{" "}
          <code>1</code>.
        </li>
        <li>
          The number of <code>1</code>s in the grid will be at most{" "}
          <code>6000</code>.
        </li>
      </ol>

      <p>&nbsp;</p>
    </div>
  ),
  838: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> dominoes in a line, and we place each domino
        vertically upright. In the beginning, we simultaneously push some of the
        dominoes either to the left or to the right.
      </p>

      <p>
        After each second, each domino that is falling to the left pushes the
        adjacent domino on the left. Similarly, the dominoes falling to the
        right push their adjacent dominoes standing on the right.
      </p>

      <p>
        When a vertical domino has dominoes falling on it from both sides, it
        stays still due to the balance of the forces.
      </p>

      <p>
        For the purposes of this question, we will consider that a falling
        domino expends no additional force to a falling or already fallen
        domino.
      </p>

      <p>
        You are given a string <code>dominoes</code> representing the initial
        state where:
      </p>

      <ul>
        <li>
          <code>dominoes[i] = 'L'</code>, if the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          domino has been pushed to the left,
        </li>
        <li>
          <code>dominoes[i] = 'R'</code>, if the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          domino has been pushed to the right, and
        </li>
        <li>
          <code>dominoes[i] = '.'</code>, if the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          domino has not been pushed.
        </li>
      </ul>

      <p>
        Return <em>a string representing the final state</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> dominoes = "RR.L" <br />
        <strong>Output:</strong> "RR.L" <br />
        <strong>Explanation:</strong> The first domino expends no additional
        force on the second domino.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/05/18/domino.png"
        style={{ height: 196, width: 512 }}
      />
      <pre>
        <strong>Input:</strong> dominoes = ".L.R...LR..L.." <br />
        <strong>Output:</strong> "LL.RR.LLRRLL.."
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == dominoes.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>dominoes[i]</code> is either <code>'L'</code>, <code>'R'</code>,
          or <code>'.'</code>.
        </li>
      </ul>
    </div>
  ),
  873: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A sequence{" "}
        <code>
          x<sub>1</sub>, x<sub>2</sub>, ..., x<sub>n</sub>
        </code>{" "}
        is <em>Fibonacci-like</em> if:
      </p>

      <ul>
        <li>
          <code>n &gt;= 3</code>
        </li>
        <li>
          <code>
            x<sub>i</sub> + x<sub>i+1</sub> == x<sub>i+2</sub>
          </code>{" "}
          for all <code>i + 2 &lt;= n</code>
        </li>
      </ul>

      <p>
        Given a <b>strictly increasing</b> array <code>arr</code> of positive
        integers forming a sequence, return{" "}
        <em>
          the <strong>length</strong> of the longest Fibonacci-like subsequence
          of
        </em>{" "}
        <code>arr</code>. If one does not exist, return <code>0</code>.
      </p>

      <p>
        A <strong>subsequence</strong> is derived from another sequence{" "}
        <code>arr</code> by deleting any number of elements (including none)
        from <code>arr</code>, without changing the order of the remaining
        elements. For example, <code>[3, 5, 8]</code> is a subsequence of{" "}
        <code>[3, 4, 5, 6, 7, 8]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,2,3,4,5,6,7,8] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The longest subsequence that is
        fibonacci-like: [1,2,3,5,8].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,3,7,11,12,14,18] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation</strong>:<strong> </strong>The longest subsequence
        that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>3 &lt;= arr.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= arr[i] &lt; arr[i + 1] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  887: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given <code>k</code> identical eggs and you have access to a
        building with <code>n</code> floors labeled from <code>1</code> to{" "}
        <code>n</code>.
      </p>

      <p>
        You know that there exists a floor <code>f</code> where{" "}
        <code>0 &lt;= f &lt;= n</code> such that any egg dropped at a floor{" "}
        <strong>higher</strong> than <code>f</code> will <strong>break</strong>,
        and any egg dropped <strong>at or below</strong> floor <code>f</code>{" "}
        will <strong>not break</strong>.
      </p>

      <p>
        Each move, you may take an unbroken egg and drop it from any floor{" "}
        <code>x</code> (where <code>1 &lt;= x &lt;= n</code>). If the egg
        breaks, you can no longer use it. However, if the egg does not break,
        you may <strong>reuse</strong> it in future moves.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum number of moves</strong> that you need to
          determine <strong>with certainty</strong> what the value of{" "}
        </em>
        <code>f</code> is.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> k = 1, n = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation: </strong> <br />
        Drop the egg from floor 1. If it breaks, we know that f = 0. <br />
        Otherwise, drop the egg from floor 2. If it breaks, we know that f = 1.{" "}
        <br />
        If it does not break, then we know f = 2. <br />
        Hence, we need at minimum 2 moves to determine with certainty what the
        value of f is.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> k = 2, n = 6 <br />
        <strong>Output:</strong> 3
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> k = 3, n = 14 <br />
        <strong>Output:</strong> 4
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  931: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>n x n</code> array of integers <code>matrix</code>,
        return{" "}
        <em>
          the <strong>minimum sum</strong> of any <strong>falling path</strong>{" "}
          through
        </em>{" "}
        <code>matrix</code>.
      </p>

      <p>
        A <strong>falling path</strong> starts at any element in the first row
        and chooses the element in the next row that is either directly below or
        diagonally left/right. Specifically, the next element from position{" "}
        <code>(row, col)</code> will be <code>(row + 1, col - 1)</code>,{" "}
        <code>(row + 1, col)</code>, or <code>(row + 1, col + 1)</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/11/03/failing1-grid.jpg"
        style={{ width: 499, height: 500 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[2,1,3],[6,5,4],[7,8,9]] <br />
        <strong>Output:</strong> 13 <br />
        <strong>Explanation:</strong> There are two falling paths with a minimum
        sum as shown.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/11/03/failing2-grid.jpg"
        style={{ width: 164, height: 365 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[-19,57],[-40,-5]] <br />
        <strong>Output:</strong> -59 <br />
        <strong>Explanation:</strong> The falling path with a minimum sum is
        shown.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == matrix.length == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>-100 &lt;= matrix[i][j] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1012: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return{" "}
        <em>the number of positive integers in the range </em>
        <code>[1, n]</code>
        <em>
          {" "}
          that have <strong>at least one</strong> repeated digit
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 20 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The only positive number (&lt;= 20) with
        at least 1 repeated digit is 11.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 100 <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation:</strong> The positive numbers (&lt;= 100) with
        atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and
        100.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1000 <br />
        <strong>Output:</strong> 262
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1049: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of integers <code>stones</code> where{" "}
        <code>stones[i]</code> is the weight of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        stone.
      </p>

      <p>
        We are playing a game with the stones. On each turn, we choose any two
        stones and smash them together. Suppose the stones have weights{" "}
        <code>x</code> and <code>y</code> with <code>x &lt;= y</code>. The
        result of this smash is:
      </p>

      <ul>
        <li>
          If <code>x == y</code>, both stones are destroyed, and
        </li>
        <li>
          If <code>x != y</code>, the stone of weight <code>x</code> is
          destroyed, and the stone of weight <code>y</code> has new weight{" "}
          <code>y - x</code>.
        </li>
      </ul>

      <p>
        At the end of the game, there is <strong>at most one</strong> stone
        left.
      </p>

      <p>
        Return <em>the smallest possible weight of the left stone</em>. If there
        are no stones left, return <code>0</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [2,7,4,1,8,1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> <br />
        We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1]
        then, <br />
        we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1]
        then, <br />
        we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,{" "}
        <br />
        we can combine 1 and 1 to get 0, so the array converts to [1], then
        that's the optimal value.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [31,26,33,21,40] <br />
        <strong>Output:</strong> 5
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= stones.length &lt;= 30</code>
        </li>
        <li>
          <code>1 &lt;= stones[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1092: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>str1</code> and <code>str2</code>, return{" "}
        <em>the shortest string that has both </em>
        <code>str1</code>
        <em> and </em>
        <code>str2</code>
        <em>
          {" "}
          as <strong>subsequences</strong>
        </em>
        . If there are multiple valid strings, return <strong>any</strong> of
        them.
      </p>

      <p>
        A string <code>s</code> is a <strong>subsequence</strong> of string{" "}
        <code>t</code> if deleting some number of characters from <code>t</code>{" "}
        (possibly <code>0</code>) results in the string <code>s</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> str1 = "abac", str2 = "cab" <br />
        <strong>Output:</strong> "cabac" <br />
        <strong>Explanation:</strong> <br />
        str1 = "abac" is a subsequence of "cabac" because we can delete the
        first "c". <br />
        str2 = "cab" is a subsequence of "cabac" because we can delete the last
        "ac". <br />
        The answer provided is the shortest such string that satisfies these
        properties.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> str1 = "aaaaaaaa", str2 = "aaaaaaaa" <br />
        <strong>Output:</strong> "aaaaaaaa"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= str1.length, str2.length &lt;= 1000</code>
        </li>
        <li>
          <code>str1</code> and <code>str2</code> consist of lowercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  1143: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>text1</code> and <code>text2</code>, return{" "}
        <em>
          the length of their longest <strong>common subsequence</strong>.{" "}
        </em>
        If there is no <strong>common subsequence</strong>, return{" "}
        <code>0</code>.
      </p>

      <p>
        A <strong>subsequence</strong> of a string is a new string generated
        from the original string with some characters (can be none) deleted
        without changing the relative order of the remaining characters.
      </p>

      <ul>
        <li>
          For example, <code>"ace"</code> is a subsequence of{" "}
          <code>"abcde"</code>.
        </li>
      </ul>

      <p>
        A <strong>common subsequence</strong> of two strings is a subsequence
        that is common to both strings.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> text1 = "abcde", text2 = "ace" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The longest common subsequence is "ace"
        and its length is 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> text1 = "abc", text2 = "abc" <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The longest common subsequence is "abc"
        and its length is 3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> text1 = "abc", text2 = "def" <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There is no such common subsequence, so
        the result is 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= text1.length, text2.length &lt;= 1000</code>
        </li>
        <li>
          <code>text1</code> and <code>text2</code> consist of only lowercase
          English characters.
        </li>
      </ul>
    </div>
  ),
  1191: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>arr</code> and an integer <code>k</code>,
        modify the array by repeating it <code>k</code> times.
      </p>

      <p>
        For example, if <code>arr = [1, 2]</code> and <code>k = 3 </code>then
        the modified array will be <code>[1, 2, 1, 2, 1, 2]</code>.
      </p>

      <p>
        Return the maximum sub-array sum in the modified array. Note that the
        length of the sub-array can be <code>0</code> and its sum in that case
        is <code>0</code>.
      </p>

      <p>
        As the answer can be very large, return the answer{" "}
        <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,2], k = 3 <br />
        <strong>Output:</strong> 9
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,-2,1], k = 5 <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [-1,-2], k = 7 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= arr.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= arr[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1216: (
    <div class="markdown-body div-width">
      <p>
        Given a string <code>s</code>&nbsp;and an integer&nbsp;<code>k</code>,
        find out if the given string is&nbsp;a&nbsp;<em>K-Palindrome</em> or
        not.
      </p>

      <p>
        A string is K-Palindrome if it can be&nbsp;transformed&nbsp;into a
        palindrome by removing at most <code>k</code> characters from it.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcdeca", k = 2 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation: </strong>Remove 'b' and 'e' characters.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>s</code>&nbsp;has only lowercase English letters.
        </li>
        <li>
          <code>1 &lt;= k&nbsp;&lt;= s.length</code>
        </li>
      </ul>
    </div>
  ),
  1246: (
    <article role="main" class="blog-post">
      <p>
        You are given an integer array <code>arr</code>.
      </p>

      <p>
        In one move, you can select a <strong>palindromic</strong> subarray{" "}
        <code>arr[i], arr[i + 1], ..., arr[j]</code> where{" "}
        <code>i &lt;= j</code>, and remove that subarray from the given array.
        Note that after removing a subarray, the elements on the left and on the
        right of that subarray move to fill the gap left by the removal.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum number of moves needed to remove all numbers from the
          array
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,2] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,3,4,1,5] <br />
        <strong>Output:</strong> 3 <br />
        <b>Explanation: </b>Remove [4] then remove [1,3,1] then remove [5].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= arr.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= arr[i] &lt;= 20</code>
        </li>
      </ul>
    </article>
  ),
  1269: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have a pointer at index <code>0</code> in an array of size{" "}
        <code>arrLen</code>. At each step, you can move 1 position to the left,
        1 position to the right in the array, or stay in the same place (The
        pointer should not be placed outside the array at any time).
      </p>

      <p>
        Given two integers <code>steps</code> and <code>arrLen</code>, return
        the number of ways such that your pointer is still at index{" "}
        <code>0</code> after <strong>exactly</strong> <code>steps</code> steps.
        Since the answer may be too large, return it <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> steps = 3, arrLen = 2 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation: </strong>There are 4 differents ways to stay at
        index 0 after 3 steps. <br />
        Right, Left, Stay
        <br />
        Stay, Right, Left
        <br />
        Right, Stay, Left
        <br />
        Stay, Stay, Stay
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> steps = 2, arrLen = 4 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> There are 2 differents ways to stay at
        index 0 after 2 steps Right, Left Stay, Stay
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> steps = 4, arrLen = 2 <br />
        <strong>Output:</strong> 8
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= steps &lt;= 500</code>
        </li>
        <li>
          <code>
            1 &lt;= arrLen &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1340: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of&nbsp;integers <code>arr</code> and an integer{" "}
        <code>d</code>. In one step you can jump from index <code>i</code> to
        index:
      </p>

      <ul>
        <li>
          <code>i + x</code> where:&nbsp;<code>i + x &lt; arr.length</code> and{" "}
          <code> 0 &lt;&nbsp;x &lt;= d</code>.
        </li>
        <li>
          <code>i - x</code> where:&nbsp;<code>i - x &gt;= 0</code> and{" "}
          <code> 0 &lt;&nbsp;x &lt;= d</code>.
        </li>
      </ul>

      <p>
        In addition, you can only jump from index <code>i</code> to index{" "}
        <code>j</code>&nbsp;if <code>arr[i] &gt; arr[j]</code> and{" "}
        <code>arr[i] &gt; arr[k]</code> for all indices <code>k</code> between{" "}
        <code>i</code> and <code>j</code> (More formally{" "}
        <code>min(i,&nbsp;j) &lt; k &lt; max(i, j)</code>).
      </p>

      <p>
        You can choose any index of the array and start jumping. Return{" "}
        <em>the maximum number of indices</em>&nbsp;you can visit.
      </p>

      <p>Notice that you can not jump outside of the array at any time.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/01/23/meta-chart.jpeg"
        style={{ width: 633, height: 419 }}
      />
      <pre>
        <strong>Input:</strong> arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> You can start at index 10. You can jump 10
        --&gt; 8 --&gt; 6 --&gt; 7 as shown.
        <br />
        Note that if you start at index 6 you can only jump to index 7. You
        cannot jump to index 5 because 13 &gt; 9. You cannot jump to index 4
        because index 5 is between index 4 and 6 and 13 &gt; 9.
        <br />
        Similarly You cannot jump from index 3 to index 2 or index 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [3,3,3,3,3], d = 3 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> You can start at any index. You always
        cannot jump to any index.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [7,6,5,4,3,2,1], d = 1 <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> Start at index 0. You can visit all the
        indicies.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= arr.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= arr[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= d &lt;= arr.length</code>
        </li>
      </ul>
    </div>
  ),
  1473: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a row of <code>m</code> houses in a small city, each house must
        be painted with one of the <code>n</code> colors (labeled from{" "}
        <code>1</code> to <code>n</code>), some houses that have been painted
        last summer should not be painted again.
      </p>

      <p>
        A neighborhood is a maximal group of continuous houses that are painted
        with the same color.
      </p>

      <ul>
        <li>
          For example: <code>houses = [1,2,2,3,3,2,1,1]</code> contains{" "}
          <code>5</code> neighborhoods{" "}
          <code>
            [{1}, {(2, 2)}, {(3, 3)}, {2}, {(1, 1)}]
          </code>
          .
        </li>
      </ul>

      <p>
        Given an array <code>houses</code>, an <code>m x n</code> matrix{" "}
        <code>cost</code> and an integer <code>target</code> where:
      </p>

      <ul>
        <li>
          <code>houses[i]</code>: is the color of the house <code>i</code>, and{" "}
          <code>0</code> if the house is not painted yet.
        </li>
        <li>
          <code>cost[i][j]</code>: is the cost of paint the house <code>i</code>{" "}
          with the color <code>j + 1</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the minimum cost of painting all the remaining houses in such a way
          that there are exactly
        </em>{" "}
        <code>target</code> <em>neighborhoods</em>. If it is not possible,
        return <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> houses = [0,0,0,0,0], cost =
        [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3 <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> Paint houses of this way [1,2,2,1,1]{" "}
        <br />
        This array contains target = 3 neighborhoods, [{1}, {(2, 2)}, {(1, 1)}].{" "}
        <br />
        Cost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> houses = [0,2,1,2,0], cost =
        [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3 <br />
        <strong>Output:</strong> 11 <br />
        <strong>Explanation:</strong> Some houses are already painted, Paint the
        houses of this way [2,2,1,2,2] <br />
        This array contains target = 3 neighborhoods, [{(2, 2)}, {1}, {(2, 2)}].{" "}
        <br />
        Cost of paint the first and last house (10 + 1) = 11.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> houses = [3,1,2,3], cost =
        [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3 <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> Houses are already painted with a total of
        4 neighborhoods [{3},{1},{2},{3}] different of target = 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == houses.length == cost.length</code>
        </li>
        <li>
          <code>n == cost[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 20</code>
        </li>
        <li>
          <code>1 &lt;= target &lt;= m</code>
        </li>
        <li>
          <code>0 &lt;= houses[i] &lt;= n</code>
        </li>
        <li>
          <code>
            1 &lt;= cost[i][j] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1478: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the array <code>houses</code> where <code>houses[i]</code> is the
        location of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        house along a street and an integer <code>k</code>, allocate{" "}
        <code>k</code> mailboxes in the street.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> total distance between each house and its
          nearest mailbox
        </em>
        .
      </p>

      <p>
        The test cases are generated so that the answer fits in a 32-bit
        integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/05/07/sample_11_1816.png"
        style={{ width: 454, height: 154 }}
      />
      <pre>
        <strong>Input:</strong> houses = [1,4,8,10,20], k = 3 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> Allocate mailboxes in position 3, 9 and
        20. <br />
        Minimum total distance from each houses to nearest mailboxes is |3-1| +
        |4-3| + |9-8| + |10-9| + |20-20| = 5
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/05/07/sample_2_1816.png"
        style={{ width: 433, height: 154 }}
      />
      <pre>
        <strong>Input:</strong> houses = [2,3,5,12,18], k = 2 <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> Allocate mailboxes in position 3 and 14.{" "}
        <br />
        Minimum total distance from each houses to nearest mailboxes is |2-3| +
        |3-3| + |5-3| + |12-14| + |18-14| = 9.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= houses.length &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= houses[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          All the integers of <code>houses</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  1682: (
    <article role="main" class="blog-post">
      <p>
        A subsequence of a string <code>s</code> is considered a{" "}
        <strong>good palindromic subsequence</strong> if:
      </p>

      <ul>
        <li>
          It is a subsequence of <code>s</code>.
        </li>
        <li>It is a palindrome (has the same value if reversed).</li>
        <li>
          It has an <strong>even</strong> length.
        </li>
        <li>
          No two consecutive characters are equal, except the two middle ones.
        </li>
      </ul>

      <p>
        For example, if <code>s = "abcabcabb"</code>, then <code>"abba"</code>{" "}
        is considered a <strong>good palindromic subsequence</strong>, while{" "}
        <code>"bcb"</code> (not even length) and <code>"bbbb"</code> (has equal
        consecutive characters) are not.
      </p>

      <p>
        Given a string <code>s</code>, return{" "}
        <em>
          the <strong>length</strong> of the{" "}
          <strong>longest good palindromic subsequence</strong> in{" "}
        </em>
        <code>s</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "bbabab" <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The longest good palindromic subsequence
        of s is "baab".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "dcbccacdb" <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The longest good palindromic subsequence
        of s is "dccd".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 250</code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
      </ul>
    </article>
  ),
  1749: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>. The{" "}
        <strong>absolute sum</strong> of a subarray{" "}
        <code>
          [nums<sub>l</sub>, nums<sub>l+1</sub>, ..., nums<sub>r-1</sub>, nums
          <sub>r</sub>]
        </code>{" "}
        is{" "}
        <code>
          abs(nums<sub>l</sub> + nums<sub>l+1</sub> + ... + nums<sub>r-1</sub> +
          nums<sub>r</sub>)
        </code>
        .
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong> absolute sum of any{" "}
          <strong>(possibly empty)</strong> subarray of{" "}
        </em>
        <code>nums</code>.
      </p>

      <p>
        Note that <code>abs(x)</code> is defined as follows:
      </p>

      <ul>
        <li>
          If <code>x</code> is a negative integer, then <code>abs(x) = -x</code>
          .
        </li>
        <li>
          If <code>x</code> is a non-negative integer, then{" "}
          <code>abs(x) = x</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,-3,2,3,-4] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The subarray [2,3] has absolute sum =
        abs(2+3) = abs(5) = 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,-5,1,-4,3,-2] <br />
        <strong>Output:</strong> 8 <br />
        <strong>Explanation:</strong> The subarray [-5,1,-4] has absolute sum =
        abs(-5+1-4) = abs(-8) = 8.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1771: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two strings, <code>word1</code> and <code>word2</code>.
        You want to construct a string in the following manner:
      </p>

      <ul>
        <li>
          Choose some <strong>non-empty</strong> subsequence{" "}
          <code>subsequence1</code> from <code>word1</code>.
        </li>
        <li>
          Choose some <strong>non-empty</strong> subsequence{" "}
          <code>subsequence2</code> from <code>word2</code>.
        </li>
        <li>
          Concatenate the subsequences: <code>subsequence1 + subsequence2</code>
          , to make the string.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>length</strong> of the longest <strong>palindrome</strong>{" "}
          that can be constructed in the described manner.{" "}
        </em>
        If no palindromes can be constructed, return <code>0</code>.
      </p>

      <p>
        A <strong>subsequence</strong> of a string <code>s</code> is a string
        that can be made by deleting some (possibly none) characters from{" "}
        <code>s</code> without changing the order of the remaining characters.
      </p>

      <p>
        A <strong>palindrome</strong> is a string that reads the same
        forward&nbsp;as well as backward.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = "cacb", word2 = "cbba" <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> Choose "ab" from word1 and "cba" from
        word2 to make "abcba", which is a palindrome.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = "ab", word2 = "ab" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Choose "ab" from word1 and "a" from word2
        to make "aba", which is a palindrome.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = "aa", word2 = "bb" <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> You cannot construct a palindrome from the
        described method, so return 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= word1.length, word2.length &lt;= 1000</code>
        </li>
        <li>
          <code>word1</code> and <code>word2</code> consist of lowercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  1824: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a <strong>3 lane road</strong> of length <code>n</code> that
        consists of <code>n + 1</code> <strong>points</strong> labeled from{" "}
        <code>0</code> to <code>n</code>. A frog <strong>starts</strong> at
        point <code>0</code> in the <strong>second </strong>lane
        <strong> </strong>and wants to jump to point <code>n</code>. However,
        there could be obstacles along the way.
      </p>

      <p>
        You are given an array <code>obstacles</code> of length{" "}
        <code>n + 1</code> where each <code>obstacles[i]</code> (
        <strong>ranging from 0 to 3</strong>) describes an obstacle on the lane{" "}
        <code>obstacles[i]</code> at point <code>i</code>. If{" "}
        <code>obstacles[i] == 0</code>, there are no obstacles at point{" "}
        <code>i</code>. There will be <strong>at most one</strong> obstacle in
        the 3 lanes at each point.
      </p>

      <ul>
        <li>
          For example, if <code>obstacles[2] == 1</code>, then there is an
          obstacle on lane 1 at point 2.
        </li>
      </ul>

      <p>
        The frog can only travel from point <code>i</code> to point{" "}
        <code>i + 1</code> on the same lane if there is not an obstacle on the
        lane at point <code>i + 1</code>. To avoid obstacles, the frog can also
        perform a <strong>side jump</strong> to jump to <strong>another</strong>{" "}
        lane (even if they are not adjacent) at the <strong>same</strong> point
        if there is no obstacle on the new lane.
      </p>

      <ul>
        <li>
          For example, the frog can jump from lane 3 at point 3 to lane 1 at
          point 3.
        </li>
      </ul>

      <p>
        Return
        <em>
          {" "}
          the <strong>minimum number of side jumps</strong> the frog needs to
          reach <strong>any lane</strong> at point n starting from lane{" "}
          <code>2</code> at point 0.
        </em>
      </p>

      <p>
        <strong>Note:</strong> There will be no obstacles on points{" "}
        <code>0</code> and <code>n</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex1.png"
        style={{ width: 500, height: 244 }}
      />
      <pre>
        <strong>Input:</strong> obstacles = [0,1,2,3,0] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The optimal solution is shown by the
        arrows above. There are 2 side jumps (red arrows). <br />
        Note that the frog can jump over obstacles only when making side jumps
        (as shown at point 2).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex2.png"
        style={{ width: 500, height: 196 }}
      />
      <pre>
        <strong>Input:</strong> obstacles = [0,1,1,3,3,0] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There are no obstacles on lane 2. No side
        jumps are required.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex3.png"
        style={{ width: 500, height: 196 }}
      />
      <pre>
        <strong>Input:</strong> obstacles = [0,2,1,0,3,0] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The optimal solution is shown by the
        arrows above. There are 2 side jumps.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>obstacles.length == n + 1</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 5 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= obstacles[i] &lt;= 3</code>
        </li>
        <li>
          <code>obstacles[0] == obstacles[n] == 0</code>
        </li>
      </ul>
    </div>
  ),
  1883: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>hoursBefore</code>, the number of hours
        you have to travel to your meeting. To arrive at your meeting, you have
        to travel through <code>n</code> roads. The road lengths are given as an
        integer array <code>dist</code> of length <code>n</code>, where{" "}
        <code>dist[i]</code> describes the length of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        road in <strong>kilometers</strong>. In addition, you are given an
        integer <code>speed</code>, which is the speed (in <strong>km/h</strong>
        ) you will travel at.
      </p>

      <p>
        After you travel road <code>i</code>, you must rest and wait for the{" "}
        <strong>next integer hour</strong> before you can begin traveling on the
        next road. Note that you do not have to rest after traveling the last
        road because you are already at the meeting.
      </p>

      <ul>
        <li>
          For example, if traveling a road takes <code>1.4</code> hours, you
          must wait until the <code>2</code> hour mark before traveling the next
          road. If traveling a road takes exactly&nbsp;<code>2</code>
          &nbsp;hours, you do not need to wait.
        </li>
      </ul>

      <p>
        However, you are allowed to <strong>skip</strong> some rests to be able
        to arrive on time, meaning you do not need to wait for the next integer
        hour. Note that this means you may finish traveling future roads at
        different hour marks.
      </p>

      <ul>
        <li>
          For example, suppose traveling the first road takes <code>1.4</code>{" "}
          hours and traveling the second road takes <code>0.6</code> hours.
          Skipping the rest after the first road will mean you finish traveling
          the second road right at the <code>2</code> hour mark, letting you
          start traveling the third road immediately.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>minimum number of skips required</strong> to arrive at the
          meeting on time, or
        </em>{" "}
        <code>-1</code>
        <em>
          {" "}
          if it is<strong> impossible</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> dist = [1,3,2], speed = 4, hoursBefore = 2{" "}
        <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> <br />
        Without skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4)
        + (2/4) = 2.5 hours. <br />
        You can skip the first rest to arrive in ((1/4 + <u>0</u>) + (3/4 + 0))
        + (2/4) = 1.5 hours. <br />
        Note that the second rest is shortened because you finish traveling the
        second road at an integer hour due to skipping the first rest.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> dist = [7,3,5,5], speed = 2, hoursBefore = 10{" "}
        <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        Without skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2)
        + (5/2 + 1/2) + (5/2) = 11.5 hours. <br />
        You can skip the first and third rest to arrive in ((7/2 + <u>0</u>) +
        (3/2 + 0)) + ((5/2 + <u>0</u>) + (5/2)) = 10 hours.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> dist = [7,3,5,5], speed = 1, hoursBefore = 10{" "}
        <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> It is impossible to arrive at the meeting
        on time even if you skip all the rests.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == dist.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= dist[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= speed &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= hoursBefore &lt;= 10<sup>7</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1884: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given <strong>two identical</strong> eggs and you have access to
        a building with <code>n</code> floors labeled from <code>1</code> to{" "}
        <code>n</code>.
      </p>

      <p>
        You know that there exists a floor <code>f</code> where{" "}
        <code>0 &lt;= f &lt;= n</code> such that any egg dropped at a floor{" "}
        <strong>higher</strong> than <code>f</code> will <strong>break</strong>,
        and any egg dropped <strong>at or below</strong> floor <code>f</code>{" "}
        will <strong>not break</strong>.
      </p>

      <p>
        In each move, you may take an <strong>unbroken</strong> egg and drop it
        from any floor <code>x</code> (where <code>1 &lt;= x &lt;= n</code>). If
        the egg breaks, you can no longer use it. However, if the egg does not
        break, you may <strong>reuse</strong> it in future moves.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum number of moves</strong> that you need to
          determine <strong>with certainty</strong> what the value of{" "}
        </em>
        <code>f</code> is.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> We can drop the first egg from floor 1 and
        the second egg from floor 2. <br />
        If the first egg breaks, we know that f = 0.
        <br />
        If the second egg breaks but the first egg didn't, we know that f = 1.
        <br />
        Otherwise, if both eggs survive, we know that f = 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 100
        <br />
        <strong>Output:</strong> 14
        <br />
        <strong>Explanation:</strong> One optimal strategy is:
        <br />
        - Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and
        8. Drop the 2nd egg starting from floor 1 and going up one at a time to
        find f within 8 more drops. Total drops is 1 + 8 = 9.
        <br />
        - If the 1st egg does not break, drop the 1st egg again at floor 22. If
        it breaks, we know f is between 9 and 21. Drop the 2nd egg starting from
        floor 10 and going up one at a time to find f within 12 more drops.
        Total drops is 2 + 12 = 14.
        <br />
        - If the 1st egg does not break again, follow a similar process dropping
        the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and
        100.
        <br />
        Regardless of the outcome, it takes at most 14 drops to determine f.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1928: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a country of <code>n</code> cities numbered from <code>0</code>{" "}
        to <code>n - 1</code> where{" "}
        <strong>all the cities are connected</strong> by bi-directional roads.
        The roads are represented as a 2D integer array <code>edges</code> where{" "}
        <code>
          edges[i] = [x<sub>i</sub>, y<sub>i</sub>, time<sub>i</sub>]
        </code>{" "}
        denotes a road between cities{" "}
        <code>
          x<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          y<sub>i</sub>
        </code>{" "}
        that takes{" "}
        <code>
          time<sub>i</sub>
        </code>{" "}
        minutes to travel. There may be multiple roads of differing travel times
        connecting the same two cities, but no road connects a city to itself.
      </p>

      <p>
        Each time you pass through a city, you must pay a passing fee. This is
        represented as a <strong>0-indexed</strong> integer array{" "}
        <code>passingFees</code> of length <code>n</code> where{" "}
        <code>passingFees[j]</code> is the amount of dollars you must pay when
        you pass through city <code>j</code>.
      </p>

      <p>
        In the beginning, you are at city <code>0</code> and want to reach city{" "}
        <code>n - 1</code> in <code>maxTime</code>
        <strong> minutes or less</strong>. The <strong>cost</strong> of your
        journey is the <strong>summation of passing fees</strong> for each city
        that you passed through at some moment of your journey (
        <strong>including</strong> the source and destination cities).
      </p>

      <p>
        Given <code>maxTime</code>, <code>edges</code>, and{" "}
        <code>passingFees</code>, return{" "}
        <em>
          the <strong>minimum cost</strong> to complete your journey, or{" "}
        </em>
        <code>-1</code>
        <em> if you cannot complete it within </em>
        <code>maxTime</code>
        <em> minutes</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/06/04/leetgraph1-1.png"
          style={{ width: 371, height: 171 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> maxTime = 30, edges =
        [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees =
        [5,1,2,20,20,3] <br />
        <strong>Output:</strong> 11 <br />
        <strong>Explanation:</strong> The path to take is 0 -&gt; 1 -&gt; 2
        -&gt; 5, which takes 30 minutes and has $11 worth of passing fees.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2021/06/04/copy-of-leetgraph1-1.png"
            style={{ width: 371, height: 171 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> maxTime = 29, edges =
        [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees =
        [5,1,2,20,20,3] <br />
        <strong>Output:</strong> 48 <br />
        <strong>Explanation:</strong> The path to take is 0 -&gt; 3 -&gt; 4
        -&gt; 5, which takes 26 minutes and has $48 worth of passing fees.{" "}
        <br />
        You cannot take path 0 -&gt; 1 -&gt; 2 -&gt; 5 since it would take too
        long.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> maxTime = 25, edges =
        [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees =
        [5,1,2,20,20,3] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> There is no way to reach city 5 from city
        0 within 25 minutes.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= maxTime &lt;= 1000</code>
        </li>
        <li>
          <code>n == passingFees.length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>n - 1 &lt;= edges.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            1 &lt;= time<sub>i</sub> &lt;= 1000
          </code>
        </li>
        <li>
          <code>1 &lt;= passingFees[j] &lt;= 1000</code>&nbsp;
        </li>
        <li>The graph may contain multiple edges between two nodes.</li>
        <li>The graph does not contain self loops.</li>
      </ul>
    </div>
  ),
  2063: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>word</code>, return{" "}
        <em>
          the <strong>sum of the number of vowels</strong> (
        </em>
        <code>'a'</code>, <code>'e'</code>
        <em>,</em> <code>'i'</code>
        <em>,</em> <code>'o'</code>
        <em>, and</em> <code>'u'</code>
        <em>)</em> <em>in every substring of </em>
        <code>word</code>.
      </p>

      <p>
        A <strong>substring</strong> is a contiguous (non-empty) sequence of
        characters within a string.
      </p>

      <p>
        <strong>Note:</strong> Due to the large constraints, the answer may not
        fit in a signed 32-bit integer. Please be careful during the
        calculations.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "aba"
        <br />
        <strong>Output:</strong> 6<br />
        <strong>Explanation:</strong> <br />
        All possible substrings are: "a", "ab", "aba", "b", "ba", and "a".
        <br />
        - "b" has 0 vowels in it
        <br />
        - "a", "ab", "ba", and "a" have 1 vowel each
        <br />
        - "aba" has 2 vowels in it
        <br />
        Hence, the total sum of vowels = 0 + 1 + 1 + 1 + 1 + 2 = 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "abc" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> <br />
        All possible substrings are: "a", "ab", "abc", "b", "bc", and "c".
        <br />
        - "a", "ab", and "abc" have 1 vowel each
        <br />
        - "b", "bc", and "c" have 0 vowels each
        <br />
        Hence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "ltcd"
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> There are no vowels in any substring of
        "ltcd".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= word.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>word</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  2267: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A parentheses string is a <strong>non-empty</strong> string consisting
        only of <code>'('</code> and <code>')'</code>. It is{" "}
        <strong>valid</strong> if <strong>any</strong> of the following
        conditions is <strong>true</strong>:
      </p>

      <ul>
        <li>
          It is <code>()</code>.
        </li>
        <li>
          It can be written as <code>AB</code> (<code>A</code> concatenated with{" "}
          <code>B</code>), where <code>A</code> and <code>B</code> are valid
          parentheses strings.
        </li>
        <li>
          It can be written as <code>(A)</code>, where <code>A</code> is a valid
          parentheses string.
        </li>
      </ul>

      <p>
        You are given an <code>m x n</code> matrix of parentheses{" "}
        <code>grid</code>. A <strong>valid parentheses string path</strong> in
        the grid is a path satisfying <strong>all</strong> of the following
        conditions:
      </p>

      <ul>
        <li>
          The path starts from the upper left cell <code>(0, 0)</code>.
        </li>
        <li>
          The path ends at the bottom-right cell <code>(m - 1, n - 1)</code>.
        </li>
        <li>
          The path only ever moves <strong>down</strong> or{" "}
          <strong>right</strong>.
        </li>
        <li>
          The resulting parentheses string formed by the path is{" "}
          <strong>valid</strong>.
        </li>
      </ul>

      <p>
        Return <code>true</code>{" "}
        <em>
          if there exists a <strong>valid parentheses string path</strong> in
          the grid.
        </em>{" "}
        Otherwise, return <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/03/15/example1drawio.png"
        style={{ width: 521, height: 300 }}
      />
      <pre>
        <strong>Input:</strong> grid ={" "}
        {`[["(","(","("],[")","(",")"],["(","(",")"],["(","(",")"]]`} <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The above diagram shows two possible paths
        that form valid parentheses strings. <br />
        The first path shown results in the valid parentheses string "()(())".{" "}
        <br />
        The second path shown results in the valid parentheses string "((()))".{" "}
        <br />
        Note that there may be other valid parentheses string paths.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/03/15/example2drawio.png"
        style={{ width: 165, height: 165 }}
      />
      <pre>
        <strong>Input:</strong> grid = {`[[")",")"],["(","("]]`} <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The two possible paths form the
        parentheses strings {`"))("`} and {`")(("`}. Since neither of them are
        valid parentheses strings, we return false.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>'('</code> or <code>')'</code>
          .
        </li>
      </ul>
    </div>
  ),
  2297: (
    <div>
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> of length <code>n</code>. You are initially standing
        at index <code>0</code>. You can jump from index <code>i</code> to index{" "}
        <code>j</code> where <code>i &lt; j</code> if:
      </p>

      <ul>
        <li>
          <code>nums[i] &lt;= nums[j]</code> and{" "}
          <code>nums[k] &lt; nums[i]</code> for all indexes <code>k</code> in
          the range <code>i &lt; k &lt; j</code>, or
        </li>
        <li>
          <code>nums[i] &gt; nums[j]</code> and{" "}
          <code>nums[k] &gt;= nums[i]</code> for all indexes <code>k</code> in
          the range <code>i &lt; k &lt; j</code>.
        </li>
      </ul>

      <p>
        You are also given an integer array <code>costs</code> of length{" "}
        <code>n</code> where <code>costs[i]</code> denotes the cost of jumping{" "}
        <strong>to</strong> index <code>i</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> cost to jump to the index{" "}
        </em>
        <code>n - 1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,2,4,4,1], costs = [3,7,6,4,2] <br />
        <strong>Output:</strong> 8 <br />
        <strong>Explanation:</strong> You start at index 0. <br />
        - Jump to index 2 with a cost of costs[2] = 6. <br />
        - Jump to index 4 with a cost of costs[4] = 2.
        <br />
        The total cost is 8. It can be proven that 8 is the minimum cost needed.
        <br />
        Two other possible paths are from index 0 -&gt; 1 -&gt; 4 and index 0
        -&gt; 2 -&gt; 3 -&gt; 4.
        <br />
        These have a total cost of 9 and 12, respectively.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1,2], costs = [1,1,1]
        <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> Start at index 0.
        <br />
        - Jump to index 1 with a cost of costs[1] = 1.
        <br />
        - Jump to index 2 with a cost of costs[2] = 1.
        <br />
        The total cost is 2. Note that you cannot jump directly from index 0 to
        index 2 because nums[0] &lt;= nums[1].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length == costs.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i], costs[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2304: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> <code>m x n</code> integer
        matrix <code>grid</code> consisting of <strong>distinct</strong>{" "}
        integers from <code>0</code> to <code>m * n - 1</code>. You can move in
        this matrix from a cell to any other cell in the <strong>next</strong>{" "}
        row. That is, if you are in cell <code>(x, y)</code> such that{" "}
        <code>x &lt; m - 1</code>, you can move to any of the cells{" "}
        <code>(x + 1, 0)</code>, <code>(x + 1, 1)</code>, ...,{" "}
        <code>(x + 1, n - 1)</code>. <strong>Note</strong> that it is not
        possible to move from cells in the last row.
      </p>

      <p>
        Each possible move has a cost given by a <strong>0-indexed</strong> 2D
        array <code>moveCost</code> of size <code>(m * n) x n</code>, where{" "}
        <code>moveCost[i][j]</code> is the cost of moving from a cell with value{" "}
        <code>i</code> to a cell in column <code>j</code> of the next row. The
        cost of moving from cells in the last row of <code>grid</code> can be
        ignored.
      </p>

      <p>
        The cost of a path in <code>grid</code> is the <strong>sum</strong> of
        all values of cells visited plus the <strong>sum</strong> of costs of
        all the moves made. Return{" "}
        <em>
          the <strong>minimum</strong> cost of a path that starts from any cell
          in the <strong>first</strong> row and ends at any cell in the{" "}
          <strong>last</strong> row.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/04/28/griddrawio-2.png"
        style={{ width: 301, height: 281 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[5,3],[4,0],[2,1]], moveCost =
        [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]] <br />
        <strong>Output:</strong> 17 <br />
        <strong>Explanation: </strong>The path with the minimum possible cost is
        the path 5 -&gt; 0 -&gt; 1. <br />
        - The sum of the values of cells visited is 5 + 0 + 1 = 6. <br />
        - The cost of moving from 5 to 0 is 3. <br />
        - The cost of moving from 0 to 1 is 8. <br />
        So the total cost of the path is 6 + 3 + 8 = 17.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[5,1,2],[4,0,3]], moveCost =
        [[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The path with the minimum possible cost is
        the path 2 -&gt; 3. <br />
        - The sum of the values of cells visited is 2 + 3 = 5. <br />
        - The cost of moving from 2 to 3 is 1. <br />
        So the total cost of this path is 5 + 1 = 6.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>2 &lt;= m, n &lt;= 50</code>
        </li>
        <li>
          <code>grid</code> consists of distinct integers from <code>0</code> to{" "}
          <code>m * n - 1</code>.
        </li>
        <li>
          <code>moveCost.length == m * n</code>
        </li>
        <li>
          <code>moveCost[i].length == n</code>
        </li>
        <li>
          <code>1 &lt;= moveCost[i][j] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  2393: (
    <article role="main" class="blog-post">
      <p>
        You are given an array <code>nums</code> consisting of{" "}
        <strong>positive</strong> integers.
      </p>

      <p>
        Return{" "}
        <em>
          the number of <strong>subarrays</strong> of{" "}
        </em>
        <code>nums</code>
        <em>
          {" "}
          that are in <strong>strictly increasing</strong> order.
        </em>
      </p>

      <p>
        A <strong>subarray</strong> is a <strong>contiguous</strong> part of an
        array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,5,4,4,6] <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation:</strong> The strictly increasing subarrays are the
        following: <br />
        - Subarrays of length 1: [1], [3], [5], [4], [4], [6]. <br />
        - Subarrays of length 2: [1,3], [3,5], [4,6]. <br />
        - Subarrays of length 3: [1,3,5]. <br />
        The total number of subarrays is 6 + 3 + 1 = 10.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5] <br />
        <strong>Output:</strong> 15 <br />
        <strong>Explanation:</strong> Every subarray is strictly increasing.
        There are 15 possible subarrays that we can take.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </article>
  ),
  2420: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> of size <code>n</code> and a positive integer{" "}
        <code>k</code>.
      </p>

      <p>
        We call an index <code>i</code> in the range{" "}
        <code>k &lt;= i &lt; n - k</code> <strong>good</strong> if the following
        conditions are satisfied:
      </p>

      <ul>
        <li>
          The <code>k</code> elements that are just <strong>before</strong> the
          index <code>i</code> are in <strong>non-increasing</strong> order.
        </li>
        <li>
          The <code>k</code> elements that are just <strong>after</strong> the
          index <code>i</code> are in <strong>non-decreasing</strong> order.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          an array of all good indices sorted in <strong>increasing</strong>{" "}
          order
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1,1,1,3,4,1], k = 2 <br />
        <strong>Output:</strong> [2,3] <br />
        <strong>Explanation:</strong> There are two good indices in the array:{" "}
        <br />
        - Index 2. The subarray [2,1] is in non-increasing order, and the
        subarray [1,3] is in non-decreasing order. <br />
        - Index 3. The subarray [1,1] is in non-increasing order, and the
        subarray [3,4] is in non-decreasing order.
        <br />
        Note that the index 4 is not good because [4,1] is not non-decreasing.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1,1,2], k = 2 <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> There are no good indices in this array.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= n / 2</code>
        </li>
      </ul>
    </div>
  ),
  2439: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array <code>nums</code>{" "}
        comprising of <code>n</code> non-negative integers.
      </p>

      <p>In one operation, you must:</p>

      <ul>
        <li>
          Choose an integer <code>i</code> such that{" "}
          <code>1 &lt;= i &lt; n</code> and <code>nums[i] &gt; 0</code>.
        </li>
        <li>
          Decrease <code>nums[i]</code> by 1.
        </li>
        <li>
          Increase <code>nums[i - 1]</code> by 1.
        </li>
      </ul>

      <p>
        Return
        <em>
          {" "}
          the <strong>minimum</strong> possible value of the{" "}
          <strong>maximum</strong> integer of{" "}
        </em>
        <code>nums</code>
        <em>
          {" "}
          after performing <strong>any</strong> number of operations
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,7,1,6] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> <br />
        One set of optimal operations is as follows: <br />
        1. Choose i = 1, and nums becomes [4,6,1,6]. <br />
        2. Choose i = 3, and nums becomes [4,6,2,5]. <br />
        3. Choose i = 1, and nums becomes [5,5,2,5]. <br />
        The maximum integer of nums is 5. It can be shown that the maximum
        number cannot be less than 5.
        <br /> Therefore, we return 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [10,1] <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation:</strong> <br />
        It is optimal to leave nums as is, and since 10 is the maximum value, we
        return 10.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2484: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string of digits <code>s</code>, return{" "}
        <em>
          the number of <strong>palindromic subsequences</strong> of
        </em>{" "}
        <code>s</code>
        <em> having length </em>
        <code>5</code>. Since the answer may be very large, return it{" "}
        <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          A string is <strong>palindromic</strong> if it reads the same forward
          and backward.
        </li>
        <li>
          A <strong>subsequence</strong> is a string that can be derived from
          another string by deleting some or no characters without changing the
          order of the remaining characters.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "103301" <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> <br />
        There are 6 possible subsequences of length 5:
        "10330","10331","10301","10301","13301","03301". <br />
        Two of them (both equal to "10301") are palindromic.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "0000000" <br />
        <strong>Output:</strong> 21 <br />
        <strong>Explanation:</strong> All 21 subsequences are "00000", which is
        palindromic.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "9999900000" <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The only two palindromic subsequences are
        "99999" and "00000".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of digits.
        </li>
      </ul>
    </div>
  ),
  2741: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a&nbsp;<strong>0-indexed</strong>&nbsp;integer array&nbsp;
        <code>nums</code>&nbsp;containing&nbsp;<code>n</code>&nbsp;
        <strong>distinct</strong> positive integers. A permutation of&nbsp;
        <code>nums</code>&nbsp;is called special if:
      </p>

      <ul>
        <li>
          For all indexes&nbsp;<code>0 &lt;= i &lt; n - 1</code>, either&nbsp;
          <code>nums[i] % nums[i+1] == 0</code>&nbsp;or&nbsp;
          <code>nums[i+1] % nums[i] == 0</code>.
        </li>
      </ul>

      <p>
        Return&nbsp;<em>the total number of special permutations.&nbsp;</em>As
        the answer could be large, return it&nbsp;<strong>modulo&nbsp;</strong>
        <code>
          10<sup>9&nbsp;</sup>+ 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,6] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> [3,6,2] and [2,6,3] are the two special
        permutations of nums.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,4,3] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> [3,1,4] and [4,1,3] are the two special
        permutations of nums.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= nums.length &lt;= 14</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2771: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two <strong>0-indexed</strong> integer arrays{" "}
        <code>nums1</code> and <code>nums2</code> of length <code>n</code>.
      </p>

      <p>
        Let's define another <strong>0-indexed</strong> integer array,{" "}
        <code>nums3</code>, of length <code>n</code>. For each index{" "}
        <code>i</code> in the range <code>[0, n - 1]</code>, you can assign
        either <code>nums1[i]</code> or <code>nums2[i]</code> to{" "}
        <code>nums3[i]</code>.
      </p>

      <p>
        Your task is to maximize the length of the{" "}
        <strong>longest non-decreasing subarray</strong> in <code>nums3</code>{" "}
        by choosing its values optimally.
      </p>

      <p>
        Return{" "}
        <em>
          an integer representing the length of the{" "}
          <strong>longest non-decreasing</strong> subarray in
        </em>{" "}
        <code>nums3</code>.
      </p>

      <p>
        <strong>Note: </strong>A <strong>subarray</strong> is a contiguous{" "}
        <strong>non-empty</strong> sequence of elements within an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [2,3,1], nums2 = [1,2,1] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation: </strong>One way to construct nums3 is: <br />
        nums3 = [nums1[0], nums2[1], nums2[2]] =&gt; [2,2,1]. <br />
        The subarray starting from index 0 and ending at index 1, [2,2], forms a
        non-decreasing subarray of length 2. <br />
        We can show that 2 is the maximum achievable length.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,3,2,1], nums2 = [2,2,3,4] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> One way to construct nums3 is: <br />
        nums3 = [nums1[0], nums2[1], nums2[2], nums2[3]] =&gt; [1,2,3,4]. <br />
        The entire array forms a non-decreasing subarray of length 4, making it
        the maximum achievable length.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,1], nums2 = [2,2] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> One way to construct nums3 is: <br />
        nums3 = [nums1[0], nums1[1]] =&gt; [1,1]. <br />
        The entire array forms a non-decreasing subarray of length 2, making it
        the maximum achievable length.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums1.length == nums2.length == n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2900: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string array <code>words</code> and a{" "}
        <strong>binary</strong> array <code>groups</code> both of length{" "}
        <code>n</code>, where <code>words[i]</code> is associated with{" "}
        <code>groups[i]</code>.
      </p>

      <p>
        Your task is to select the <strong>longest alternating</strong>{" "}
        <span
          data-keyword="subsequence-array"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rs9:"
              >
                <div>subsequence</div>
              </div>
            </div>
          </div>
        </span>{" "}
        from <code>words</code>. A subsequence of <code>words</code> is
        alternating if for any two consecutive strings in the sequence, their
        corresponding elements in the binary array <code>groups</code> differ.
        Essentially, you are to choose strings such that adjacent elements have
        non-matching corresponding bits in the <code>groups</code> array.
      </p>

      <p>
        Formally, you need to find the longest subsequence of an array of
        indices <code>[0, 1, ..., n - 1]</code> denoted as{" "}
        <code>
          [i<sub>0</sub>, i<sub>1</sub>, ..., i<sub>k-1</sub>]
        </code>
        , such that{" "}
        <code>
          groups[i<sub>j</sub>] != groups[i<sub>j+1</sub>]
        </code>{" "}
        for each <code>0 &lt;= j &lt; k - 1</code> and then find the words
        corresponding to these indices.
      </p>

      <p>
        Return{" "}
        <em>
          the selected subsequence. If there are multiple answers, return{" "}
          <strong>any</strong> of them.
        </em>
      </p>

      <p>
        <strong>Note:</strong> The elements in <code>words</code> are distinct.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            words = ["e","a","b"], groups = [0,0,1]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">["e","b"]</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong> A subsequence that can be selected is{" "}
          <code>["e","b"]</code> because <code>groups[0] != groups[2]</code>.
          Another subsequence that can be selected is <code>["a","b"]</code>{" "}
          because <code>groups[1] != groups[2]</code>. It can be demonstrated
          that the length of the longest subsequence of indices that satisfies
          the condition is <code>2</code>.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            words = ["a","b","c","d"], groups = [1,0,1,1]
          </span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">["a","b","c"]</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong> A subsequence that can be selected is{" "}
          <code>["a","b","c"]</code> because <code>groups[0] != groups[1]</code>{" "}
          and <code>groups[1] != groups[2]</code>. Another subsequence that can
          be selected is <code>["a","b","d"]</code> because{" "}
          <code>groups[0] != groups[1]</code> and{" "}
          <code>groups[1] != groups[3]</code>. It can be shown that the length
          of the longest subsequence of indices that satisfies the condition is{" "}
          <code>3</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n == words.length == groups.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 10</code>
        </li>
        <li>
          <code>groups[i]</code> is either <code>0</code> or <code>1.</code>
        </li>
        <li>
          <code>words</code> consists of <strong>distinct</strong> strings.
        </li>
        <li>
          <code>words[i]</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  2901: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string array <code>words</code>, and an array{" "}
        <code>groups</code>, both arrays having length <code>n</code>.
      </p>

      <p>
        The <strong>hamming distance</strong> between two strings of equal
        length is the number of positions at which the corresponding characters
        are <strong>different</strong>.
      </p>

      <p>
        You need to select the <strong>longest</strong>{" "}
        <span
          data-keyword="subsequence-array"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rv4:"
              >
                <div>subsequence</div>
              </div>
            </div>
          </div>
        </span>{" "}
        from an array of indices <code>[0, 1, ..., n - 1]</code>, such that for
        the subsequence denoted as{" "}
        <code>
          [i<sub>0</sub>, i<sub>1</sub>, ..., i<sub>k-1</sub>]
        </code>{" "}
        having length <code>k</code>, the following holds:
      </p>

      <ul>
        <li>
          For <strong>adjacent</strong> indices in the subsequence, their
          corresponding groups are <strong>unequal</strong>, i.e.,{" "}
          <code>
            groups[i<sub>j</sub>] != groups[i<sub>j+1</sub>]
          </code>
          , for each <code>j</code> where <code>0 &lt; j + 1 &lt; k</code>.
        </li>
        <li>
          <code>
            words[i<sub>j</sub>]
          </code>{" "}
          and{" "}
          <code>
            words[i<sub>j+1</sub>]
          </code>{" "}
          are <strong>equal</strong> in length, and the{" "}
          <strong>hamming distance</strong> between them is <code>1</code>,
          where <code>0 &lt; j + 1 &lt; k</code>, for all indices in the
          subsequence.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          a string array containing the words corresponding to the indices{" "}
          <strong>(in order)</strong> in the selected subsequence
        </em>
        . If there are multiple answers, return <em>any of them</em>.
      </p>

      <p>
        <strong>Note:</strong> strings in <code>words</code> may be{" "}
        <strong>unequal</strong> in length.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input: </strong>
          <span class="example-io">
            words = ["bab","dab","cab"], groups = [1,2,2]
          </span>
        </p>
        <br />

        <p>
          <strong>Output: </strong>
          <span class="example-io">["bab","cab"]</span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong>A subsequence that can be selected is{" "}
          <code>[0,2]</code>.
        </p>
        <br />

        <ul>
          <li>
            <code>groups[0] != groups[2]</code>
          </li>
          <li>
            <code>words[0].length == words[2].length</code>, and the hamming
            distance between them is 1.
          </li>
        </ul>
        <br />

        <p>
          So, a valid answer is <code>[words[0],words[2]] = ["bab","cab"]</code>
          .
        </p>
        <br />

        <p>
          Another subsequence that can be selected is <code>[0,1]</code>.
        </p>
        <br />

        <ul>
          <li>
            <code>groups[0] != groups[1]</code>
          </li>
          <li>
            <code>words[0].length == words[1].length</code>, and the hamming
            distance between them is <code>1</code>.
          </li>
        </ul>
        <br />

        <p>
          So, another valid answer is{" "}
          <code>[words[0],words[1]] = ["bab","dab"]</code>.
        </p>
        <br />

        <p>
          It can be shown that the length of the longest subsequence of indices
          that satisfies the conditions is <code>2</code>.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input: </strong>
          <span class="example-io">
            words = ["a","b","c","d"], groups = [1,2,3,4]
          </span>
        </p>
        <br />
        <p>
          <strong>Output: </strong>
          <span class="example-io">["a","b","c","d"]</span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong>We can select the subsequence{" "}
          <code>[0,1,2,3]</code>.
        </p>
        <br />

        <p>It satisfies both conditions.</p>
        <br />

        <p>
          Hence, the answer is{" "}
          <code>[words[0],words[1],words[2],words[3]] = ["a","b","c","d"]</code>
          .
        </p>
        <br />

        <p>
          It has the longest length among all subsequences of indices that
          satisfy the conditions.
        </p>
        <br />

        <p>Hence, it is the only answer.</p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n == words.length == groups.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 10</code>
        </li>
        <li>
          <code>1 &lt;= groups[i] &lt;= n</code>
        </li>
        <li>
          <code>words</code> consists of <strong>distinct</strong> strings.
        </li>
        <li>
          <code>words[i]</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  2915: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array of integers{" "}
        <code>nums</code>, and an integer <code>target</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>length of the longest subsequence</strong> of
        </em>{" "}
        <code>nums</code> <em>that sums up to</em> <code>target</code>.{" "}
        <em>If no such subsequence exists, return</em> <code>-1</code>.
      </p>

      <p>
        A <strong>subsequence</strong> is an array that can be derived from
        another array by deleting some or no elements without changing the order
        of the remaining elements.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5], target = 9 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> There are 3 subsequences with a sum equal
        to 9: [4,5], [1,3,5], and [2,3,4]. The longest subsequences are [1,3,5],
        and [2,3,4]. Hence, the answer is 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,1,3,2,1,5], target = 7 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> There are 5 subsequences with a sum equal
        to 7: [4,3], [4,1,2], [4,2,1], [1,1,5], and [1,3,2,1]. The longest
        subsequence is [1,3,2,1]. Hence, the answer is 4.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,5,4,5], target = 3 <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> It can be shown that nums has no
        subsequence that sums up to 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= target &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  3129: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given 3 positive integers <code>zero</code>, <code>one</code>,
        and <code>limit</code>.
      </p>

      <p>
        A{" "}
        <span
          data-keyword="binary-array"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r15m:"
              >
                <div>binary array</div>
              </div>
            </div>
          </div>
        </span>{" "}
        <code>arr</code> is called <strong>stable</strong> if:
      </p>

      <ul>
        <li>
          The number of occurrences of 0 in <code>arr</code> is{" "}
          <strong>exactly </strong>
          <code>zero</code>.
        </li>
        <li>
          The number of occurrences of 1 in <code>arr</code> is{" "}
          <strong>exactly</strong> <code>one</code>.
        </li>
        <li>
          Each{" "}
          <span
            data-keyword="subarray-nonempty"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:r15o:"
                >
                  <div>subarray</div>
                </div>
              </div>
            </div>
          </span>{" "}
          of <code>arr</code> with a size greater than <code>limit</code> must
          contain <strong>both </strong>0 and 1.
        </li>
      </ul>

      <p>
        Return the <em>total</em> number of <strong>stable</strong> binary
        arrays.
      </p>

      <p>
        Since the answer may be very large, return it <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">zero = 1, one = 1, limit = 2</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The two possible stable binary arrays are <code>[1,0]</code> and{" "}
          <code>[0,1]</code>, as both arrays have a single 0 and a single 1, and
          no subarray has a length greater than 2.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">zero = 1, one = 2, limit = 1</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The only possible stable binary array is <code>[1,0,1]</code>.
        </p>
        <br />

        <p>
          Note that the binary arrays <code>[1,1,0]</code> and{" "}
          <code>[0,1,1]</code> have subarrays of length 2 with identical
          elements, hence, they are not stable.
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">zero = 3, one = 3, limit = 2</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">14</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          All the possible stable binary arrays are <code>[0,0,1,0,1,1]</code>,{" "}
          <code>[0,0,1,1,0,1]</code>, <code>[0,1,0,0,1,1]</code>,{" "}
          <code>[0,1,0,1,0,1]</code>, <code>[0,1,0,1,1,0]</code>,{" "}
          <code>[0,1,1,0,0,1]</code>, <code>[0,1,1,0,1,0]</code>,{" "}
          <code>[1,0,0,1,0,1]</code>, <code>[1,0,0,1,1,0]</code>,{" "}
          <code>[1,0,1,0,0,1]</code>, <code>[1,0,1,0,1,0]</code>,{" "}
          <code>[1,0,1,1,0,0]</code>, <code>[1,1,0,0,1,0]</code>, and{" "}
          <code>[1,1,0,1,0,0]</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= zero, one, limit &lt;= 200</code>
        </li>
      </ul>
    </div>
  ),
  3130: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given 3 positive integers <code>zero</code>, <code>one</code>,
        and <code>limit</code>.
      </p>

      <p>
        A{" "}
        <span
          data-keyword="binary-array"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r15m:"
              >
                <div>binary array</div>
              </div>
            </div>
          </div>
        </span>{" "}
        <code>arr</code> is called <strong>stable</strong> if:
      </p>

      <ul>
        <li>
          The number of occurrences of 0 in <code>arr</code> is{" "}
          <strong>exactly </strong>
          <code>zero</code>.
        </li>
        <li>
          The number of occurrences of 1 in <code>arr</code> is{" "}
          <strong>exactly</strong> <code>one</code>.
        </li>
        <li>
          Each{" "}
          <span
            data-keyword="subarray-nonempty"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:r15o:"
                >
                  <div>subarray</div>
                </div>
              </div>
            </div>
          </span>{" "}
          of <code>arr</code> with a size greater than <code>limit</code> must
          contain <strong>both </strong>0 and 1.
        </li>
      </ul>

      <p>
        Return the <em>total</em> number of <strong>stable</strong> binary
        arrays.
      </p>

      <p>
        Since the answer may be very large, return it <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">zero = 1, one = 1, limit = 2</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The two possible stable binary arrays are <code>[1,0]</code> and{" "}
          <code>[0,1]</code>.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">zero = 1, one = 2, limit = 1</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The only possible stable binary array is <code>[1,0,1]</code>.
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">zero = 3, one = 3, limit = 2</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">14</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          All the possible stable binary arrays are <code>[0,0,1,0,1,1]</code>,{" "}
          <code>[0,0,1,1,0,1]</code>, <code>[0,1,0,0,1,1]</code>,{" "}
          <code>[0,1,0,1,0,1]</code>, <code>[0,1,0,1,1,0]</code>,{" "}
          <code>[0,1,1,0,0,1]</code>, <code>[0,1,1,0,1,0]</code>,{" "}
          <code>[1,0,0,1,0,1]</code>, <code>[1,0,0,1,1,0]</code>,{" "}
          <code>[1,0,1,0,0,1]</code>, <code>[1,0,1,0,1,0]</code>,{" "}
          <code>[1,0,1,1,0,0]</code>, <code>[1,1,0,0,1,0]</code>, and{" "}
          <code>[1,1,0,1,0,0]</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= zero, one, limit &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  3176: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and a{" "}
        <strong>non-negative</strong> integer <code>k</code>. A sequence of
        integers <code>seq</code> is called <strong>good</strong> if there are{" "}
        <strong>at most</strong> <code>k</code> indices <code>i</code> in the
        range <code>[0, seq.length - 2]</code> such that{" "}
        <code>seq[i] != seq[i + 1]</code>.
      </p>

      <p>
        Return the <strong>maximum</strong> possible length of a{" "}
        <strong>good</strong>{" "}
        <span
          data-keyword="subsequence-array"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r186:"
              >
                <div>subsequence</div>
              </div>
            </div>
          </div>
        </span>{" "}
        of <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,2,1,1,3], k = 2</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">4</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          The maximum length subsequence is{" "}
          <code>
            [<u>1</u>,<u>2</u>,<u>1</u>,<u>1</u>,3]
          </code>
          .
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,2,3,4,5,1], k = 0</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          The maximum length subsequence is{" "}
          <code>
            [<u>1</u>,2,3,4,5,<u>1</u>]
          </code>
          .
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 500</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= k &lt;= min(nums.length, 25)</code>
        </li>
      </ul>
    </div>
  ),
  3201: (
    <div class="elfjS" data-track-load="description_content">
      You are given an integer array <code>nums</code>.
      <p>
        A{" "}
        <span
          data-keyword="subsequence-array"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r1a9:"
              >
                <div>subsequence</div>
              </div>
            </div>
          </div>
        </span>{" "}
        <code>sub</code> of <code>nums</code> with length <code>x</code> is
        called <strong>valid</strong> if it satisfies:
      </p>
      <ul>
        <li>
          <code>
            (sub[0] + sub[1]) % 2 == (sub[1] + sub[2]) % 2 == ... == (sub[x - 2]
            + sub[x - 1]) % 2.
          </code>
        </li>
      </ul>
      <p>
        Return the length of the <strong>longest</strong> <strong>valid</strong>{" "}
        subsequence of <code>nums</code>.
      </p>
      <p>
        A <strong>subsequence</strong> is an array that can be derived from
        another array by deleting some or no elements without changing the order
        of the remaining elements.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,2,3,4]</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">4</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The longest valid subsequence is <code>[1, 2, 3, 4]</code>.
        </p>
      </div>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,2,1,1,2,1,2]</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> 6
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The longest valid subsequence is <code>[1, 2, 1, 2, 1, 2]</code>.
        </p>
      </div>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [1,3]</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The longest valid subsequence is <code>[1, 3]</code>.
        </p>
      </div>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            2 &lt;= nums.length &lt;= 2 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>7</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3202: (
    <div class="elfjS" data-track-load="description_content">
      You are given an integer array <code>nums</code> and a{" "}
      <strong>positive</strong> integer <code>k</code>.
      <p>
        A{" "}
        <span
          data-keyword="subsequence-array"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r1bl:"
              >
                <div>subsequence</div>
              </div>
            </div>
          </div>
        </span>{" "}
        <code>sub</code> of <code>nums</code> with length <code>x</code> is
        called <strong>valid</strong> if it satisfies:
      </p>
      <ul>
        <li>
          <code>
            (sub[0] + sub[1]) % k == (sub[1] + sub[2]) % k == ... == (sub[x - 2]
            + sub[x - 1]) % k.
          </code>
        </li>
      </ul>
      Return the length of the <strong>longest</strong> <strong>valid</strong>{" "}
      subsequence of <code>nums</code>.<p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,2,3,4,5], k = 2</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">5</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The longest valid subsequence is <code>[1, 2, 3, 4, 5]</code>.
        </p>
      </div>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,4,2,3,1,4], k = 3</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">4</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The longest valid subsequence is <code>[1, 4, 1, 4]</code>.
        </p>
      </div>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            2 &lt;= nums.length &lt;= 10<sup>3</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>7</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>3</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  21: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the heads of two sorted linked lists <code>list1</code>{" "}
        and <code>list2</code>.
      </p>

      <p>
        Merge the two lists into one <strong>sorted</strong> list. The list
        should be made by splicing together the nodes of the first two lists.
      </p>

      <p>
        Return <em>the head of the merged linked list</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg"
        style={{ width: 662, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> list1 = [1,2,4], list2 = [1,3,4] <br />
        <strong>Output:</strong> [1,1,2,3,4,4]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> list1 = [], list2 = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> list1 = [], list2 = [0] <br />
        <strong>Output:</strong> [0]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in both lists is in the range <code>[0, 50]</code>
          .
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
        <li>
          Both <code>list1</code> and <code>list2</code> are sorted in{" "}
          <strong>non-decreasing</strong> order.
        </li>
      </ul>
    </div>
  ),
  43: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two non-negative integers <code>num1</code> and <code>num2</code>{" "}
        represented as strings, return the product of <code>num1</code> and{" "}
        <code>num2</code>, also represented as a string.
      </p>
      <p>
        <strong>Note:</strong>&nbsp;You must not use any built-in BigInteger
        library or convert the inputs to integer directly.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> num1 = "2", num2 = "3" <br />
        <strong>Output:</strong> "6" <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> num1 = "123", num2 = "456" <br />
        <strong>Output:</strong> "56088"
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= num1.length, num2.length &lt;= 200</code>
        </li>
        <li>
          <code>num1</code> and <code>num2</code> consist of digits only.
        </li>
        <li>
          Both <code>num1</code> and <code>num2</code>&nbsp;do not contain any
          leading zero, except the number <code>0</code> itself.
        </li>
      </ul>
    </div>
  ),
  56: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array&nbsp;of <code>intervals</code>&nbsp;where{" "}
        <code>
          intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]
        </code>
        , merge all overlapping intervals, and return{" "}
        <em>
          an array of the non-overlapping intervals that cover all the intervals
          in the input
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,3],[2,6],[8,10],[15,18]] <br />
        <strong>Output:</strong> [[1,6],[8,10],[15,18]] <br />
        <strong>Explanation:</strong> Since intervals [1,3] and [2,6] overlap,
        merge them into [1,6].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,4],[4,5]] <br />
        <strong>Output:</strong> [[1,5]] <br />
        <strong>Explanation:</strong> Intervals [1,4] and [4,5] are considered
        overlapping.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= intervals.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>intervals[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  68: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of strings <code>words</code> and a width{" "}
        <code>maxWidth</code>, format the text such that each line has exactly{" "}
        <code>maxWidth</code> characters and is fully (left and right)
        justified.
      </p>

      <p>
        You should pack your words in a greedy approach; that is, pack as many
        words as you can in each line. Pad extra spaces <code>' '</code> when
        necessary so that each line has exactly <code>maxWidth</code>{" "}
        characters.
      </p>

      <p>
        Extra spaces between words should be distributed as evenly as possible.
        If the number of spaces on a line does not divide evenly between words,
        the empty slots on the left will be assigned more spaces than the slots
        on the right.
      </p>

      <p>
        For the last line of text, it should be left-justified, and no extra
        space is inserted between words.
      </p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          A word is defined as a character sequence consisting of non-space
          characters only.
        </li>
        <li>
          Each word's length is guaranteed to be greater than <code>0</code> and
          not exceed <code>maxWidth</code>.
        </li>
        <li>
          The input array <code>words</code> contains at least one word.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["This", "is", "an", "example", "of",
        "text", "justification."], maxWidth = 16
        <strong>Output:</strong>[ &nbsp; &nbsp;"This &nbsp; &nbsp;is &nbsp;
        &nbsp;an", &nbsp; &nbsp;"example &nbsp;of text", &nbsp;
        &nbsp;"justification. &nbsp;" ]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words =
        ["What","must","be","acknowledgment","shall","be"], maxWidth = 16
        <br />
        <strong>Output:</strong> <br />
        [<br />
        &nbsp; "What &nbsp; must &nbsp; be", <br />
        &nbsp; "acknowledgment &nbsp;",
        <br />
        &nbsp; "shall be &nbsp; &nbsp; &nbsp; &nbsp;"
        <br />
        ]<br />
        <strong>Explanation:</strong> Note that the last line is "shall be "
        instead of "shall be", because the last line must be left-justified
        instead of fully-justified.
        <br /> Note that the second line is also left-justified because it
        contains only one word.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words =
        ["Science","is","what","we","understand","well","enough","to","explain","to","a","computer.","Art","is","everything","else","we","do"],
        maxWidth = 20
        <br /> <strong>Output:</strong>
        <br />
        [<br />
        &nbsp; "Science &nbsp;is &nbsp;what we",
        <br />
        "understand &nbsp; &nbsp; &nbsp;well",
        <br />
        &nbsp; "enough to explain to",
        <br />
        &nbsp; "a &nbsp;computer. &nbsp;Art is",
        <br />
        &nbsp; "everything &nbsp;else &nbsp;we",
        <br />
        &nbsp; "do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        &nbsp;"
        <br />]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= words.length &lt;= 300</code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 20</code>
        </li>
        <li>
          <code>words[i]</code> consists of only English letters and symbols.
        </li>
        <li>
          <code>1 &lt;= maxWidth &lt;= 100</code>
        </li>
        <li>
          <code>words[i].length &lt;= maxWidth</code>
        </li>
      </ul>
    </div>
  ),
  83: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a sorted linked list,{" "}
        <em>delete all duplicates such that each element appears only once</em>.
        Return{" "}
        <em>
          the linked list <strong>sorted</strong> as well
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/04/list1.jpg"
        style={{ width: 302, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,1,2] <br />
        <strong>Output:</strong> [1,2]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/04/list2.jpg"
        style={{ width: 542, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,1,2,3,3] <br />
        <strong>Output:</strong> [1,2,3]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is in the range <code>[0, 300]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
        <li>
          The list is guaranteed to be <strong>sorted</strong> in ascending
          order.
        </li>
      </ul>
    </div>
  ),
  92: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a singly linked list and two integers{" "}
        <code>left</code> and <code>right</code> where{" "}
        <code>left &lt;= right</code>, reverse the nodes of the list from
        position <code>left</code> to position <code>right</code>, and return{" "}
        <em>the reversed list</em>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg"
        style={{ width: 542, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5], left = 2, right = 4 <br />
        <strong>Output:</strong> [1,4,3,2,5]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> head = [5], left = 1, right = 1 <br />
        <strong>Output:</strong> [5]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the list is <code>n</code>.
        </li>
        <li>
          <code>1 &lt;= n &lt;= 500</code>
        </li>
        <li>
          <code>-500 &lt;= Node.val &lt;= 500</code>
        </li>
        <li>
          <code>1 &lt;= left &lt;= right &lt;= n</code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you do it in one pass?
    </div>
  ),
  128: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an unsorted array of integers <code>nums</code>, return{" "}
        <em>the length of the longest consecutive elements sequence.</em>
      </p>

      <p>
        You must write an algorithm that runs in&nbsp;<code>O(n)</code>
        &nbsp;time.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [100,4,200,1,3,2] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The longest consecutive elements sequence
        is <code>[1, 2, 3, 4]</code>. Therefore its length is 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,3,7,2,5,8,4,6,0,1] <br />
        <strong>Output:</strong> 9
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,0,1,2] <br />
        <strong>Output:</strong> 3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  127: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>transformation sequence</strong> from word{" "}
        <code>beginWord</code> to word <code>endWord</code> using a dictionary{" "}
        <code>wordList</code> is a sequence of words{" "}
        <code>
          beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s
          <sub>k</sub>
        </code>{" "}
        such that:
      </p>

      <ul>
        <li>Every adjacent pair of words differs by a single letter.</li>
        <li>
          Every{" "}
          <code>
            s<sub>i</sub>
          </code>{" "}
          for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note
          that <code>beginWord</code> does not need to be in{" "}
          <code>wordList</code>.
        </li>
        <li>
          <code>
            s<sub>k</sub> == endWord
          </code>
        </li>
      </ul>

      <p>
        Given two words, <code>beginWord</code> and <code>endWord</code>, and a
        dictionary <code>wordList</code>, return{" "}
        <em>
          the <strong>number of words</strong> in the{" "}
          <strong>shortest transformation sequence</strong> from
        </em>{" "}
        <code>beginWord</code> <em>to</em> <code>endWord</code>
        <em>, or </em>
        <code>0</code>
        <em> if no such sequence exists.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> beginWord = "hit", endWord = "cog", wordList =
        ["hot","dot","dog","lot","log","cog"] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> One shortest transformation sequence is
        "hit" -&gt; "hot" -&gt; "dot" -&gt; "dog" -&gt; cog", which is 5 words
        long.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> beginWord = "hit", endWord = "cog", wordList =
        ["hot","dot","dog","lot","log"] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The endWord "cog" is not in wordList,
        therefore there is no valid transformation sequence.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= beginWord.length &lt;= 10</code>
        </li>
        <li>
          <code>endWord.length == beginWord.length</code>
        </li>
        <li>
          <code>1 &lt;= wordList.length &lt;= 5000</code>
        </li>
        <li>
          <code>wordList[i].length == beginWord.length</code>
        </li>
        <li>
          <code>beginWord</code>, <code>endWord</code>, and{" "}
          <code>wordList[i]</code> consist of lowercase English letters.
        </li>
        <li>
          <code>beginWord != endWord</code>
        </li>
        <li>
          All the words in <code>wordList</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  132: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, partition <code>s</code> such that every{" "}
        <span
          data-keyword="substring-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <button
            type="button"
            aria-haspopup="dialog"
            aria-expanded="false"
            aria-controls="radix-:r4v:"
            data-state="closed"
            class=""
          >
            substring
          </button>
        </span>{" "}
        of the partition is a{" "}
        <span
          data-keyword="palindrome-string"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <button
            type="button"
            aria-haspopup="dialog"
            aria-expanded="false"
            aria-controls="radix-:r50:"
            data-state="closed"
            class=""
          >
            palindrome
          </button>
        </span>
        .
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> cuts needed for a palindrome partitioning
          of
        </em>{" "}
        <code>s</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aab" <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The palindrome partitioning ["aa","b"]
        could be produced using 1 cut.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "a" <br />
        <strong>Output:</strong> 0
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "ab" <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 2000</code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters only.
        </li>
      </ul>
    </div>
  ),
  143: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the head of a singly linked-list. The list can be
        represented as:
      </p>

      <pre>
        L<sub>0</sub> → L<sub>1</sub> → … → L<sub>n - 1</sub> → L<sub>n</sub>
      </pre>

      <p>
        <em>Reorder the list to be on the following form:</em>
      </p>

      <pre>
        L<sub>0</sub> → L<sub>n</sub> → L<sub>1</sub> → L<sub>n - 1</sub> → L
        <sub>2</sub> → L<sub>n - 2</sub> → …
      </pre>

      <p>
        You may not modify the values in the list's nodes. Only nodes themselves
        may be changed.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg"
        style={{ width: 422, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,4] <br />
        <strong>Output:</strong> [1,4,2,3]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg"
        style={{ width: 542, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5] <br />
        <strong>Output:</strong> [1,5,2,4,3]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is in the range{" "}
          <code>
            [1, 5 * 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>1 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  147: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a singly linked list, sort the list using{" "}
        <strong>insertion sort</strong>, and return{" "}
        <em>the sorted list's head</em>.
      </p>

      <p>
        The steps of the <strong>insertion sort</strong> algorithm:
      </p>

      <ul>
        <li>
          Insertion sort iterates, consuming one input element each repetition
          and growing a sorted output list.
        </li>
        <li>
          At each iteration, insertion sort removes one element from the input
          data, finds the location it belongs within the sorted list and inserts
          it there.
        </li>
        <li>It repeats until no input elements remain.</li>
      </ul>

      <p>
        The following is a graphical example of the insertion sort algorithm.
        The partially sorted list (black) initially contains only the first
        element in the list. One element (red) is removed from the input data
        and inserted in-place into the sorted list with each iteration.
      </p>
      <img
        alt=""
        src="https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif"
        style={{ height: 180, width: 300 }}
      />
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/04/sort1linked-list.jpg"
        style={{ width: 422, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [4,2,1,3] <br />
        <strong>Output:</strong> [1,2,3,4]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/04/sort2linked-list.jpg"
        style={{ width: 542, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [-1,5,3,4,0] <br />
        <strong>Output:</strong> [-1,0,3,4,5]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is in the range <code>[1, 5000]</code>
          .
        </li>
        <li>
          <code>-5000 &lt;= Node.val &lt;= 5000</code>
        </li>
      </ul>
    </div>
  ),
  149: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of <code>points</code> where{" "}
        <code>
          points[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>{" "}
        represents a point on the <strong>X-Y</strong> plane, return{" "}
        <em>the maximum number of points that lie on the same straight line</em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg"
        style={{ width: 300, height: 294 }}
      />
      <pre>
        <strong>Input:</strong> points = [[1,1],[2,2],[3,3]] <br />
        <strong>Output:</strong> 3
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg"
        style={{ width: 300, height: 294 }}
      />
      <pre>
        <strong>Input:</strong> points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]{" "}
        <br />
        <strong>Output:</strong> 4
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= points.length &lt;= 300</code>
        </li>
        <li>
          <code>points[i].length == 2</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10
            <sup>4</sup>
          </code>
        </li>
        <li>
          All the <code>points</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  150: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of strings <code>tokens</code> that represents an
        arithmetic expression in a{" "}
        <a
          href="http://en.wikipedia.org/wiki/Reverse_Polish_notation"
          target="_blank"
          rel="noreferrer"
        >
          Reverse Polish Notation
        </a>
        .
      </p>

      <p>
        Evaluate the expression. Return{" "}
        <em>an integer that represents the value of the expression</em>.
      </p>

      <p>
        <strong>Note</strong> that:
      </p>

      <ul>
        <li>
          The valid operators are <code>'+'</code>, <code>'-'</code>,{" "}
          <code>'*'</code>, and <code>'/'</code>.
        </li>
        <li>Each operand may be an integer or another expression.</li>
        <li>
          The division between two integers always{" "}
          <strong>truncates toward zero</strong>.
        </li>
        <li>There will not be any division by zero.</li>
        <li>
          The input represents a valid arithmetic expression in a reverse polish
          notation.
        </li>
        <li>
          The answer and all the intermediate calculations can be represented in
          a <strong>32-bit</strong> integer.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> tokens = ["2","1","+","3","*"] <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> ((2 + 1) * 3) = 9
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> tokens = ["4","13","5","/","+"] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> (4 + (13 / 5)) = 6
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> tokens =
        ["10","6","9","3","+","-11","*","/","*","17","+","5","+"] <br />
        <strong>Output:</strong> 22 <br />
        <strong>Explanation:</strong> ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
        <br />
        = ((10 * (6 / (12 * -11))) + 17) + 5<br />
        = ((10 * (6 / -132)) + 17) + 5<br />
        = ((10 * 0) + 17) + 5<br />
        = (0 + 17) + 5<br />
        = 17 + 5<br />= 22
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= tokens.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>tokens[i]</code> is either an operator: <code>"+"</code>,{" "}
          <code>"-"</code>, <code>"*"</code>, or <code>"/"</code>, or an integer
          in the range <code>[-200, 200]</code>.
        </li>
      </ul>
    </div>
  ),
  196: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Table: <code>Person</code>
      </p>

      <pre>
        {`+-------------+---------+
        | Column Name | Type    |
        +-------------+---------+
        | id          | int     |
        | email       | varchar |
        +-------------+---------+`}{" "}
        <br />
        id is the primary key (column with unique values) for this table. <br />
        Each row of this table contains an email. The emails will not contain
        uppercase letters.
      </pre>

      <p>&nbsp;</p>

      <p>
        Write a solution to<strong> delete</strong> all duplicate emails,
        keeping only one unique email with the smallest <code>id</code>.
      </p>

      <p>
        For SQL users, please note that you are supposed to write a{" "}
        <code>DELETE</code> statement and not a <code>SELECT</code> one.
      </p>

      <p>
        For Pandas users, please note that you are supposed to modify{" "}
        <code>Person</code> in place.
      </p>

      <p>
        After running your script, the answer shown is the <code>Person</code>{" "}
        table. The driver will first compile and run your piece of code and then
        show the <code>Person</code> table. The final order of the{" "}
        <code>Person</code> table <strong>does not matter</strong>.
      </p>

      <p>The result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        Person table:
        <br />
        {`+----+------------------+
        | id | email            |
        +----+------------------+
        | 1  | john@example.com |
        | 2  | bob@example.com  |
        | 3  | john@example.com |
        +----+------------------+`}{" "}
        <br />
        <strong>Output:</strong>
        {`+----+------------------+
        | id | email            |
        +----+------------------+
        | 1  | john@example.com |
        | 2  | bob@example.com  |
        +----+------------------+`}{" "}
        <br />
        <strong>Explanation:</strong> john@example.com is repeated two times. We
        keep the row with the smallest Id = 1.
      </pre>
    </div>
  ),
  151: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an input string <code>s</code>, reverse the order of the{" "}
        <strong>words</strong>.
      </p>

      <p>
        A <strong>word</strong> is defined as a sequence of non-space
        characters. The <strong>words</strong> in <code>s</code> will be
        separated by at least one space.
      </p>

      <p>
        Return{" "}
        <em>
          a string of the words in reverse order concatenated by a single space.
        </em>
      </p>

      <p>
        <b>Note</b> that <code>s</code> may contain leading or trailing spaces
        or multiple spaces between two words. The returned string should only
        have a single space separating the words. Do not include any extra
        spaces.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "the sky is blue" <br />
        <strong>Output:</strong> "blue is sky the"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = " hello world " <br />
        <strong>Output:</strong> "world hello" <br />
        <strong>Explanation:</strong> Your reversed string should not contain
        leading or trailing spaces.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "a good example" <br />
        <strong>Output:</strong> "example good a" <br />
        <strong>Explanation:</strong> You need to reduce multiple spaces between
        two words to a single space in the reversed string.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> contains English letters (upper-case and lower-case),
          digits, and spaces <code>' '</code>.
        </li>
        <li>
          There is <strong>at least one</strong> word in <code>s</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <b data-stringify-type="bold">Follow-up:&nbsp;</b>If the string data
        type is mutable in your language, can&nbsp;you solve it&nbsp;
        <b data-stringify-type="bold">in-place</b>&nbsp;with&nbsp;
        <code data-stringify-type="code">O(1)</code>&nbsp;extra space?
      </p>
    </div>
  ),
  154: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Suppose an array of length <code>n</code> sorted in ascending order is{" "}
        <strong>rotated</strong> between <code>1</code> and <code>n</code>{" "}
        times. For example, the array <code>nums = [0,1,4,4,5,6,7]</code> might
        become:
      </p>
      <ul>
        <li>
          <code>[4,5,6,7,0,1,4]</code> if it was rotated <code>4</code> times.
        </li>
        <li>
          <code>[0,1,4,4,5,6,7]</code> if it was rotated <code>7</code> times.
        </li>
      </ul>
      <p>
        Notice that <strong>rotating</strong> an array{" "}
        <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array{" "}
        <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.
      </p>
      <p>
        Given the sorted rotated array <code>nums</code> that may contain{" "}
        <strong>duplicates</strong>, return{" "}
        <em>the minimum element of this array</em>.
      </p>
      <p>You must decrease the overall operation steps as much as possible.</p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,3,5] <br />
        <strong>Output:</strong> 1 <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [2,2,2,0,1] <br />
        <strong>Output:</strong> 0
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 5000</code>
        </li>
        <li>
          <code>-5000 &lt;= nums[i] &lt;= 5000</code>
        </li>
        <li>
          <code>nums</code> is sorted and rotated between <code>1</code> and{" "}
          <code>n</code> times.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> This problem is similar to&nbsp;
        <a
          href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/"
          target="_blank"
          rel="noreferrer"
        >
          Find Minimum in Rotated Sorted Array
        </a>
        , but&nbsp;<code>nums</code> may contain <strong>duplicates</strong>.
        Would this affect the runtime complexity? How and why?
      </p>
      <p>&nbsp;</p>
    </div>
  ),
  157: (
    <div class="markdown-body div-width">
      <p>
        Given a file and assume that you can only read the file using a given
        method&nbsp;<code>read4</code>, implement a method to read <em>n</em>{" "}
        characters.
      </p>

      <p>&nbsp;</p>

      <p>
        <b>Method read4: </b>
      </p>

      <p>
        The API&nbsp;<code>read4</code> reads 4 consecutive characters from the
        file, then writes those characters into the buffer array{" "}
        <code>buf</code>.
      </p>

      <p>The return value is the number of actual characters read.</p>

      <p>
        Note that&nbsp;<code>read4()</code> has its own file pointer, much like{" "}
        <code>FILE *fp</code>
        in C.
      </p>

      <p>
        <b>Definition of read4:</b>
      </p>

      <pre>
        {" "}
        Parameter: char[] buf Returns: int Note: buf[] is destination not
        source, the results from read4 will be copied to buf[]
      </pre>

      <p>
        Below is a high level example of how <code>read4</code> works:
      </p>

      <pre>
        <code>{`File file("abcdefghijk"); // File is "abcdefghijk", initially file pointer (fp) points to 'a'
    char[] buf = new char[4]; // Create buffer with enough space to store characters
    read4(buf); // read4 returns 4. Now buf = "abcd", fp points to 'e'
    read4(buf); // read4 returns 4. Now buf = "efgh", fp points to 'i'
    read4(buf); // read4 returns 3. Now buf = "ijk", fp points to end of file`}</code>
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Method read:</strong>
      </p>

      <p>
        By using the <code>read4</code> method, implement the method&nbsp;
        <code>read</code> that reads <i>n</i> characters from the file and store
        it in the&nbsp;buffer array&nbsp;<code>buf</code>. Consider that you{" "}
        <strong>cannot</strong> manipulate the file directly.
      </p>

      <p>The return value is the number of actual characters read.</p>

      <p>
        <b>Definition of read: </b>
      </p>

      <pre>
        {" "}
        Parameters: char[] buf, int n Returns: int Note: buf[] is destination
        not source, you will need to write the results to buf[]
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input: </strong>file = "abc", n = 4 <br />
        <strong>Output: </strong>3 <br />
        <strong>Explanation:</strong>&nbsp;After calling your read method, buf
        should contain "abc". We read a total of 3 characters from the file, so
        return 3. Note that "abc" is the file's content, not buf. buf is the
        destination buffer that you will have to write the results to.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input: </strong>file = "abcde", n = 5 <br />
        <strong>Output: </strong>5 <br />
        <strong>Explanation: </strong>After calling your read method, buf should
        contain "abcde". We read a total of 5 characters from the file, so
        return 5.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input: </strong>file = "abcdABCD1234", n = 12 <br />
        <strong>Output: </strong>12 <br />
        <strong>Explanation: </strong>After calling your read method, buf should
        contain "abcdABCD1234". We read a total of 12 characters from the file,
        so return 12.
      </pre>

      <p>
        <strong>Example 4:</strong>
      </p>

      <pre>
        <strong>Input: </strong>file = "leetcode", n = 5 <br />
        <strong>Output: </strong>5 <br />
        <strong>Explanation: </strong>After calling your read method, buf should
        contain "leetc". We read a total of 5 characters from the file, so
        return 5.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          Consider that you <strong>cannot</strong> manipulate the file
          directly, the file is only accesible for <code>read4</code> but&nbsp;
          <strong>not</strong> for <code>read</code>.
        </li>
        <li>
          The <code>read</code> function will only be called once for each test
          case.
        </li>
        <li>
          You may assume the destination buffer array,&nbsp;<code>buf</code>
          ,&nbsp;is guaranteed to have enough&nbsp;space for storing&nbsp;
          <em>n</em>&nbsp;characters.
        </li>
      </ul>
    </div>
  ),
  158: (
    <div class="markdown-body div-width">
      <p>
        Given a file and assume that you can only read the file using a given
        method&nbsp;<code>read4</code>, implement a method <code>read</code> to
        read <em>n</em>
        characters.{" "}
        <strong>
          Your method <code>read</code> may be called multiple times.
        </strong>
      </p>

      <p>&nbsp;</p>

      <p>
        <b>Method read4: </b>
      </p>

      <p>
        The API&nbsp;<code>read4</code> reads 4 consecutive characters from the
        file, then writes those characters into the buffer array{" "}
        <code>buf</code>.
      </p>

      <p>The return value is the number of actual characters read.</p>

      <p>
        Note that&nbsp;<code>read4()</code> has its own file pointer, much like{" "}
        <code>FILE *fp</code>
        in C.
      </p>

      <p>
        <b>Definition of read4:</b>
      </p>

      <pre>
        {" "}
        {`Parameter:  char[] buf
        Returns:    int
    
    Note: buf[] is destination not source, the results from read4 will be copied to buf[]`}
      </pre>

      <p>
        Below is a high level example of how <code>read4</code> works:
      </p>

      <pre>
        <code>{`File file("abcdefghijk"); // File is "abcdefghijk", initially file pointer (fp) points to 'a'
    char[] buf = new char[4]; // Create buffer with enough space to store characters
    read4(buf); // read4 returns 4. Now buf = "abcd", fp points to 'e'
    read4(buf); // read4 returns 4. Now buf = "efgh", fp points to 'i'
    read4(buf); // read4 returns 3. Now buf = "ijk", fp points to end of file`}</code>
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Method read:</strong>
      </p>

      <p>
        By using the <code>read4</code> method, implement the method&nbsp;
        <code>read</code> that reads <i>n</i> characters from the file and store
        it in the&nbsp;buffer array&nbsp;<code>buf</code>. Consider that you{" "}
        <strong>cannot</strong> manipulate the file directly.
      </p>

      <p>The return value is the number of actual characters read.</p>

      <p>
        <b>Definition of read: </b>
      </p>

      <pre>
        {" "}
        {`Parameters:	char[] buf, int n
        Returns:	int
    
    Note: buf[] is destination not source, you will need to write the results to buf[]`}
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        {`File file("abc");
    Solution sol;
    // Assume buf is allocated and guaranteed to have enough space for storing all characters from the file.
    sol.read(buf, 1); // After calling your read method, buf should contain "a". We read a total of 1 character from the file, so return 1.
    sol.read(buf, 2); // Now buf should contain "bc". We read a total of 2 characters from the file, so return 2.
    sol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.`}
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        {`File file("abc");
    Solution sol;
    sol.read(buf, 4); // After calling your read method, buf should contain "abc". We read a total of 3 characters from the file, so return 3.
    sol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.`}
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          Consider that you <strong>cannot</strong> manipulate the file
          directly, the file is only accesible for <code>read4</code> but&nbsp;
          <strong>not</strong> for <code>read</code>.
        </li>
        <li>
          The <code>read</code> function may be called{" "}
          <strong>multiple times</strong>.
        </li>
        <li>
          Please remember to <b>RESET</b> your class variables declared in
          Solution, as static/class variables are{" "}
          <b>persisted across multiple test cases</b>. Please see{" "}
          <a href="https://leetcode.com/faq/" target="_blank" rel="noreferrer">
            here
          </a>{" "}
          for more details.
        </li>
        <li>
          You may assume the destination buffer array,&nbsp;<code>buf</code>
          ,&nbsp;is guaranteed to have enough&nbsp;space for storing&nbsp;
          <em>n</em>&nbsp;characters.
        </li>
        <li>
          It is guaranteed that in a given test case the same buffer{" "}
          <code>buf</code> is called by
          <code>read</code>.
        </li>
      </ul>
    </div>
  ),
  161: (
    <div class="markdown-body div-width">
      <p>
        Given two strings{" "}
        <b>
          <i>s</i>
        </b>
        &nbsp;and{" "}
        <b>
          <i>t</i>
        </b>
        , determine if they are both one edit distance apart.
      </p>

      <p>
        <strong>Note:</strong>&nbsp;
      </p>

      <p>There are 3 possiblities to satisify one edit distance apart:</p>

      <ul>
        <li>
          Insert a&nbsp;character into{" "}
          <strong>
            <em>s</em>
          </strong>
          &nbsp;to get&nbsp;
          <strong>
            <em>t</em>
          </strong>
        </li>
        <li>
          Delete a&nbsp;character from&nbsp;
          <strong>
            <em>s</em>
          </strong>
          &nbsp;to get&nbsp;
          <strong>
            <em>t</em>
          </strong>
        </li>
        <li>
          Replace a character of&nbsp;
          <strong>
            <em>s</em>
          </strong>
          &nbsp;to get&nbsp;
          <strong>
            <em>t</em>
          </strong>
        </li>
      </ul>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong>{" "}
        <strong>
          <em>s</em>
        </strong>{" "}
        = "ab",{" "}
        <strong>
          <em>t</em>
        </strong>{" "}
        = "acb" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> We can insert 'c' into{" "}
        <strong>
          <em>s</em>
        </strong>
        &nbsp;to get&nbsp;
        <strong>
          <em>t.</em>
        </strong>
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong>{" "}
        <strong>
          <em>s</em>
        </strong>{" "}
        = "cab",{" "}
        <strong>
          <em>t</em>
        </strong>{" "}
        = "ad" <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> We cannot get{" "}
        <strong>
          <em>t </em>
        </strong>
        from{" "}
        <strong>
          <em>s </em>
        </strong>
        by only one step.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong>{" "}
        <strong>
          <em>s</em>
        </strong>{" "}
        = "1203",{" "}
        <strong>
          <em>t</em>
        </strong>{" "}
        = "1213" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> We can replace '0' with '1' to get&nbsp;
        <strong>
          <em>t.</em>
        </strong>
      </pre>

      <div>
        <h3>Difficulty:</h3>
        <span class="label label-warning">Medium</span>
      </div>

      <div>
        <h3>Lock:</h3>
        <span class="label label-info">Prime</span>
      </div>

      <div>
        <h3>Company:</h3>
        <span class="label label-default">
          <a
            style={{ color: "#ffffff", marginBottom: 15 }}
            href="https://leetcode.ca/tags/#Amazon"
          >
            Amazon
          </a>
        </span>
        <span class="label label-default">
          <a
            style={{ color: "#ffffff", marginBottom: 15 }}
            href="https://leetcode.ca/tags/#Facebook"
          >
            Facebook
          </a>
        </span>
        <span class="label label-default">
          <a
            style={{ color: "#ffffff", marginBottom: 15 }}
            href="https://leetcode.ca/tags/#Google"
          >
            Google
          </a>
        </span>
        <span class="label label-default">
          <a
            style={{ color: "#ffffff", marginBottom: 15 }}
            href="https://leetcode.ca/tags/#Microsoft"
          >
            Microsoft
          </a>
        </span>
        <span class="label label-default">
          <a
            style={{ color: "#ffffff", marginBottom: 15 }}
            href="https://leetcode.ca/tags/#Snapchat"
          >
            Snapchat
          </a>
        </span>
        <span class="label label-default">
          <a
            style={{ color: "#ffffff", marginBottom: 15 }}
            href="https://leetcode.ca/tags/#Twitter"
          >
            Twitter
          </a>
        </span>
        <span class="label label-default">
          <a
            style={{ color: "#ffffff", marginBottom: 15 }}
            href="https://leetcode.ca/tags/#Uber"
          >
            Uber
          </a>
        </span>
      </div>
    </div>
  ),
  165: (
    <div class="markdown-body div-width">
      <p>
        Compare two version numbers <em>version1</em> and <em>version2</em>.
        <br />
        If{" "}
        <code>
          <em>version1</em> &gt; <em>version2</em>
        </code>{" "}
        return <code>1;</code>&nbsp;if
        <code>
          <em>version1</em> &lt; <em>version2</em>
        </code>{" "}
        return <code>-1;</code>otherwise return <code>0</code>.
      </p>

      <p>
        You may assume that the version strings are non-empty and contain only
        digits and the
        <code>.</code> character.
      </p>
      <p>
        The <code>.</code> character does not represent a decimal point and is
        used to separate number sequences.
      </p>
      <p>
        For instance, <code>2.5</code> is not "two and a half" or "half way to
        version three", it is the fifth second-level revision of the second
        first-level revision.
      </p>
      <p>
        You may assume the default revision number for each level of a version
        number to be
        <code>0</code>. For example, version number <code>3.4</code> has a
        revision number of <code>3</code>
        and <code>4</code> for its first and second level revision number. Its
        third and fourth level revision number are both <code>0</code>.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong>{" "}
        <code>
          <em>version1</em>
        </code>{" "}
        = "0.1",{" "}
        <code>
          <em>version2</em>
        </code>{" "}
        = "1.1" <br />
        <strong>Output:</strong> -1
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>
      <pre>
        <strong>Input: </strong>
        <code>
          <em>version1</em>
        </code>{" "}
        = "1.0.1",{" "}
        <code>
          <em>version2</em>
        </code>{" "}
        = "1" <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong>{" "}
        <code>
          <em>version1</em>
        </code>{" "}
        = "7.5.2.4",{" "}
        <code>
          <em>version2</em>
        </code>{" "}
        = "7.5.3" <br />
        <strong>Output:</strong> -1
      </pre>

      <p>
        <strong>Example 4:</strong>
      </p>
      <pre>
        <strong>Input:</strong>{" "}
        <code>
          <em>version1</em>
        </code>{" "}
        = "1.01",{" "}
        <code>
          <em>version2</em>
        </code>{" "}
        = "1.001" <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> Ignoring leading zeroes, both “01” and
        “001" represent the same number “1”
      </pre>

      <p>
        <strong>Example 5:</strong>
      </p>
      <pre>
        <strong>Input:</strong>{" "}
        <code>
          <em>version1</em>
        </code>{" "}
        = "1.0",{" "}
        <code>
          <em>version2</em>
        </code>{" "}
        = "1.0.0" <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The first version number does not have a
        third level revision number, which means its third level revision number
        is default to "0"
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>
      <ul>
        <li>
          Version strings are composed of numeric strings separated by dots{" "}
          <code>.</code> and this numeric strings <strong>may</strong> have
          leading zeroes.
        </li>
        <li>
          Version strings do not start or end with dots, and they will not be
          two consecutive dots.
        </li>
      </ul>
    </div>
  ),
  166: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integers representing the <code>numerator</code> and{" "}
        <code>denominator</code> of a fraction, return{" "}
        <em>the fraction in string format</em>.
      </p>

      <p>
        If the fractional part is repeating, enclose the repeating part in
        parentheses.
      </p>

      <p>
        If multiple answers are possible, return <strong>any of them</strong>.
      </p>

      <p>
        It is <strong>guaranteed</strong> that the length of the answer string
        is less than{" "}
        <code>
          10<sup>4</sup>
        </code>{" "}
        for all the given inputs.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numerator = 1, denominator = 2 <br />
        <strong>Output:</strong> "0.5"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numerator = 2, denominator = 1 <br />
        <strong>Output:</strong> "2"
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numerator = 4, denominator = 333 <br />
        <strong>Output:</strong> "0.(012)"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            -2<sup>31</sup> &lt;=&nbsp;numerator, denominator &lt;= 2
            <sup>31</sup> - 1
          </code>
        </li>
        <li>
          <code>denominator != 0</code>
        </li>
      </ul>
    </div>
  ),
  169: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> of size <code>n</code>, return{" "}
        <em>the majority element</em>.
      </p>
      <p>
        The majority element is the element that appears more than{" "}
        <code>⌊n / 2⌋</code> times. You may assume that the majority element
        always exists in the array.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [3,2,3] <br />
        <strong>Output:</strong> 3 <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [2,2,1,1,1,2,2] <br />
        <strong>Output:</strong> 2
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow-up:</strong> Could you solve the problem in linear time and
      in <code>O(1)</code> space?
    </div>
  ),
  175: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Table: <code>Person</code>
      </p>

      <pre>
        {`+-------------+---------+
        | Column Name | Type    |
        +-------------+---------+
        | personId    | int     |
        | lastName    | varchar |
        | firstName   | varchar |
        +-------------+---------+`}
        <br />
        personId is the primary key (column with unique values) for this table.{" "}
        <br />
        This table contains information about the ID of some persons and their
        first and last names.
      </pre>

      <p>&nbsp;</p>

      <p>
        Table: <code>Address</code>
      </p>

      <pre>
        {`+-------------+---------+
        | Column Name | Type    |
        +-------------+---------+
        | addressId   | int     |
        | personId    | int     |
        | city        | varchar |
        | state       | varchar |
        +-------------+---------+`}{" "}
        <br />
        addressId is the primary key (column with unique values) for this table.{" "}
        <br />
        Each row of this table contains information about the city and state of
        one person with ID = PersonId.
      </pre>

      <p>&nbsp;</p>

      <p>
        Write a solution to report the first name, last name, city, and state of
        each person in the <code>Person</code> table. If the address of a{" "}
        <code>personId</code> is not present in the <code>Address</code> table,
        report <code>null</code> instead.
      </p>

      <p>
        Return the result table in <strong>any order</strong>.
      </p>

      <p>The result format is in the following example.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        Person table:
        {`+----------+----------+-----------+
        | personId | lastName | firstName |
        +----------+----------+-----------+
        | 1        | Wang     | Allen     |
        | 2        | Alice    | Bob       |
        +----------+----------+-----------+`}{" "}
        <br />
        Address table: <br />
        {`+-----------+----------+---------------+------------+
        | addressId | personId | city          | state      |
        +-----------+----------+---------------+------------+
        | 1         | 2        | New York City | New York   |
        | 2         | 3        | Leetcode      | California |
        +-----------+----------+---------------+------------+`}{" "}
        <br />
        <strong>Output:</strong> <br />
        {`+-----------+----------+---------------+----------+
        | firstName | lastName | city          | state    |
        +-----------+----------+---------------+----------+
        | Allen     | Wang     | Null          | Null     |
        | Bob       | Alice    | New York City | New York |
        +-----------+----------+---------------+----------+`}{" "}
        <br />
        <strong>Explanation:</strong> <br />
        There is no address in the address table for the personId = 1 so we
        return null in their city and state.
        <br />
        addressId = 1 contains information about the address of personId = 2.
      </pre>
    </div>
  ),
  179: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a list of non-negative integers <code>nums</code>, arrange them
        such that they form the largest number and return it.
      </p>

      <p>
        Since the result may be very large, so you need to return a string
        instead of an integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [10,2] <br />
        <strong>Output:</strong> "210"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,30,34,5,9] <br />
        <strong>Output:</strong> "9534330"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  351: (
    <div class="markdown-body div-width">
      <p>
        Given an Android <b>3x3</b> key lock screen and two integers <b>m</b>{" "}
        and <b>n</b>, where 1 ≤ m ≤ n ≤ 9, count the total number of unlock
        patterns of the Android lock screen, which consist of minimum of{" "}
        <b>m</b> keys and maximum <b>n</b> keys.
      </p>

      <p>&nbsp;</p>

      <p>
        <b>Rules for a valid pattern:</b>
      </p>

      <ul>
        <li>
          Each pattern must connect at least <b>m</b> keys and at most <b>n</b>{" "}
          keys.
        </li>
        <li>All the keys must be distinct.</li>
        <li>
          If the line connecting two consecutive keys in the pattern passes
          through any other keys, the other keys must have previously selected
          in the pattern. No jumps through non selected key is allowed.
        </li>
        <li>The order of keys used matters.</li>
      </ul>

      <p>&nbsp;</p>

      <pre>
        <img
          src="https://assets.leetcode.com/uploads/2018/10/12/android-unlock.png"
          alt=""
          style={{ width: 418, height: 128 }}
        />
      </pre>

      <p>&nbsp;</p>

      <p>
        <b>Explanation:</b>
      </p>

      <pre>{`| 1 | 2 | 3 |
| 4 | 5 | 6 |
| 7 | 8 | 9 |`}</pre>

      <p>
        <b>Invalid move:</b> <code>4 - 1 - 3 - 6 </code>
        <br />
        Line 1 - 3 passes through key 2 which had not been selected in the
        pattern.
      </p>

      <p>
        <b>Invalid move:</b> <code>4 - 1 - 9 - 2</code>
        <br />
        Line 1 - 9 passes through key 5 which had not been selected in the
        pattern.
      </p>
      <div class="google-auto-placed ap_container">
        <ins
          data-ad-format="auto"
          class="adsbygoogle adsbygoogle-noablate"
          data-ad-client="ca-pub-6766885420008650"
          data-adsbygoogle-status="done"
          data-ad-status="unfilled"
        >
          <div id="aswift_1_host">
            <iframe
              id="aswift_1"
              name="aswift_1"
              browsingtopics="true"
              sandbox="allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation"
              width="1120"
              height="0"
              frameborder="0"
              marginwidth="0"
              marginheight="0"
              vspace="0"
              hspace="0"
              allowtransparency="true"
              scrolling="no"
              allow="attribution-reporting; run-ad-auction"
              src="https://googleads.g.doubleclick.net/pagead/ads?gdpr=0&amp;client=ca-pub-6766885420008650&amp;output=html&amp;h=280&amp;adk=490964574&amp;adf=2347765671&amp;pi=t.aa~a.3869206216~i.21~rp.4&amp;w=1120&amp;abgtt=9&amp;fwrn=4&amp;fwrnh=100&amp;lmt=1733440553&amp;num_ads=1&amp;rafmt=1&amp;armr=3&amp;sem=mc&amp;pwprc=2295191326&amp;ad_type=text_image&amp;format=1120x280&amp;url=https%3A%2F%2Fleetcode.ca%2Fall%2F351.html&amp;fwr=0&amp;pra=3&amp;rh=200&amp;rw=1120&amp;rpe=1&amp;resp_fmts=3&amp;wgl=1&amp;fa=27&amp;uach=WyJtYWNPUyIsIjEyLjIuMCIsImFybSIsIiIsIjEzNC4wLjY5OTguNDUiLG51bGwsMCxudWxsLCI2NCIsW1siQ2hyb21pdW0iLCIxMzQuMC42OTk4LjQ1Il0sWyJOb3Q6QS1CcmFuZCIsIjI0LjAuMC4wIl0sWyJHb29nbGUgQ2hyb21lIiwiMTM0LjAuNjk5OC40NSJdXSwwXQ..&amp;dt=1741792799801&amp;bpp=2&amp;bdt=1198&amp;idt=-M&amp;shv=r20250310&amp;mjsv=m202503100101&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;cookie=ID%3D64f09132c9424ca9%3AT%3D1724578154%3ART%3D1741778614%3AS%3DALNI_MYDXNEF8lOSqFgRNdLrQDh7XqxDfQ&amp;gpic=UID%3D00000ed6f53ac83a%3AT%3D1724578154%3ART%3D1741778614%3AS%3DALNI_MaYiD9h0rS-53xvtv1a3iHf4LhmIw&amp;eo_id_str=ID%3D6e827473f394e7e8%3AT%3D1741674484%3ART%3D1741778614%3AS%3DAA-AfjYS7euMj-7xHkifBZmXY6uq&amp;prev_fmts=0x0&amp;nras=2&amp;correlator=4834001966828&amp;frm=20&amp;pv=1&amp;u_tz=330&amp;u_his=8&amp;u_h=900&amp;u_w=1440&amp;u_ah=815&amp;u_aw=1440&amp;u_cd=30&amp;u_sd=1.8&amp;dmc=8&amp;adx=240&amp;ady=1103&amp;biw=1600&amp;bih=769&amp;scr_x=0&amp;scr_y=0&amp;eid=95353387%2C95354315%2C95354338%2C95354598%2C31090900%2C95340253%2C95340255&amp;oid=2&amp;pvsid=1609094273684054&amp;tmod=1360601946&amp;uas=0&amp;nvt=1&amp;ref=https%3A%2F%2Fwww.google.com%2F&amp;fc=1408&amp;brdim=0%2C25%2C0%2C25%2C1440%2C25%2C1440%2C813%2C1600%2C769&amp;vis=1&amp;rsz=%7C%7Cs%7C&amp;abl=NS&amp;fu=128&amp;bc=31&amp;bz=0.9&amp;td=1&amp;tdf=2&amp;psd=W251bGwsbnVsbCxudWxsLDNd&amp;nt=1&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;dtd=276"
              data-google-container-id="a!2"
              tabindex="0"
              title="Advertisement"
              aria-label="Advertisement"
              data-google-query-id="CM6EnenrhIwDFUOeSwUdEcQWSA"
              data-load-complete="true"
            ></iframe>
          </div>
        </ins>
      </div>

      <p>
        <b>Valid move:</b> <code>2 - 4 - 1 - 3 - 6</code>
        <br />
        Line 1 - 3 is valid because it passes through key 2, which had been
        selected in the pattern
      </p>

      <p>
        <b>Valid move:</b> <code>6 - 5 - 4 - 1 - 9 - 2</code>
        <br />
        Line 1 - 9 is valid because it passes through key 5, which had been
        selected in the pattern.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example:</strong>
      </p>

      <div>
        <pre>
          <strong>Input: </strong>m = <span id="example-input-1-1">1</span>, n ={" "}
          <span id="example-input-1-2">1</span>
          <strong>Output: </strong>
          <span id="example-output-1">9</span>
        </pre>
      </div>
    </div>
  ),
  352: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a data stream input of non-negative integers{" "}
        <code>
          a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>
        </code>
        , summarize the numbers seen so far as a list of disjoint intervals.
      </p>

      <p>
        Implement the <code>SummaryRanges</code> class:
      </p>

      <ul>
        <li>
          <code>SummaryRanges()</code> Initializes the object with an empty
          stream.
        </li>
        <li>
          <code>void addNum(int value)</code> Adds the integer{" "}
          <code>value</code> to the stream.
        </li>
        <li>
          <code>int[][] getIntervals()</code> Returns a summary of the integers
          in the stream currently as a list of disjoint intervals{" "}
          <code>
            [start<sub>i</sub>, end<sub>i</sub>]
          </code>
          . The answer should be sorted by{" "}
          <code>
            start<sub>i</sub>
          </code>
          .
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["SummaryRanges", "addNum", "getIntervals", "addNum", "getIntervals",
        "addNum", "getIntervals", "addNum", "getIntervals", "addNum",
        "getIntervals"] <br />
        [[], [1], [], [3], [], [7], [], [2], [], [6], []] <br />
        <strong>Output</strong> <br />
        [null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3],
        [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]
        <strong>Explanation</strong> <br />
        SummaryRanges summaryRanges = new SummaryRanges();
        <br />
        summaryRanges.addNum(1); // arr = [1]
        <br />
        summaryRanges.getIntervals(); // return [[1, 1]]
        <br />
        summaryRanges.addNum(3); // arr = [1, 3]
        <br />
        summaryRanges.getIntervals(); // return [[1, 1], [3, 3]]
        <br />
        summaryRanges.addNum(7); // arr = [1, 3, 7]
        <br />
        summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]
        <br />
        summaryRanges.addNum(2); // arr = [1, 2, 3, 7]
        <br />
        summaryRanges.getIntervals(); // return [[1, 3], [7, 7]]
        <br />
        summaryRanges.addNum(6); // arr = [1, 2, 3, 6, 7]
        <br />
        summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= value &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            3 * 10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>addNum</code> and{" "}
          <code>getIntervals</code>.
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>2</sup>
          </code>
          &nbsp;calls will be made to&nbsp;<code>getIntervals</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> What if there are lots of merges and the
        number of disjoint intervals is small compared to the size of the data
        stream?
      </p>
    </div>
  ),
  358: (
    <div class="markdown-body div-width">
      <p>
        Given a non-empty string <b>s</b> and an integer <b>k</b>, rearrange the
        string such that the same characters are at least distance <b>k</b> from
        each other.
      </p>

      <p>
        All input strings are given in lowercase letters. If it is not possible
        to rearrange the string, return an empty string <code>""</code>.
      </p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <div>
        <pre>
          <strong>Input: </strong>s = <br />
          <span id="example-input-1-1">"aabbcc"</span>, k = <br />
          <span id="example-input-1-2">3</span> <br />
          <strong>Output: </strong> <br />
          <span id="example-output-1">
            "abcabc" <br />
            <strong>Explanation: </strong>
          </span>{" "}
          <br />
          The same letters are at least distance 3 from each other.
        </pre>

        <div>
          <p>
            <strong>Example 2:</strong>
          </p>

          <pre>
            <strong>Input: </strong>s = <br />
            <span id="example-input-2-1">"aaabc"</span>, k = <br />
            <span id="example-input-2-2">3</span> <br />
            <strong>Output: </strong> <br />
            <span id="example-output-2">
              "" <br />
              <strong>Explanation:</strong> <br />
            </span>
            It is not possible to rearrange the string.
          </pre>

          <div>
            <p>
              <strong>Example 3:</strong>
            </p>

            <pre>
              <strong>Input: </strong>s = <br />
              <span id="example-input-3-1">"aaadbbcc"</span>, k = <br />
              <span id="example-input-3-2">2</span> <br />
              <strong>Output: </strong> <br />
              <span id="example-output-3">"abacabcd"</span> <br />
              <span id="example-output-2">
                {" "}
                <br />
                <strong>Explanation:</strong> <br />
              </span>{" "}
              <br />
              The same letters are at least distance 2 from each other.
            </pre>
          </div>
        </div>
      </div>
    </div>
  ),
  364: (
    <div class="markdown-body div-width">
      <p>
        Given a nested list of integers, return the sum of all integers in the
        list weighted by their depth.
      </p>

      <p>
        Each element is either an integer, or a list -- whose elements may also
        be integers or other lists.
      </p>

      <p>
        Different from the{" "}
        <a href="https://leetcode.com/problems/nested-list-weight-sum/">
          previous question
        </a>{" "}
        where weight is increasing from root to leaf, now the weight is defined
        from bottom up. i.e., the leaf level integers have weight 1, and the
        root level integers have the largest weight.
      </p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <div>
        <pre>
          <strong>Input: </strong>
          <span id="example-input-1-1">[[1,1],2,[1,1]]</span> <br />
          <img
            alt=""
            src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0364.Nested%20List%20Weight%20Sum%20II/images/nestedlistweightsumiiex1.png"
            style={{ width: 426, height: 181 }}
          />
          <strong>Output: </strong>
          <span id="example-output-1">
            8 <br />
            <strong>Explanation: </strong>F
          </span>
          our 1's at depth 1, one 2 at depth 2.
        </pre>

        <div>
          <p>
            <strong>Example 2:</strong>
          </p>

          <pre>
            <strong>Input: </strong>
            <span id="example-input-2-1">[1,[4,[6]]]</span> <br />
            <img
              alt=""
              src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0364.Nested%20List%20Weight%20Sum%20II/images/nestedlistweightsumiiex2.png"
              style={{ width: 349, height: 192 }}
            />
            <strong>Output: </strong>
            <span id="example-output-2">
              17 <br />
              <strong>Explanation:</strong> O
            </span>
            ne 1 at depth 3, one 4 at depth 2, and one 6 at depth 1; 1*3 + 4*2 +
            6*1 = 17.
          </pre>
        </div>
      </div>
    </div>
  ),
  365: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two jugs with capacities <code>x</code> liters and{" "}
        <code>y</code> liters. You have an infinite water supply. Return whether
        the total amount of water in both jugs may reach <code>target</code>{" "}
        using the following operations:
      </p>

      <ul>
        <li>Fill either jug completely with water.</li>
        <li>Completely empty either jug.</li>
        <li>
          Pour water from one jug into another until the receiving jug is full,
          or the transferring jug is empty.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1: </strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io"> x = 3, y = 5, target = 4 </span>
        </p>
        <br />
        <p>
          <strong>Output: </strong> <span class="example-io"> true </span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>Follow these steps to reach a total of 4 liters:</p>
        <br />

        <ul>
          <li>Fill the 5-liter jug (0, 5).</li>
          <li>
            Pour from the 5-liter jug into the 3-liter jug, leaving 2 liters (3,
            2).
          </li>
          <li>Empty the 3-liter jug (0, 2).</li>
          <li>
            Transfer the 2 liters from the 5-liter jug to the 3-liter jug (2,
            0).
          </li>
          <li>Fill the 5-liter jug again (2, 5).</li>
          <li>
            Pour from the 5-liter jug into the 3-liter jug until the 3-liter jug
            is full. This leaves 4 liters in the 5-liter jug (3, 4).
          </li>
          <li>
            Empty the 3-liter jug. Now, you have exactly 4 liters in the 5-liter
            jug (0, 4).
          </li>
        </ul>

        <p>
          Reference: The{" "}
          <a
            href="https://www.youtube.com/watch?v=BVtQNK_ZUJg&amp;ab_channel=notnek01"
            target="_blank"
            rel="noreferrer"
          >
            Die Hard
          </a>{" "}
          example.
        </p>
      </div>

      <p>
        <strong class="example">Example 2: </strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io"> x = 2, y = 6, target = 5 </span>
        </p>
        <br />

        <p>
          <strong>Output: </strong> <span class="example-io"> false </span>
        </p>
      </div>
      <br />

      <p>
        <strong class="example">Example 3: </strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io"> x = 1, y = 2, target = 3 </span>
        </p>
        <br />

        <p>
          <strong>Output: </strong> <span class="example-io"> true </span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong> Fill both jugs. The total amount of
          water in both jugs is equal to 3 now.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= x, y, target&nbsp;&lt;= 10<sup>3</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  368: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a set of <strong>distinct</strong> positive integers{" "}
        <code>nums</code>, return the largest subset <code>answer</code> such
        that every pair <code>(answer[i], answer[j])</code> of elements in this
        subset satisfies:
      </p>

      <ul>
        <li>
          <code>answer[i] % answer[j] == 0</code>, or
        </li>
        <li>
          <code>answer[j] % answer[i] == 0</code>
        </li>
      </ul>

      <p>If there are multiple solutions, return any of them.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> [1,2] <br />
        <strong>Explanation:</strong> [1,3] is also accepted.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,4,8] <br />
        <strong>Output:</strong> [1,2,4,8]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 2 * 10<sup>9</sup>
          </code>
        </li>
        <li>
          All the integers in <code>nums</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  369: (
    <div class="markdown-body div-width">
      <p>
        Given a non-negative integer represented as <b>non-empty</b> a singly
        linked list of digits, plus one to the integer.
      </p>

      <p>
        You may assume the integer do not contain any leading zero, except the
        number 0 itself.
      </p>

      <p>
        The digits are stored such that the most significant digit is at the
        head of the list.
      </p>

      <div>
        <p>
          <strong>Example :</strong>
        </p>

        <pre>
          <strong>Input: </strong>
          <span id="example-input-1-1">[1,2,3]</span> <br />
          <strong>Output: </strong>
          <span id="example-output-1">[1,2,4]</span>
        </pre>
      </div>
    </div>
  ),
  370: (
    <div class="markdown-body div-width">
      <p>
        Assume you have an array of length{" "}
        <b>
          <i>n</i>
        </b>{" "}
        initialized with all <b>0</b>'s and are given{" "}
        <b>
          <i>k</i>
        </b>{" "}
        update operations.
      </p>

      <p>
        Each operation is represented as a triplet:{" "}
        <b>[startIndex, endIndex, inc]</b> which increments each element of
        subarray <b>A[startIndex ... endIndex]</b> (startIndex and endIndex
        inclusive) with <b>inc</b>.
      </p>

      <p>
        Return the modified array after all{" "}
        <b>
          <i>k</i>
        </b>{" "}
        operations were executed.
      </p>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input: </strong>length = <span id="example-input-1-1">5</span>,
        updates = <span id="example-input-1-2">[[1,3,2],[2,4,3],[0,2,-2]]</span>{" "}
        <br />
        <strong>Output: </strong>
        <span id="example-output-1">[-2,0,3,5,3]</span>
      </pre>

      <p>
        <b>Explanation:</b>
      </p>

      <pre>
        Initial state: <br />
        [0,0,0,0,0]
        <br />
        After applying operation [1,3,2]: <br />
        [0,2,2,2,0]
        <br />
        After applying operation [2,4,3]: <br />
        [0,2,5,5,3] <br />
        After applying operation [0,2,-2]: <br />
        [-2,0,3,5,3]
      </pre>
    </div>
  ),
  372: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Your task is to calculate{" "}
        <code>
          a<sup>b</sup>
        </code>{" "}
        mod <code>1337</code> where <code>a</code> is a positive integer and{" "}
        <code>b</code> is an extremely large positive integer given in the form
        of an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 2, b = [3] <br />
        <strong>Output:</strong> 8
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 2, b = [1,0] <br />
        <strong>Output:</strong> 1024
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 1, b = [4,3,3,8,5,2] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= a &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          <code>1 &lt;= b.length &lt;= 2000</code>
        </li>
        <li>
          <code>0 &lt;= b[i] &lt;= 9</code>
        </li>
        <li>
          <code>b</code> does not contain leading zeros.
        </li>
      </ul>
    </div>
  ),
  373: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two integer arrays <code>nums1</code> and{" "}
        <code>nums2</code> sorted in <strong>non-decreasing&nbsp;order</strong>{" "}
        and an integer <code>k</code>.
      </p>

      <p>
        Define a pair <code>(u, v)</code> which consists of one element from the
        first array and one element from the second array.
      </p>

      <p>
        Return <em>the</em> <code>k</code> <em>pairs</em>{" "}
        <code>
          (u<sub>1</sub>, v<sub>1</sub>), (u<sub>2</sub>, v<sub>2</sub>), ...,
          (u<sub>k</sub>, v<sub>k</sub>)
        </code>{" "}
        <em>with the smallest sums</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,7,11], nums2 = [2,4,6], k = 3 <br />
        <strong>Output:</strong> [[1,2],[1,4],[1,6]] <br />
        <strong>Explanation:</strong> The first 3 pairs are returned from the
        sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,1,2], nums2 = [1,2,3], k = 2 <br />
        <strong>Output:</strong> [[1,1],[1,1]] <br />
        <strong>Explanation:</strong> The first 2 pairs are returned from the
        sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>nums1</code> and <code>nums2</code> both are sorted in{" "}
          <strong>non-decreasing order</strong>.
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>k &lt;=&nbsp;nums1.length *&nbsp;nums2.length</code>
        </li>
      </ul>
    </div>
  ),
  374: (
    <div class="elfjS" data-track-load="description_content">
      <p>We are playing the Guess Game. The game is as follows:</p>

      <p>
        I pick a number from <code>1</code> to <code>n</code>. You have to guess
        which number I picked.
      </p>

      <p>
        Every time you guess wrong, I will tell you whether the number I picked
        is higher or lower than your guess.
      </p>

      <p>
        You call a pre-defined API <code>int guess(int num)</code>, which
        returns three possible results:
      </p>

      <ul>
        <li>
          <code>-1</code>: Your guess is higher than the number I picked (i.e.{" "}
          <code>num &gt; pick</code>).
        </li>
        <li>
          <code>1</code>: Your guess is lower than the number I picked (i.e.{" "}
          <code>num &lt; pick</code>).
        </li>
        <li>
          <code>0</code>: your guess is equal to the number I picked (i.e.{" "}
          <code>num == pick</code>).
        </li>
      </ul>

      <p>
        Return <em>the number that I picked</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 10, pick = 6 <br />
        <strong>Output:</strong> 6
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1, pick = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, pick = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          <code>1 &lt;= pick &lt;= n</code>
        </li>
      </ul>
    </div>
  ),
  376: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>wiggle sequence</strong> is a sequence where the differences
        between successive numbers strictly alternate between positive and
        negative. The first difference (if one exists) may be either positive or
        negative. A sequence with one element and a sequence with two non-equal
        elements are trivially wiggle sequences.
      </p>

      <ul>
        <li>
          For example, <code>[1, 7, 4, 9, 2, 5]</code> is a{" "}
          <strong>wiggle sequence</strong> because the differences{" "}
          <code>(6, -3, 5, -7, 3)</code> alternate between positive and
          negative.
        </li>
        <li>
          In contrast, <code>[1, 4, 7, 2, 5]</code> and{" "}
          <code>[1, 7, 4, 5, 5]</code> are not wiggle sequences. The first is
          not because its first two differences are positive, and the second is
          not because its last difference is zero.
        </li>
      </ul>

      <p>
        A <strong>subsequence</strong> is obtained by deleting some elements
        (possibly zero) from the original sequence, leaving the remaining
        elements in their original order.
      </p>

      <p>
        Given an integer array <code>nums</code>, return{" "}
        <em>
          the length of the longest <strong>wiggle subsequence</strong> of{" "}
        </em>
        <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,7,4,9,2,5] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The entire sequence is a wiggle sequence
        with differences (6, -3, 5, -7, 3).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,17,5,10,13,15,10,5,16,8] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> There are several subsequences that
        achieve this length. <br />
        One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6,
        -8).
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5,6,7,8,9] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you solve this in <code>O(n)</code>{" "}
        time?
      </p>
    </div>
  ),
  399: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of variable pairs <code>equations</code> and an
        array of real numbers <code>values</code>, where{" "}
        <code>
          equations[i] = [A<sub>i</sub>, B<sub>i</sub>]
        </code>{" "}
        and <code>values[i]</code> represent the equation{" "}
        <code>
          A<sub>i</sub> / B<sub>i</sub> = values[i]
        </code>
        . Each{" "}
        <code>
          A<sub>i</sub>
        </code>{" "}
        or{" "}
        <code>
          B<sub>i</sub>
        </code>{" "}
        is a string that represents a single variable.
      </p>

      <p>
        You are also given some <code>queries</code>, where{" "}
        <code>
          queries[j] = [C<sub>j</sub>, D<sub>j</sub>]
        </code>{" "}
        represents the{" "}
        <code>
          j<sup>th</sup>
        </code>{" "}
        query where you must find the answer for{" "}
        <code>
          C<sub>j</sub> / D<sub>j</sub> = ?
        </code>
        .
      </p>

      <p>
        Return <em>the answers to all queries</em>. If a single answer cannot be
        determined, return <code>-1.0</code>.
      </p>

      <p>
        <strong>Note:</strong> The input is always valid. You may assume that
        evaluating the queries will not result in division by zero and that
        there is no contradiction.
      </p>

      <p>
        <strong>Note:&nbsp;</strong>The variables that do not occur in the list
        of equations are undefined, so the answer cannot be determined for them.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> equations = [["a","b"],["b","c"]], values =
        [2.0,3.0], <br /> queries =
        [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
        <br /> <strong>Output:</strong>{" "}
        [6.00000,0.50000,-1.00000,1.00000,-1.00000] <br />
        <strong>Explanation:</strong> <br />
        Given: <em>a / b = 2.0</em>, <em>b / c = 3.0</em>
        <br />
        queries are: <em>a / c = ?</em>, <em>b / a = ?</em>, <em>a / e = ?</em>,{" "}
        <em>a / a = ?</em>, <em>x / x = ? </em>
        <br />
        return: [6.0, 0.5, -1.0, 1.0, -1.0 ]<br />
        note: x is undefined =&gt; -1.0
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> equations = [["a","b"],["b","c"],["bc","cd"]],
        values = [1.5,2.5,5.0], <br />
        queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
        <br />
        <strong>Output:</strong> [3.75000,0.40000,5.00000,0.20000]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> equations = [["a","b"]], values = [0.5], <br />
        queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
        <br /> <strong>Output:</strong> [0.50000,2.00000,-1.00000,-1.00000]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= equations.length &lt;= 20</code>
        </li>
        <li>
          <code>equations[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= A<sub>i</sub>.length, B<sub>i</sub>.length &lt;= 5
          </code>
        </li>
        <li>
          <code>values.length == equations.length</code>
        </li>
        <li>
          <code>0.0 &lt; values[i] &lt;= 20.0</code>
        </li>
        <li>
          <code>1 &lt;= queries.length &lt;= 20</code>
        </li>
        <li>
          <code>queries[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= C<sub>j</sub>.length, D<sub>j</sub>.length &lt;= 5
          </code>
        </li>
        <li>
          <code>
            A<sub>i</sub>, B<sub>i</sub>, C<sub>j</sub>, D<sub>j</sub>
          </code>{" "}
          consist of lower case English letters and digits.
        </li>
      </ul>
    </div>
  ),
  397: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a positive integer <code>n</code>,&nbsp;you can apply one of the
        following&nbsp;operations:
      </p>

      <ul>
        <li>
          If <code>n</code> is even, replace <code>n</code> with{" "}
          <code>n / 2</code>.
        </li>
        <li>
          If <code>n</code> is odd, replace <code>n</code> with either{" "}
          <code>n + 1</code> or <code>n - 1</code>.
        </li>
      </ul>

      <p>
        Return <em>the minimum number of operations needed for</em>{" "}
        <code>n</code> <em>to become</em> <code>1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 8 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> 8 -&gt; 4 -&gt; 2 -&gt; 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 7 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation: </strong>7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 <br />
        or 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> 2
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  385: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string s represents the serialization of a nested list,
        implement a parser to deserialize it and return{" "}
        <em>the deserialized</em> <code>NestedInteger</code>.
      </p>

      <p>
        Each element is either an integer or a list whose elements may also be
        integers or other lists.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "324" <br />
        <strong>Output:</strong> 324 <br />
        <strong>Explanation:</strong> You should return a NestedInteger object
        which contains a single integer 324.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "[123,[456,[789]]]" <br />
        <strong>Output:</strong> [123,[456,[789]]] <br />
        <strong>Explanation:</strong> Return a NestedInteger object containing a
        nested list with 2 elements: <br />
        1. An integer containing value 123.
        <br />
        2. A nested list containing two elements:
        <br />
        i. An integer containing value 456.
        <br />
        ii. A nested list with one element:
        <br />
        a. An integer containing value 789
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of digits, square brackets <code>"[]"</code>,
          negative sign <code>'-'</code>, and commas <code>','</code>.
        </li>
        <li>
          <code>s</code> is the serialization of valid{" "}
          <code>NestedInteger</code>.
        </li>
        <li>
          All the values in the input are in the range{" "}
          <code>
            [-10<sup>6</sup>, 10<sup>6</sup>]
          </code>
          .
        </li>
      </ul>
    </div>
  ),
  386: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return all the numbers in the range{" "}
        <code>[1, n]</code> sorted in lexicographical order.
      </p>
      <p>
        You must write an algorithm that runs in&nbsp;<code>O(n)</code>
        &nbsp;time and uses <code>O(1)</code> extra space.&nbsp;
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 13 <br />
        <strong>Output:</strong> [1,10,11,12,13,2,3,4,5,6,7,8,9] <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <br />
      <pre>
        <strong>Input:</strong> n = 2<br />
        <strong>Output:</strong> [1,2]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  389: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two strings <code>s</code> and <code>t</code>.
      </p>

      <p>
        String <code>t</code> is generated by random shuffling string{" "}
        <code>s</code> and then add one more letter at a random position.
      </p>

      <p>
        Return the letter that was added to <code>t</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcd", t = "abcde" <br />
        <strong>Output:</strong> "e" <br />
        <strong>Explanation:</strong> 'e' is the letter that was added.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "", t = "y" <br />
        <strong>Output:</strong> "y"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>t.length == s.length + 1</code>
        </li>
        <li>
          <code>s</code> and <code>t</code> consist of lowercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  392: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>s</code> and <code>t</code>, return{" "}
        <code>true</code>
        <em> if </em>
        <code>s</code>
        <em>
          {" "}
          is a <strong>subsequence</strong> of{" "}
        </em>
        <code>t</code>
        <em>, or </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>
      <p>
        A <strong>subsequence</strong> of a string is a new string that is
        formed from the original string by deleting some (can be none) of the
        characters without disturbing the relative positions of the remaining
        characters. (i.e., <code>"ace"</code> is a subsequence of{" "}
        <code>
          "<u>a</u>b<u>c</u>d<u>e</u>"
        </code>{" "}
        while <code>"aec"</code> is not).
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> s = "abc", t = "ahbgdc" <br />
        <strong>Output:</strong> true <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> s = "axc", t = "ahbgdc"
        <br />
        <strong>Output:</strong> false
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>0 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>
            0 &lt;= t.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> and <code>t</code> consist only of lowercase English
          letters.
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Suppose there are lots of incoming{" "}
      <code>s</code>, say{" "}
      <code>
        s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub>
      </code>{" "}
      where{" "}
      <code>
        k &gt;= 10<sup>9</sup>
      </code>
      , and you want to check one by one to see if <code>t</code> has its
      subsequence. In this scenario, how would you change your code?
    </div>
  ),
  393: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>data</code> representing the data, return
        whether it is a valid <strong>UTF-8</strong> encoding (i.e. it
        translates to a sequence of valid UTF-8 encoded characters).
      </p>

      <p>
        A character in <strong>UTF8</strong> can be from{" "}
        <strong>1 to 4 bytes</strong> long, subjected to the following rules:
      </p>

      <ul>
        <li>
          For a <strong>1-byte</strong> character, the first bit is a{" "}
          <code>0</code>, followed by its Unicode code.
        </li>
        <li>
          For an <strong>n-bytes</strong> character, the first <code>n</code>{" "}
          bits are all one's, the <code>n + 1</code> bit is <code>0</code>,
          followed by <code>n - 1</code> bytes with the most significant{" "}
          <code>2</code> bits being <code>10</code>.
        </li>
      </ul>

      <p>This is how the UTF-8 encoding would work:</p>

      <pre>
        {`     Number of Bytes   |        UTF-8 Octet Sequence
                         |              (binary)
     --------------------+-----------------------------------------
              1          |   0xxxxxxx
              2          |   110xxxxx 10xxxxxx
              3          |   1110xxxx 10xxxxxx 10xxxxxx
              4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx`}
      </pre>

      <p>
        <code>x</code> denotes a bit in the binary form of a byte that may be
        either <code>0</code> or <code>1</code>.
      </p>

      <p>
        <strong>Note: </strong>The input is an array of integers. Only the{" "}
        <strong>least significant 8 bits</strong> of each integer is used to
        store the data. This means each integer represents only 1 byte of data.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> data = [197,130,1] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> data represents the octet sequence:
        11000101 10000010 00000001. <br />
        It is a valid utf-8 encoding for a 2-bytes character followed by a
        1-byte character.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> data = [235,140,4]
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> data represented the octet sequence:
        11101011 10001100 00000100. <br />
        The first 3 bits are all one's and the 4th bit is 0 means it is a
        3-bytes character.
        <br />
        The next byte is a continuation byte which starts with 10 and that's
        correct.
        <br />
        But the second continuation byte does not start with 10, so it is
        invalid.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= data.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= data[i] &lt;= 255</code>
        </li>
      </ul>
    </div>
  ),
  394: (
    <div class="elfjS" data-track-load="description_content">
      <p>Given an encoded string, return its decoded string.</p>

      <p>
        The encoding rule is: <code>k[encoded_string]</code>, where the{" "}
        <code>encoded_string</code> inside the square brackets is being repeated
        exactly <code>k</code> times. Note that <code>k</code> is guaranteed to
        be a positive integer.
      </p>

      <p>
        You may assume that the input string is always valid; there are no extra
        white spaces, square brackets are well-formed, etc. Furthermore, you may
        assume that the original data does not contain any digits and that
        digits are only for those repeat numbers, <code>k</code>. For example,
        there will not be input like <code>3a</code> or <code>2[4]</code>.
      </p>

      <p>
        The test cases are generated so that the length of the output will never
        exceed{" "}
        <code>
          10<sup>5</sup>
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "3[a]2[bc]" <br />
        <strong>Output:</strong> "aaabcbc"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "3[a2[c]]" <br />
        <strong>Output:</strong> "accaccacc"
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "2[abc]3[cd]ef" <br />
        <strong>Output:</strong> "abcabccdcdcdef"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 30</code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters, digits, and
          square brackets <code>'[]'</code>.
        </li>
        <li>
          <code>s</code> is guaranteed to be <strong>a valid</strong> input.
        </li>
        <li>
          All the integers in <code>s</code> are in the range{" "}
          <code>[1, 300]</code>.
        </li>
      </ul>
    </div>
  ),
  396: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> of length{" "}
        <code>n</code>.
      </p>

      <p>
        Assume{" "}
        <code>
          arr<sub>k</sub>
        </code>{" "}
        to be an array obtained by rotating <code>nums</code> by <code>k</code>{" "}
        positions clock-wise. We define the <strong>rotation function</strong>{" "}
        <code>F</code> on <code>nums</code> as follow:
      </p>

      <ul>
        <li>
          <code>
            F(k) = 0 * arr<sub>k</sub>[0] + 1 * arr<sub>k</sub>[1] + ... + (n -
            1) * arr<sub>k</sub>[n - 1].
          </code>
        </li>
      </ul>

      <p>
        Return <em>the maximum value of</em>{" "}
        <code>F(0), F(1), ..., F(n-1)</code>.
      </p>

      <p>
        The test cases are generated so that the answer fits in a{" "}
        <strong>32-bit</strong> integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,3,2,6] <br />
        <strong>Output:</strong> 26 <br />
        <strong>Explanation:</strong> <br />
        F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25{" "}
        <br />
        F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
        <br />
        F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
        <br />
        F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
        <br />
        So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [100] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>-100 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  401: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A binary watch has 4 LEDs on the top to represent the hours (0-11), and
        6 LEDs on the bottom to represent&nbsp;the minutes (0-59). Each LED
        represents a zero or one, with the least significant bit on the right.
      </p>
      <ul>
        <li>
          For example, the below binary watch reads <code>"4:51"</code>.
        </li>
      </ul>
      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/04/08/binarywatch.jpg"
          style={{ width: 500, height: 500 }}
        />
      </p>
      <p>
        Given an integer <code>turnedOn</code> which represents the number of
        LEDs that are currently on (ignoring the PM), return{" "}
        <em>all possible times the watch could represent</em>. You may return
        the answer in <strong>any order</strong>.
      </p>
      <p>The hour must not contain a leading zero.</p>
      <ul>
        <li>
          For example, <code>"01:00"</code> is not valid. It should be{" "}
          <code>"1:00"</code>.
        </li>
      </ul>
      <p>
        The minute must&nbsp;consist of two digits and may contain a leading
        zero.
      </p>
      <ul>
        <li>
          For example, <code>"10:2"</code> is not valid. It should be{" "}
          <code>"10:02"</code>.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> turnedOn = 1 <br />
        <strong>Output:</strong> <br />
        ["0:01","0:02","0:04","0:08","0:16","0:32","1:00","2:00","4:00","8:00"]{" "}
        <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> turnedOn = 9 <br />
        <strong>Output:</strong> []
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>0 &lt;= turnedOn &lt;= 10</code>
        </li>
      </ul>
    </div>
  ),
  405: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a 32-bit integer <code>num</code>, return{" "}
        <em>a string representing its hexadecimal representation</em>. For
        negative integers,{" "}
        <a
          href="https://en.wikipedia.org/wiki/Two%27s_complement"
          target="_blank"
          rel="noreferrer"
        >
          two’s complement
        </a>{" "}
        method is used.
      </p>
      <p>
        All the letters in the answer string should be lowercase characters, and
        there should not be any leading zeros in the answer except for the zero
        itself.
      </p>
      <p>
        <strong>Note:&nbsp;</strong>You are not allowed to use any built-in
        library method to directly solve this problem.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> num = 26 <br />
        <strong>Output:</strong> "1a" <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> num = -1 <br />
        <strong>Output:</strong> "ffffffff"
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            -2<sup>31</sup> &lt;= num &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  495: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Our hero Teemo is attacking an enemy Ashe with poison attacks! When
        Teemo attacks Ashe, Ashe gets poisoned for a exactly{" "}
        <code>duration</code> seconds. More formally, an attack at second{" "}
        <code>t</code> will mean Ashe is poisoned during the{" "}
        <strong>inclusive</strong> time interval{" "}
        <code>[t, t + duration - 1]</code>. If Teemo attacks again{" "}
        <strong>before</strong> the poison effect ends, the timer for it is{" "}
        <strong>reset</strong>, and the poison effect will end{" "}
        <code>duration</code> seconds after the new attack.
      </p>

      <p>
        You are given a <strong>non-decreasing</strong> integer array{" "}
        <code>timeSeries</code>, where <code>timeSeries[i]</code> denotes that
        Teemo attacks Ashe at second <code>timeSeries[i]</code>, and an integer{" "}
        <code>duration</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>total</strong> number of seconds that Ashe is poisoned
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> timeSeries = [1,4], duration = 2 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> Teemo's attacks on Ashe go as follows:{" "}
        <br />
        - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.
        <br />
        - At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.
        <br />
        Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in
        total.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> timeSeries = [1,2], duration = 2<br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> Teemo's attacks on Ashe go as follows:
        <br />
        - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.
        <br />
        - At second 2 however, Teemo attacks again and resets the poison timer.
        Ashe is poisoned for seconds 2 and 3.
        <br />
        Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= timeSeries.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= timeSeries[i], duration &lt;= 10<sup>7</sup>
          </code>
        </li>
        <li>
          <code>timeSeries</code> is sorted in <strong>non-decreasing</strong>{" "}
          order.
        </li>
      </ul>
    </div>
  ),
  492: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A web developer needs to know how to design a web page's size. So, given
        a specific rectangular web page’s area, your job by now is to design a
        rectangular web page, whose length L and width W satisfy the following
        requirements:
      </p>

      <ul>
        <li>
          The area of the rectangular web page you designed must equal to the
          given target area.
        </li>
        <li>
          The width <code>W</code> should not be larger than the length{" "}
          <code>L</code>, which means <code>L &gt;= W</code>.
        </li>
        <li>
          The difference between length <code>L</code> and width <code>W</code>{" "}
          should be as small as possible.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          an array <code>[L, W]</code> where <code>L</code> and <code>W</code>{" "}
          are the length and width of the&nbsp;web page you designed in
          sequence.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> area = 4 <br />
        <strong>Output:</strong> [2,2]
        <br />
        <strong>Explanation:</strong> The target area is 4, and all the possible
        ways to construct it are [1,4], [2,2], [4,1].
        <br /> But according to requirement 2, [1,4] is illegal; according to
        requirement 3, [4,1] is not optimal compared to [2,2]. So the length L
        is 2, and the width W is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> area = 37 <br />
        <strong>Output:</strong> [37,1]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> area = 122122 <br />
        <strong>Output:</strong> [427,286]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= area &lt;= 10<sup>7</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  491: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return{" "}
        <em>
          all the different possible non-decreasing subsequences of the given
          array with at least two elements
        </em>
        . You may return the answer in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,6,7,7] <br />
        <strong>Output:</strong>{" "}
        [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,4,3,2,1] <br />
        <strong>Output:</strong> [[4,4]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 15</code>
        </li>
        <li>
          <code>-100 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  489: (
    <div class="markdown-body div-width">
      <p>
        Given a <span>robot cleaner</span>
        in a room modeled as a grid.
      </p>

      <p>Each cell in the grid can be empty or blocked.</p>

      <p>
        The robot cleaner with 4 given APIs can move forward, turn left or turn
        right. Each turn it made is 90 degrees.
      </p>

      <p>
        When it tries to move into a blocked cell, its bumper sensor detects the
        obstacle and it stays on the current cell.
      </p>

      <p>
        Design an algorithm to clean the entire room using only the 4 given APIs
        shown below.
      </p>

      <pre>
        {`interface Robot {
&nbsp; // returns true if next cell is open and robot moves into the cell.
&nbsp; // returns false if next cell is obstacle and robot stays on the current cell.
&nbsp; boolean move();

  // Robot will stay on the same cell after calling turnLeft/turnRight.
&nbsp; // Each turn will be 90 degrees.
&nbsp; void turnLeft();
&nbsp; void turnRight();

  // Clean the current cell.
  void clean();
}`}
      </pre>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input:</strong>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0489.Robot%20Room%20Cleaner/images/lc-grid.jpg"
          style={{ width: 500, height: 314 }}
        />
        {`room = [
  [1,1,1,1,1,0,1,1],
  [1,1,1,1,1,0,1,1],
  [1,0,1,1,1,1,1,1],
  [0,0,0,1,0,0,0,0],
  [1,1,1,1,1,1,1,1]
],`}
        row = 1, <br />
        col = 3<strong>Explanation:</strong> <br />
        All grids in the room are marked by either 0 or 1. <br />0 means the
        cell is blocked, while 1 means the cell is accessible. <br />
        The robot initially starts at the position of row=1, col=3. <br />
        From the top left corner, its position is one row below and three
        columns right.
      </pre>

      <p>
        <strong>Notes:</strong>
      </p>

      <ul>
        <li>
          The input is only given to initialize the room and the robot's
          position internally.&nbsp;You must solve this problem "blindfolded".
          In other words, you must control the robot using only the mentioned 4
          APIs, without knowing the room layout and the initial robot's
          position.
        </li>
        <li>
          The robot's initial position will always be in an accessible cell.
        </li>
        <li>The initial direction of the robot will be facing up.</li>
        <li>
          All accessible cells are connected, which means the all cells marked
          as 1 will be accessible by the robot.
        </li>
        <li>Assume all four edges of the grid are all surrounded by wall.</li>
      </ul>
    </div>
  ),
  488: (
    <div class="elfjS" data-track-load="description_content">
      <p>You are playing a variation of the game Zuma.</p>

      <p>
        In this variation of Zuma, there is a <strong>single row</strong> of
        colored balls on a board, where each ball can be colored red{" "}
        <code>'R'</code>, yellow <code>'Y'</code>, blue <code>'B'</code>, green{" "}
        <code>'G'</code>, or white <code>'W'</code>. You also have several
        colored balls in your hand.
      </p>

      <p>
        Your goal is to <strong>clear all</strong> of the balls from the board.
        On each turn:
      </p>

      <ul>
        <li>
          Pick <strong>any</strong> ball from your hand and insert it in between
          two balls in the row or on either end of the row.
        </li>
        <li>
          If there is a group of{" "}
          <strong>three or more consecutive balls</strong> of the{" "}
          <strong>same color</strong>, remove the group of balls from the board.
          <ul>
            <li>
              If this removal causes more groups of three or more of the same
              color to form, then continue removing each group until there are
              none left.
            </li>
          </ul>
        </li>
        <li>If there are no more balls on the board, then you win the game.</li>
        <li>
          Repeat this process until you either win or do not have any more balls
          in your hand.
        </li>
      </ul>

      <p>
        Given a string <code>board</code>, representing the row of balls on the
        board, and a string <code>hand</code>, representing the balls in your
        hand, return{" "}
        <em>
          the <strong>minimum</strong> number of balls you have to insert to
          clear all the balls from the board. If you cannot clear all the balls
          from the board using the balls in your hand, return{" "}
        </em>
        <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> board = "WRRBBW", hand = "RB" <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> It is impossible to clear all the balls.
        The best you can do is: <br />- Insert 'R' so the board becomes WRR
        <u>R</u>BBW. W<u>RRR</u>BBW -&gt; WBBW. <br />- Insert 'B' so the board
        becomes WBB<u>B</u>W. W<u>BBB</u>W -&gt; WW. <br />
        There are still balls remaining on the board, and you are out of balls
        to insert.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> board = "WWRRBBWW", hand = "WRBRW" <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> To make the board empty: <br />- Insert
        'R' so the board becomes WWRR<u>R</u>BBWW. WW<u>RRR</u>BBWW -&gt;
        WWBBWW. <br />- Insert 'B' so the board becomes WWBB<u>B</u>WW. WW
        <u>BBB</u>WW -&gt; <u>WWWW</u> -&gt; empty. <br />2 balls from your hand
        were needed to clear the board.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> board = "G", hand = "GGGGG" <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> To make the board empty: <br />- Insert
        'G' so the board becomes G<u>G</u>. <br />- Insert 'G' so the board
        becomes GG<u>G</u>. <u>GGG</u> -&gt; empty. <br />2 balls from your hand
        were needed to clear the board.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= board.length &lt;= 16</code>
        </li>
        <li>
          <code>1 &lt;= hand.length &lt;= 5</code>
        </li>
        <li>
          <code>board</code> and <code>hand</code> consist of the characters{" "}
          <code>'R'</code>, <code>'Y'</code>, <code>'B'</code>, <code>'G'</code>
          , and <code>'W'</code>.
        </li>
        <li>
          The initial row of balls on the board will <strong>not</strong> have
          any groups of three or more consecutive balls of the same color.
        </li>
      </ul>
    </div>
  ),
  483: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code> represented as a string, return{" "}
        <em>
          the smallest <strong>good base</strong> of
        </em>{" "}
        <code>n</code>.
      </p>

      <p>
        We call <code>k &gt;= 2</code> a <strong>good base</strong> of{" "}
        <code>n</code>, if all digits of <code>n</code> base <code>k</code> are{" "}
        <code>1</code>'s.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = "13" <br />
        <strong>Output:</strong> "3" <br />
        <strong>Explanation:</strong> 13 base 3 is 111.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = "4681" <br />
        <strong>Output:</strong> "8" <br />
        <strong>Explanation:</strong> 4681 base 8 is 11111.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = "1000000000000000000" <br />
        <strong>Output:</strong> "999999999999999999" <br />
        <strong>Explanation:</strong> 1000000000000000000 base
        999999999999999999 is 11.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n</code> is an integer in the range{" "}
          <code>
            [3, 10<sup>18</sup>]
          </code>
          .
        </li>
        <li>
          <code>n</code> does not contain any leading zeros.
        </li>
      </ul>
    </div>
  ),
  481: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A magical string <code>s</code> consists of only <code>'1'</code> and{" "}
        <code>'2'</code> and obeys the following rules:
      </p>

      <ul>
        <li>
          The string s is magical because concatenating the number of contiguous
          occurrences of characters <code>'1'</code> and <code>'2'</code>{" "}
          generates the string <code>s</code> itself.
        </li>
      </ul>

      <p>
        The first few elements of <code>s</code> is{" "}
        <code>s = "1221121221221121122……"</code>. If we group the consecutive{" "}
        <code>1</code>'s and <code>2</code>'s in <code>s</code>, it will be{" "}
        <code>"1 22 11 2 1 22 1 22 11 2 11 22 ......"</code> and the occurrences
        of <code>1</code>'s or <code>2</code>'s in each group are{" "}
        <code>"1 2 2 1 1 2 1 2 2 1 2 2 ......"</code>. You can see that the
        occurrence sequence is <code>s</code> itself.
      </p>

      <p>
        Given an integer <code>n</code>, return the number of <code>1</code>'s
        in the first <code>n</code> number in the magical string <code>s</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 6 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The first 6 elements of magical string s
        is "122112" and it contains three 1's, so return 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  477: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The{" "}
        <a
          href="https://en.wikipedia.org/wiki/Hamming_distance"
          target="_blank"
          rel="noreferrer"
        >
          Hamming distance
        </a>{" "}
        between two integers is the number of positions at which the
        corresponding bits are different.
      </p>

      <p>
        Given an integer array <code>nums</code>, return{" "}
        <em>
          the sum of <strong>Hamming distances</strong> between all the pairs of
          the integers in
        </em>{" "}
        <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,14,2] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> In binary representation, the 4 is 0100,
        14 is 1110, and 2 is 0010 (just <br />
        showing the four bits relevant in this case). <br />
        The answer will be: <br />
        HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2)
        = 2 + 2 + 2 = 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,14,4] <br />
        <strong>Output:</strong> 4
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          The answer for the given input will fit in a <strong>32-bit</strong>{" "}
          integer.
        </li>
      </ul>
    </div>
  ),
  475: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Winter is coming! During the contest, your first job is to design a
        standard heater with a fixed warm radius to warm all the houses.
      </p>

      <p>
        Every house can be warmed, as long as the house is within the heater's
        warm radius range.&nbsp;
      </p>

      <p>
        Given the positions of <code>houses</code> and <code>heaters</code> on a
        horizontal line, return{" "}
        <em>
          the minimum radius standard of heaters&nbsp;so that those heaters
          could cover all houses.
        </em>
      </p>

      <p>
        <strong>Notice</strong> that&nbsp;all the <code>heaters</code> follow
        your radius standard, and the warm radius will the same.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> houses = [1,2,3], heaters = [2] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The only heater was placed in the position
        2, and if we use the radius 1 standard, then all the houses can be
        warmed.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> houses = [1,2,3,4], heaters = [1,4] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The two heaters were placed at positions 1
        and 4. We need to use a radius 1 standard, then all the houses can be
        warmed.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> houses = [1,5], heaters = [2] <br />
        <strong>Output:</strong> 3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= houses.length, heaters.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= houses[i], heaters[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  472: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of strings <code>words</code> (
        <strong>without duplicates</strong>), return{" "}
        <em>
          all the <strong>concatenated words</strong> in the given list of
        </em>{" "}
        <code>words</code>.
      </p>

      <p>
        A <strong>concatenated word</strong> is defined as a string that is
        comprised entirely of at least two shorter words (not necessarily
        distinct)&nbsp;in the given array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words =
        ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]
        <br /> <strong>Output:</strong>{" "}
        ["catsdogcats","dogcatsdog","ratcatdogcat"] <br />
        <strong>Explanation:</strong> "catsdogcats" can be concatenated by
        "cats", "dog" and "cats"; <br />
        "dogcatsdog" can be concatenated by "dog", "cats" and "dog"; <br />
        "ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["cat","dog","catdog"] <br />
        <strong>Output:</strong> ["catdog"]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= words.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 30</code>
        </li>
        <li>
          <code>words[i]</code> consists of only lowercase English letters.
        </li>
        <li>
          All the strings of <code>words</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>
            1 &lt;= sum(words[i].length) &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  471: (
    <div class="markdown-body div-width">
      <p>
        Given a <b>non-empty</b> string, encode the string such that its encoded
        length is the shortest.
      </p>

      <p>
        The encoding rule is: <code>k[encoded_string]</code>, where the{" "}
        <i>encoded_string</i> inside the square brackets is being repeated
        exactly <i>k</i> times.
      </p>

      <p>
        <b>Note:</b>
      </p>

      <ul>
        <li>
          <i>k</i> will be a positive integer and encoded string will not be
          empty or have extra space.
        </li>
        <li>
          You may assume that the input string contains only lowercase English
          letters. The string's length is at most 160.
        </li>
        <li>
          If an encoding process does not make the string shorter, then do not
          encode it. If there are several solutions, return any of them is fine.
        </li>
      </ul>

      <p>&nbsp;</p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        Input: "aaa" <br />
        Output: "aaa" <br />
        Explanation: There is no way to encode it such that it is shorter than
        the input string, so we do not encode it.
      </pre>

      <p>&nbsp;</p>

      <p>
        <b>Example 2:</b>
      </p>

      <pre>
        Input: "aaaaa" <br />
        Output: "5[a]" <br />
        Explanation: "5[a]" is shorter than "aaaaa" by 1 character.
      </pre>

      <p>&nbsp;</p>

      <p>
        <b>Example 3:</b>
      </p>

      <pre>
        Input: "aaaaaaaaaa" <br />
        Output: "10[a]" <br />
        Explanation: "a9[a]" or "9[a]a" are also valid solutions, both of them
        have the same length = 5, which is the same as "10[a]".
      </pre>

      <p>&nbsp;</p>

      <p>
        <b>Example 4:</b>
      </p>

      <pre>
        Input: "aabcaabcd" <br />
        Output: "2[aabc]d" <br />
        Explanation: "aabc" occurs twice, so one answer can be "2[aabc]d".
      </pre>

      <p>&nbsp;</p>

      <p>
        <b>Example 5:</b>
      </p>

      <pre>
        Input: "abbbabbbcabbbabbbc" <br />
        Output: "2[2[abbb]c]" <br />
        Explanation: "abbbabbbc" occurs twice, but "abbbabbbc" can also be
        encoded to "2[abbb]c", so one answer can be "2[2[abbb]c]".
      </pre>

      <p>&nbsp;</p>
    </div>
  ),
  469: (
    <div class="markdown-body div-width">
      <p>
        Given a list of points that form a polygon when joined sequentially,
        find if this polygon is convex{" "}
        <a href="https://en.wikipedia.org/wiki/Convex_polygon" target="_blank">
          (Convex polygon definition)
        </a>
        .
      </p>

      <p>&nbsp;</p>

      <p>
        <b>Note:</b>
      </p>

      <ul>
        <li>There are at least 3 and at most 10,000 points.</li>
        <li>Coordinates are in the range -10,000 to 10,000.</li>
        <li>
          You may assume the polygon formed by given points is always a simple
          polygon
          <a
            href="https://en.wikipedia.org/wiki/Simple_polygon"
            target="_blank"
            alt=""
          >
            {" "}
            (Simple polygon definition)
          </a>
          . In other words, we ensure that exactly two edges intersect at each
          vertex, and that edges otherwise <b>don't intersect each other</b>.
        </li>
      </ul>

      <p>&nbsp;</p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        [[0,0],[0,1],[1,1],[1,0]] <br />
        Answer: True <br />
        Explanation:
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2018/10/13/polygon_convex.png"
          style={{ width: 100, height: 100 }}
        />
      </pre>

      <p>
        <b>Example 2:</b>
      </p>

      <pre>
        [[0,0],[0,10],[10,10],[10,0],[5,5]] <br />
        Answer: False <br />
        Explanation:
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2018/10/13/polygon_not_convex.png"
          style={{ width: 100, height: 100 }}
        />
      </pre>
    </div>
  ),
  467: (
    <div class="markdown-body div-width">
      <p>
        Consider the string <code>s</code> to be the infinite wraparound string
        of "abcdefghijklmnopqrstuvwxyz", so <code>s</code> will look like this:
        "...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....".
      </p>

      <p>
        Now we have another string <code>p</code>. Your job is to find out how
        many unique non-empty substrings of <code>p</code> are present in{" "}
        <code>s</code>. In particular, your input is the string <code>p</code>{" "}
        and you need to output the number of different non-empty substrings of
        <code>p</code> in the string <code>s</code>.
      </p>

      <p>
        <b>Note:</b> <code>p</code> consists of only lowercase English letters
        and the size of p might be over 10000.
      </p>

      <p>
        <b>Example 1:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b> "a" <br />
        <b>Output:</b> 1<b>Explanation:</b> Only the substring "a" of string "a"
        is in the string s.
      </pre>
      <p></p>

      <p>
        <b>Example 2:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b> "cac" <br />
        <b>Output:</b> 2 <br />
        <b>Explanation:</b> There are two substrings "a", "c" of string "cac" in
        the string s.
      </pre>
      <p></p>

      <p>
        <b>Example 3:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b> "zab" <br />
        <b>Output:</b> 6 <br />
        <b>Explanation:</b> There are six substrings "z", "a", "b", "za", "ab",
        "zab" of string "zab" in the string s.
      </pre>
    </div>
  ),
  466: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        We define <code>str = [s, n]</code> as the string <code>str</code> which
        consists of the string <code>s</code> concatenated <code>n</code> times.
      </p>
      <ul>
        <li>
          For example, <code>str == ["abc", 3] =="abcabcabc"</code>.
        </li>
      </ul>
      <p>
        We define that string <code>s1</code> can be obtained from string{" "}
        <code>s2</code> if we can remove some characters from <code>s2</code>{" "}
        such that it becomes <code>s1</code>.
      </p>
      <ul>
        <li>
          For example, <code>s1 = "abc"</code> can be obtained from{" "}
          <code>
            s2 = "ab
            <strong>
              <u>dbe</u>
            </strong>
            c"
          </code>{" "}
          based on our definition by removing the bolded underlined characters.
        </li>
      </ul>
      <p>
        You are given two strings <code>s1</code> and <code>s2</code> and two
        integers <code>n1</code> and <code>n2</code>. You have the two strings{" "}
        <code>str1 = [s1, n1]</code> and <code>str2 = [s2, n2]</code>.
      </p>
      <p>
        Return <em>the maximum integer </em>
        <code>m</code>
        <em> such that </em>
        <code>str = [str2, m]</code>
        <em> can be obtained from </em>
        <code>str1</code>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> s1 = "acb", n1 = 4, s2 = "ab", n2 = 2 <br />
        <strong>Output:</strong> 2 <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> s1 = "acb", n1 = 1, s2 = "acb", n2 = 1 <br />
        <strong>Output:</strong> 1
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= s1.length, s2.length &lt;= 100</code>
        </li>
        <li>
          <code>s1</code> and <code>s2</code> consist of lowercase English
          letters.
        </li>
        <li>
          <code>
            1 &lt;= n1, n2 &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  465: (
    <div class="markdown-body div-width">
      <p>
        A group of friends went on holiday and sometimes lent each other money.
        For example, Alice paid for Bill's lunch for $10. Then later Chris gave
        Alice $5 for a taxi ride. We can model each transaction as a tuple (x,
        y, z) which means person x gave person y $z. Assuming Alice, Bill, and
        Chris are person 0, 1, and 2 respectively (0, 1, 2 are the person's ID),
        the transactions can be represented as{" "}
        <code>[[0, 1, 10], [2, 0, 5]]</code>.
      </p>

      <p>
        Given a list of transactions between a group of people, return the
        minimum number of transactions required to settle the debt.
      </p>

      <p>
        <b>Note:</b>
      </p>
      <ul>
        <li>
          A transaction will be given as a tuple (x, y, z). Note that{" "}
          <code>x ≠ y</code> and
          <code>z &gt; 0</code>.
        </li>{" "}
        <br />
        <li>
          Person's IDs may not be linear, e.g. we could have the persons 0, 1, 2
          or we could also have the persons 0, 2, 6.
        </li>
      </ul>
      <p></p>

      <p>
        <b>Example 1:</b> <br />
      </p>
      <pre>
        <b>Input:</b> <br />
        [[0,1,10], [2,0,5]] <br />
        <b>Output:</b>
        <br />
        2<br />
        <b>Explanation:</b>
        <br />
        Person #0 gave person #1 $10.
        <br />
        Person #2 gave person #0 $5.
        <br />
        Two transactions are needed. One way to settle the debt is person #1
        pays person #0 and #2 $5 each.
      </pre>
      <p></p>

      <p>
        <b>Example 2:</b>
      </p>
      <pre>
        <b>Input:</b>
        <br />
        [[0,1,10], [1,0,1], [1,2,5], [2,0,5]]
        <br />
        <b>Output:</b>
        <br />
        1<br />
        <b>Explanation:</b>
        <br />
        Person #0 gave person #1 $10.
        <br />
        Person #1 gave person #0 $1.
        <br />
        Person #1 gave person #2 $5.
        <br />
        Person #2 gave person #0 $5.
        <br />
        Therefore, person #1 only need to give person #0 $4, and all debt is
        settled.
      </pre>
      <p></p>
    </div>
  ),
  462: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> of size <code>n</code>, return{" "}
        <em>
          the minimum number of moves required to make all array elements equal
        </em>
        .
      </p>

      <p>
        In one move, you can increment or decrement an element of the array by{" "}
        <code>1</code>.
      </p>

      <p>
        Test cases are designed so that the answer will fit in a{" "}
        <strong>32-bit</strong> integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong>
        <br />
        Only two moves are needed (remember each move increments or decrements
        one element): <br />[<u>1</u>,2,3] =&gt; [2,2,<u>3</u>] =&gt; [2,2,2]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,10,2,9] <br />
        <strong>Output:</strong> 16
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  461: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The{" "}
        <a
          href="https://en.wikipedia.org/wiki/Hamming_distance"
          target="_blank"
          rel="noreferrer"
        >
          Hamming distance
        </a>{" "}
        between two integers is the number of positions at which the
        corresponding bits are different.
      </p>

      <p>
        Given two integers <code>x</code> and <code>y</code>, return{" "}
        <em>
          the <strong>Hamming distance</strong> between them
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 1, y = 4 <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong>
        <br />
        1 (0 0 0 1)
        <br />
        4 (0 1 0 0)
        <br />
        ↑ ↑<br />
        The above arrows point to positions where the corresponding bits are
        different.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 3, y = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;=&nbsp;x, y &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Note:</strong> This question is the same as{" "}
        <a
          href="https://leetcode.com/problems/minimum-bit-flips-to-convert-number/description/"
          target="_blank"
          rel="noreferrer"
        >
          {" "}
          2220: Minimum Bit Flips to Convert Number.
        </a>
      </p>
    </div>
  ),
  458: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>buckets</code> buckets of liquid, where{" "}
        <strong>exactly one</strong> of the buckets is poisonous. To figure out
        which one is poisonous, you feed some number of (poor) pigs the liquid
        to see whether they will die or not. Unfortunately, you only have{" "}
        <code>minutesToTest</code> minutes to determine which bucket is
        poisonous.
      </p>

      <p>You can feed the pigs according to these steps:</p>

      <ul>
        <li>Choose some live pigs to feed.</li>
        <li>
          For each pig, choose which buckets to feed it. The pig will consume
          all the chosen buckets simultaneously and will take no time. Each pig
          can feed from any number of buckets, and each bucket can be fed from
          by any number of pigs.
        </li>
        <li>
          Wait for <code>minutesToDie</code> minutes. You may{" "}
          <strong>not</strong> feed any other pigs during this time.
        </li>
        <li>
          After <code>minutesToDie</code> minutes have passed, any pigs that
          have been fed the poisonous bucket will die, and all others will
          survive.
        </li>
        <li>Repeat this process until you run out of time.</li>
      </ul>

      <p>
        Given <code>buckets</code>, <code>minutesToDie</code>, and{" "}
        <code>minutesToTest</code>, return{" "}
        <em>
          the <strong>minimum</strong> number of pigs needed to figure out which
          bucket is poisonous within the allotted time
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> buckets = 4, minutesToDie = 15, minutesToTest =
        15 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> We can determine the poisonous bucket as
        follows: <br />
        At time 0, feed the first pig buckets 1 and 2, and feed the second pig
        buckets 2 and 3. <br />
        At time 15, there are 4 possible outcomes:
        <br />
        - If only the first pig dies, then bucket 1 must be poisonous. <br />
        - If only the second pig dies, then bucket 3 must be poisonous.
        <br />
        - If both pigs die, then bucket 2 must be poisonous.
        <br />- If neither pig dies, then bucket 4 must be poisonous.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> buckets = 4, minutesToDie = 15, minutesToTest =
        30
        <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> We can determine the poisonous bucket as
        follows:
        <br />
        At time 0, feed the first pig bucket 1, and feed the second pig bucket
        2.
        <br />
        At time 15, there are 2 possible outcomes:
        <br />
        - If either pig dies, then the poisonous bucket is the one it was fed.
        <br />
        - If neither pig dies, then feed the first pig bucket 3, and feed the
        second pig bucket 4.
        <br />
        At time 30, one of the two pigs must die, and the poisonous bucket is
        the one it was fed.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= buckets &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;=&nbsp;minutesToDie &lt;=&nbsp;minutesToTest &lt;= 100
          </code>
        </li>
      </ul>
    </div>
  ),
  454: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given four integer arrays <code>nums1</code>, <code>nums2</code>,{" "}
        <code>nums3</code>, and <code>nums4</code> all of length <code>n</code>,
        return the number of tuples <code>(i, j, k, l)</code> such that:
      </p>

      <ul>
        <li>
          <code>0 &lt;= i, j, k, l &lt; n</code>
        </li>
        <li>
          <code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2],
        nums4 = [0,2] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        The two tuples are: <br />
        1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 +
        (-2) + (-1) + 2 = 0 <br />
        2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 +
        (-1) + (-1) + 0 = 0
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [0], nums2 = [0], nums3 = [0], nums4 =
        [0] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums1.length</code>
        </li>
        <li>
          <code>n == nums2.length</code>
        </li>
        <li>
          <code>n == nums3.length</code>
        </li>
        <li>
          <code>n == nums4.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 200</code>
        </li>
        <li>
          <code>
            -2<sup>28</sup> &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 2
            <sup>28</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  447: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given <code>n</code> <code>points</code> in the plane that are
        all <strong>distinct</strong>, where{" "}
        <code>
          points[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>
        . A <strong>boomerang</strong> is a tuple of points{" "}
        <code>(i, j, k)</code> such that the distance between <code>i</code> and{" "}
        <code>j</code> equals the distance between <code>i</code> and{" "}
        <code>k</code> <strong>(the order of the tuple matters)</strong>.
      </p>

      <p>
        Return <em>the number of boomerangs</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> points = [[0,0],[1,0],[2,0]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The two boomerangs are [[1,0],[0,0],[2,0]]
        and [[1,0],[2,0],[0,0]].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> points = [[1,1],[2,2],[3,3]] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> points = [[1,1]] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == points.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 500</code>
        </li>
        <li>
          <code>points[i].length == 2</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10
            <sup>4</sup>
          </code>
        </li>
        <li>
          All the points are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  446: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return{" "}
        <em>
          the number of all the <strong>arithmetic subsequences</strong> of
        </em>{" "}
        <code>nums</code>.
      </p>

      <p>
        A sequence of numbers is called arithmetic if it consists of{" "}
        <strong>at least three elements</strong> and if the difference between
        any two consecutive elements is the same.
      </p>

      <ul>
        <li>
          For example, <code>[1, 3, 5, 7, 9]</code>, <code>[7, 7, 7, 7]</code>,
          and <code>[3, -1, -5, -9]</code> are arithmetic sequences.
        </li>
        <li>
          For example, <code>[1, 1, 2, 5, 7]</code> is not an arithmetic
          sequence.
        </li>
      </ul>

      <p>
        A <strong>subsequence</strong> of an array is a sequence that can be
        formed by removing some elements (possibly none) of the array.
      </p>

      <ul>
        <li>
          For example, <code>[2,5,10]</code> is a subsequence of{" "}
          <code>
            [1,2,1,
            <strong>
              <u>2</u>
            </strong>
            ,4,1,
            <u>
              <strong>5</strong>
            </u>
            ,
            <u>
              <strong>10</strong>
            </u>
            ]
          </code>
          .
        </li>
      </ul>

      <p>
        The test cases are generated so that the answer fits in{" "}
        <strong>32-bit</strong> integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,4,6,8,10] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> All arithmetic subsequence slices are:{" "}
        <br />
        [2,4,6] <br />
        [4,6,8] <br />
        [6,8,10] <br />
        [2,4,6,8] <br />
        [4,6,8,10] <br />
        [2,4,6,8,10] <br />
        [2,6,10]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [7,7,7,7,7] <br />
        <strong>Output:</strong> 16 <br />
        <strong>Explanation:</strong> Any subsequence of this array is
        arithmetic.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1&nbsp; &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  443: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of characters <code>chars</code>, compress it using the
        following algorithm:
      </p>

      <p>
        Begin with an empty string <code>s</code>. For each group of{" "}
        <strong>consecutive repeating characters</strong> in <code>chars</code>:
      </p>

      <ul>
        <li>
          If the group's length is <code>1</code>, append the character to{" "}
          <code>s</code>.
        </li>
        <li>Otherwise, append the character followed by the group's length.</li>
      </ul>

      <p>
        The compressed string <code>s</code>{" "}
        <strong>should not be returned separately</strong>, but instead, be
        stored{" "}
        <strong>
          in the input character array <code>chars</code>
        </strong>
        . Note that group lengths that are <code>10</code> or longer will be
        split into multiple characters in <code>chars</code>.
      </p>

      <p>
        After you are done <strong>modifying the input array,</strong> return{" "}
        <em>the new length of the array</em>.
      </p>

      <p>You must write an algorithm that uses only constant extra space.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> chars = ["a","a","b","b","c","c","c"] <br />
        <strong>Output:</strong> Return 6, and the first 6 characters of the
        input array should be: ["a","2","b","2","c","3"]
        <br /> <strong>Explanation:</strong> The groups are "aa", "bb", and
        "ccc". This compresses to "a2b2c3".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> chars = ["a"] <br />
        <strong>Output:</strong> Return 1, and the first character of the input
        array should be: ["a"] <br />
        <strong>Explanation:</strong> The only group is "a", which remains
        uncompressed since it's a single character.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> chars =
        ["a","b","b","b","b","b","b","b","b","b","b","b","b"]
        <br /> <strong>Output:</strong> Return 4, and the first 4 characters of
        the input array should be: ["a","b","1","2"].
        <br /> <strong>Explanation:</strong> The groups are "a" and
        "bbbbbbbbbbbb". This compresses to "ab12".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= chars.length &lt;= 2000</code>
        </li>
        <li>
          <code>chars[i]</code> is a lowercase English letter, uppercase English
          letter, digit, or symbol.
        </li>
      </ul>
    </div>
  ),
  442: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> of length <code>n</code> where
        all the integers of <code>nums</code> are in the range{" "}
        <code>[1, n]</code> and each integer appears <strong>at most</strong>{" "}
        <strong>twice</strong>, return{" "}
        <em>
          an array of all the integers that appears <strong>twice</strong>
        </em>
        .
      </p>
      <p>
        You must write an algorithm that runs in <code>O(n)</code> time and uses
        only <em>constant</em> auxiliary space, excluding the space needed to
        store the output
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [4,3,2,7,8,2,3,1] <br />
        <strong>Output:</strong> [2,3] <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [1,1,2]
        <br />
        <strong>Output:</strong> [1]
        <br />
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <br />
      <pre>
        <strong>Input:</strong> nums = [1]
        <br />
        <strong>Output:</strong> []
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= n</code>
        </li>
        <li>
          Each element in <code>nums</code> appears <strong>once</strong> or{" "}
          <strong>twice</strong>.
        </li>
      </ul>
    </div>
  ),
  441: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have <code>n</code> coins and you want to build a staircase with
        these coins. The staircase consists of <code>k</code> rows where the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        row has exactly <code>i</code> coins. The last row of the staircase{" "}
        <strong>may be</strong> incomplete.
      </p>

      <p>
        Given the integer <code>n</code>, return{" "}
        <em>
          the number of <strong>complete rows</strong> of the staircase you will
          build
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/09/arrangecoins1-grid.jpg"
        style={{ width: 253, height: 253 }}
      />
      <pre>
        <strong>Input:</strong> n = 5 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> Because the 3<sup>rd</sup> row is
        incomplete, we return 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/09/arrangecoins2-grid.jpg"
        style={{ width: 333, height: 333 }}
      />
      <pre>
        <strong>Input:</strong> n = 8 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Because the 4<sup>th</sup> row is
        incomplete, we return 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  440: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integers <code>n</code> and <code>k</code>, return{" "}
        <em>the</em>{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        <em>lexicographically smallest integer in the range</em>{" "}
        <code>[1, n]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 13, k = 2 <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation:</strong> The lexicographical order is [1, 10, 11,
        12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1, k = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= k &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  439: (
    <div class="markdown-body div-width">
      <p>
        Given a string representing arbitrarily nested ternary expressions,
        calculate the result of the expression. You can always assume that the
        given expression is valid and only consists of digits <code>0-9</code>,{" "}
        <code>?</code>, <code>:</code>, <code>T</code> and
        <code>F</code> (<code>T</code> and <code>F</code> represent True and
        False respectively).
      </p>
      <p>
        <b>Note:</b>
      </p>
      <ul>
        <li>The length of the given string is ≤ 10000.</li>
        <li>Each number will contain only one digit.</li>
        <li>
          The conditional expressions group right-to-left (as usual in most
          languages).
        </li>
        <li>
          The condition will always be either <code>T</code> or <code>F</code>.
          That is, the condition will never be a digit.
        </li>
        <li>
          The result of the expression will always evaluate to either a digit{" "}
          <code>0-9</code>,<code>T</code> or <code>F</code>.
        </li>
      </ul>
      <p></p>

      <p>
        <b>Example 1:</b>
      </p>
      <pre>
        <b>Input:</b> "T?2:3" <br />
        <b>Output:</b> "2" <br />
        <b>Explanation:</b> If true, then result is 2; otherwise result is 3.
      </pre>
      <p></p>

      <p>
        <b>Example 2:</b>
      </p>
      <pre>
        <b>Input:</b> "F?1:T?4:5" <br />
        <b>Output:</b> "4" <br />
        <b>Explanation:</b> The conditional expressions group right-to-left.
        Using parenthesis, it is read/evaluated as: "(F ? 1 : (T ? 4 : 5))"{" "}
        <br /> "(F ? 1 : (T ? 4 : 5))" <br />
        -&gt; "(F ? 1 : 4)" or -&gt; <br />
        "(T ? 4 : 5)" -&gt; "4" -&gt; "4"
      </pre>
      <p></p>

      <p>
        <b>Example 3:</b>
      </p>
      <pre>
        <b>Input:</b> "T?T?F:5:3" <br />
        <b>Output:</b> "F" <br />
        <b>Explanation:</b> The conditional expressions group right-to-left.
        Using parenthesis, it is read/evaluated as: <br /> "(T ? (T ? F : 5) :
        3)" <br />
        "(T ? (T ? F : 5) : 3)" <br />
        -&gt; "(T ? F : 3)" or <br />
        -&gt; "(T ? F : 5)" -&gt; "F" -&gt; "F"
      </pre>
      <p></p>
    </div>
  ),
  436: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of <code>intervals</code>, where{" "}
        <code>
          intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]
        </code>{" "}
        and each{" "}
        <code>
          start<sub>i</sub>
        </code>{" "}
        is <strong>unique</strong>.
      </p>

      <p>
        The <strong>right interval</strong> for an interval <code>i</code> is an
        interval <code>j</code> such that{" "}
        <code>
          start<sub>j</sub> &gt;= end<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          start<sub>j</sub>
        </code>{" "}
        is <strong>minimized</strong>. Note that <code>i</code> may equal{" "}
        <code>j</code>.
      </p>

      <p>
        Return{" "}
        <em>
          an array of <strong>right interval</strong> indices for each interval{" "}
          <code>i</code>
        </em>
        . If no <strong>right interval</strong> exists for interval{" "}
        <code>i</code>, then put <code>-1</code> at index <code>i</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,2]] <br />
        <strong>Output:</strong> [-1] <br />
        <strong>Explanation:</strong> There is only one interval in the
        collection, so it outputs -1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[3,4],[2,3],[1,2]] <br />
        <strong>Output:</strong> [-1,0,1]
        <br />
        <strong>Explanation:</strong> There is no right interval for [3,4].
        <br />
        The right interval for [2,3] is [3,4] since start<sub>0</sub> = 3 is the
        smallest start that is &gt;= end<sub>1</sub> = 3.
        <br />
        The right interval for [1,2] is [2,3] since start<sub>1</sub> = 2 is the
        smallest start that is &gt;= end<sub>2</sub> = 2.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,4],[2,3],[3,4]]
        <br />
        <strong>Output:</strong> [-1,2,-1]
        <br />
        <strong>Explanation:</strong> There is no right interval for [1,4] and
        [3,4].
        <br />
        The right interval for [2,3] is [3,4] since start<sub>2</sub> = 3 is the
        smallest start that is &gt;= end<sub>1</sub> = 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= intervals.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>intervals[i].length == 2</code>
        </li>
        <li>
          <code>
            -10<sup>6</sup> &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;=
            10<sup>6</sup>
          </code>
        </li>
        <li>
          The start point of each interval is <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  435: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of intervals <code>intervals</code> where{" "}
        <code>
          intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]
        </code>
        , return{" "}
        <em>
          the minimum number of intervals you need to remove to make the rest of
          the intervals non-overlapping
        </em>
        .
      </p>

      <p>
        <strong>Note</strong> that intervals which only touch at a point are{" "}
        <strong>non-overlapping</strong>. For example, <code>[1, 2]</code> and{" "}
        <code>[2, 3]</code> are non-overlapping.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,2],[2,3],[3,4],[1,3]] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> [1,3] can be removed and the rest of the
        intervals are non-overlapping.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,2],[1,2],[1,2]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> You need to remove two [1,2] to make the
        rest of the intervals non-overlapping.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,2],[2,3]] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> You don't need to remove any of the
        intervals since they're already non-overlapping.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= intervals.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>intervals[i].length == 2</code>
        </li>
        <li>
          <code>
            -5 * 10<sup>4</sup> &lt;= start<sub>i</sub> &lt; end<sub>i</sub>{" "}
            &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  433: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A gene string can be represented by an 8-character long string, with
        choices from <code>'A'</code>, <code>'C'</code>, <code>'G'</code>, and{" "}
        <code>'T'</code>.
      </p>

      <p>
        Suppose we need to investigate a mutation from a gene string{" "}
        <code>startGene</code> to a gene string <code>endGene</code> where one
        mutation is defined as one single character changed in the gene string.
      </p>

      <ul>
        <li>
          For example, <code>"AACCGGTT" --&gt; "AACCGGTA"</code> is one
          mutation.
        </li>
      </ul>

      <p>
        There is also a gene bank <code>bank</code> that records all the valid
        gene mutations. A gene must be in <code>bank</code> to make it a valid
        gene string.
      </p>

      <p>
        Given the two gene strings <code>startGene</code> and{" "}
        <code>endGene</code> and the gene bank <code>bank</code>, return{" "}
        <em>the minimum number of mutations needed to mutate from </em>
        <code>startGene</code>
        <em> to </em>
        <code>endGene</code>. If there is no such a mutation, return{" "}
        <code>-1</code>.
      </p>

      <p>
        Note that the starting point is assumed to be valid, so it might not be
        included in the bank.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> startGene = "AACCGGTT", endGene = "AACCGGTA",
        bank = ["AACCGGTA"] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> startGene = "AACCGGTT", endGene = "AAACGGTA",{" "}
        <br /> bank = ["AACCGGTA","AACCGCTA","AAACGGTA"]
        <br /> <strong>Output:</strong> 2
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= bank.length &lt;= 10</code>
        </li>
        <li>
          <code>startGene.length == endGene.length == bank[i].length == 8</code>
        </li>
        <li>
          <code>startGene</code>, <code>endGene</code>, and <code>bank[i]</code>{" "}
          consist of only the characters <code>['A', 'C', 'G', 'T']</code>.
        </li>
      </ul>
    </div>
  ),
  431: (
    <div class="markdown-body div-width">
      <p>
        Design an algorithm to encode an N-ary tree into a binary tree and
        decode the binary tree to get the original N-ary tree. An N-ary tree is
        a rooted tree in which each node has no more than N children. Similarly,
        a binary tree is a rooted tree in which each node has no more than 2
        children. There is no restriction on how your encode/decode algorithm
        should work. You just need to ensure that an N-ary tree can be encoded
        to a binary tree and this binary tree can be decoded to the original
        N-nary tree structure.
      </p>

      <p>
        For example, you may encode the following <code>3-ary</code> tree to a
        binary tree in this way:
      </p>

      <p>&nbsp;</p>

      <p>
        <img
          alt=""
          src="https://camo.githubusercontent.com/ba05442fcd9747f3efed0f3c6777b83d7363affa22b3e246f3d68df3be37df61/68747470733a2f2f6173736574732e6c656574636f64652e636f6d2f75706c6f6164732f323031382f31302f31322f6e6172797472656562696e617279747265656578616d706c652e706e67"
          style={{ width: "100%", maxWidth: 640 }}
        />
      </p>

      <p>&nbsp;</p>

      <p>
        Note that the above is just an example which <em>might or might not</em>{" "}
        work. You do not necessarily need to follow this format, so please be
        creative and come up with different approaches yourself.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          <code>N</code> is in the range of <code> [1, 1000]</code>
        </li>
        <li>
          Do not use class member/global/static variables to store states. Your
          encode and decode algorithms should be stateless.
        </li>
      </ul>
    </div>
  ),
  427: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <code>n * n</code> matrix <code>grid</code> of <code>0's</code>{" "}
        and <code>1's</code> only. We want to represent <code>grid</code> with a
        Quad-Tree.
      </p>

      <p>
        Return <em>the root of the Quad-Tree representing </em>
        <code>grid</code>.
      </p>

      <p>
        A Quad-Tree is a tree data structure in which each internal node has
        exactly four children. Besides, each node has two attributes:
      </p>

      <ul>
        <li>
          <code>val</code>: True if the node represents a grid of 1's or False
          if the node represents a grid of 0's. Notice that you can assign the{" "}
          <code>val</code> to True or False when <code>isLeaf</code> is False,
          and both are accepted in the answer.
        </li>
        <li>
          <code>isLeaf</code>: True if the node is a leaf node on the tree or
          False if the node has four children.
        </li>
      </ul>

      <pre>{`class Node {
        public boolean val;
        public boolean isLeaf;
        public Node topLeft;
        public Node topRight;
        public Node bottomLeft;
        public Node bottomRight;
    }`}</pre>

      <p>
        We can construct a Quad-Tree from a two-dimensional area using the
        following steps:
      </p>

      <ul>
        <li>
          If the current grid has the same value (i.e all <code>1's</code> or
          all <code>0's</code>) set <code>isLeaf</code> True and set{" "}
          <code>val</code> to the value of the grid and set the four children to
          Null and stop.
        </li>
        <li>
          If the current grid has different values, set <code>isLeaf</code> to
          False and set <code>val</code> to any value and divide the current
          grid into four sub-grids as shown in the photo.
        </li>
        <li>Recurse for each of the children with the proper sub-grid.</li>
      </ul>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/02/11/new_top.png"
        style={{ width: 777, height: 181 }}
      />
      <p>
        If you want to know more about the Quad-Tree, you can refer to the{" "}
        <a href="https://en.wikipedia.org/wiki/Quadtree">wiki</a>.
      </p>

      <p>
        <strong>Quad-Tree format:</strong>
      </p>

      <p>
        You don't need to read this section for solving the problem. This is
        only if you want to understand the output format here. The output
        represents the serialized format of a Quad-Tree using level order
        traversal, where <code>null</code> signifies a path terminator where no
        node exists below.
      </p>

      <p>
        It is very similar to the serialization of the binary tree. The only
        difference is that the node is represented as a list{" "}
        <code>[isLeaf, val]</code>.
      </p>

      <p>
        If the value of <code>isLeaf</code> or <code>val</code> is True we
        represent it as <strong>1</strong> in the list{" "}
        <code>[isLeaf, val]</code> and if the value of <code>isLeaf</code> or{" "}
        <code>val</code> is False we represent it as <strong>0</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/02/11/grid1.png"
        style={{ width: 777, height: 99 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[0,1],[1,0]] <br />
        <strong>Output:</strong> [[0,1],[1,0],[1,1],[1,1],[1,0]] <br />
        <strong>Explanation:</strong> The explanation of this example is shown
        below: <br />
        Notice that 0 represents False and 1 represents True in the photo
        representing the Quad-Tree. <br />
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/02/12/e1tree.png"
          style={{ width: 777, height: 186 }}
        />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/02/12/e2mat.png"
          style={{ width: 777, height: 343 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> grid =
        [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],
        <br />
        [1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]
        <strong>Output:</strong>{" "}
        [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
        <br />
        <strong>Explanation:</strong> All values in the grid are not the same.
        We divide the grid into four sub-grids.
        <br />
        The topLeft, bottomLeft and bottomRight each has the same value.
        <br />
        The topRight have different values so we divide it into 4 sub-grids
        where each has the same value.
        <br />
        Explanation is shown in the photo below:
        <br />
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/02/12/e2tree.png"
          style={{ width: 777, height: 328 }}
        />
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == grid.length == grid[i].length</code>
        </li>
        <li>
          <code>
            n == 2<sup>x</sup>
          </code>{" "}
          where <code>0 &lt;= x &lt;= 6</code>
        </li>
      </ul>
    </div>
  ),
  425: (
    <div class="markdown-body div-width">
      <p>
        Given a set of words <b>(without duplicates)</b>, find all{" "}
        <a
          href="https://en.wikipedia.org/wiki/Word_square"
          target="_blank"
          rel="noreferrer"
        >
          word squares
        </a>{" "}
        you can build from them.
      </p>

      <p>
        A sequence of words forms a valid word square if the <i>k</i>
        <sup>th</sup> row and column read the exact same string, where 0 ≤{" "}
        <i>k</i> &lt; max(numRows, numColumns).
      </p>

      <p>
        For example, the word sequence{" "}
        <code>["ball","area","lead","lady"]</code> forms a word square because
        each word reads the same both horizontally and vertically.
      </p>

      <pre>
        {`b a l l
a r e a
l e a d
l a d y`}
      </pre>

      <p>
        <b>Note:</b>
        <br />
      </p>
      <ul>
        <li>There are at least 1 and at most 1000 words.</li>
        <li>All words will have the exact same length.</li>
        <li>Word length is at least 1 and at most 5.</li>
        <li>
          Each word contains only lowercase English alphabet <code>a-z</code>.
        </li>
      </ul>
      <p></p>

      <p>
        <b>Example 1:</b>
      </p>
      <pre>
        <b>Input:</b> <br />
        ["area","lead","wall","lady","ball"] <br />
        <b>Output:</b> <br />
        {`[
  [ "wall",
    "area",
    "lead",
    "lady"
  ],
  [ "ball",
    "area",
    "lead",
    "lady"
  ]
]`}
        <b>Explanation:</b>
        The output consists of two word squares. The order of output does not
        matter (just the order of words in each word square matters).
      </pre>
      <p></p>

      <p>
        <b>Example 2:</b>
      </p>
      <pre>
        <b>Input:</b> <br />
        ["abat","baba","atan","atal"] <br />
        <b>Output:</b> <br />
        {`[
  [ "baba",
    "abat",
    "baba",
    "atan"
  ],
  [ "baba",
    "abat",
    "baba",
    "atal"
  ]
]`}
        <b>Explanation:</b>
        The output consists of two word squares. The order of output does not
        matter (just the order of words in each word square matters).
      </pre>
      <p></p>
    </div>
  ),
  423: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> containing an out-of-order English
        representation of digits <code>0-9</code>, return{" "}
        <em>
          the digits in <strong>ascending</strong> order
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> s = "owoztneoer" <br />
        <strong>Output:</strong> "012" <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> s = "fviefuro" <br />
        <strong>Output:</strong> "45"
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s[i]</code> is one of the characters{" "}
          <code>
            ["e","g","f","i","h","o","n","s","r","u","t","w","v","x","z"]
          </code>
          .
        </li>
        <li>
          <code>s</code> is <strong>guaranteed</strong> to be valid.
        </li>
      </ul>
    </div>
  ),
  406: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of people, <code>people</code>, which are the
        attributes of some people in a queue (not necessarily in order). Each{" "}
        <code>
          people[i] = [h<sub>i</sub>, k<sub>i</sub>]
        </code>{" "}
        represents the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        person of height{" "}
        <code>
          h<sub>i</sub>
        </code>{" "}
        with <strong>exactly</strong>{" "}
        <code>
          k<sub>i</sub>
        </code>{" "}
        other people in front who have a height greater than or equal to{" "}
        <code>
          h<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Reconstruct and return{" "}
        <em>the queue that is represented by the input array </em>
        <code>people</code>. The returned queue should be formatted as an array{" "}
        <code>queue</code>, where{" "}
        <code>
          queue[j] = [h<sub>j</sub>, k<sub>j</sub>]
        </code>{" "}
        is the attributes of the{" "}
        <code>
          j<sup>th</sup>
        </code>{" "}
        person in the queue (<code>queue[0]</code> is the person at the front of
        the queue).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]{" "}
        <br />
        <strong>Output:</strong> [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] <br />
        <strong>Explanation:</strong> <br />
        Person 0 has height 5 with no other people taller or the same height in
        front. <br />
        Person 1 has height 7 with no other people taller or the same height in
        front. <br />
        Person 2 has height 5 with two persons taller or the same height in
        front, which is person 0 and 1.
        <br />
        Person 3 has height 6 with one person taller or the same height in
        front, which is person 1.
        <br />
        Person 4 has height 4 with four people taller or the same height in
        front, which are people 0, 1, 2, and 3.
        <br />
        Person 5 has height 7 with one person taller or the same height in
        front, which is person 1.
        <br />
        Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
        <br />
        <strong>Output:</strong> [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= people.length &lt;= 2000</code>
        </li>
        <li>
          <code>
            0 &lt;= h<sub>i</sub> &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= k<sub>i</sub> &lt; people.length
          </code>
        </li>
        <li>It is guaranteed that the queue can be reconstructed.</li>
      </ul>
    </div>
  ),
  407: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> integer matrix <code>heightMap</code>{" "}
        representing the height of each unit cell in a 2D elevation map, return{" "}
        <em>the volume of water it can trap after raining</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/08/trap1-3d.jpg"
        style={{ width: 361, height: 321 }}
      />
      <pre>
        <strong>Input:</strong> heightMap =
        [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> After the rain, water is trapped between
        the blocks. <br />
        We have two small ponds 1 and 3 units trapped. <br />
        The total volume of water trapped is 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/08/trap2-3d.jpg"
        style={{ width: 401, height: 321 }}
      />
      <pre>
        <strong>Input:</strong> heightMap =
        [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]] <br />
        <strong>Output:</strong> 10
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == heightMap.length</code>
        </li>
        <li>
          <code>n == heightMap[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 200</code>
        </li>
        <li>
          <code>
            0 &lt;= heightMap[i][j] &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  408: (
    <article role="main" class="blog-post">
      <p>
        A string can be <strong>abbreviated</strong> by replacing any number of{" "}
        <strong>non-adjacent</strong>, <strong>non-empty</strong> substrings
        with their lengths. The lengths <strong>should not</strong> have leading
        zeros.
      </p>

      <p>
        For example, a string such as <code>"substitution"</code> could be
        abbreviated as (but not limited to):
      </p>

      <ul>
        <li>
          <code>"s10n"</code> (
          <code>
            "s <u>ubstitutio</u> n"
          </code>
          )
        </li>
        <li>
          <code>"sub4u4"</code> (
          <code>
            "sub <u>stit</u> u <u>tion</u>"
          </code>
          )
        </li>
        <li>
          <code>"12"</code> (
          <code>
            "<u>substitution</u>"
          </code>
          )
        </li>
        <li>
          <code>"su3i1u2on"</code> (
          <code>
            "su <u>bst</u> i <u>t</u> u <u>ti</u> on"
          </code>
          )
        </li>
        <li>
          <code>"substitution"</code> (no substrings replaced)
        </li>
      </ul>

      <p>
        The following are <strong>not valid</strong> abbreviations:
      </p>

      <ul>
        <li>
          <code>"s55n"</code> (
          <code>
            "s <u>ubsti</u> <u>tutio</u> n"
          </code>
          , the replaced substrings are adjacent)
        </li>
        <li>
          <code>"s010n"</code> (has leading zeros)
        </li>
        <li>
          <code>"s0ubstitution"</code> (replaces an empty substring)
        </li>
      </ul>

      <p>
        Given a string <code>word</code> and an abbreviation <code>abbr</code>,
        return{" "}
        <em>
          whether the string <strong>matches</strong> the given abbreviation
        </em>
        .
      </p>

      <p>
        A <strong>substring</strong> is a contiguous <strong>non-empty</strong>{" "}
        sequence of characters within a string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "internationalization", abbr = "i12iz4n"{" "}
        <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The word "internationalization" can be
        abbreviated as "i12iz4n" ("i <u>nternational</u> iz <u>atio</u> n").
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "apple", abbr = "a2e" <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The word "apple" cannot be abbreviated as
        "a2e".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= word.length &lt;= 20</code>
        </li>
        <li>
          <code>word</code> consists of only lowercase English letters.
        </li>
        <li>
          <code>1 &lt;= abbr.length &lt;= 10</code>
        </li>
        <li>
          <code>abbr</code> consists of lowercase English letters and digits.
        </li>
        <li>
          All the integers in <code>abbr</code> will fit in a 32-bit integer.
        </li>
      </ul>
    </article>
  ),
  409: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> which consists of lowercase or uppercase
        letters, return the length of the{" "}
        <strong>
          longest{" "}
          <span
            data-keyword="palindrome-string"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <button
              type="button"
              aria-haspopup="dialog"
              aria-expanded="false"
              aria-controls="radix-:rck:"
              data-state="closed"
              class=""
            >
              palindrome
            </button>
          </span>
        </strong>
        &nbsp;that can be built with those letters.
      </p>

      <p>
        Letters are <strong>case sensitive</strong>, for example,{" "}
        <code>"Aa"</code> is not considered a palindrome.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abccccdd" <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> One longest palindrome that can be built
        is "dccaccd", whose length is 7.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "a" <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The longest palindrome that can be built
        is "a", whose length is 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 2000</code>
        </li>
        <li>
          <code>s</code> consists of lowercase <strong>and/or</strong> uppercase
          English&nbsp;letters only.
        </li>
      </ul>
    </div>
  ),
  410: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and an integer <code>k</code>,
        split <code>nums</code> into <code>k</code> non-empty subarrays such
        that the largest sum of any subarray is <strong>minimized</strong>.
      </p>

      <p>
        Return <em>the minimized largest sum of the split</em>.
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous part of the array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [7,2,5,10,8], k = 2 <br />
        <strong>Output:</strong> 18 <br />
        <strong>Explanation:</strong> There are four ways to split nums into two
        subarrays. <br />
        The best way is to split it into [7,2,5] and [10,8], where the largest
        sum among the two subarrays is only 18.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5], k = 2 <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> There are four ways to split nums into two
        subarrays. <br />
        The best way is to split it into [1,2,3] and [4,5], where the largest
        sum among the two subarrays is only 9.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= min(50, nums.length)</code>
        </li>
      </ul>
    </div>
  ),
  411: (
    <article role="main" class="blog-post">
      <p>
        A string such as{" "}
        <code class="language-plaintext highlighter-rouge">"word"</code>{" "}
        contains the following abbreviations:
      </p>
      <div class="language-plaintext highlighter-rouge">
        <div class="highlight">
          <pre class="highlight">
            <code>
              ["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2",
              "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"]
            </code>
          </pre>
        </div>
      </div>
      <p>
        Given a target string and a set of strings in a dictionary, find an
        abbreviation of this target string with the{" "}
        <strong>
          <em>smallest possible</em>
        </strong>{" "}
        length such that it does not conflict with abbreviations of the strings
        in the dictionary.
      </p>

      <p>
        Each <strong>number</strong> or letter in the abbreviation is considered
        length = 1. For example, the abbreviation “a32bc” has length = 4.
      </p>

      <p>
        <strong>Note:</strong>
      </p>
      <ul>
        <li>
          In the case of multiple answers as shown in the second example below,
          you may return any one of them.
        </li>
        <li>
          Assume length of target string = <strong>m</strong>, and dictionary
          size = <strong>n</strong>. You may assume that <strong>m ≤ 21</strong>
          , <strong>n ≤ 1000</strong>, and{" "}
          <strong>
            log<sub>2</sub>(n) + m ≤ 20
          </strong>
          .
        </li>
      </ul>

      <p>
        <strong>Examples:</strong>
      </p>
      <div class="language-plaintext highlighter-rouge">
        <div class="highlight">
          <pre class="highlight">
            <code>
              "apple", ["blade"] -&gt; "a4" (because "5" or "4e" conflicts with
              "blade") "apple", ["plain", "amber", "blade"] -&gt; "1p3" (other
              valid answers include "ap3", "a3e", "2p2", "3le", "3l1").
            </code>
          </pre>
        </div>
      </div>
    </article>
  ),
  412: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return <em>a string array </em>
        <code>answer</code>
        <em>
          {" "}
          (<strong>1-indexed</strong>) where
        </em>
        :
      </p>
      <ul>
        <li>
          <code>answer[i] == "FizzBuzz"</code> if <code>i</code> is divisible by{" "}
          <code>3</code> and <code>5</code>.
        </li>
        <li>
          <code>answer[i] == "Fizz"</code> if <code>i</code> is divisible by{" "}
          <code>3</code>.
        </li>
        <li>
          <code>answer[i] == "Buzz"</code> if <code>i</code> is divisible by{" "}
          <code>5</code>.
        </li>
        <li>
          <code>answer[i] == i</code> (as a string) if none of the above
          conditions are true.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> ["1","2","Fizz"] <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 5 <br />
        <strong>Output:</strong> ["1","2","Fizz","4","Buzz"] <br />
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> n = 15 <br />
        <strong>Output:</strong>{" "}
        ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  413: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        An integer array is called arithmetic if it consists of{" "}
        <strong>at least three elements</strong> and if the difference between
        any two consecutive elements is the same.
      </p>

      <ul>
        <li>
          For example, <code>[1,3,5,7,9]</code>, <code>[7,7,7,7]</code>, and{" "}
          <code>[3,-1,-5,-9]</code> are arithmetic sequences.
        </li>
      </ul>

      <p>
        Given an integer array <code>nums</code>, return{" "}
        <em>
          the number of arithmetic <strong>subarrays</strong> of
        </em>{" "}
        <code>nums</code>.
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous subsequence of the array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> We have 3 arithmetic slices in nums: [1,
        2, 3], [2, 3, 4] and [1,2,3,4] itself.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 5000</code>
        </li>
        <li>
          <code>-1000 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  416: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return <code>true</code>{" "}
        <em>
          if you can partition the array into two subsets such that the sum of
          the elements in both subsets is equal or{" "}
        </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,5,11,5] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The array can be partitioned as [1, 5, 5]
        and [11].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,5] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The array cannot be partitioned into equal
        sum subsets.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 200</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  417: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an <code>m x n</code> rectangular island that borders both the{" "}
        <strong>Pacific Ocean</strong> and <strong>Atlantic Ocean</strong>. The{" "}
        <strong>Pacific Ocean</strong> touches the island's left and top edges,
        and the <strong>Atlantic Ocean</strong> touches the island's right and
        bottom edges.
      </p>

      <p>
        The island is partitioned into a grid of square cells. You are given an{" "}
        <code>m x n</code> integer matrix <code>heights</code> where{" "}
        <code>heights[r][c]</code> represents the{" "}
        <strong>height above sea level</strong> of the cell at coordinate{" "}
        <code>(r, c)</code>.
      </p>

      <p>
        The island receives a lot of rain, and the rain water can flow to
        neighboring cells directly north, south, east, and west if the
        neighboring cell's height is <strong>less than or equal to</strong> the
        current cell's height. Water can flow from any cell adjacent to an ocean
        into the ocean.
      </p>

      <p>
        Return{" "}
        <em>
          a <strong>2D list</strong> of grid coordinates{" "}
        </em>
        <code>result</code>
        <em> where </em>
        <code>
          result[i] = [r<sub>i</sub>, c<sub>i</sub>]
        </code>
        <em> denotes that rain water can flow from cell </em>
        <code>
          (r<sub>i</sub>, c<sub>i</sub>)
        </code>
        <em>
          {" "}
          to <strong>both</strong> the Pacific and Atlantic oceans
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/06/08/waterflow-grid.jpg"
        style={{ width: 400, height: 400 }}
      />
      <pre>
        <strong>Input:</strong> heights =
        [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]] <br />
        <strong>
          Output:
        </strong> [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]] <br />
        <strong>Explanation:</strong> The following cells can flow to the
        Pacific and Atlantic oceans, as shown below: <br />
        [0,4]: [0,4] -&gt; Pacific Ocean <br />
        &nbsp; [0,4] -&gt; Atlantic Ocean <br />
        [1,3]: [1,3] -&gt; [0,3] -&gt; Pacific Ocean <br />
        &nbsp; [1,3] -&gt; [1,4] -&gt; Atlantic Ocean <br />
        [1,4]: [1,4] -&gt; [1,3] -&gt; [0,3] -&gt; Pacific Ocean <br />
        &nbsp; [1,4] -&gt; Atlantic Ocean
        <br />
        [2,2]: [2,2] -&gt; [1,2] -&gt; [0,2] -&gt; Pacific Ocean <br />
        &nbsp; [2,2] -&gt; [2,3] -&gt; [2,4] -&gt; Atlantic Ocean
        <br />
        [3,0]: [3,0] -&gt; Pacific Ocean <br />
        &nbsp; [3,0] -&gt; [4,0] -&gt; Atlantic Ocean
        <br />
        [3,1]: [3,1] -&gt; [3,0] -&gt; Pacific Ocean <br />
        &nbsp; [3,1] -&gt; [4,1] -&gt; Atlantic Ocean
        <br />
        [4,0]: [4,0] -&gt; Pacific Ocean <br />
        [4,0] -&gt; Atlantic Ocean
        <br />
        Note that there are other possible paths for these cells to flow to the
        Pacific and Atlantic oceans.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> heights = [[1]]
        <br />
        <strong>Output:</strong> [[0,0]]
        <br />
        <strong>Explanation:</strong> The water can flow from the only cell to
        the Pacific and Atlantic oceans.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == heights.length</code>
        </li>
        <li>
          <code>n == heights[r].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 200</code>
        </li>
        <li>
          <code>
            0 &lt;= heights[r][c] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  418: (
    <div class="markdown-body div-width">
      <p>
        Given a <code>rows x cols</code> screen and a sentence represented by a
        list of
        <b>non-empty</b> words, find <b>how many times</b> the given sentence
        can be fitted on the screen.
      </p>

      <p>
        <b>Note:</b>
      </p>
      <ul>
        <li>A word cannot be split into two lines.</li>
        <li>The order of words in the sentence must remain unchanged.</li>
        <li>
          Two consecutive words <b>in a line</b> must be separated by a single
          space.
        </li>
        <li>Total words in the sentence won't exceed 100.</li>
        <li>Length of each word is greater than 0 and won't exceed 10.</li>
        <li>1 ≤ rows, cols ≤ 20,000.</li>
      </ul>
      <p></p>

      <p>
        <b>Example 1:</b>
      </p>
      <pre>
        <b>Input:</b> <br />
        rows = 2, cols = 8, sentence = ["hello", "world"] <br />
        <b>Output:</b> <br />
        1 <br />
        <b>Explanation:</b> <br />
        hello---
        <br />
        world---
        <br />
        The character '-' signifies an empty space on the screen.
      </pre>
      <p></p>

      <p>
        <b>Example 2:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b>
        <br />
        rows = 3, cols = 6, sentence = ["a", "bcd", "e"]
        <br />
        <b>Output:</b>
        <br />2<b>Explanation:</b>
        <br />
        a-bcd-
        <br />
        e-a---
        <br />
        bcd-e- The character '-' signifies an empty space on the screen.
      </pre>
      <p></p>

      <p>
        <b>Example 3:</b>
      </p>
      <pre>
        <b>Input:</b> <br />
        rows = 4, cols = 5, sentence = ["I", "had", "apple", "pie"]
        <b>Output:</b> <br />1<b>Explanation:</b> <br />
        I-had <br />
        apple <br />
        pie-I <br />
        had-- <br />
        The character '-' signifies an empty space on the screen.
      </pre>
      <p></p>
    </div>
  ),
  419: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> matrix <code>board</code> where each cell is
        a battleship <code>'X'</code> or empty <code>'.'</code>, return{" "}
        <em>
          the number of the <strong>battleships</strong> on
        </em>{" "}
        <code>board</code>.
      </p>
      <p>
        <strong>Battleships</strong> can only be placed horizontally or
        vertically on <code>board</code>. In other words, they can only be made
        of the shape <code>1 x k</code> (<code>1</code> row, <code>k</code>{" "}
        columns) or <code>k x 1</code> (<code>k</code> rows, <code>1</code>{" "}
        column), where <code>k</code> can be of any size. At least one
        horizontal or vertical cell separates between two battleships (i.e.,
        there are no adjacent battleships).
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong> <br />
      </p>
      <img
        height="333"
        width="333"
        src="https://assets.leetcode.com/uploads/2024/06/21/image.png"
        alt=""
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> board =
        [["X",".",".","X"],[".",".",".","X"],[".",".",".","X"]] <br />
        <strong>Output:</strong> 2
      </pre>
      <p>
        <strong class="example">Example 2:</strong> <br />
      </p>
      <pre>
        <strong>Input:</strong> board = [["."]] <br />
        <strong>Output:</strong> 0
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>m == board.length</code>
        </li>
        <li>
          <code>n == board[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 200</code>
        </li>
        <li>
          <code>board[i][j]</code> is either <code>'.'</code> or{" "}
          <code>'X'</code>.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you do it in one-pass, using only{" "}
        <code>O(1)</code> extra memory and without modifying the values{" "}
        <code>board</code>?
      </p>
    </div>
  ),
};

export default QUESTIONS;
