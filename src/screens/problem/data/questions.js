/* eslint-disable react/jsx-no-comment-textnodes */
const QUESTIONS = {
  1192: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> servers numbered from <code>0</code> to{" "}
        <code>n - 1</code> connected by undirected server-to-server{" "}
        <code>connections</code> forming a network where{" "}
        <code>
          connections[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        represents a connection between servers{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>
        . Any server can reach other servers directly or indirectly through the
        network.
      </p>
      <p>
        A <em>critical connection</em> is a connection that, if removed, will
        make some servers unable to reach some other server.
      </p>
      <p>Return all critical connections in the network in any order.</p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/09/03/1537_ex1_2.png"
        style={{ width: "198px", height: "248px;" }}
      />
      <pre>
        <strong>Input:</strong> n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]{" "}
        <br />
        <strong>Output:</strong> [[1,3]] <br />
        <strong>Explanation:</strong> [[3,1]] is also accepted.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, connections = [[0,1]] <br />
        <strong>Output:</strong> [[0,1]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            n - 1 &lt;= connections.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>There are no repeated connections.</li>
      </ul>
    </div>
  ),
  470: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <strong>API</strong> <code>rand7()</code> that generates a
        uniform random integer in the range <code>[1, 7]</code>, write a
        function <code>rand10()</code> that generates a uniform random integer
        in the range <code>[1, 10]</code>. You can only call the API{" "}
        <code>rand7()</code>, and you shouldn't call any other API. Please{" "}
        <strong>do not</strong> use a language's built-in random API.
      </p>

      <p>
        Each test case will have one <strong>internal</strong> argument{" "}
        <code>n</code>, the number of times that your implemented function{" "}
        <code>rand10()</code> will be called while testing. Note that this is{" "}
        <strong>not an argument</strong> passed to <code>rand10()</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> [2]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 2 <br /> <strong>Output:</strong> [2,8]
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 3 <br /> <strong>Output:</strong> [3,8,10]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <ul>
        <li>
          What is the{" "}
          <a
            href="https://en.wikipedia.org/wiki/Expected_value"
            target="_blank"
            rel="noreferrer"
          >
            expected value
          </a>{" "}
          for the number of calls to <code>rand7()</code> function?
        </li>
        <li>
          Could you minimize the number of calls to <code>rand7()</code>?
        </li>
      </ul>
    </div>
  ),
  478: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the radius and the position of the center of a circle, implement
        the function <code>randPoint</code> which generates a uniform random
        point inside the circle.
      </p>

      <p>
        Implement the <code>Solution</code> class:
      </p>

      <ul>
        <li>
          <code>Solution(double radius, double x_center, double y_center)</code>{" "}
          initializes the object with the radius of the circle{" "}
          <code>radius</code> and the position of the center{" "}
          <code>(x_center, y_center)</code>.
        </li>
        <li>
          <code>randPoint()</code> returns a random point inside the circle. A
          point on the circumference of the circle is considered to be in the
          circle. The answer is returned as an array <code>[x, y]</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong>
        <br />
        ["Solution", "randPoint", "randPoint", "randPoint"]
        <br />
        [[1.0, 0.0, 0.0], [], [], []]
        <br />
        <strong>Output:</strong>
        <br />
        [null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]
        <br />
        <strong>Explanation:</strong>
        <br />
        Solution solution = new Solution(1.0, 0.0, 0.0);
        <br />
        solution.randPoint(); // return [-0.02493, -0.38077]
        <br />
        solution.randPoint(); // return [0.82314, 0.38945]
        <br />
        solution.randPoint(); // return [0.36572, 0.17248]
        <br />
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;&nbsp;radius &lt;= 10<sup>8</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>7</sup> &lt;= x_center, y_center &lt;= 10<sup>7</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            3 * 10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>randPoint</code>.
        </li>
      </ul>
    </div>
  ),
  164: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return{" "}
        <em>
          the maximum difference between two successive elements in its sorted
          form
        </em>
        . If the array contains less than two elements, return <code>0</code>.
      </p>

      <p>
        You must write an algorithm that runs in linear time and uses linear
        extra space.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,6,9,1]
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The sorted form of the array is [1,3,6,9],
        either (3,6) or (6,9) has the maximum difference 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [10] <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> The array contains less than 2 elements,
        therefore return 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  912: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code>, sort the array in
        ascending order and return it.
      </p>

      <p>
        You must solve the problem <strong>without using any built-in</strong>{" "}
        functions in <code>O(nlog(n))</code> time complexity and with the
        smallest space complexity possible.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,2,3,1]
        <br />
        <strong>Output:</strong> [1,2,3,5]
        <br />
        <strong>Explanation:</strong> After sorting the array, the positions of
        some numbers are not changed (for example, 2 and 3), while the positions
        of other numbers are changed (for example, 1 and 5).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,1,1,2,0,0] <br />
        <strong>Output:</strong> [0,0,1,1,2,5]
        <br />
        <strong>Explanation:</strong> Note that the values of nums are not
        necessairly unique.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -5 * 10<sup>4</sup> &lt;= nums[i] &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2343: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array of strings{" "}
        <code>nums</code>, where each string is of <strong>equal length</strong>{" "}
        and consists of only digits.
      </p>

      <p>
        You are also given a <strong>0-indexed</strong> 2D integer array{" "}
        <code>queries</code> where{" "}
        <code>
          queries[i] = [k<sub>i</sub>, trim<sub>i</sub>]
        </code>
        . For each <code>queries[i]</code>, you need to:
      </p>

      <ul>
        <li>
          <strong>Trim</strong> each number in <code>nums</code> to its{" "}
          <strong>rightmost</strong>{" "}
          <code>
            trim<sub>i</sub>
          </code>{" "}
          digits.
        </li>
        <li>
          Determine the <strong>index</strong> of the{" "}
          <code>
            k<sub>i</sub>
            <sup>th</sup>
          </code>{" "}
          smallest trimmed number in <code>nums</code>. If two trimmed numbers
          are equal, the number with the <strong>lower</strong> index is
          considered to be smaller.
        </li>
        <li>
          Reset each number in <code>nums</code> to its original length.
        </li>
      </ul>

      <p>
        Return <em>an array </em>
        <code>answer</code>
        <em> of the same length as </em>
        <code>queries</code>,<em> where </em>
        <code>answer[i]</code>
        <em> is the answer to the </em>
        <code>
          i<sup>th</sup>
        </code>
        <em> query.</em>
      </p>

      <p>
        <strong>Note</strong>:
      </p>

      <ul>
        <li>
          To trim to the rightmost <code>x</code> digits means to keep removing
          the leftmost digit, until only <code>x</code> digits remain.
        </li>
        <li>
          Strings in <code>nums</code> may contain leading zeros.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = ["102","473","251","814"], queries =
        [[1,1],[2,3],[4,2],[1,2]]
        <br />
        <strong>Output:</strong> [2,2,1,0]
        <br />
        <strong>Explanation:</strong>
        <br />
        1. After trimming to the last digit, nums = ["2","3","1","4"]. The
        smallest number is 1 at index 2.
        <br />
        2. Trimmed to the last 3 digits, nums is unchanged. The 2<sup>
          nd
        </sup>{" "}
        smallest number is 251 at index 2.
        <br />
        3. Trimmed to the last 2 digits, nums = ["02","73","51","14"]. The 4
        <sup>th</sup> smallest number is 73.
        <br />
        4. Trimmed to the last 2 digits, the smallest number is 2 at index 0.
        <br />
        Note that the trimmed number "02" is evaluated as 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = ["24","37","96","04"], queries =
        [[2,1],[2,2]]
        <br />
        <strong>Output:</strong> [3,0]
        <br />
        <strong>Explanation:</strong>
        1. Trimmed to the last digit, nums = ["4","7","6","4"]. The 2
        <sup>nd</sup> smallest number is 4 at index 3. There are two occurrences
        of 4, but the one at index 0 is considered smaller than the one at index
        3. 2. Trimmed to the last 2 digits, nums is unchanged. The 2
        <sup>nd</sup> smallest number is 24.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= nums[i].length &lt;= 100</code>
        </li>
        <li>
          <code>nums[i]</code> consists of only digits.
        </li>
        <li>
          All <code>nums[i].length</code> are <strong>equal</strong>.
        </li>
        <li>
          <code>1 &lt;= queries.length &lt;= 100</code>
        </li>
        <li>
          <code>queries[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= k<sub>i</sub> &lt;= nums.length
          </code>
        </li>
        <li>
          <code>
            1 &lt;= trim<sub>i</sub> &lt;= nums[i].length
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you use the{" "}
        <strong>Radix Sort Algorithm</strong> to solve this problem? What will
        be the complexity of that solution?
      </p>
    </div>
  ),
  332: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a list of airline <code>tickets</code> where{" "}
        <code>
          tickets[i] = [from<sub>i</sub>, to<sub>i</sub>]
        </code>{" "}
        represent the departure and the arrival airports of one flight.
        Reconstruct the itinerary in order and return it.
      </p>

      <p>
        All of the tickets belong to a man who departs from <code>"JFK"</code>,
        thus, the itinerary must begin with <code>"JFK"</code>. If there are
        multiple valid itineraries, you should return the itinerary that has the
        smallest lexical order when read as a single string.
      </p>

      <ul>
        <li>
          For example, the itinerary <code>["JFK", "LGA"]</code> has a smaller
          lexical order than <code>["JFK", "LGB"]</code>.
        </li>
      </ul>

      <p>
        You may assume all tickets form at least one valid itinerary. You must
        use all the tickets once and only once.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg"
        style={{ width: "382px", height: "222px" }}
      />
      <pre>
        <strong>Input:</strong> tickets =
        [["MUC","LHR"],["JFK","MUC"],["SFO","SJC"],["LHR","SFO"]]
        <br />
        <strong>Output:</strong> ["JFK","MUC","LHR","SFO","SJC"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg"
        style={{ width: "222px", height: "230px" }}
      />
      <pre>
        <strong>Input:</strong> tickets =
        [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
        <br />
        <strong>Output:</strong> ["JFK","ATL","JFK","SFO","ATL","SFO"]
        <br />
        <strong>Explanation:</strong> Another possible reconstruction is
        ["JFK","SFO","ATL","JFK","ATL","SFO"] but it is larger in lexical order.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= tickets.length &lt;= 300</code>
        </li>
        <li>
          <code>tickets[i].length == 2</code>
        </li>
        <li>
          <code>
            from<sub>i</sub>.length == 3
          </code>
        </li>
        <li>
          <code>
            to<sub>i</sub>.length == 3
          </code>
        </li>
        <li>
          <code>
            from<sub>i</sub>
          </code>{" "}
          and{" "}
          <code>
            to<sub>i</sub>
          </code>{" "}
          consist of uppercase English letters.
        </li>
        <li>
          <code>
            from<sub>i</sub> != to<sub>i</sub>
          </code>
        </li>
      </ul>
    </div>
  ),
  753: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a safe protected by a password. The password is a sequence of{" "}
        <code>n</code> digits where each digit can be in the range{" "}
        <code>[0, k - 1]</code>.
      </p>

      <p>
        The safe has a peculiar way of checking the password. When you enter in
        a sequence, it checks the <strong>most recent </strong>
        <code>n</code>
        <strong> digits</strong> that were entered each time you type a digit.
      </p>

      <ul>
        <li>
          For example, the correct password is <code>"345"</code> and you enter
          in <code>"012345"</code>:
          <ul>
            <li>
              After typing <code>0</code>, the most recent <code>3</code> digits
              is <code>"0"</code>, which is incorrect.
            </li>
            <li>
              After typing <code>1</code>, the most recent <code>3</code> digits
              is <code>"01"</code>, which is incorrect.
            </li>
            <li>
              After typing <code>2</code>, the most recent <code>3</code> digits
              is <code>"012"</code>, which is incorrect.
            </li>
            <li>
              After typing <code>3</code>, the most recent <code>3</code> digits
              is <code>"123"</code>, which is incorrect.
            </li>
            <li>
              After typing <code>4</code>, the most recent <code>3</code> digits
              is <code>"234"</code>, which is incorrect.
            </li>
            <li>
              After typing <code>5</code>, the most recent <code>3</code> digits
              is <code>"345"</code>, which is correct and the safe unlocks.
            </li>
          </ul>
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          any string of <strong>minimum length</strong> that will unlock the
          safe <strong>at some point</strong> of entering it
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1, k = 2<br />
        <strong>Output:</strong> "10"
        <br />
        <strong>Explanation:</strong> The password is a single digit, so enter
        each digit. "01" would also unlock the safe.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, k = 2 <br />
        <strong>Output:</strong> "01100"
        <br />
        <strong>Explanation:</strong> For each possible password:
        <br />- "00" is typed in starting from the 4<sup>th</sup> digit.
        <br />- "01" is typed in starting from the 1<sup>st</sup> digit.
        <br />- "10" is typed in starting from the 3<sup>rd</sup> digit.
        <br />- "11" is typed in starting from the 2<sup>nd</sup> digit. Thus
        "01100" will unlock the safe. "10011", and "11001" would also unlock the
        safe.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 4</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= 10</code>
        </li>
        <li>
          <code>
            1 &lt;= k<sup>n</sup> &lt;= 4096
          </code>
        </li>
      </ul>
    </div>
  ),
  2097: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> 2D integer array{" "}
        <code>pairs</code> where{" "}
        <code>
          pairs[i] = [start<sub>i</sub>, end<sub>i</sub>]
        </code>
        . An arrangement of <code>pairs</code> is <strong>valid</strong> if for
        every index <code>i</code> where{" "}
        <code>1 &lt;= i &lt; pairs.length</code>, we have{" "}
        <code>
          end<sub>i-1</sub> == start<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Return{" "}
        <em>
          <strong>any</strong> valid arrangement of{" "}
        </em>
        <code>pairs</code>.
      </p>

      <p>
        <strong>Note:</strong> The inputs will be generated such that there
        exists a valid arrangement of <code>pairs</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> pairs = [[5,1],[4,5],[11,9],[9,4]] <br />
        <strong>Output:</strong> [[11,9],[9,4],[4,5],[5,1]] <br />
        <strong>
          Explanation: <br />
        </strong>
        This is a valid arrangement since end<sub>i-1</sub> always equals start
        <sub>i</sub>. end<sub>0</sub> = 9 == 9 = start<sub>1</sub> <br />
        end<sub>1</sub> = 4 == 4 = start<sub>2</sub> <br />
        end<sub>2</sub> = 5 == 5 = start<sub>3</sub> <br />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> pairs = [[1,3],[3,2],[2,1]] <br />
        <strong>Output:</strong> [[1,3],[3,2],[2,1]] <br />
        <strong>Explanation:</strong> <br />
        This is a valid arrangement since end<sub>i-1</sub> always equals start
        <sub>i</sub>. <br />
        end<sub>0</sub> = 3 == 3 = start<sub>1</sub> <br />
        end<sub>1</sub> = 2 == 2 = start<sub>2</sub> <br />
        The arrangements [[2,1],[1,3],[3,2]] and [[3,2],[2,1],[1,3]] are also
        valid.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> pairs = [[1,2],[1,3],[2,1]] <br />
        <strong>Output:</strong> [[1,2],[2,1],[1,3]] <br />
        <strong>Explanation:</strong> <br />
        This is a valid arrangement since end<sub>i-1</sub> always equals start
        <sub>i</sub>. <br />
        end<sub>0</sub> = 2 == 2 = start<sub>1</sub> <br />
        end<sub>1</sub> = 1 == 1 = start<sub>2</sub> <br />
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= pairs.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>pairs[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= start<sub>i</sub>, end<sub>i</sub> &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            start<sub>i</sub> != end<sub>i</sub>
          </code>
        </li>
        <li>No two pairs are exactly the same.</li>
        <li>
          There <strong>exists</strong> a valid arrangement of{" "}
          <code>pairs</code>.
        </li>
      </ul>
    </div>
  ),
  1489: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a weighted undirected connected graph with <code>n</code>
        &nbsp;vertices numbered from <code>0</code> to <code>n - 1</code>
        ,&nbsp;and an array <code>edges</code>&nbsp;where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>, weight<sub>i</sub>]
        </code>{" "}
        represents a bidirectional and weighted edge between nodes&nbsp;
        <code>
          a<sub>i</sub>
        </code>
        &nbsp;and{" "}
        <code>
          b<sub>i</sub>
        </code>
        . A minimum spanning tree (MST) is a subset of the graph's edges that
        connects all vertices without cycles&nbsp;and with the minimum possible
        total edge weight.
      </p>

      <p>
        Find{" "}
        <em>
          all the critical and pseudo-critical edges in the given graph's
          minimum spanning tree (MST)
        </em>
        . An MST edge whose deletion from the graph would cause the MST weight
        to increase is called a&nbsp;<em>critical edge</em>. On&nbsp;the other
        hand, a pseudo-critical edge is that which can appear in some MSTs but
        not all.
      </p>

      <p>Note that you can return the indices of the edges in any order.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/06/04/ex1.png"
          style={{ width: 259, height: 262 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> n = 5, edges =
        [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]
        <br />
        <strong>Output:</strong> [[0,1],[2,3,4,5]]
        <br />
        <strong>Explanation:</strong> The figure above describes the graph.
        <br />
        The following figure shows all the possible MSTs:
        <br /> <br />
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/06/04/msts.png"
          style={{ width: 540, height: 553 }}
        />
        <br />
        Notice that the two edges 0 and 1 appear in all MSTs, therefore they are
        critical edges, so we return them in the first list of the output. The
        edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are
        considered pseudo-critical edges. We add them to the second list of the
        output.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/06/04/ex2.png"
          style={{ width: 247, height: 253 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]{" "}
        <br />
        <strong>Output:</strong> [[],[0,1,2,3]]
        <br />
        <strong>Explanation:</strong> We can observe that since all 4 edges have
        equal weight, choosing any 3 edges from the given 4 will yield an MST.
        Therefore all 4 edges are pseudo-critical.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= edges.length &lt;= min(200, n * (n - 1) / 2)</code>
        </li>
        <li>
          <code>edges[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            1 &lt;= weight<sub>i</sub>&nbsp;&lt;= 1000
          </code>
        </li>
        <li>
          All pairs{" "}
          <code>
            (a<sub>i</sub>, b<sub>i</sub>)
          </code>{" "}
          are <strong>distinct</strong>.
        </li>
      </ul>
    </div>
  ),
  1568: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>m x n</code> binary grid <code>grid</code> where{" "}
        <code>1</code> represents land and <code>0</code> represents water. An{" "}
        <strong>island</strong> is a maximal <strong>4-directionally</strong>{" "}
        (horizontal or vertical) connected group of <code>1</code>'s.
      </p>

      <p>
        The grid is said to be <strong>connected</strong> if we have{" "}
        <strong>exactly one island</strong>, otherwise is said{" "}
        <strong>disconnected</strong>.
      </p>

      <p>
        In one day, we are allowed to change <strong>any </strong>single land
        cell <code>(1)</code> into a water cell <code>(0)</code>.
      </p>

      <p>
        Return <em>the minimum number of days to disconnect the grid</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/12/24/land1.jpg"
        style={{ width: 500, height: 169 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> We need at least 2 days to get a
        disconnected grid. Change land grid[1][1] and grid[0][2] to water and
        get 2 disconnected island.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/12/24/land2.jpg"
        style={{ width: 404, height: 85 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[1,1]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> Grid of full water is also disconnected
        ([[1,1]] -&gt; [[0,0]]), 0 islands.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 30</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  2846: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an undirected tree with <code>n</code> nodes labeled from{" "}
        <code>0</code> to <code>n - 1</code>. You are given the integer{" "}
        <code>n</code> and a 2D integer array <code>edges</code> of length{" "}
        <code>n - 1</code>, where{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        with weight{" "}
        <code>
          w<sub>i</sub>
        </code>{" "}
        in the tree.
      </p>

      <p>
        You are also given a 2D integer array <code>queries</code> of length{" "}
        <code>m</code>, where{" "}
        <code>
          queries[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>
        . For each query, find the <strong>minimum number of operations</strong>{" "}
        required to make the weight of every edge on the path from{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        to{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        equal. In one operation, you can choose any edge of the tree and change
        its weight to any value.
      </p>

      <p>
        <strong>Note</strong> that:
      </p>

      <ul>
        <li>
          Queries are <strong>independent</strong> of each other, meaning that
          the tree returns to its <strong>initial state</strong> on each new
          query.
        </li>
        <li>
          The path from{" "}
          <code>
            a<sub>i</sub>
          </code>{" "}
          to{" "}
          <code>
            b<sub>i</sub>
          </code>{" "}
          is a sequence of <strong>distinct</strong> nodes starting with node{" "}
          <code>
            a<sub>i</sub>
          </code>{" "}
          and ending with node{" "}
          <code>
            b<sub>i</sub>
          </code>{" "}
          such that every two adjacent nodes in the sequence share an edge in
          the tree.
        </li>
      </ul>

      <p>
        Return <em>an array </em>
        <code>answer</code>
        <em> of length </em>
        <code>m</code>
        <em> where</em> <code>answer[i]</code> <em>is the answer to the</em>{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        <em>query.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <br />
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/08/11/graph-6-1.png"
        style={{ width: 339, height: 344 }}
      />
      <pre>
        <strong>Input:</strong> n = 7,
        <br /> edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2]],
        <br /> queries = [[0,3],[3,6],[2,6],[0,6]]
        <br />
        <strong>Output:</strong> [0,0,1,3]
        <br />
        <strong>Explanation:</strong> In the first query, all the edges in the
        path from 0 to 3 have a weight of 1. Hence, the answer is 0. In the
        second query, all the edges in the path from 3 to 6 have a weight of 2.
        Hence, the answer is 0. In the third query, we change the weight of edge
        [2,3] to 2. After this operation, all the edges in the path from 2 to 6
        have a weight of 2. Hence, the answer is 1. In the fourth query, we
        change the weights of edges [0,1], [1,2] and [2,3] to 2. After these
        operations, all the edges in the path from 0 to 6 have a weight of 2.
        Hence, the answer is 3. For each queries[i], it can be shown that
        answer[i] is the minimum number of operations needed to equalize all the
        edge weights in the path from a<sub>i</sub> to b<sub>i</sub>.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <br />
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/08/11/graph-9-1.png"
        style={{ width: 472, height: 370 }}
      />
      <pre>
        <strong>Input:</strong> n = 8,
        <br /> edges =
        [[1,2,6],[1,3,4],[2,4,6],[2,5,3],[3,6,6],[3,0,8],[7,0,2]],
        <br /> queries = [[4,6],[0,4],[6,5],[7,4]]
        <br /> <strong>Output:</strong> [1,2,2,3]
        <br />
        <strong>Explanation:</strong> In the first query, we change the weight
        of edge [1,3] to 6. After this operation, all the edges in the path from
        4 to 6 have a weight of 6. Hence, the answer is 1. In the second query,
        we change the weight of edges [0,3] and [3,1] to 6. After these
        operations, all the edges in the path from 0 to 4 have a weight of 6.
        Hence, the answer is 2. In the third query, we change the weight of
        edges [1,3] and [5,2] to 6. After these operations, all the edges in the
        path from 6 to 5 have a weight of 6. Hence, the answer is 2. In the
        fourth query, we change the weights of edges [0,7], [0,3] and [1,3] to
        6. After these operations, all the edges in the path from 7 to 4 have a
        weight of 6. Hence, the answer is 3. For each queries[i], it can be
        shown that answer[i] is the minimum number of operations needed to
        equalize all the edge weights in the path from a<sub>i</sub> to b
        <sub>i</sub>.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>edges[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            1 &lt;= w<sub>i</sub> &lt;= 26
          </code>
        </li>
        <li>
          The input is generated such that <code>edges</code> represents a valid
          tree.
        </li>
        <li>
          <code>
            1 &lt;= queries.length == m &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>queries[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
      </ul>
    </div>
  ),
  382: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a singly linked list, return a random node's value from the linked
        list. Each node must have the <strong>same probability</strong> of being
        chosen.
      </p>

      <p>
        Implement the <code>Solution</code> class:
      </p>

      <ul>
        <li>
          <code>Solution(ListNode head)</code> Initializes the object with the
          head of the singly-linked list <code>head</code>.
        </li>
        <li>
          <code>int getRandom()</code> Chooses a node randomly from the list and
          returns its value. All the nodes of the list should be equally likely
          to be chosen.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/16/getrand-linked-list.jpg"
        style={{ width: 302, height: 62 }}
      />
      <pre>
        <strong>Input</strong>
        <br />
        ["Solution", "getRandom", "getRandom", "getRandom", "getRandom",
        "getRandom"] [[[1, 2, 3]], [], [], [], [], []]
        <br />
        <strong>Output:</strong> <br />
        [null, 1, 3, 2, 2, 3]
        <br />
        <strong>Explanation</strong>
        <br />
        Solution solution = new Solution([1, 2, 3]);
        <br />
        solution.getRandom(); // return 1<br />
        solution.getRandom(); // return 3<br />
        solution.getRandom(); // return 2<br />
        solution.getRandom(); // return 2<br />
        solution.getRandom(); // return 3<br />
        // getRandom() should return either 1, 2, or 3 randomly. Each element
        should have equal probability of returning.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the linked list will be in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>getRandom</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <ul>
        <li>
          What if the linked list is extremely large and its length is unknown
          to you?
        </li>
        <li>Could you solve this efficiently without using extra space?</li>
      </ul>
    </div>
  ),
  398: (
    <>
      <div class="elfjS" data-track-load="description_content">
        <p>
          Given an integer array <code>nums</code> with possible{" "}
          <strong>duplicates</strong>, randomly output the index of a given{" "}
          <code>target</code> number. You can assume that the given target
          number must exist in the array.
        </p>

        <p>
          Implement the <code>Solution</code> class:
        </p>

        <ul>
          <li>
            <code>Solution(int[] nums)</code> Initializes the object with the
            array <code>nums</code>.
          </li>
          <li>
            <code>int pick(int target)</code> Picks a random index{" "}
            <code>i</code> from <code>nums</code> where{" "}
            <code>nums[i] == target</code>. If there are multiple valid i's,
            then each index should have an equal probability of returning.
          </li>
        </ul>

        <p>&nbsp;</p>
        <p>
          <strong class="example">Example 1:</strong>
        </p>

        <pre>
          <strong>Input</strong> <br />
          ["Solution", "pick", "pick", "pick"]
          <br />
          [[[1, 2, 3, 3, 3]], [3], [1], [3]]
          <br />
          <strong>Output</strong>
          [null, 4, 0, 2]
          <br />
          <strong>Explanation</strong>
          <br />
          Solution solution = new Solution([1, 2, 3, 3, 3]);
          <br />
          solution.pick(3); // It should return either index 2, 3, or 4
          randomly. Each index should have equal probability of returning.
          <br />
          solution.pick(1); // It should return 0. Since in the array only
          nums[0] is equal to 1.
          <br />
          solution.pick(3); // It should return either index 2, 3, or 4
          randomly. Each index should have equal probability of returning.
        </pre>

        <p>&nbsp;</p>
        <p>
          <strong>Constraints:</strong>
        </p>

        <ul>
          <li>
            <code>
              1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup>
            </code>
          </li>
          <li>
            <code>
              -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
            </code>
          </li>
          <li>
            <code>target</code> is an integer from <code>nums</code>.
          </li>
          <li>
            At most{" "}
            <code>
              10<sup>4</sup>
            </code>{" "}
            calls will be made to <code>pick</code>.
          </li>
        </ul>
      </div>
    </>
  ),
  519: (
    <>
      <div class="elfjS" data-track-load="description_content">
        <p>
          There is an <code>m x n</code> binary grid <code>matrix</code> with
          all the values set <code>0</code> initially. Design an algorithm to
          randomly pick an index <code>(i, j)</code> where{" "}
          <code>matrix[i][j] == 0</code> and flips it to <code>1</code>. All the
          indices <code>(i, j)</code> where <code>matrix[i][j] == 0</code>{" "}
          should be equally likely to be returned.
        </p>

        <p>
          Optimize your algorithm to minimize the number of calls made to the{" "}
          <strong>built-in</strong> random function of your language and
          optimize the time and space complexity.
        </p>

        <p>
          Implement the <code>Solution</code> class:
        </p>

        <ul>
          <li>
            <code>Solution(int m, int n)</code> Initializes the object with the
            size of the binary matrix <code>m</code> and <code>n</code>.
          </li>
          <li>
            <code>int[] flip()</code> Returns a random index <code>[i, j]</code>{" "}
            of the matrix where <code>matrix[i][j] == 0</code> and flips it to{" "}
            <code>1</code>.
          </li>
          <li>
            <code>void reset()</code> Resets all the values of the matrix to be{" "}
            <code>0</code>.
          </li>
        </ul>

        <p>&nbsp;</p>
        <p>
          <strong class="example">Example 1:</strong>
        </p>

        <pre>
          <strong>Input</strong>
          <br />
          ["Solution", "flip", "flip", "flip", "reset", "flip"]
          <br />
          [[3, 1], [], [], [], [], []]
          <br />
          <strong>Output</strong>
          <br />
          [null, [1, 0], [2, 0], [0, 0], null, [2, 0]]
          <br />
          <strong>Explanation</strong>
          <br />
          Solution solution = new Solution(3, 1);
          <br />
          solution.flip(); // return [1, 0], [0,0], [1,0], and [2,0] should be
          equally likely to be returned.
          <br />
          solution.flip(); // return [2, 0], Since [1,0] was returned, [2,0] and
          [0,0]
          <br />
          solution.flip(); // return [0, 0], Based on the previously returned
          indices, only [0,0] can be returned.
          <br />
          solution.reset(); // All the values are reset to 0 and can be
          returned.
          <br />
          solution.flip(); // return [2, 0], [0,0], [1,0], and [2,0] should be
          equally likely to be returned.
        </pre>

        <p>&nbsp;</p>
        <p>
          <strong>Constraints:</strong>
        </p>

        <ul>
          <li>
            <code>
              1 &lt;= m, n &lt;= 10<sup>4</sup>
            </code>
          </li>
          <li>
            There will be at least one free cell for each call to{" "}
            <code>flip</code>.
          </li>
          <li>
            At most <code>1000</code> calls will be made to <code>flip</code>{" "}
            and <code>reset</code>.
          </li>
        </ul>
      </div>
    </>
  ),
  497: (
    <>
      <div class="elfjS" data-track-load="description_content">
        <p>
          You are given an array of non-overlapping axis-aligned rectangles{" "}
          <code>rects</code> where{" "}
          <code>
            rects[i] = [a<sub>i</sub>, b<sub>i</sub>, x<sub>i</sub>, y
            <sub>i</sub>]
          </code>{" "}
          indicates that{" "}
          <code>
            (a<sub>i</sub>, b<sub>i</sub>)
          </code>{" "}
          is the bottom-left corner point of the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          rectangle and{" "}
          <code>
            (x<sub>i</sub>, y<sub>i</sub>)
          </code>{" "}
          is the top-right corner point of the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          rectangle. Design an algorithm to pick a random integer point inside
          the space covered by one of the given rectangles. A point on the
          perimeter of a rectangle is included in the space covered by the
          rectangle.
        </p>

        <p>
          Any integer point inside the space covered by one of the given
          rectangles should be equally likely to be returned.
        </p>

        <p>
          <strong>Note</strong> that an integer point is a point that has
          integer coordinates.
        </p>

        <p>
          Implement the <code>Solution</code> class:
        </p>

        <ul>
          <li>
            <code>Solution(int[][] rects)</code> Initializes the object with the
            given rectangles <code>rects</code>.
          </li>
          <li>
            <code>int[] pick()</code> Returns a random integer point{" "}
            <code>[u, v]</code> inside the space covered by one of the given
            rectangles.
          </li>
        </ul>

        <p>&nbsp;</p>
        <p>
          <strong class="example">Example 1:</strong>
        </p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/07/24/lc-pickrandomrec.jpg"
          style={{ width: 419, height: 539 }}
        />
        <pre>
          <strong>Input</strong>
          <br />
          ["Solution", "pick", "pick", "pick", "pick", "pick"]
          <br />
          [[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]
          <br />
          <strong>Output</strong>
          <br />
          [null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]
          <br />
          <strong>Explanation</strong>
          <br />
          Solution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);
          <br />
          solution.pick(); // return [1, -2]
          <br />
          solution.pick(); // return [1, -1]
          <br />
          solution.pick(); // return [-1, -2]
          <br />
          solution.pick(); // return [-2, -2]
          <br />
          solution.pick(); // return [0, 0]
        </pre>

        <p>&nbsp;</p>
        <p>
          <strong>Constraints:</strong>
        </p>

        <ul>
          <li>
            <code>1 &lt;= rects.length &lt;= 100</code>
          </li>
          <li>
            <code>rects[i].length == 4</code>
          </li>
          <li>
            <code>
              -10<sup>9</sup> &lt;= a<sub>i</sub> &lt; x<sub>i</sub> &lt;= 10
              <sup>9</sup>
            </code>
          </li>
          <li>
            <code>
              -10<sup>9</sup> &lt;= b<sub>i</sub> &lt; y<sub>i</sub> &lt;= 10
              <sup>9</sup>
            </code>
          </li>
          <li>
            <code>
              x<sub>i</sub> - a<sub>i</sub> &lt;= 2000
            </code>
          </li>
          <li>
            <code>
              y<sub>i</sub> - b<sub>i</sub> &lt;= 2000
            </code>
          </li>
          <li>All the rectangles do not overlap.</li>
          <li>
            At most{" "}
            <code>
              10<sup>4</sup>
            </code>{" "}
            calls will be made to <code>pick</code>.
          </li>
        </ul>
      </div>
    </>
  ),
  218: (
    <>
      <div class="elfjS" data-track-load="description_content">
        <p>
          A city's <strong>skyline</strong> is the outer contour of the
          silhouette formed by all the buildings in that city when viewed from a
          distance. Given the locations and heights of all the buildings, return{" "}
          <em>
            the <strong>skyline</strong> formed by these buildings collectively
          </em>
          .
        </p>

        <p>
          The geometric information of each building is given in the array{" "}
          <code>buildings</code> where{" "}
          <code>
            buildings[i] = [left<sub>i</sub>, right<sub>i</sub>, height
            <sub>i</sub>]
          </code>
          :
        </p>

        <ul>
          <li>
            <code>
              left<sub>i</sub>
            </code>{" "}
            is the x coordinate of the left edge of the{" "}
            <code>
              i<sup>th</sup>
            </code>{" "}
            building.
          </li>
          <li>
            <code>
              right<sub>i</sub>
            </code>{" "}
            is the x coordinate of the right edge of the{" "}
            <code>
              i<sup>th</sup>
            </code>{" "}
            building.
          </li>
          <li>
            <code>
              height<sub>i</sub>
            </code>{" "}
            is the height of the{" "}
            <code>
              i<sup>th</sup>
            </code>{" "}
            building.
          </li>
        </ul>

        <p>
          You may assume all buildings are perfect rectangles grounded on an
          absolutely flat surface at height <code>0</code>.
        </p>

        <p>
          The <strong>skyline</strong> should be represented as a list of "key
          points" <strong>sorted by their x-coordinate</strong> in the form{" "}
          <code>
            [[x<sub>1</sub>,y<sub>1</sub>],[x<sub>2</sub>,y<sub>2</sub>],...]
          </code>
          . Each key point is the left endpoint of some horizontal segment in
          the skyline except the last point in the list, which always has a
          y-coordinate <code>0</code> and is used to mark the skyline's
          termination where the rightmost building ends. Any ground between the
          leftmost and rightmost buildings should be part of the skyline's
          contour.
        </p>

        <p>
          <b>Note:</b> There must be no consecutive horizontal lines of equal
          height in the output skyline. For instance,{" "}
          <code>[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]</code> is not
          acceptable; the three lines of height 5 should be merged into one in
          the final output as such: <code>[...,[2 3],[4 5],[12 7],...]</code>
        </p>

        <p>&nbsp;</p>
        <p>
          <strong class="example">Example 1:</strong>
        </p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/12/01/merged.jpg"
          style={{ width: 800, height: 331 }}
        />
        <pre>
          <strong>Input:</strong> buildings =
          [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]] <br />
          <strong>Output:</strong>{" "}
          [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]] <br />
          <strong>Explanation:</strong>
          <br />
          Figure A shows the buildings of the input.
          <br />
          Figure B shows the skyline formed by those buildings. The red points
          in figure B represent the key points in the output list.
        </pre>

        <p>
          <strong class="example">Example 2:</strong>
        </p>
        <pre>
          <strong>Input:</strong> buildings = [[0,2,3],[2,5,3]]
          <br />
          <strong>Output:</strong> [[0,3],[5,0]]
        </pre>

        <p>&nbsp;</p>
        <p>
          <strong>Constraints:</strong>
        </p>

        <ul>
          <li>
            <code>
              1 &lt;= buildings.length &lt;= 10<sup>4</sup>
            </code>
          </li>
          <li>
            <code>
              0 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 2
              <sup>31</sup> - 1
            </code>
          </li>
          <li>
            <code>
              1 &lt;= height<sub>i</sub> &lt;= 2<sup>31</sup> - 1
            </code>
          </li>
          <li>
            <code>buildings</code> is sorted by{" "}
            <code>
              left<sub>i</sub>
            </code>{" "}
            in&nbsp;non-decreasing order.
          </li>
        </ul>
      </div>
    </>
  ),
  391: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>rectangles</code> where{" "}
        <code>
          rectangles[i] = [x<sub>i</sub>, y<sub>i</sub>, a<sub>i</sub>, b
          <sub>i</sub>]
        </code>{" "}
        represents an axis-aligned rectangle. The bottom-left point of the
        rectangle is{" "}
        <code>
          (x<sub>i</sub>, y<sub>i</sub>)
        </code>{" "}
        and the top-right point of it is{" "}
        <code>
          (a<sub>i</sub>, b<sub>i</sub>)
        </code>
        .
      </p>
      <p>
        Return <code>true</code>{" "}
        <em>
          if all the rectangles together form an exact cover of a rectangular
          region
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/27/perectrec1-plane.jpg"
        style={{ width: 300, height: 294 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> rectangles =
        [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> All 5 rectangles together form an exact
        cover of a rectangular region.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/27/perfectrec2-plane.jpg"
        style={{ width: 300, height: 294 }}
      />
      <br />
      <pre>
        <strong>Input:</strong> rectangles =
        [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> Because there is a gap between the two
        rectangular regions.
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/27/perfecrrec4-plane.jpg"
        style={{ width: 300, height: 294 }}
      />
      <br />
      <pre>
        <strong>Input:</strong> rectangles =
        [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> Because two of the rectangles overlap with
        each other.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= rectangles.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>rectangles[i].length == 4</code>
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= x<sub>i</sub>, y<sub>i</sub>, a<sub>i</sub>, b
            <sub>i</sub> &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  850: (
    <>
      <div class="elfjS" data-track-load="description_content">
        <p>
          You are given a 2D array of axis-aligned <code>rectangles</code>. Each{" "}
          <code>
            rectangle[i] = [x<sub>i1</sub>, y<sub>i1</sub>, x<sub>i2</sub>, y
            <sub>i2</sub>]
          </code>{" "}
          denotes the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          rectangle where{" "}
          <code>
            (x<sub>i1</sub>, y<sub>i1</sub>)
          </code>{" "}
          are the coordinates of the <strong>bottom-left corner</strong>, and{" "}
          <code>
            (x<sub>i2</sub>, y<sub>i2</sub>)
          </code>{" "}
          are the coordinates of the <strong>top-right corner</strong>.
        </p>

        <p>
          Calculate the <strong>total area</strong> covered by all{" "}
          <code>rectangles</code> in the plane. Any area covered by two or more
          rectangles should only be counted <strong>once</strong>.
        </p>

        <p>
          Return{" "}
          <em>
            the <strong>total area</strong>
          </em>
          . Since the answer may be too large, return it <strong>modulo</strong>{" "}
          <code>
            10<sup>9</sup> + 7
          </code>
          .
        </p>

        <p>&nbsp;</p>
        <p>
          <strong class="example">Example 1:</strong>
        </p>
        <img
          alt=""
          src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png"
          style={{ width: 600, height: 450 }}
        />
        <pre>
          <strong>Input:</strong> rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]
          <br />
          <strong>Output:</strong> 6<br />
          <strong>Explanation:</strong> A total area of 6 is covered by all
          three rectangles, as illustrated in the picture.
          <br />
          From (1,1) to (2,2), the green and red rectangles overlap.
          <br />
          From (1,0) to (2,3), all three rectangles overlap.
        </pre>

        <p>
          <strong class="example">Example 2:</strong>
        </p>

        <pre>
          <strong>Input:</strong> rectangles = [[0,0,1000000000,1000000000]]
          <br />
          <strong>Output:</strong> 49 <br />
          <strong>Explanation:</strong> The answer is 10<sup>18</sup> modulo (10
          <sup>9</sup> + 7), which is 49.
        </pre>

        <p>&nbsp;</p>
        <p>
          <strong>Constraints:</strong>
        </p>

        <ul>
          <li>
            <code>1 &lt;= rectangles.length &lt;= 200</code>
          </li>
          <li>
            <code>rectanges[i].length == 4</code>
          </li>
          <li>
            <code>
              0 &lt;= x<sub>i1</sub>, y<sub>i1</sub>, x<sub>i2</sub>, y
              <sub>i2</sub> &lt;= 10<sup>9</sup>
            </code>
          </li>
          <li>
            <code>
              x<sub>i1 &lt;= </sub>x<sub>i2</sub>
            </code>
          </li>
          <li>
            <code>
              y<sub>i1 &lt;=</sub> y<sub>i2</sub>
            </code>
          </li>
        </ul>
      </div>
    </>
  ),
  1851: (
    <>
      <div class="elfjS" data-track-load="description_content">
        <p>
          You are given a 2D integer array <code>intervals</code>, where{" "}
          <code>
            intervals[i] = [left<sub>i</sub>, right<sub>i</sub>]
          </code>{" "}
          describes the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          interval starting at{" "}
          <code>
            left<sub>i</sub>
          </code>{" "}
          and ending at{" "}
          <code>
            right<sub>i</sub>
          </code>{" "}
          <strong>(inclusive)</strong>. The <strong>size</strong> of an interval
          is defined as the number of integers it contains, or more formally{" "}
          <code>
            right<sub>i</sub> - left<sub>i</sub> + 1
          </code>
          .
        </p>

        <p>
          You are also given an integer array <code>queries</code>. The answer
          to the{" "}
          <code>
            j<sup>th</sup>
          </code>{" "}
          query is the <strong>size of the smallest interval</strong>{" "}
          <code>i</code> such that{" "}
          <code>
            left<sub>i</sub> &lt;= queries[j] &lt;= right<sub>i</sub>
          </code>
          . If no such interval exists, the answer is <code>-1</code>.
        </p>

        <p>
          Return <em>an array containing the answers to the queries</em>.
        </p>

        <p>&nbsp;</p>
        <p>
          <strong class="example">Example 1:</strong>
        </p>

        <pre>
          <strong>Input:</strong> intervals = [[1,4],[2,4],[3,6],[4,4]], queries
          = [2,3,4,5] <br />
          <strong>Output:</strong> [3,3,1,4] <br />
          <strong>Explanation:</strong> The queries are processed as follows:{" "}
          <br />
          - Query = 2: The interval [2,4] is the smallest interval containing 2.
          The answer is 4 - 2 + 1 = 3. <br />
          - Query = 3: The interval [2,4] is the smallest interval containing 3.
          The answer is 4 - 2 + 1 = 3. <br />
          - Query = 4: The interval [4,4] is the smallest interval containing 4.
          The answer is 4 - 4 + 1 = 1. <br />- Query = 5: The interval [3,6] is
          the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.
        </pre>

        <p>
          <strong class="example">Example 2:</strong>
        </p>

        <pre>
          <strong>Input:</strong> intervals = [[2,3],[2,5],[1,8],[20,25]],
          queries = [2,19,5,22] <br />
          <strong>Output:</strong> [2,-1,4,6] <br />
          <strong>Explanation:</strong> The queries are processed as follows:{" "}
          <br />
          - Query = 2: The interval [2,3] is the smallest interval containing 2.
          The answer is 3 - 2 + 1 = 2. <br />- Query = 19: None of the intervals
          contain 19. The answer is -1. <br />
          - Query = 5: The interval [2,5] is the smallest interval containing 5.
          The answer is 5 - 2 + 1 = 4. <br />- Query = 22: The interval [20,25]
          is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.
        </pre>

        <p>&nbsp;</p>
        <p>
          <strong>Constraints:</strong>
        </p>

        <ul>
          <li>
            <code>
              1 &lt;= intervals.length &lt;= 10<sup>5</sup>
            </code>
          </li>
          <li>
            <code>
              1 &lt;= queries.length &lt;= 10<sup>5</sup>
            </code>
          </li>
          <li>
            <code>intervals[i].length == 2</code>
          </li>
          <li>
            <code>
              1 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt;= 10
              <sup>7</sup>
            </code>
          </li>
          <li>
            <code>
              1 &lt;= queries[j] &lt;= 10<sup>7</sup>
            </code>
          </li>
        </ul>
      </div>
    </>
  ),
  192: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Write a bash script to calculate the{" "}
        <span
          data-keyword="frequency-textfile"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rl:"
              >
                <div>frequency</div>
              </div>
              <div
                style={{
                  position: "fixed",
                  zIndex: 40,
                  inset: "0px auto auto 0px;",
                  transform: "translate(287px, 183px)",
                }}
              ></div>
            </div>
          </div>
        </span>{" "}
        of each word in a text file <code>words.txt</code>.
      </p>
      <p>For simplicity sake, you may assume:</p>
      <ul>
        <li>
          <code>words.txt</code> contains only lowercase characters and space{" "}
          <code>' '</code> characters.
        </li>
        <li>Each word must consist of lowercase characters only.</li>
        <li>Words are separated by one or more whitespace characters.</li>
      </ul>
      <br />
      <p>
        <strong class="example">Example:</strong>
      </p>{" "}
      <p>
        Assume that <code>words.txt</code> has the following content:
      </p>{" "}
      <pre>the day is sunny the the the sunny is is</pre> <br />
      <p>
        Your script should output the following, sorted by descending frequency:
      </p>
      <pre>the 4 is 3 sunny 2 day 1</pre>
      <br />
      <p>
        <b>Note:</b>
      </p>
      <ul>
        <li>
          Don't worry about handling ties, it is guaranteed that each word's
          frequency count is unique.
        </li>
        <li>
          Could you write it in one-line using{" "}
          <a href="http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-4.html">
            Unix pipes
          </a>
          ?
        </li>
      </ul>
    </div>
  ),
  193: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a text file <code>file.txt</code> that contains a list of phone
        numbers (one per line), write a one-liner bash script to print all valid
        phone numbers.
      </p>

      <p>
        You may assume that a valid phone number must appear in one of the
        following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)
      </p>

      <p>
        You may also assume each line in the text file must not contain leading
        or trailing white spaces.
      </p>
      <br />
      <p>
        <strong class="example">Example:</strong>
      </p>

      <p>
        Assume that <code>file.txt</code> has the following content:
      </p>

      <pre>987-123-4567 123 456 7890 (123) 456-7890</pre>

      <p>Your script should output the following valid phone numbers:</p>

      <pre>987-123-4567 (123) 456-7890</pre>
    </div>
  ),
  194: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a text file <code>file.txt</code>, transpose its content.
      </p>

      <p>
        You may assume that each row has the same number of columns, and each
        field is separated by the <code>' '</code> character.
      </p>
      <br />
      <p>
        <strong class="example">Example:</strong>
      </p>

      <p>
        If <code>file.txt</code> has the following content:
      </p>

      <pre>name age alice 21 ryan 30</pre>

      <p>Output the following:</p>

      <pre>name alice ryan age 21 30</pre>
    </div>
  ),
  195: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a text file&nbsp;<code>file.txt</code>, print&nbsp;just the 10th
        line of the&nbsp;file.
      </p>
      <br />
      <p>
        <strong class="example">Example:</strong>
      </p>

      <p>
        Assume that <code>file.txt</code> has the following content:
      </p>

      <pre>
        Line 1 <br /> Line 2 <br /> Line 3 <br /> Line 4 <br /> Line 5 <br />{" "}
        Line 6 <br />
        Line 7 <br />
        Line 8 <br /> Line 9 <br />
        Line 10
      </pre>

      <p>Your script should output the tenth line, which is:</p>

      <pre>Line 10</pre>
      <br />
      <div class="spoilers">
        <b>Note:</b>
        <br />
        <br />
        1. If the file contains less than 10 lines, what should you output?
        <br />
        2. There's at least three different solutions. Try to explore all
        possibilities.
      </div>
    </div>
  ),
  274: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>citations</code> where{" "}
        <code>citations[i]</code> is the number of citations a researcher
        received for their{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        paper, return <em>the researcher's h-index</em>.
      </p>

      <p>
        According to the{" "}
        <a
          href="https://en.wikipedia.org/wiki/H-index"
          target="_blank"
          rel="noreferrer"
        >
          definition of h-index on Wikipedia
        </a>
        : The h-index is defined as the maximum value of <code>h</code> such
        that the given researcher has published at least <code>h</code> papers
        that have each been cited at least <code>h</code> times.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> citations = [3,0,6,1,5] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> [3,0,6,1,5] means the researcher has 5
        papers in total and each of them had received 3, 0, 6, 1, 5 citations
        respectively. Since the researcher has 3 papers with at least 3
        citations each and the remaining two with no more than 3 citations each,
        their h-index is 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> citations = [1,3,1] <br />
        <strong>Output:</strong> 1 <br />
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == citations.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 5000</code>
        </li>
        <li>
          <code>0 &lt;= citations[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  561: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> of <code>2n</code> integers,
        group these integers into <code>n</code> pairs{" "}
        <code>
          (a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), ...,
          (a<sub>n</sub>, b<sub>n</sub>)
        </code>{" "}
        such that the sum of{" "}
        <code>
          min(a<sub>i</sub>, b<sub>i</sub>)
        </code>{" "}
        for all <code>i</code> is <strong>maximized</strong>. Return
        <em> the maximized sum</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,4,3,2] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> All possible pairings (ignoring the
        ordering of elements) are: <br />
        1. (1, 4), (2, 3) -&gt; min(1, 4) + min(2, 3) = 1 + 2 = 3 <br />
        2. (1, 3), (2, 4) -&gt; min(1, 3) + min(2, 4) = 1 + 2 = 3 <br />
        3. (1, 2), (3, 4) -&gt; min(1, 2) + min(3, 4) = 1 + 3 = 4 <br />
        So the maximum possible sum is 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [6,2,6,5,1,2] <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> The optimal pairing is (2, 1), (2, 5), (6,
        6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>nums.length == 2 * n</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1051: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A school is trying to take an annual photo of all the students. The
        students are asked to stand in a single file line in{" "}
        <strong>non-decreasing order</strong> by height. Let this ordering be
        represented by the integer array <code>expected</code> where{" "}
        <code>expected[i]</code> is the expected height of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        student in line.
      </p>

      <p>
        You are given an integer array <code>heights</code> representing the{" "}
        <strong>current order</strong> that the students are standing in. Each{" "}
        <code>heights[i]</code> is the height of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        student in line (<strong>0-indexed</strong>).
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>number of indices</strong> where{" "}
        </em>
        <code>heights[i] != expected[i]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> heights = [1,1,4,2,1,3] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> <br />
        heights: [1,1,<u>4</u>,2,<u>1</u>,<u>3</u>] <br />
        expected: [1,1,<u>1</u>,2,<u>3</u>,<u>4</u>] <br />
        Indices 2, 4, and 5 do not match.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> heights = [5,1,2,3,4] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> <br />
        heights: [<u>5</u>,<u>1</u>,<u>2</u>,<u>3</u>,<u>4</u>] <br />
        expected: [<u>1</u>,<u>2</u>,<u>3</u>,<u>4</u>,<u>5</u>] <br />
        All indices do not match.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> heights = [1,2,3,4,5] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> <br />
        heights: [1,2,3,4,5] <br />
        expected: [1,2,3,4,5] <br />
        All indices match.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= heights.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= heights[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1122: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two arrays <code>arr1</code> and <code>arr2</code>, the elements
        of <code>arr2</code> are distinct, and all elements in <code>arr2</code>{" "}
        are also in <code>arr1</code>.
      </p>

      <p>
        Sort the elements of <code>arr1</code> such that the relative ordering
        of items in <code>arr1</code> are the same as in <code>arr2</code>.
        Elements that do not appear in <code>arr2</code> should be placed at the
        end of <code>arr1</code> in <strong>ascending</strong> order.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 =
        [2,1,4,3,9,6] <br />
        <strong>Output:</strong> [2,2,2,1,4,3,3,9,6,7,19]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]
        <br />
        <strong>Output:</strong> [22,28,8,6,17,44]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= arr1.length, arr2.length &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= arr1[i], arr2[i] &lt;= 1000</code>
        </li>
        <li>
          All the elements of <code>arr2</code> are <strong>distinct</strong>.
        </li>
        <li>
          Each&nbsp;<code>arr2[i]</code> is in <code>arr1</code>.
        </li>
      </ul>
    </div>
  ),
  1584: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>points</code> representing integer
        coordinates of some points on a 2D-plane, where{" "}
        <code>
          points[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>
        .
      </p>

      <p>
        The cost of connecting two points{" "}
        <code>
          [x<sub>i</sub>, y<sub>i</sub>]
        </code>{" "}
        and{" "}
        <code>
          [x<sub>j</sub>, y<sub>j</sub>]
        </code>{" "}
        is the <strong>manhattan distance</strong> between them:{" "}
        <code>
          |x<sub>i</sub> - x<sub>j</sub>| + |y<sub>i</sub> - y<sub>j</sub>|
        </code>
        , where <code>|val|</code> denotes the absolute value of{" "}
        <code>val</code>.
      </p>

      <p>
        Return <em>the minimum cost to make all points connected.</em> All
        points are connected if there is <strong>exactly one</strong> simple
        path between any two points.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/26/d.png"
        style={{ width: 214, height: 268 }}
      />
      <pre>
        <strong>Input:</strong> points = [[0,0],[2,2],[3,10],[5,2],[7,0]]
        <br />
        <strong>Output:</strong> 20
        <br />
        <strong>Explanation:</strong> <br />
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/08/26/c.png"
          style={{ width: 214, height: 268 }}
        />
        We can connect the points as shown above to get the minimum cost of 20.
        Notice that there is a unique path between every pair of points.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> points = [[3,12],[-2,5],[-4,1]]
        <br />
        <strong>Output:</strong> 18
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= points.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            -10<sup>6</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10
            <sup>6</sup>
          </code>
        </li>
        <li>
          All pairs{" "}
          <code>
            (x<sub>i</sub>, y<sub>i</sub>)
          </code>{" "}
          are distinct.
        </li>
      </ul>
    </div>
  ),
  1044: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, consider all{" "}
        <em>duplicated substrings</em>: (contiguous) substrings of s that occur
        2 or more times.&nbsp;The occurrences&nbsp;may overlap.
      </p>
      <p>
        Return <strong>any</strong> duplicated&nbsp;substring that has the
        longest possible length.&nbsp;If <code>s</code> does not have a
        duplicated substring, the answer is <code>""</code>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <pre>
        <strong>Input:</strong> s = "banana" <br />
        <strong>Output:</strong> "ana" <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <pre>
        <strong>Input:</strong> s = "abcd" <br />
        <strong>Output:</strong> ""
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            2 &lt;= s.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  1923: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a country of <code>n</code> cities numbered from <code>0</code>{" "}
        to <code>n - 1</code>. In this country, there is a road connecting{" "}
        <b>every pair</b> of cities.
      </p>

      <p>
        There are <code>m</code> friends numbered from <code>0</code> to{" "}
        <code>m - 1</code> who are traveling through the country. Each one of
        them will take a path consisting of some cities. Each path is
        represented by an integer array that contains the visited cities in
        order. The path may contain a city <strong>more than once</strong>, but
        the same city will not be listed consecutively.
      </p>

      <p>
        Given an integer <code>n</code> and a 2D integer array{" "}
        <code>paths</code> where <code>paths[i]</code> is an integer array
        representing the path of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        friend, return{" "}
        <em>
          the length of the <strong>longest common subpath</strong> that is
          shared by <strong>every</strong> friend's path, or{" "}
        </em>
        <code>0</code>
        <em> if there is no common subpath at all</em>.
      </p>

      <p>
        A <strong>subpath</strong> of a path is a contiguous sequence of cities
        within that path.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 5, paths = [[0,1,<u>2,3</u>,4], <br />[
        <u>2,3</u>,4],
        <br />
        [4,0,1,<u>2,3</u>]]
        <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> The longest common subpath is [2,3].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, paths = [[0],[1],[2]]
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> There is no common subpath shared by the
        three paths.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 5, paths = [[<u>0</u>,1,2,3,4],
        <br />
        [4,3,2,1,<u>0</u>]]
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> The possible longest common subpaths are
        [0], [1], [2], [3], and [4]. All have a length of 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>m == paths.length</code>
        </li>
        <li>
          <code>
            2 &lt;= m &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            sum(paths[i].length) &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= paths[i][j] &lt; n</code>
        </li>
        <li>
          The same city is not listed multiple times consecutively in{" "}
          <code>paths[i]</code>.
        </li>
      </ul>
    </div>
  ),
  1977: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You wrote down many <strong>positive</strong> integers in a string
        called <code>num</code>. However, you realized that you forgot to add
        commas to seperate the different numbers. You remember that the list of
        integers was <strong>non-decreasing</strong> and that{" "}
        <strong>no</strong> integer had leading zeros.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>number of possible lists of integers</strong> that you
          could have written down to get the string{" "}
        </em>
        <code>num</code>. Since the answer may be large, return it{" "}
        <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = "327" <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> You could have written down the numbers:
        3, 27 327
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = "094"
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> No numbers can have leading zeros and all
        numbers must be positive.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = "0"
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> No numbers can have leading zeros and all
        numbers must be positive.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= num.length &lt;= 3500</code>
        </li>
        <li>
          <code>num</code> consists of digits <code>'0'</code> through{" "}
          <code>'9'</code>.
        </li>
      </ul>
    </div>
  ),
  2223: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are <strong>building</strong> a string <code>s</code> of length{" "}
        <code>n</code> <strong>one</strong> character at a time,{" "}
        <strong>prepending</strong> each new character to the{" "}
        <strong>front</strong> of the string. The strings are labeled from{" "}
        <code>1</code> to <code>n</code>, where the string with length{" "}
        <code>i</code> is labeled{" "}
        <code>
          s<sub>i</sub>
        </code>
        .
      </p>

      <ul>
        <li>
          For example, for <code>s = "abaca"</code>,{" "}
          <code>
            s<sub>1</sub> == "a"
          </code>
          ,{" "}
          <code>
            s<sub>2</sub> == "ca"
          </code>
          ,{" "}
          <code>
            s<sub>3</sub> == "aca"
          </code>
          , etc.
        </li>
      </ul>

      <p>
        The <strong>score</strong> of{" "}
        <code>
          s<sub>i</sub>
        </code>{" "}
        is the length of the <strong>longest common prefix</strong> between{" "}
        <code>
          s<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          s<sub>n</sub>
        </code>{" "}
        (Note that{" "}
        <code>
          s == s<sub>n</sub>
        </code>
        ).
      </p>

      <p>
        Given the final string <code>s</code>, return
        <em>
          {" "}
          the <strong>sum</strong> of the <strong>score</strong> of every{" "}
        </em>
        <code>
          s<sub>i</sub>
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "babab" <br />
        <strong>Output:</strong> 9<br />
        <strong>Explanation:</strong>
        <br />
        For s<sub>1</sub> == "b", the longest common prefix is "b" which has a
        score of 1.
        <br />
        For s<sub>2</sub> == "ab", there is no common prefix so the score is 0.
        <br />
        For s<sub>3</sub> == "bab", the longest common prefix is "bab" which has
        a score of 3.
        <br />
        For s<sub>4</sub> == "abab", there is no common prefix so the score is
        0.
        <br />
        For s<sub>5</sub> == "babab", the longest common prefix is "babab" which
        has a score of 5.
        <br />
        The sum of the scores is 1 + 0 + 3 + 0 + 5 = 9, so we return 9.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "azbazbzaz"
        <br />
        <strong>Output:</strong> 14
        <br />
        <strong>Explanation:</strong> <br />
        For s<sub>2</sub> == "az", the longest common prefix is "az" which has a
        score of 2.
        <br />
        For s<sub>6</sub> == "azbzaz", the longest common prefix is "azb" which
        has a score of 3.
        <br />
        For s<sub>9</sub> == "azbazbzaz", the longest common prefix is
        "azbazbzaz" which has a score of 9.
        <br />
        For all other s<sub>i</sub>, the score is 0.
        <br />
        The sum of the scores is 2 + 3 + 9 = 14, so we return 14.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  215: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and an integer <code>k</code>,
        return <em>the</em>{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        <em>largest element in the array</em>.
      </p>

      <p>
        Note that it is the{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        largest element in the sorted order, not the{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        distinct element.
      </p>

      <p>Can you solve it without sorting?</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [3,2,1,5,6,4], k = 2 <br />
        <strong>Output:</strong> 5
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [3,2,3,1,2,4,5,5,6], k = 4 <br />
        <strong>Output:</strong> 4
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  324: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, reorder it such that{" "}
        <code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>.
      </p>
      <p>You may assume the input array always has a valid answer.</p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,5,1,1,6,4] <br />
        <strong>Output:</strong> [1,6,1,5,1,4] <br />
        <strong>Explanation:</strong> [1,4,1,5,1,6] is also accepted.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,3,2,2,3,1]
        <br />
        <strong>Output:</strong> [2,3,1,3,1,2]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 5000</code>
        </li>
        <li>
          It is guaranteed that there will be an answer for the given input{" "}
          <code>nums</code>.
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow Up:</strong> Can you do it in <code>O(n)</code> time and/or{" "}
      <strong>in-place</strong> with <code>O(1)</code> extra space?
    </div>
  ),
  347: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and an integer <code>k</code>,
        return <em>the</em> <code>k</code> <em>most frequent elements</em>. You
        may return the answer in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,1,1,2,2,3], k = 2 <br />
        <strong>Output:</strong> [1,2]
        <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1], k = 1<br />
        <strong>Output:</strong> [1]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>k</code> is in the range{" "}
          <code>[1, the number of unique elements in the array]</code>.
        </li>
        <li>
          It is <strong>guaranteed</strong> that the answer is{" "}
          <strong>unique</strong>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Your algorithm's time complexity must be
        better than <code>O(n log n)</code>, where n is the array's size.
      </p>
    </div>
  ),
  973: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of <code>points</code> where{" "}
        <code>
          points[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>{" "}
        represents a point on the <strong>X-Y</strong> plane and an integer{" "}
        <code>k</code>, return the <code>k</code> closest points to the origin{" "}
        <code>(0, 0)</code>.
      </p>

      <p>
        The distance between two points on the <strong>X-Y</strong> plane is the
        Euclidean distance (i.e.,{" "}
        <code>
          √(x<sub>1</sub> - x<sub>2</sub>)<sup>2</sup> + (y<sub>1</sub> - y
          <sub>2</sub>)<sup>2</sup>
        </code>
        ).
      </p>

      <p>
        You may return the answer in <strong>any order</strong>. The answer is{" "}
        <strong>guaranteed</strong> to be <strong>unique</strong> (except for
        the order that it is in).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/03/closestplane1.jpg"
        style={{ width: 400, height: 400 }}
      />
      <pre>
        <strong>Input:</strong> points = [[1,3],[-2,2]], k = 1 <br />
        <strong>Output:</strong> [[-2,2]]
        <br />
        <strong>Explanation:</strong>
        <br />
        The distance between (1, 3) and the origin is sqrt(10).
        <br />
        The distance between (-2, 2) and the origin is sqrt(8).
        <br />
        Since sqrt(8) &lt; sqrt(10), (-2, 2) is closer to the origin.
        <br />
        We only want the closest k = 1 points from the origin, so the answer is
        just [[-2,2]].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> points = [[3,3],[5,-1],[-2,4]], k = 2<br />
        <strong>Output:</strong> [[3,3],[-2,4]]
        <br />
        <strong>Explanation:</strong> The answer [[-2,4],[3,3]] would also be
        accepted.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= k &lt;= points.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10
            <sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1738: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a 2D <code>matrix</code> of size <code>m x n</code>,
        consisting of non-negative integers. You are also given an integer{" "}
        <code>k</code>.
      </p>

      <p>
        The <strong>value</strong> of coordinate <code>(a, b)</code> of the
        matrix is the XOR of all <code>matrix[i][j]</code> where{" "}
        <code>0 &lt;= i &lt;= a &lt; m</code> and{" "}
        <code>0 &lt;= j &lt;= b &lt; n</code> <strong>(0-indexed)</strong>.
      </p>

      <p>
        Find the{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        largest value <strong>(1-indexed)</strong> of all the coordinates of{" "}
        <code>matrix</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [[5,2],[1,6]], k = 1 <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> The value of coordinate (0,1) is 5 XOR 2 =
        7, which is the largest value.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [[5,2],[1,6]], k = 2 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The value of coordinate (0,0) is 5 = 5,
        which is the 2nd largest value.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [[5,2],[1,6]], k = 3 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The value of coordinate (1,0) is 5 XOR 1 =
        4, which is the 3rd largest value.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == matrix.length</code>
        </li>
        <li>
          <code>n == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 1000</code>
        </li>
        <li>
          <code>
            0 &lt;= matrix[i][j] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= m * n</code>
        </li>
      </ul>
    </div>
  ),
  1985: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of strings <code>nums</code> and an integer{" "}
        <code>k</code>. Each string in <code>nums</code> represents an integer
        without leading zeros.
      </p>

      <p>
        Return <em>the string that represents the </em>
        <code>
          k<sup>th</sup>
        </code>
        <em>
          <strong> largest integer</strong> in{" "}
        </em>
        <code>nums</code>.
      </p>

      <p>
        <strong>Note</strong>: Duplicate numbers should be counted distinctly.
        For example, if <code>nums</code> is <code>["1","2","2"]</code>,{" "}
        <code>"2"</code> is the first largest integer, <code>"2"</code> is the
        second-largest integer, and <code>"1"</code> is the third-largest
        integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = ["3","6","7","10"], k = 4 <br />
        <strong>Output:</strong> "3" <br />
        <strong>Explanation:</strong> <br />
        The numbers in nums sorted in non-decreasing order are
        ["3","6","7","10"]. <br />
        The 4<sup>th</sup> largest integer in nums is "3".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = ["2","21","12","1"], k = 3 <br />
        <strong>Output:</strong> "2" <br />
        <strong>Explanation:</strong> <br />
        The numbers in nums sorted in non-decreasing order are
        ["1","2","12","21"]. <br />
        The 3<sup>rd</sup> largest integer in nums is "2".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = ["0","0"], k = 2 <br />
        <strong>Output:</strong> "0" <br />
        <strong>Explanation:</strong> <br />
        The numbers in nums sorted in non-decreasing order are ["0","0"]. <br />
        The 2<sup>nd</sup> largest integer in nums is "0".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= k &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= nums[i].length &lt;= 100</code>
        </li>
        <li>
          <code>nums[i]</code> consists of only digits.
        </li>
        <li>
          <code>nums[i]</code> will not have any leading zeros.
        </li>
      </ul>
    </div>
  ),
  808: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are two types of soup: <strong>type A</strong> and{" "}
        <strong>type B</strong>. Initially, we have <code>n</code> ml of each
        type of soup. There are four kinds of operations:
      </p>

      <ul>
        <li>
          Serve <code>100</code> ml of <strong>soup A</strong> and{" "}
          <code>0</code> ml of <strong>soup B</strong>,
        </li>
        <li>
          Serve <code>75</code> ml of <strong>soup A</strong> and{" "}
          <code>25</code> ml of <strong>soup B</strong>,
        </li>
        <li>
          Serve <code>50</code> ml of <strong>soup A</strong> and{" "}
          <code>50</code> ml of <strong>soup B</strong>, and
        </li>
        <li>
          Serve <code>25</code> ml of <strong>soup A</strong> and{" "}
          <code>75</code> ml of <strong>soup B</strong>.
        </li>
      </ul>

      <p>
        When we serve some soup, we give it to someone, and we no longer have
        it. Each turn, we will choose from the four operations with an equal
        probability <code>0.25</code>. If the remaining volume of soup is not
        enough to complete the operation, we will serve as much as possible. We
        stop once we no longer have some quantity of both types of soup.
      </p>

      <p>
        <strong>Note</strong> that we do not have an operation where all{" "}
        <code>100</code> ml's of <strong>soup B</strong> are used first.
      </p>

      <p>
        Return{" "}
        <em>
          the probability that <strong>soup A</strong> will be empty first, plus
          half the probability that <strong>A</strong> and <strong>B</strong>{" "}
          become empty at the same time
        </em>
        . Answers within{" "}
        <code>
          10<sup>-5</sup>
        </code>{" "}
        of the actual answer will be accepted.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 50 <br />
        <strong>Output:</strong> 0.62500
        <br />
        <strong>Explanation:</strong> If we choose the first two operations, A
        will become empty first.
        <br />
        For the third operation, A and B will become empty at the same time.
        <br />
        For the fourth operation, B will become empty first.
        <br />
        So the total probability of A becoming empty first plus half the
        probability that A and B become empty at the same time, is 0.25 * (1 + 1
        + 0.5 + 0) = 0.625.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 100
        <br />
        <strong>Output:</strong> 0.71875
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  837: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice plays the following game, loosely based on the card game{" "}
        <strong>"21"</strong>.
      </p>

      <p>
        Alice starts with <code>0</code> points and draws numbers while she has
        less than <code>k</code> points. During each draw, she gains an integer
        number of points randomly from the range <code>[1, maxPts]</code>, where{" "}
        <code>maxPts</code> is an integer. Each draw is independent and the
        outcomes have equal probabilities.
      </p>

      <p>
        Alice stops drawing numbers when she gets <code>k</code>{" "}
        <strong>or more points</strong>.
      </p>

      <p>
        Return the probability that Alice has <code>n</code> or fewer points.
      </p>

      <p>
        Answers within{" "}
        <code>
          10<sup>-5</sup>
        </code>{" "}
        of the actual answer are considered accepted.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 10, k = 1, maxPts = 10 <br />
        <strong>Output:</strong> 1.00000
        <br />
        <strong>Explanation:</strong> Alice gets a single card, then stops.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 6, k = 1, maxPts = 10
        <br />
        <strong>Output:</strong> 0.60000
        <br />
        <strong>Explanation:</strong> Alice gets a single card, then stops. In 6
        out of 10 possibilities, she is at or below 6 points.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 21, k = 17, maxPts = 10
        <br />
        <strong>Output:</strong> 0.73278
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= k &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= maxPts &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1093: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a large sample of integers in the range{" "}
        <code>[0, 255]</code>. Since the sample is so large, it is represented
        by an array <code>count</code>&nbsp;where <code>count[k]</code> is the{" "}
        <strong>number of times</strong> that <code>k</code> appears in the
        sample.
      </p>

      <p>Calculate the following statistics:</p>

      <ul>
        <li>
          <code>minimum</code>: The minimum element in the sample.
        </li>
        <li>
          <code>maximum</code>: The maximum element in the sample.
        </li>
        <li>
          <code>mean</code>: The average of the sample, calculated as the total
          sum of all elements divided by the total number of elements.
        </li>
        <li>
          <code>median</code>:
          <ul>
            <li>
              If the sample has an odd number of elements, then the{" "}
              <code>median</code> is the middle element once the sample is
              sorted.
            </li>
            <li>
              If the sample has an even number of elements, then the{" "}
              <code>median</code> is the average of the two middle elements once
              the sample is sorted.
            </li>
          </ul>
        </li>
        <li>
          <code>mode</code>: The number that appears the most in the sample. It
          is guaranteed to be <strong>unique</strong>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the statistics of the sample as an array of floating-point numbers{" "}
        </em>
        <code>[minimum, maximum, mean, median, mode]</code>
        <em>. Answers within </em>
        <code>
          10<sup>-5</sup>
        </code>
        <em> of the actual answer will be accepted.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> count = [0,1,3,4,0,0,0,0,0,0,0,0,0, <br />
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <br />
        ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <br />
        ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <br />
        ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, <br />
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, <br />
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <br />
        ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <br />
        ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, <br />
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, <br />
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <br />
        ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        <br /> <strong>Output:</strong>{" "}
        [1.00000,3.00000,2.37500,2.50000,3.00000]
        <br />
        <strong>Explanation:</strong> The sample represented by count is
        [1,2,2,2,3,3,3,3].
        <br />
        The minimum and maximum are 1 and 3 respectively.
        <br />
        The mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.
        <br />
        Since the size of the sample is even, the median is the average of the
        two middle elements 2 and 3, which is 2.5.
        <br />
        The mode is 3 as it appears the most in the sample.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0{" "}
        <br />
        ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        <br />
        0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <br />
        ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, <br />
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <br />
        ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <br />
        ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, <br />
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, <br />
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, <br />
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, <br />
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, <br />
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        <br />
        <strong>Output:</strong> [1.00000,4.00000,2.18182,2.00000,1.00000]
        <br />
        <strong>Explanation:</strong> The sample represented by count is
        [1,1,1,1,2,2,2,3,3,4,4].
        <br />
        The minimum and maximum are 1 and 4 respectively.
        <br />
        The mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for
        display purposes, the output shows the rounded number 2.18182).
        <br />
        Since the size of the sample is odd, the median is the middle element 2.
        <br />
        The mode is 1 as it appears the most in the sample.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>count.length == 256</code>
        </li>
        <li>
          <code>
            0 &lt;= count[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= sum(count) &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          The mode of the sample that <code>count</code> represents is{" "}
          <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  1227: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        <code>n</code> passengers board an airplane with exactly <code>n</code>{" "}
        seats. The first passenger has lost the ticket and picks a seat
        randomly. But after that, the rest of the passengers will:
      </p>

      <ul>
        <li>Take their own seat if it is still available, and</li>
        <li>Pick other seats randomly when they find their seat occupied</li>
      </ul>

      <p>
        Return <em>the probability that the </em>
        <code>
          n<sup>th</sup>
        </code>
        <em> person gets his own seat</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1<br />
        <strong>Output:</strong> 1.00000 <br />
        <strong>Explanation: </strong>The first person can only get the first
        seat.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2<br />
        <strong>Output:</strong> 0.50000
        <br />
        <strong>Explanation: </strong>The second person has a probability of 0.5
        to get the second seat (when first person gets the first seat).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1467: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given <code>2n</code> balls of <code>k</code> distinct colors. You will
        be given an integer array <code>balls</code> of size <code>k</code>{" "}
        where <code>balls[i]</code> is the number of balls of color{" "}
        <code>i</code>.
      </p>

      <p>
        All the balls will be <strong>shuffled uniformly at random</strong>,
        then we will distribute the first <code>n</code> balls to the first box
        and the remaining <code>n</code> balls to the other box (Please read the
        explanation of the second example carefully).
      </p>

      <p>
        Please note that the two boxes are considered different. For example, if
        we have two balls of colors <code>a</code> and <code>b</code>, and two
        boxes <code>[]</code> and <code>()</code>, then the distribution{" "}
        <code>[a] (b)</code> is considered different than the distribution{" "}
        <code>[b] (a) </code>(Please read the explanation of the first example
        carefully).
      </p>

      <p>
        Return<em> the probability</em> that the two boxes have the same number
        of distinct balls. Answers within{" "}
        <code>
          10<sup>-5</sup>
        </code>{" "}
        of the actual value will be accepted as correct.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> balls = [1,1] <br />
        <strong>Output:</strong> 1.00000 <br />
        <strong>Explanation:</strong> Only 2 ways to divide the balls equally:{" "}
        <br />
        - A ball of color 1 to box 1 and a ball of color 2 to box 2 <br />
        - A ball of color 2 to box 1 and a ball of color 1 to box 2 <br />
        In both ways, the number of distinct colors in each box is equal. The
        probability is 2/2 = 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> balls = [2,1,1] <br />
        <strong>Output:</strong> 0.66667 <br />
        <strong>Explanation:</strong> We have the set of balls [1, 1, 2, 3]{" "}
        <br />
        This set of balls will be shuffled randomly and we may have one of the
        12 distinct shuffles with equal probability (i.e. 1/12): <br />
        [1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 /{" "}
        <br />
        2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1],{" "}
        <br />
        [3,2 / 1,1] <br />
        After that, we add the first two balls to the first box and the second
        two balls to the second box. <br />
        We can see that 8 of these 12 possible random distributions have the
        same number of distinct colors of balls in each box. <br />
        Probability is 8/12 = 0.66667
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> balls = [1,2,1,2] <br />
        <strong>Output:</strong> 0.60000 <br />
        <strong>Explanation:</strong> The set of balls is [1, 2, 2, 3, 4, 4]. It
        is hard to display all the 180 possible random shuffles of this set but
        it is easy to check that 108 of them will have the same number of
        distinct colors in each box. Probability = 108 / 180 = 0.6
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= balls.length &lt;= 8</code>
        </li>
        <li>
          <code>1 &lt;= balls[i] &lt;= 6</code>
        </li>
        <li>
          <code>sum(balls)</code> is even.
        </li>
      </ul>
    </div>
  ),
  146: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design a data structure that follows the constraints of a{" "}
        <strong>
          <a
            href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU"
            target="_blank"
            rel="noreferrer"
          >
            Least Recently Used (LRU) cache
          </a>
        </strong>
        .
      </p>

      <p>
        Implement the <code>LRUCache</code> class:
      </p>

      <ul>
        <li>
          <code>LRUCache(int capacity)</code> Initialize the LRU cache with{" "}
          <strong>positive</strong> size <code>capacity</code>.
        </li>
        <li>
          <code>int get(int key)</code> Return the value of the <code>key</code>{" "}
          if the key exists, otherwise return <code>-1</code>.
        </li>
        <li>
          <code>void put(int key, int value)</code> Update the value of the{" "}
          <code>key</code> if the <code>key</code> exists. Otherwise, add the{" "}
          <code>key-value</code> pair to the cache. If the number of keys
          exceeds the <code>capacity</code> from this operation,{" "}
          <strong>evict</strong> the least recently used key.
        </li>
      </ul>

      <p>
        The functions <code>get</code> and <code>put</code> must each run in{" "}
        <code>O(1)</code> average time complexity.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get",
        "get"] <br />
        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]] <br />
        <strong>Output</strong> <br />
        [null, null, null, 1, null, -1, null, -1, 3, 4] <br />
        <strong>Explanation</strong> <br />
        LRUCache lRUCache = new LRUCache(2); <br />
        lRUCache.put(1, 1); // cache is &#123;1=1&#125; <br />
        lRUCache.put(2, 2); // cache is &#123;1=1, 2=2&#125; <br />
        lRUCache.get(1); // return 1 <br />
        lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is &#123;1=1,
        3=3&#125; <br />
        lRUCache.get(2); // returns -1 (not found) <br />
        lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is &#123;4=4,
        3=3&#125; <br />
        lRUCache.get(1); // return -1 (not found) <br />
        lRUCache.get(3); // return 3 <br />
        lRUCache.get(4); // return 4
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= capacity &lt;= 3000</code>
        </li>
        <li>
          <code>
            0 &lt;= key &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= value &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            2 * 10<sup>5</sup>
          </code>{" "}
          calls will be made to <code>get</code> and <code>put</code>.
        </li>
      </ul>
    </div>
  ),
  432: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design a data structure to store the strings' count with the ability to
        return the strings with minimum and maximum counts.
      </p>

      <p>
        Implement the <code>AllOne</code> class:
      </p>

      <ul>
        <li>
          <code>AllOne()</code> Initializes the object of the data structure.
        </li>
        <li>
          <code>inc(String key)</code> Increments the count of the string{" "}
          <code>key</code> by <code>1</code>. If <code>key</code> does not exist
          in the data structure, insert it with count <code>1</code>.
        </li>
        <li>
          <code>dec(String key)</code> Decrements the count of the string{" "}
          <code>key</code> by <code>1</code>. If the count of <code>key</code>{" "}
          is <code>0</code> after the decrement, remove it from the data
          structure. It is guaranteed that <code>key</code> exists in the data
          structure before the decrement.
        </li>
        <li>
          <code>getMaxKey()</code> Returns one of the keys with the maximal
          count. If no element exists, return an empty string <code>""</code>.
        </li>
        <li>
          <code>getMinKey()</code> Returns one of the keys with the minimum
          count. If no element exists, return an empty string <code>""</code>.
        </li>
      </ul>

      <p>
        <strong>Note</strong> that each function must run in <code>O(1)</code>{" "}
        average time complexity.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["AllOne", "inc", "inc", "getMaxKey", "getMinKey", "inc", "getMaxKey",
        "getMinKey"]
        <br />
        [[], ["hello"], ["hello"], [], [], ["leet"], [], []]
        <br />
        <strong>Output</strong>
        <br />
        [null, null, null, "hello", "hello", null, "hello", "leet"]
        <br />
        <strong>Explanation</strong>
        <br />
        AllOne allOne = new AllOne();
        <br />
        allOne.inc("hello");
        <br />
        allOne.inc("hello");
        <br />
        allOne.getMaxKey(); // return "hello"
        <br />
        allOne.getMinKey(); // return "hello"
        <br />
        allOne.inc("leet");
        <br />
        allOne.getMaxKey(); // return "hello"
        <br />
        allOne.getMinKey(); // return "leet"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= key.length &lt;= 10</code>
        </li>
        <li>
          <code>key</code> consists of lowercase English letters.
        </li>
        <li>
          It is guaranteed that for each call to <code>dec</code>,{" "}
          <code>key</code> is existing in the data structure.
        </li>
        <li>
          At most{" "}
          <code>
            5 * 10<sup>4</sup>
          </code>
          &nbsp;calls will be made to <code>inc</code>, <code>dec</code>,{" "}
          <code>getMaxKey</code>, and <code>getMinKey</code>.
        </li>
      </ul>
    </div>
  ),
  460: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design and implement a data structure for a{" "}
        <a
          href="https://en.wikipedia.org/wiki/Least_frequently_used"
          target="_blank"
          rel="noreferrer"
        >
          Least Frequently Used (LFU)
        </a>{" "}
        cache.
      </p>

      <p>
        Implement the <code>LFUCache</code> class:
      </p>

      <ul>
        <li>
          <code>LFUCache(int capacity)</code> Initializes the object with the{" "}
          <code>capacity</code> of the data structure.
        </li>
        <li>
          <code>int get(int key)</code> Gets the value of the <code>key</code>{" "}
          if the <code>key</code> exists in the cache. Otherwise, returns{" "}
          <code>-1</code>.
        </li>
        <li>
          <code>void put(int key, int value)</code> Update the value of the{" "}
          <code>key</code> if present, or inserts the <code>key</code> if not
          already present. When the cache reaches its <code>capacity</code>, it
          should invalidate and remove the{" "}
          <strong>least frequently used</strong> key before inserting a new
          item. For this problem, when there is a <strong>tie</strong> (i.e.,
          two or more keys with the same frequency), the{" "}
          <strong>least recently used</strong> <code>key</code> would be
          invalidated.
        </li>
      </ul>

      <p>
        To determine the least frequently used key, a{" "}
        <strong>use counter</strong> is maintained for each key in the cache.
        The key with the smallest <strong>use counter</strong> is the least
        frequently used key.
      </p>

      <p>
        When a key is first inserted into the cache, its{" "}
        <strong>use counter</strong> is set to <code>1</code> (due to the{" "}
        <code>put</code> operation). The <strong>use counter</strong> for a key
        in the cache is incremented either a <code>get</code> or{" "}
        <code>put</code> operation is called on it.
      </p>

      <p>
        The functions&nbsp;<code data-stringify-type="code">get</code>
        &nbsp;and&nbsp;<code data-stringify-type="code">put</code>&nbsp;must
        each run in <code>O(1)</code> average time complexity.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["LFUCache", "put", "put", "get", "put", "get", "get", "put", "get",
        "get", "get"]
        <br />
        [[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]
        <br />
        <strong>Output</strong>
        <br />
        [null, null, null, 1, null, -1, 3, null, -1, 3, 4]
        <br />
        <strong>Explanation</strong> <br />
        // cnt(x) = the use counter for key x<br />
        // cache=[] will show the last used order for tiebreakers (leftmost
        element is most recent)
        <br />
        LFUCache lfu = new LFUCache(2);
        <br />
        lfu.put(1, 1); // cache=[1,_], cnt(1)=1
        <br />
        lfu.put(2, 2); // cache=[2,1], cnt(2)=1, cnt(1)=1
        <br />
        lfu.get(1); // return 1<br />
        // cache=[1,2], cnt(2)=1, cnt(1)=2
        <br />
        lfu.put(3, 3); // 2 is the LFU key because cnt(2)=1 is the smallest,
        invalidate 2.
        <br />
        &nbsp; // cache=[3,1], cnt(3)=1, cnt(1)=2
        <br />
        lfu.get(2); // return -1 (not found)
        <br />
        lfu.get(3); // return 3<br />
        // cache=[3,1], cnt(3)=2, cnt(1)=2
        <br />
        lfu.put(4, 4); // Both 1 and 3 have the same cnt, but 1 is LRU,
        invalidate 1.
        <br />
        // cache=[4,3], cnt(4)=1, cnt(3)=2
        <br />
        lfu.get(1); // return -1 (not found)
        <br />
        lfu.get(3); // return 3<br />
        // cache=[3,4], cnt(4)=1, cnt(3)=3
        <br />
        lfu.get(4); // return 4<br />
        // cache=[4,3], cnt(4)=2, cnt(3)=3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= capacity&nbsp;&lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= key &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= value &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            2 * 10<sup>5</sup>
          </code>
          &nbsp;calls will be made to <code>get</code> and <code>put</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <span style={{ display: "none" }}>&nbsp;</span>
    </div>
  ),
  430: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a doubly linked list, which contains nodes that have a
        next pointer, a previous pointer, and an additional{" "}
        <strong>child pointer</strong>. This child pointer may or may not point
        to a separate doubly linked list, also containing these special nodes.
        These child lists may have one or more children of their own, and so on,
        to produce a <strong>multilevel data structure</strong> as shown in the
        example below.
      </p>
      <p>
        Given the <code>head</code> of the first level of the list,{" "}
        <strong>flatten</strong> the list so that all the nodes appear in a
        single-level, doubly linked list. Let <code>curr</code> be a node with a
        child list. The nodes in the child list should appear{" "}
        <strong>after</strong> <code>curr</code> and <strong>before</strong>{" "}
        <code>curr.next</code> in the flattened list.
      </p>
      <p>
        Return <em>the </em>
        <code>head</code>
        <em>
          {" "}
          of the flattened list. The nodes in the list must have{" "}
          <strong>all</strong> of their child pointers set to{" "}
        </em>
        <code>null</code>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/11/09/flatten11.jpg"
        style={{ width: "700px", height: "339px" }}
      />
      <br />
      <pre>
        <strong>Input:</strong> head =
        [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
        <br />
        <strong>Output:</strong> [1,2,3,7,8,11,12,9,10,4,5,6]
        <br />
        <strong>Explanation:</strong> The multilevel linked list in the input is
        shown.
        <br />
        After flattening the multilevel linked list it becomes:
        <br />
        <img
          src="https://assets.leetcode.com/uploads/2021/11/09/flatten12.jpg"
          style={{ width: 1000, height: 69 }}
          alt="img"
        />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <br />
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/11/09/flatten2.1jpg"
        style={{ width: 200, height: 200 }}
      />
      <br />
      <pre>
        <strong>Input:</strong> head = [1,2,null,3]
        <br />
        <strong>Output:</strong> [1,3,2]
        <br />
        <strong>Explanation:</strong> The multilevel linked list in the input is
        shown.
        <br />
        After flattening the multilevel linked list it becomes:
        <br />
        <img
          src="https://assets.leetcode.com/uploads/2021/11/24/list.jpg"
          style={{ width: 300, height: 87 }}
          alt="img"
        />
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <br />
      <pre>
        <strong>Input:</strong> head = []
        <br />
        <strong>Output:</strong> []
        <br />
        <strong>Explanation:</strong> There could be empty list in the input.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of Nodes will not exceed <code>1000</code>.
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong>
          How the multilevel linked list is represented in test cases:
        </strong>
      </p>
      <p>
        We use the multilevel linked list from <strong>Example 1</strong> above:
      </p>
      <pre>
        {` 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL`}
      </pre>
      <p>The serialization of each level is as follows:</p>
      <pre>
        [1,2,3,4,5,6,null] <br />
        [7,8,9,10,null] <br />
        [11,12,null]
      </pre>
      <p>
        To serialize all levels together, we will add nulls in each level to
        signify no node connects to the upper node of the previous level. The
        serialization becomes:
      </p>
      <pre>
        {`[1,    2,    3, 4, 5, 6, null] 
             |
[null, null, 7,    8, 9, 10, null]
                   |
[            null, 11, 12, null]`}
      </pre>
      <p>
        Merging the serialization of each level and removing trailing nulls we
        obtain:
      </p>
      <pre>[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]</pre>
    </div>
  ),
  1472: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have a <strong>browser</strong> of one tab where you start on the{" "}
        <code>homepage</code> and you can visit another <code>url</code>, get
        back in the history number of <code>steps</code> or move forward in the
        history number of <code>steps</code>.
      </p>
      <p>
        Implement the <code>BrowserHistory</code> class:
      </p>
      <ul>
        <li>
          <code>BrowserHistory(string homepage)</code> Initializes the object
          with the <code>homepage</code>&nbsp;of the browser.
        </li>
        <li>
          <code>void visit(string url)</code>&nbsp;Visits&nbsp;<code>url</code>{" "}
          from the current page. It clears up all the forward history.
        </li>
        <li>
          <code>string back(int steps)</code>&nbsp;Move <code>steps</code> back
          in history. If you can only return <code>x</code> steps in the history
          and <code>steps &gt; x</code>, you will&nbsp;return only{" "}
          <code>x</code> steps. Return the current <code>url</code>&nbsp;after
          moving back in history <strong>at most</strong> <code>steps</code>.
        </li>
        <li>
          <code>string forward(int steps)</code>&nbsp;Move <code>steps</code>{" "}
          forward in history. If you can only forward <code>x</code> steps in
          the history and <code>steps &gt; x</code>, you will&nbsp;forward
          only&nbsp;<code>x</code> steps. Return the current <code>url</code>
          &nbsp;after forwarding in history <strong>at most</strong>{" "}
          <code>steps</code>.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong>
        <br />
        ["BrowserHistory","visit","visit","visit","back","back","forward","visit","forward","back","back"]
        <br />
        [["leetcode.com"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]]
        <br />
        <br />
        <strong>Output:</strong>
        <br />
        [null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","leetcode.com"]
        <br />
        <br />
        <strong>Explanation:</strong>
        <br />
        BrowserHistory browserHistory = new BrowserHistory("leetcode.com");
        <br />
        browserHistory.visit("google.com"); // You are in "leetcode.com". Visit
        "google.com"
        <br />
        browserHistory.visit("facebook.com"); // You are in "google.com". Visit
        "facebook.com"
        <br />
        browserHistory.visit("youtube.com"); // You are in "facebook.com". Visit
        "youtube.com"
        <br />
        browserHistory.back(1); // You are in "youtube.com", move back to
        "facebook.com" return "facebook.com"
        <br />
        browserHistory.back(1); // You are in "facebook.com", move back to
        "google.com" return "google.com"
        <br />
        browserHistory.forward(1); // You are in "google.com", move forward to
        "facebook.com" return "facebook.com"
        <br />
        browserHistory.visit("linkedin.com"); // You are in "facebook.com".
        Visit "linkedin.com"
        <br />
        browserHistory.forward(2); // You are in "linkedin.com", you cannot move
        forward any steps.
        <br />
        browserHistory.back(2); // You are in "linkedin.com", move back two
        steps to "facebook.com" then to "google.com". return "google.com"
        <br />
        browserHistory.back(7); // You are in "google.com", you can move back
        only one step to "leetcode.com". return "leetcode.com"
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= homepage.length &lt;= 20</code>
        </li>
        <li>
          <code>1 &lt;= url.length &lt;= 20</code>
        </li>
        <li>
          <code>1 &lt;= steps &lt;= 100</code>
        </li>
        <li>
          <code>homepage</code> and <code>url</code> consist of&nbsp; '.' or
          lower case English letters.
        </li>
        <li>
          At most <code>5000</code>&nbsp;calls will be made to{" "}
          <code>visit</code>, <code>back</code>, and <code>forward</code>.
        </li>
      </ul>
    </div>
  ),
  2296: (
    <div class="elfjS" data-track-load="description_content">
      <p>Design a text editor with a cursor that can do the following:</p>

      <ul>
        <li>
          <strong>Add</strong> text to where the cursor is.
        </li>
        <li>
          <strong>Delete</strong> text from where the cursor is (simulating the
          backspace key).
        </li>
        <li>
          <strong>Move</strong> the cursor either left or right.
        </li>
      </ul>

      <p>
        When deleting text, only characters to the left of the cursor will be
        deleted. The cursor will also remain within the actual text and cannot
        be moved beyond it. More formally, we have that{" "}
        <code>0 &lt;= cursor.position &lt;= currentText.length</code> always
        holds.
      </p>

      <p>
        Implement the <code>TextEditor</code> class:
      </p>

      <ul>
        <li>
          <code>TextEditor()</code> Initializes the object with empty text.
        </li>
        <li>
          <code>void addText(string text)</code> Appends <code>text</code> to
          where the cursor is. The cursor ends to the right of <code>text</code>
          .
        </li>
        <li>
          <code>int deleteText(int k)</code> Deletes <code>k</code> characters
          to the left of the cursor. Returns the number of characters actually
          deleted.
        </li>
        <li>
          <code>string cursorLeft(int k)</code> Moves the cursor to the left{" "}
          <code>k</code> times. Returns the last <code>min(10, len)</code>{" "}
          characters to the left of the cursor, where <code>len</code> is the
          number of characters to the left of the cursor.
        </li>
        <li>
          <code>string cursorRight(int k)</code> Moves the cursor to the right{" "}
          <code>k</code> times. Returns the last <code>min(10, len)</code>{" "}
          characters to the left of the cursor, where <code>len</code> is the
          number of characters to the left of the cursor.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["TextEditor", "addText", "deleteText", "addText", "cursorRight",
        "cursorLeft", "deleteText", "cursorLeft", "cursorRight"] <br />
        [[], ["leetcode"], [4], ["practice"], [3], [8], [10], [2], [6]] <br />{" "}
        <br />
        <strong>Output</strong> <br />
        [null, null, 4, null, "etpractice", "leet", 4, "", "practi"] <br />{" "}
        <br />
        <strong>Explanation</strong> <br />
        TextEditor textEditor = new TextEditor(); // The current text is "|".
        (The '|' character represents the cursor) <br />
        textEditor.addText("leetcode"); // The current text is "leetcode|".{" "}
        <br />
        textEditor.deleteText(4); // return 4 <br />
        // The current text is "leet|". <br />
        // 4 characters were deleted. <br />
        textEditor.addText("practice"); // The current text is "leetpractice|".{" "}
        <br />
        textEditor.cursorRight(3); // return "etpractice" <br />
        // The current text is "leetpractice|". <br />
        // The cursor cannot be moved beyond the actual text and thus did not
        move. <br />
        // "etpractice" is the last 10 characters to the left of the cursor.{" "}
        <br />
        textEditor.cursorLeft(8); // return "leet" <br />
        // The current text is "leet|practice". <br />
        // "leet" is the last min(10, 4) = 4 characters to the left of the
        cursor. <br />
        textEditor.deleteText(10); // return 4 <br />
        // The current text is "|practice". <br />
        // Only 4 characters were deleted. <br />
        textEditor.cursorLeft(2); // return "" <br />
        // The current text is "|practice". <br />
        // The cursor cannot be moved beyond the actual text and thus did not
        move. <br />
        // "" is the last min(10, 0) = 0 characters to the left of the cursor.{" "}
        <br />
        textEditor.cursorRight(6); // return "practi" <br />
        // The current text is "practi|ce". <br />
        // "practi" is the last min(10, 6) = 6 characters to the left of the
        cursor.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= text.length, k &lt;= 40</code>
        </li>
        <li>
          <code>text</code> consists of lowercase English letters.
        </li>
        <li>
          At most{" "}
          <code>
            2 * 10<sup>4</sup>
          </code>{" "}
          calls <strong>in total</strong> will be made to <code>addText</code>,{" "}
          <code>deleteText</code>, <code>cursorLeft</code> and{" "}
          <code>cursorRight</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow-up:</strong> Could you find a solution with time
        complexity of <code>O(k)</code> per call?
      </p>
    </div>
  ),
  1114: (
    <div class="elfjS" data-track-load="description_content">
      <p>Suppose we have a class:</p>
      <pre>
        public class Foo &#123; <br />
        &nbsp; public void first() &#123; print("first"); &#125;
        <br />
        &nbsp; public void second() &#123; print("second"); &#125;
        <br />
        &nbsp; public void third() &#123; print("third"); &#125;
        <br />
        &#125;
      </pre>
      <p>
        The same instance of <code>Foo</code> will be passed to three different
        threads. Thread A will call <code>first()</code>, thread B will call{" "}
        <code>second()</code>, and thread C will call <code>third()</code>.
        Design a mechanism and modify the program to ensure that{" "}
        <code>second()</code> is executed after <code>first()</code>, and{" "}
        <code>third()</code> is executed after <code>second()</code>.
      </p>
      <p>
        <strong>Note:</strong>
      </p>
      <p>
        We do not know how the threads will be scheduled in the operating
        system, even though the numbers in the input seem to imply the ordering.
        The input format you see is mainly to ensure our tests'
        comprehensiveness.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> "firstsecondthird" <br />
        <strong>Explanation:</strong> There are three threads being fired
        asynchronously. The input [1,2,3] means thread A calls first(), thread B
        calls second(), and thread C calls third(). "firstsecondthird" is the
        correct output.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <pre>
        <strong>Input:</strong> nums = [1,3,2] <br />
        <strong>Output:</strong> "firstsecondthird" <br />
        <strong>Explanation:</strong> The input [1,3,2] means thread A calls
        first(), thread B calls third(), and thread C calls second().
        "firstsecondthird" is the correct output.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>nums</code> is a permutation of <code>[1, 2, 3]</code>.
        </li>
      </ul>
    </div>
  ),
  1115: (
    <div class="elfjS" data-track-load="description_content">
      <p>Suppose you are given the following code:</p>

      <pre>
        class FooBar &#123; <br />
        &nbsp; public void foo() &#123;
        <br />
        &nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; n; i++) &#123;
        <br />
        &nbsp; &nbsp;&nbsp;&nbsp;print("foo");
        <br />
        &nbsp;&nbsp; &#125;
        <br />
        &nbsp;&nbsp;&#125;
        <br />
        &nbsp; public void bar() &#123; &nbsp; <br />
        &nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; n; i++) &#123;
        <br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("bar");
        <br />
        &nbsp;&nbsp; &#125;
        <br />
        &nbsp; &#125;
        <br />
        &#125;
      </pre>

      <p>
        The same instance of <code>FooBar</code> will be passed to two different
        threads:
      </p>

      <ul>
        <li>
          thread <code>A</code> will call <code>foo()</code>, while
        </li>
        <li>
          thread <code>B</code> will call <code>bar()</code>.
        </li>
      </ul>

      <p>
        Modify the given program to output <code>"foobar"</code> <code>n</code>{" "}
        times.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> "foobar" <br />
        <strong>Explanation:</strong> There are two threads being fired
        asynchronously. One of them calls foo(), while the other calls bar().
        "foobar" is being output 1 time.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> "foobarfoobar" <br />
        <strong>Explanation:</strong> "foobar" is being output 2 times.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1116: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have a function <code>printNumber</code> that can be called with an
        integer parameter and prints it to the console.
      </p>

      <ul>
        <li>
          For example, calling <code>printNumber(7)</code> prints <code>7</code>{" "}
          to the console.
        </li>
      </ul>

      <p>
        You are given an instance of the class <code>ZeroEvenOdd</code> that has
        three functions: <code>zero</code>, <code>even</code>, and{" "}
        <code>odd</code>. The same instance of <code>ZeroEvenOdd</code> will be
        passed to three different threads:
      </p>

      <ul>
        <li>
          <strong>Thread A:</strong> calls <code>zero()</code> that should only
          output <code>0</code>'s.
        </li>
        <li>
          <strong>Thread B:</strong> calls <code>even()</code> that should only
          output even numbers.
        </li>
        <li>
          <strong>Thread C:</strong> calls <code>odd()</code> that should only
          output odd numbers.
        </li>
      </ul>

      <p>
        Modify the given class to output the series{" "}
        <code>"010203040506..."</code> where the length of the series must be{" "}
        <code>2n</code>.
      </p>

      <p>
        Implement the <code>ZeroEvenOdd</code> class:
      </p>

      <ul>
        <li>
          <code>ZeroEvenOdd(int n)</code> Initializes the object with the number{" "}
          <code>n</code> that represents the numbers that should be printed.
        </li>
        <li>
          <code>void zero(printNumber)</code> Calls <code>printNumber</code> to
          output one zero.
        </li>
        <li>
          <code>void even(printNumber)</code> Calls <code>printNumber</code> to
          output one even number.
        </li>
        <li>
          <code>void odd(printNumber)</code> Calls <code>printNumber</code> to
          output one odd number.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> "0102" <br />
        <strong>Explanation:</strong> There are three threads being fired
        asynchronously. <br />
        One of them calls zero(), the other calls even(), and the last one calls
        odd(). <br />
        "0102" is the correct output.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 5 <br />
        <strong>Output:</strong> "0102030405"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1117: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are two kinds of threads: <code>oxygen</code> and{" "}
        <code>hydrogen</code>. Your goal is to group these threads to form water
        molecules.
      </p>

      <p>
        There is a barrier where each thread has to wait until a complete
        molecule can be formed. Hydrogen and oxygen threads will be given{" "}
        <code>releaseHydrogen</code> and <code>releaseOxygen</code> methods
        respectively, which will allow them to pass the barrier. These threads
        should pass the barrier in groups of three, and they must immediately
        bond with each other to form a water molecule. You must guarantee that
        all the threads from one molecule bond before any other threads from the
        next molecule do.
      </p>

      <p>In other words:</p>

      <ul>
        <li>
          If an oxygen thread arrives at the barrier when no hydrogen threads
          are present, it must wait for two hydrogen threads.
        </li>
        <li>
          If a hydrogen thread arrives at the barrier when no other threads are
          present, it must wait for an oxygen thread and another hydrogen
          thread.
        </li>
      </ul>

      <p>
        We do not have to worry about matching the threads up explicitly; the
        threads do not necessarily know which other threads they are paired up
        with. The key is that threads pass the barriers in complete sets; thus,
        if we examine the sequence of threads that bind and divide them into
        groups of three, each group should contain one oxygen and two hydrogen
        threads.
      </p>

      <p>
        Write synchronization code for oxygen and hydrogen molecules that
        enforces these constraints.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> water = "HOH" <br />
        <strong>Output:</strong> "HHO" <br />
        <strong>Explanation:</strong> "HOH" and "OHH" are also valid answers.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> water = "OOHHHH"
        <br />
        <strong>Output:</strong> "HHOHHO"
        <br />
        <strong>Explanation:</strong> "HOHHHO", "OHHHHO", "HHOHOH", "HOHHOH",
        "OHHHOH", "HHOOHH", "HOHOHH" and "OHHOHH" are also valid answers.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>3 * n == water.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 20</code>
        </li>
        <li>
          <code>water[i]</code> is either <code>'H'</code> or <code>'O'</code>.
        </li>
        <li>
          There will be exactly <code>2 * n</code> <code>'H'</code> in{" "}
          <code>water</code>.
        </li>
        <li>
          There will be exactly <code>n</code> <code>'O'</code> in{" "}
          <code>water</code>.
        </li>
      </ul>
    </div>
  ),
  1195: (
    <div class="elfjS" data-track-load="description_content">
      <p>You have the four functions:</p>

      <ul>
        <li>
          <code>printFizz</code> that prints the word <code>"fizz"</code> to the
          console,
        </li>
        <li>
          <code>printBuzz</code> that prints the word <code>"buzz"</code> to the
          console,
        </li>
        <li>
          <code>printFizzBuzz</code> that prints the word{" "}
          <code>"fizzbuzz"</code> to the console, and
        </li>
        <li>
          <code>printNumber</code> that prints a given integer to the console.
        </li>
      </ul>

      <p>
        You are given an instance of the class <code>FizzBuzz</code> that has
        four functions: <code>fizz</code>, <code>buzz</code>,{" "}
        <code>fizzbuzz</code> and <code>number</code>. The same instance of{" "}
        <code>FizzBuzz</code> will be passed to four different threads:
      </p>

      <ul>
        <li>
          <strong>Thread A:</strong> calls <code>fizz()</code> that should
          output the word <code>"fizz"</code>.
        </li>
        <li>
          <strong>Thread B:</strong> calls <code>buzz()</code> that should
          output the word <code>"buzz"</code>.
        </li>
        <li>
          <strong>Thread C:</strong> calls <code>fizzbuzz()</code> that should
          output the word <code>"fizzbuzz"</code>.
        </li>
        <li>
          <strong>Thread D:</strong> calls <code>number()</code> that should
          only output the integers.
        </li>
      </ul>

      <p>
        Modify the given class to output the series{" "}
        <code>[1, 2, "fizz", 4, "buzz", ...]</code> where the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        token (<strong>1-indexed</strong>) of the series is:
      </p>

      <ul>
        <li>
          <code>"fizzbuzz"</code> if <code>i</code> is divisible by{" "}
          <code>3</code> and <code>5</code>,
        </li>
        <li>
          <code>"fizz"</code> if <code>i</code> is divisible by <code>3</code>{" "}
          and not <code>5</code>,
        </li>
        <li>
          <code>"buzz"</code> if <code>i</code> is divisible by <code>5</code>{" "}
          and not <code>3</code>, or
        </li>
        <li>
          <code>i</code> if <code>i</code> is not divisible by <code>3</code> or{" "}
          <code>5</code>.
        </li>
      </ul>

      <p>
        Implement the <code>FizzBuzz</code> class:
      </p>

      <ul>
        <li>
          <code>FizzBuzz(int n)</code> Initializes the object with the number{" "}
          <code>n</code> that represents the length of the sequence that should
          be printed.
        </li>
        <li>
          <code>void fizz(printFizz)</code> Calls <code>printFizz</code> to
          output <code>"fizz"</code>.
        </li>
        <li>
          <code>void buzz(printBuzz)</code> Calls <code>printBuzz</code> to
          output <code>"buzz"</code>.
        </li>
        <li>
          <code>void fizzbuzz(printFizzBuzz)</code> Calls{" "}
          <code>printFizzBuzz</code> to output <code>"fizzbuzz"</code>.
        </li>
        <li>
          <code>void number(printNumber)</code> Calls <code>printnumber</code>{" "}
          to output the numbers.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 15
        <br />
        <strong>Output:</strong>{" "}
        [1,2,"fizz",4,"buzz","fizz",7,8,"fizz","buzz",11,"fizz",13,14,"fizzbuzz"]
        <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 5<br />
        <strong>Output:</strong> [1,2,"fizz",4,"buzz"]
        <br />
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  1226: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Five silent philosophers&nbsp;sit at a round table with bowls of
        spaghetti. Forks are placed between each pair of adjacent philosophers.
      </p>

      <p>
        Each philosopher must alternately think and eat. However, a philosopher
        can only eat spaghetti when they have both left and right forks. Each
        fork can be held by only one philosopher and so a philosopher can use
        the fork only if it is not being used by another philosopher. After an
        individual philosopher finishes eating, they need to put down both forks
        so that the forks become available to others. A philosopher can take the
        fork on their right or the one on their left as they become available,
        but cannot start eating before getting both forks.
      </p>

      <p>
        Eating is not limited by the remaining amounts of spaghetti or stomach
        space; an infinite supply and an infinite demand are assumed.
      </p>

      <p>
        Design a discipline of behaviour (a concurrent algorithm) such that no
        philosopher will starve;&nbsp;<i>i.e.</i>, each can forever continue to
        alternate between eating and thinking, assuming that no philosopher can
        know when others may want to eat or think.
      </p>

      <p style={{ textAlign: "center" }}>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/09/24/an_illustration_of_the_dining_philosophers_problem.png"
          style={{ width: 400, height: 415 }}
        />
      </p>

      <p style={{ textAlign: "center" }}>
        <em>
          The problem statement and the image above are taken from{" "}
          <a
            href="https://en.wikipedia.org/wiki/Dining_philosophers_problem"
            target="_blank"
            rel="noreferrer"
          >
            wikipedia.org
          </a>
        </em>
      </p>

      <p>&nbsp;</p>

      <p>
        The philosophers' ids are numbered from <strong>0</strong> to{" "}
        <strong>4</strong> in a <strong>clockwise</strong> order. Implement the
        function&nbsp;
        <code>
          void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat,
          putLeftFork, putRightFork)
        </code>{" "}
        where:
      </p>

      <ul>
        <li>
          <code>philosopher</code>&nbsp;is the id of the philosopher who wants
          to eat.
        </li>
        <li>
          <code>pickLeftFork</code>&nbsp;and&nbsp;<code>pickRightFork</code>
          &nbsp;are functions you can call to pick the corresponding forks of
          that philosopher.
        </li>
        <li>
          <code>eat</code>&nbsp;is a function you can call to let the
          philosopher eat once he has picked&nbsp;both forks.
        </li>
        <li>
          <code>putLeftFork</code>&nbsp;and&nbsp;<code>putRightFork</code>
          &nbsp;are functions you can call to put down the corresponding forks
          of that philosopher.
        </li>
        <li>
          The philosophers are assumed to be thinking as long as they are not
          asking to eat (the function is not being called with their number).
        </li>
      </ul>

      <p>
        Five threads, each representing a philosopher, will&nbsp;simultaneously
        use one object of your class to simulate the process. The function may
        be called for the same philosopher more than once, even before the last
        call ends.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong>{" "}
        [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]
        <br />
        <strong>Explanation:</strong>n is the number of times each philosopher
        will call the function. The output array describes the calls you made to
        the functions controlling the forks and the eat function, its format is:
        output[i] = [a, b, c] (three integers) - a is the id of a philosopher. -
        b specifies the fork: &#123;1 : left, 2 : right&#125;. - c specifies the
        operation: &#123;1 : pick, 2 : put, 3 : eat&#125;.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 60</code>
        </li>
      </ul>
    </div>
  ),
  173: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Implement the <code>BSTIterator</code> class that represents an iterator
        over the{" "}
        <strong>
          <a
            href="https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR)"
            target="_blank"
            rel="noreferrer"
          >
            in-order traversal
          </a>
        </strong>{" "}
        of a binary search tree (BST):
      </p>

      <ul>
        <li>
          <code>BSTIterator(TreeNode root)</code> Initializes an object of the{" "}
          <code>BSTIterator</code> class. The <code>root</code> of the BST is
          given as part of the constructor. The pointer should be initialized to
          a non-existent number smaller than any element in the BST.
        </li>
        <li>
          <code>boolean hasNext()</code> Returns <code>true</code> if there
          exists a number in the traversal to the right of the pointer,
          otherwise returns <code>false</code>.
        </li>
        <li>
          <code>int next()</code> Moves the pointer to the right, then returns
          the number at the pointer.
        </li>
      </ul>

      <p>
        Notice that by initializing the pointer to a non-existent smallest
        number, the first call to <code>next()</code> will return the smallest
        element in the BST.
      </p>

      <p>
        You may assume that <code>next()</code> calls will always be valid. That
        is, there will be at least a next number in the in-order traversal when{" "}
        <code>next()</code> is called.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png"
        style={{ width: 189, height: 178 }}
      />
      <pre>
        <strong>Input</strong> <br />
        ["BSTIterator", "next", "next", "hasNext", "next", "hasNext", "next",
        "hasNext", "next", "hasNext"] <br />
        [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]
        <br /> <br />
        <strong>Output</strong>
        <br />
        [null, 3, 7, true, 9, true, 15, true, 20, false] <br /> <br />
        <strong>Explanation</strong> <br />
        BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9,
        20]);
        <br />
        bSTIterator.next(); // return 3<br />
        bSTIterator.next(); // return 7<br />
        bSTIterator.hasNext(); // return True
        <br />
        bSTIterator.next(); // return 9<br />
        bSTIterator.hasNext(); // return True
        <br />
        bSTIterator.next(); // return 15
        <br />
        bSTIterator.hasNext(); // return True
        <br />
        bSTIterator.next(); // return 20
        <br />
        bSTIterator.hasNext(); // return False
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            0 &lt;= Node.val &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>5</sup>
          </code>{" "}
          calls will be made to <code>hasNext</code>, and <code>next</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <ul>
        <li>
          Could you implement <code>next()</code> and <code>hasNext()</code> to
          run in average <code>O(1)</code> time and use&nbsp;<code>O(h)</code>{" "}
          memory, where <code>h</code> is the height of the tree?
        </li>
      </ul>
    </div>
  ),
  284: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design an iterator that supports the <code>peek</code> operation on an
        existing iterator in addition to the <code>hasNext</code> and the{" "}
        <code>next</code> operations.
      </p>
      <p>
        Implement the <code>PeekingIterator</code> class:
      </p>
      <ul>
        <li>
          <code>PeekingIterator(Iterator&lt;int&gt; nums)</code> Initializes the
          object with the given integer iterator <code>iterator</code>.
        </li>
        <li>
          <code>int next()</code> Returns the next element in the array and
          moves the pointer to the next element.
        </li>
        <li>
          <code>boolean hasNext()</code> Returns <code>true</code> if there are
          still elements in the array.
        </li>
        <li>
          <code>int peek()</code> Returns the next element in the array{" "}
          <strong>without</strong> moving the pointer.
        </li>
      </ul>
      <p>
        <strong>Note:</strong> Each language may have a different implementation
        of the constructor and <code>Iterator</code>, but they all support the{" "}
        <code>int next()</code> and <code>boolean hasNext()</code> functions.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input</strong> <br />
        ["PeekingIterator", "next", "peek", "next", "next", "hasNext"] <br />
        [[[1, 2, 3]], [], [], [], [], []] <br />
        <strong>Output</strong> <br />
        [null, 1, 2, 2, 3, false] <br />
        <strong>Explanation</strong> <br />
        PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [
        <u>
          <strong>1</strong>
        </u>
        ,2,3] <br />
        peekingIterator.next(); // return 1, the pointer moves to the next
        element [1,
        <u>
          <strong>2</strong>
        </u>
        ,3]. <br />
        peekingIterator.peek(); // return 2, the pointer does not move [1,
        <u>
          <strong>2</strong>
        </u>
        ,3]. <br />
        peekingIterator.next(); // return 2, the pointer moves to the next
        element [1,2,
        <u>
          <strong>3</strong>
        </u>
        ] <br />
        peekingIterator.next(); // return 3, the pointer moves to the next
        element [1,2,3] peekingIterator.hasNext(); // return False
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 1000</code>
        </li>
        <li>
          All the calls to <code>next</code> and <code>peek</code> are valid.
        </li>
        <li>
          At most <code>1000</code> calls will be made to <code>next</code>,{" "}
          <code>hasNext</code>, and <code>peek</code>.
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> How would you extend your design to be generic
      and work with all types, not just integer?
    </div>
  ),
  341: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a nested list of integers <code>nestedList</code>. Each
        element is either an integer or a list whose elements may also be
        integers or other lists. Implement an iterator to flatten it.
      </p>

      <p>
        Implement the <code>NestedIterator</code> class:
      </p>

      <ul>
        <li>
          <code>NestedIterator(List&lt;NestedInteger&gt; nestedList)</code>{" "}
          Initializes the iterator with the nested list <code>nestedList</code>.
        </li>
        <li>
          <code>int next()</code> Returns the next integer in the nested list.
        </li>
        <li>
          <code>boolean hasNext()</code> Returns <code>true</code> if there are
          still some integers in the nested list and <code>false</code>{" "}
          otherwise.
        </li>
      </ul>

      <p>Your code will be tested with the following pseudocode:</p>

      <pre>
        initialize iterator with nestedList res = [] while iterator.hasNext()
        append iterator.next() to the end of res return res
      </pre>

      <p>
        If <code>res</code> matches the expected flattened list, then your code
        will be judged as correct.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nestedList = [[1,1],2,[1,1]] <br />
        <strong>Output:</strong> [1,1,2,1,1] <br />
        <strong>Explanation:</strong> By calling next repeatedly until hasNext
        returns false, the order of elements returned by next should be:
        [1,1,2,1,1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nestedList = [1,[4,[6]]] <br />
        <strong>Output:</strong> [1,4,6] <br />
        <strong>Explanation:</strong> By calling next repeatedly until hasNext
        returns false, the order of elements returned by next should be:
        [1,4,6].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nestedList.length &lt;= 500</code>
        </li>
        <li>
          The values of the integers in the nested list is in the range{" "}
          <code>
            [-10<sup>6</sup>, 10<sup>6</sup>]
          </code>
          .
        </li>
      </ul>
    </div>
  ),
  900: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        We can use run-length encoding (i.e., <strong>RLE</strong>) to encode a
        sequence of integers. In a run-length encoded array of even length{" "}
        <code>encoding</code> (<strong>0-indexed</strong>), for all even{" "}
        <code>i</code>, <code>encoding[i]</code> tells us the number of times
        that the non-negative integer value <code>encoding[i + 1]</code> is
        repeated in the sequence.
      </p>

      <ul>
        <li>
          For example, the sequence <code>arr = [8,8,8,5,5]</code> can be
          encoded to be <code>encoding = [3,8,2,5]</code>.{" "}
          <code>encoding = [3,8,0,9,2,5]</code> and{" "}
          <code>encoding = [2,8,1,8,2,5]</code> are also valid{" "}
          <strong>RLE</strong> of <code>arr</code>.
        </li>
      </ul>

      <p>
        Given a run-length encoded array, design an iterator that iterates
        through it.
      </p>

      <p>
        Implement the <code>RLEIterator</code> class:
      </p>

      <ul>
        <li>
          <code>RLEIterator(int[] encoded)</code> Initializes the object with
          the encoded array <code>encoded</code>.
        </li>
        <li>
          <code>int next(int n)</code> Exhausts the next <code>n</code> elements
          and returns the last element exhausted in this way. If there is no
          element left to exhaust, return <code>-1</code> instead.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["RLEIterator", "next", "next", "next", "next"]
        <br />
        [[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]
        <br />
        <strong>Output</strong>
        <br />
        [null, 8, 8, 5, -1]
        <br />
        <strong>Explanation</strong>
        <br />
        RLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This
        maps to the sequence [8,8,8,5,5].
        <br />
        rLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8.
        The remaining sequence is now [8, 5, 5].
        <br />
        rLEIterator.next(1); // exhausts 1 term of the sequence, returning 8.
        The remaining sequence is now [5, 5].
        <br />
        rLEIterator.next(1); // exhausts 1 term of the sequence, returning 5.
        The remaining sequence is now [5].
        <br />
        rLEIterator.next(2); // exhausts 2 terms, returning -1. This is because
        the first term exhausted was 5,
        <br />
        but the second term did not exist. Since the last term exhausted does
        not exist, we return -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= encoding.length &lt;= 1000</code>
        </li>
        <li>
          <code>encoding.length</code> is even.
        </li>
        <li>
          <code>
            0 &lt;= encoding[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          At most <code>1000</code> calls will be made to <code>next</code>.
        </li>
      </ul>
    </div>
  ),
  1286: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design the <code>CombinationIterator</code> class:
      </p>

      <ul>
        <li>
          <code>
            CombinationIterator(string characters, int combinationLength)
          </code>{" "}
          Initializes the object with a string <code>characters</code> of{" "}
          <strong>sorted distinct</strong> lowercase English letters and a
          number <code>combinationLength</code> as arguments.
        </li>
        <li>
          <code>next()</code> Returns the next combination of length{" "}
          <code>combinationLength</code> in{" "}
          <strong>lexicographical order</strong>.
        </li>
        <li>
          <code>hasNext()</code> Returns <code>true</code> if and only if there
          exists a next combination.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["CombinationIterator", "next", "hasNext", "next", "hasNext", "next",
        "hasNext"] <br />
        [["abc", 2], [], [], [], [], [], []] <br />
        <strong>Output</strong> <br />
        [null, "ab", true, "ac", true, "bc", false] <br />
        <strong>Explanation</strong> <br />
        CombinationIterator itr = new CombinationIterator("abc", 2); <br />
        itr.next(); // return "ab" <br />
        itr.hasNext(); // return True <br />
        itr.next(); // return "ac" <br />
        itr.hasNext(); // return True <br />
        itr.next(); // return "bc" <br />
        itr.hasNext(); // return False
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= combinationLength &lt;= characters.length &lt;= 15
          </code>
        </li>
        <li>
          All the characters of <code>characters</code> are{" "}
          <strong>unique</strong>.
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>next</code> and <code>hasNext</code>.
        </li>
        <li>
          It is guaranteed that all calls of the function <code>next</code> are
          valid.
        </li>
      </ul>
    </div>
  ),
  23: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of <code>k</code> linked-lists <code>lists</code>
        , each linked-list is sorted in ascending order.
      </p>

      <p>
        <em>
          Merge all the linked-lists into one sorted linked-list and return it.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> lists = [[1,4,5],[1,3,4],[2,6]] <br />
        <strong>Output:</strong> [1,1,2,3,4,4,5,6] <br />
        <strong>Explanation:</strong> The linked-lists are: <br />
        [ <br />
        &nbsp; 1-&gt;4-&gt;5, <br />
        &nbsp; 1-&gt;3-&gt;4, <br />
        &nbsp; 2-&gt;6 <br />
        ] <br />
        merging them into one sorted list: <br />
        1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6 <br />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> lists = [] <br />
        <strong>Output:</strong> [] <br />
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> lists = [[]] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>k == lists.length</code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= lists[i].length &lt;= 500</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= lists[i][j] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>lists[i]</code> is sorted in <strong>ascending order</strong>.
        </li>
        <li>
          The sum of <code>lists[i].length</code> will not exceed{" "}
          <code>
            10<sup>4</sup>
          </code>
          .
        </li>
      </ul>
    </div>
  ),
  148: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a linked list, return{" "}
        <em>
          the list after sorting it in <strong>ascending order</strong>
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg"
        style={{ width: 450, height: 194 }}
      />
      <pre>
        <strong>Input:</strong> head = [4,2,1,3] <br />
        <strong>Output:</strong> [1,2,3,4]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg"
        style={{ width: 550, height: 184 }}
      />{" "}
      <pre>
        <strong>Input:</strong> head = [-1,5,3,4,0]
        <br />
        <strong>Output:</strong> [-1,0,3,4,5]
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> head = []
        <br />
        <strong>Output:</strong> []
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the list is in the range{" "}
          <code>
            [0, 5 * 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Can you sort the linked list in{" "}
        <code>O(n logn)</code> time and <code>O(1)</code> memory (i.e. constant
        space)?
      </p>
    </div>
  ),
  315: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return
        <em> an integer array </em>
        <code>counts</code>
        <em> where </em>
        <code>counts[i]</code>
        <em> is the number of smaller elements to the right of </em>
        <code>nums[i]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,2,6,1] <br />
        <strong>Output:</strong> [2,1,1,0]
        <br />
        <strong>Explanation:</strong>
        <br />
        To the right of 5 there are <b>2</b> smaller elements (2 and 1).
        <br />
        To the right of 2 there is only <b>1</b> smaller element (1).
        <br />
        To the right of 6 there is <b>1</b> smaller element (1).
        <br />
        To the right of 1 there is <b>0</b> smaller element.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-1]
        <br />
        <strong>Output:</strong> [0]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-1,-1]
        <br />
        <strong>Output:</strong> [0,0]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  327: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and two integers{" "}
        <code>lower</code> and <code>upper</code>, return{" "}
        <em>the number of range sums that lie in</em>{" "}
        <code>[lower, upper]</code> <em>inclusive</em>.
      </p>

      <p>
        Range sum <code>S(i, j)</code> is defined as the sum of the elements in{" "}
        <code>nums</code> between indices <code>i</code> and <code>j</code>{" "}
        inclusive, where <code>i &lt;= j</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-2,5,-1], lower = -2, upper = 2 <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The three ranges are: [0,0], [2,2], and
        [0,2] and their respective sums are: -2, -1, 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0], lower = 0, upper = 0<br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= lower &lt;= upper &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          The answer is <strong>guaranteed</strong> to fit in a{" "}
          <strong>32-bit</strong> integer.
        </li>
      </ul>
    </div>
  ),
  493: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return{" "}
        <em>
          the number of <strong>reverse pairs</strong> in the array
        </em>
        .
      </p>

      <p>
        A <strong>reverse pair</strong> is a pair <code>(i, j)</code> where:
      </p>

      <ul>
        <li>
          <code>0 &lt;= i &lt; j &lt; nums.length</code> and
        </li>
        <li>
          <code>nums[i] &gt; 2 * nums[j]</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,2,3,1] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The reverse pairs are: <br />
        (1, 4) --&gt; nums[1] = 3, nums[4] = 1, 3 &gt; 2 * 1 <br />
        (3, 4) --&gt; nums[3] = 3, nums[4] = 1, 3 &gt; 2 * 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,4,3,5,1] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The reverse pairs are: <br />
        (1, 4) --&gt; nums[1] = 4, nums[4] = 1, 4 &gt; 2 * 1 <br />
        (2, 4) --&gt; nums[2] = 3, nums[4] = 1, 3 &gt; 2 * 1 <br />
        (3, 4) --&gt; nums[3] = 5, nums[4] = 1, 5 &gt; 2 * 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  1649: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>instructions</code>, you are asked to
        create a sorted array from the elements in <code>instructions</code>.
        You start with an empty container <code>nums</code>. For each element
        from <strong>left to right</strong> in <code>instructions</code>, insert
        it into <code>nums</code>. The <strong>cost</strong> of each insertion
        is the <b>minimum</b> of the following:
      </p>

      <ul>
        <li>
          The number of elements currently in <code>nums</code> that are{" "}
          <strong>strictly less than</strong> <code>instructions[i]</code>.
        </li>
        <li>
          The number of elements currently in <code>nums</code> that are{" "}
          <strong>strictly greater than</strong> <code>instructions[i]</code>.
        </li>
      </ul>

      <p>
        For example, if inserting element <code>3</code> into{" "}
        <code>nums = [1,2,3,5]</code>, the <strong>cost</strong> of insertion is{" "}
        <code>min(2, 1)</code> (elements <code>1</code> and <code>2</code> are
        less than <code>3</code>, element <code>5</code> is greater than{" "}
        <code>3</code>) and <code>nums</code> will become{" "}
        <code>[1,2,3,3,5]</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>total cost</strong> to insert all elements from{" "}
        </em>
        <code>instructions</code>
        <em> into </em>
        <code>nums</code>. Since the answer may be large, return it{" "}
        <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> instructions = [1,5,6,2] <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> Begin with nums = [].
        <br />
        Insert 1 with cost min(0, 0) = 0, now nums = [1].
        <br />
        Insert 5 with cost min(1, 0) = 0, now nums = [1,5].
        <br />
        Insert 6 with cost min(2, 0) = 0, now nums = [1,5,6].
        <br />
        Insert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6]. The total cost
        is 0 + 0 + 0 + 1 = 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> instructions = [1,2,3,6,5,4]
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> Begin with nums = [].
        <br />
        Insert 1 with cost min(0, 0) = 0, now nums = [1].
        <br />
        Insert 2 with cost min(1, 0) = 0, now nums = [1,2].
        <br />
        Insert 3 with cost min(2, 0) = 0, now nums = [1,2,3].
        <br />
        Insert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].
        <br />
        Insert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].
        <br />
        Insert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].
        <br />
        The total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> instructions = [1,3,3,3,2,4,2,1,2]
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> Begin with nums = [].
        <br />
        Insert 1 with cost min(0, 0) = 0, now nums = [1].
        <br />
        Insert 3 with cost min(1, 0) = 0, now nums = [1,3].
        <br />
        Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3].
        <br />
        Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].
        <br />
        Insert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].
        <br />
        Insert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].
        <br />
        ​​​​​​​Insert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].
        <br />
        ​​​​​​​Insert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].
        <br />
        ​​​​​​​Insert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].
        <br />
        The total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= instructions.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= instructions[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2179: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two <strong>0-indexed</strong> arrays <code>nums1</code>{" "}
        and <code>nums2</code> of length <code>n</code>, both of which are{" "}
        <strong>permutations</strong> of <code>[0, 1, ..., n - 1]</code>.
      </p>

      <p>
        A <strong>good triplet</strong> is a set of <code>3</code>{" "}
        <strong>distinct</strong> values which are present in{" "}
        <strong>increasing order</strong> by position both in <code>nums1</code>{" "}
        and <code>nums2</code>. In other words, if we consider{" "}
        <code>
          pos1<sub>v</sub>
        </code>{" "}
        as the index of the value <code>v</code> in <code>nums1</code> and{" "}
        <code>
          pos2<sub>v</sub>
        </code>{" "}
        as the index of the value <code>v</code> in <code>nums2</code>, then a
        good triplet will be a set <code>(x, y, z)</code> where{" "}
        <code>0 &lt;= x, y, z &lt;= n - 1</code>, such that{" "}
        <code>
          pos1<sub>x</sub> &lt; pos1<sub>y</sub> &lt; pos1<sub>z</sub>
        </code>{" "}
        and{" "}
        <code>
          pos2<sub>x</sub> &lt; pos2<sub>y</sub> &lt; pos2<sub>z</sub>
        </code>
        .
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>total number</strong> of good triplets
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [2,0,1,3], nums2 = [0,1,2,3] <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> <br />
        There are 4 triplets (x,y,z) such that pos1<sub>x</sub> &lt; pos1
        <sub>y</sub> &lt; pos1<sub>z</sub>. They are (2,0,1), (2,0,3), (2,1,3),
        and (0,1,3). Out of those triplets, only the triplet (0,1,3) satisfies
        pos2<sub>x</sub> &lt; pos2<sub>y</sub> &lt; pos2<sub>z</sub>. Hence,
        there is only 1 good triplet.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> The 4 good triplets are (4,0,3), (4,0,2),
        (4,1,3), and (4,1,2).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums1.length == nums2.length</code>
        </li>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= nums1[i], nums2[i] &lt;= n - 1</code>
        </li>
        <li>
          <code>nums1</code> and <code>nums2</code> are permutations of{" "}
          <code>[0, 1, ..., n - 1]</code>.
        </li>
      </ul>
    </div>
  ),
  2426: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two <strong>0-indexed</strong> integer arrays{" "}
        <code>nums1</code> and <code>nums2</code>, each of size <code>n</code>,
        and an integer <code>diff</code>. Find the number of{" "}
        <strong>pairs</strong> <code>(i, j)</code> such that:
      </p>

      <ul>
        <li>
          <code>0 &lt;= i &lt; j &lt;= n - 1</code> <strong>and</strong>
        </li>
        <li>
          <code>nums1[i] - nums1[j] &lt;= nums2[i] - nums2[j] + diff</code>.
        </li>
      </ul>

      <p>
        Return
        <em>
          {" "}
          the <strong>number of pairs</strong> that satisfy the conditions.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [3,2,5], nums2 = [2,2,1], diff = 1{" "}
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong>
        <br />
        There are 3 pairs that satisfy the conditions:
        <br />
        1. i = 0, j = 1: 3 - 2 &lt;= 2 - 2 + 1. Since i &lt; j and 1 &lt;= 1,
        this pair satisfies the conditions.
        <br />
        2. i = 0, j = 2: 3 - 5 &lt;= 2 - 1 + 1. Since i &lt; j and -2 &lt;= 2,
        this pair satisfies the conditions.
        <br />
        3. i = 1, j = 2: 2 - 5 &lt;= 2 - 1 + 1. Since i &lt; j and -3 &lt;= 2,
        this pair satisfies the conditions. Therefore, we return 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [3,-1], nums2 = [-2,2], diff = -1
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong>
        <br />
        Since there does not exist any pair that satisfies the conditions, we
        return 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums1.length == nums2.length</code>
        </li>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= diff &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1135: (
    <>
      <div class="markdown-body div-width" style={{ marginTop: 20 }}>
        <p>
          There are <code>N</code> cities numbered from 1 to <code>N</code>.
        </p>

        <p>
          You are given <code>connections</code>, where each{" "}
          <code>connections[i] = [city1, city2, cost]</code>&nbsp;represents the
          cost to connect <code>city1</code> and <code>city2</code>
          together.&nbsp; (A <em>connection</em> is bidirectional: connecting{" "}
          <code>city1</code> and
          <code>city2</code> is the same as connecting <code>city2</code> and{" "}
          <code>city1</code>.)
        </p>

        <p>
          Return the minimum cost so that for every pair of cities, there exists
          a path&nbsp;of connections (possibly of length 1) that connects those
          two cities together.&nbsp; The cost is the sum of the connection costs
          used. If the task is impossible, return -1.
        </p>

        <p>&nbsp;</p>

        <p>
          <strong>Example 1:</strong>
        </p>

        <p>
          <img src="https://leetcode.ca/all/img/1135_1.png" alt="" />
        </p>

        <pre>
          <strong>Input: </strong>N = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]{" "}
          <br />
          <strong>Output: </strong>6 <br />
          <strong>Explanation: </strong>
          Choosing any 2 edges will connect all cities so we choose the minimum
          2.
        </pre>

        <p>
          <strong>Example 2:</strong>
        </p>

        <p>
          <img src="https://leetcode.ca/all/img/1135_2.png" alt="" />
        </p>

        <pre>
          <strong>Input: </strong>N = 4, connections = [[1,2,3],[3,4,4]] <br />
          <strong>Output: </strong>-1 <br />
          <strong>Explanation: </strong>
          There is no way to connect all cities even if all edges are used.
        </pre>

        <p>&nbsp;</p>

        <p>
          <strong>Note:</strong>
        </p>

        <ul>
          <li>
            <code>1 &lt;= N &lt;= 10000</code>
          </li>
          <li>
            <code>1 &lt;= connections.length &lt;= 10000</code>
          </li>
          <li>
            <code>1 &lt;= connections[i][0], connections[i][1] &lt;= N</code>
          </li>
          <li>
            <code>0 &lt;= connections[i][2] &lt;= 10^5</code>
          </li>
          <li>
            <code>connections[i][0] != connections[i][1]</code>
          </li>
        </ul>
      </div>
    </>
  ),
  1168: (
    <div class="markdown-body div-width" style={{ marginTop: 20 }}>
      <p>
        There are{" "}
        <code>
          <font face="monospace">n</font>
        </code>
        &nbsp;houses in a village. We want to supply water for all the houses by
        building wells and laying pipes.
      </p>

      <p>
        For each house <code>i</code>, we can either build a well inside it
        directly with cost <code>wells[i]</code>, or pipe in water from another
        well to it. The costs to lay pipes between houses are given by the array{" "}
        <code>pipes</code>, where each&nbsp;
        <code>pipes[i] = [house1, house2, cost]</code>&nbsp;represents the cost
        to connect&nbsp;<code>house1</code>&nbsp;and <code>house2</code>
        &nbsp;together using a pipe.&nbsp;Connections are bidirectional.
      </p>

      <p>Find the minimum total cost to supply water to all houses.</p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/05/22/1359_ex1.png"
            style={{ width: 189, height: 196 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, wells = [1,2,2], pipes =
        [[1,2,1],[2,3,1]] <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation: </strong>
        <br />
        The image shows the costs of connecting houses using pipes.
        <br />
        The best strategy is to build a well in the first house with cost 1 and
        connect the other houses to it with cost 2 so the total cost is 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n&nbsp;&lt;= 10000</code>
        </li>
        <li>
          <code>wells.length == n</code>
        </li>
        <li>
          <code>0 &lt;= wells[i] &lt;= 10^5</code>
        </li>
        <li>
          <code>1 &lt;= pipes.length &lt;= 10000</code>
        </li>
        <li>
          <code>1 &lt;= pipes[i][0], pipes[i][1] &lt;= n</code>
        </li>
        <li>
          <code>0 &lt;= pipes[i][2] &lt;= 10^5</code>
        </li>
        <li>
          <code>pipes[i][0] != pipes[i][1]</code>
        </li>
      </ul>
    </div>
  ),
  1724: (
    <>
      <div>
        <p>
          An undirected graph of <code>n</code> nodes is defined by{" "}
          <code>edgeList</code>, where{" "}
          <code>
            edgeList[i] = [u<sub>i</sub>, v<sub>i</sub>, dis<sub>i</sub>]
          </code>{" "}
          denotes an edge between nodes{" "}
          <code>
            u<sub>i</sub>
          </code>{" "}
          and{" "}
          <code>
            v<sub>i</sub>
          </code>{" "}
          with distance{" "}
          <code>
            dis<sub>i</sub>
          </code>
          . Note that there may be <strong>multiple</strong>
          edges between two nodes, and the graph may not be connected.
        </p>

        <p>
          Implement the <code>DistanceLimitedPathsExist</code> class:
        </p>

        <ul>
          <li>
            <code>DistanceLimitedPathsExist(int n, int[][] edgeList)</code>{" "}
            Initializes the class with an undirected graph.
          </li>
          <li>
            <code>boolean query(int p, int q, int limit)</code> Returns{" "}
            <code>true</code> if there exists a path from <code>p</code> to{" "}
            <code>q</code> such that each edge on the path has a distance{" "}
            <strong>strictly less than</strong> <code>limit</code>, and
            otherwise <code>false</code>.
          </li>
        </ul>

        <p>&nbsp;</p>
        <p>
          <strong>Example 1:</strong>
        </p>

        <p>
          <strong>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2021/01/05/messed.png"
              style={{ width: 300, height: 298 }}
            />
          </strong>
        </p>

        <pre>
          <strong>Input</strong> <br />
          ["DistanceLimitedPathsExist", "query", "query", "query", "query"] [[6,
          [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]], [2, 3, 2],
          [1, 3, 3], [2, 0, 3], [0, 5, 6]] <br />
          <strong>Output</strong> <br />
          [null, true, false, true, false] <br />
          <strong>Explanation</strong> <br />
          DistanceLimitedPathsExist distanceLimitedPathsExist = new
          DistanceLimitedPathsExist(6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3,
          1], [4, 5, 5]]); distanceLimitedPathsExist.query(2, 3, 2); // return
          true. There is an edge from 2 to 3 of distance 1, which is less than
          2. distanceLimitedPathsExist.query(1, 3, 3); // return false. There is
          no way to go from 1 to 3 with distances <strong>strictly</strong> less
          than 3. distanceLimitedPathsExist.query(2, 0, 3); // return true.
          There is a way to go from 2 to 0 with distance &lt; 3: travel from 2
          to 3 to 0. distanceLimitedPathsExist.query(0, 5, 6); // return false.
          There are no paths from 0 to 5.
        </pre>

        <p>&nbsp;</p>
        <p>
          <code>
            <strong>Constraints:</strong>
          </code>
        </p>

        <ul>
          <li>
            <code>
              2 &lt;= n &lt;= 10<sup>4</sup>
            </code>
          </li>
          <li>
            <code>
              0 &lt;= edgeList.length &lt;= 10<sup>4</sup>
            </code>
          </li>
          <li>
            <code>edgeList[i].length == 3</code>
          </li>
          <li>
            <code>
              0 &lt;= u<sub>i</sub>, v<sub>i</sub>, p, q &lt;= n-1
            </code>
          </li>
          <li>
            <code>
              u<sub>i</sub> != v<sub>i</sub>
            </code>
          </li>
          <li>
            <code>p != q</code>
          </li>
          <li>
            <code>
              1 &lt;= dis<sub>i</sub>, limit &lt;= 10<sup>9</sup>
            </code>
          </li>
          <li>
            At most&nbsp;
            <code>
              10<sup>4</sup>
            </code>{" "}
            calls will be made to
            <code>query</code>.
          </li>
        </ul>
      </div>
    </>
  ),
  1062: (
    <div class="markdown-body div-width" style={{ marginTop: 20 }}>
      <p>
        Given a string <code>S</code>, find out the length of the longest
        repeating substring(s). Return <code>0</code> if no repeating substring
        exists.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-1-1">"abcd"</span> <br />
        <strong>Output: </strong>
        <span id="example-output-1">0</span>
        <br />
        <strong>Explanation: </strong>There is no repeating substring.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-2-1">"abbaba"</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-2">2</span>
        <br />
        <strong>Explanation: </strong>The longest repeating substrings are "ab"
        and "ba", each of which occurs twice.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-3-1">"aabcaabdaab"</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-3">3</span>
        <br />
        <strong>Explanation: </strong>The longest repeating substring is "aab",
        which occurs <code>3</code> times.
      </pre>

      <p>
        <strong>Example 4:</strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-4-1">"aaaaa"</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-4">4</span>
        <br />
        <strong>Explanation: </strong>The longest repeating substring is "aaaa",
        which occurs twice.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          The string <code>S</code> consists of only lowercase English letters
          from <code>'a'</code>- <code>'z'</code>.
        </li>
        <li>
          <code>1 &lt;= S.length &lt;= 1500</code>
        </li>
      </ul>
    </div>
  ),
  1698: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            Given a string <code>s</code>, return{" "}
            <em>
              the number of <strong>distinct</strong>
              substrings of
            </em>
            &nbsp;<code>s</code>.
          </p>
          <p>
            A <strong>substring</strong> of a string is obtained by deleting any
            number of characters (possibly zero) from the front of the string
            and any number (possibly zero) from the back of the string.
          </p>
          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>
          <pre>
            <strong>Input:</strong> s = "aabbaba" <br />
            <strong>Output:</strong> 21
            <br />
            <strong>Explanation:</strong> <br />
            The set of distinct strings is
            ["a","b","aa","bb","ab","ba","aab","abb","bba","aba","aabb",
            <br />
            "abba","bbab","baba","aabba","abbab","bbaba","aabbab","abbaba","aabbaba"]
          </pre>
          <p>
            <strong>Example 2:</strong>
          </p>
          <pre>
            <strong>Input:</strong> s = "abcdefg"
            <br />
            <strong>Output:</strong> 28
          </pre>
          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>
          <ul>
            <li>
              <code>1 &lt;= s.length &lt;= 500</code>
            </li>
            <li>
              <code>s</code> consists of lowercase English letters.
            </li>
          </ul>
          <p>&nbsp;</p>
          <strong>Follow up:</strong> Can you solve this problem in{" "}
          <code>O(n)</code> time complexity?
        </div>
      </div>
      <p>
        <strong>Hints:</strong>
      </p>

      <p>Hint 1</p>
      <p>Calculate the prefix hashing array for s.</p>
      <p>Hint 2</p>
      <p>
        Use the prefix hashing array to calculate the hashing value of each
        substring.
      </p>
      <p>Hint 3</p>
      <p>Compare the hashing values to determine the unique substrings.</p>
      <p>Hint 4</p>
      <p>
        There could be collisions if you use hashing, what about double hashing.
      </p>
    </div>
  ),
  220: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and two integers{" "}
        <code>indexDiff</code> and <code>valueDiff</code>.
      </p>

      <p>
        Find a pair of indices <code>(i, j)</code> such that:
      </p>

      <ul>
        <li>
          <code>i != j</code>,
        </li>
        <li>
          <code>abs(i - j) &lt;= indexDiff</code>.
        </li>
        <li>
          <code>abs(nums[i] - nums[j]) &lt;= valueDiff</code>, and
        </li>
      </ul>

      <p>
        Return <code>true</code>
        <em> if such pair exists or </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input: </strong>
        nums = [1,2,3,1], indexDiff = 3, valueDiff = 0 <br />
        <strong>Output: </strong>true
        <br />
        <strong>Explanation: </strong>
        We can choose (i, j) = (0, 3).
        <br />
        We satisfy the three conditions:
        <br />
        i != j --&gt; 0 != 3<br />
        abs(i - j) &lt;= indexDiff --&gt; abs(0 - 3) &lt;= 3<br />
        abs(nums[i] - nums[j]) &lt;= valueDiff --&gt; abs(1 - 1) &lt;= 0
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input: </strong>
        nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3<br />
        <strong>Output: </strong>
        false
        <br />
        <strong>Explanation: </strong>
        After trying all the possible pairs (i, j), we cannot satisfy the three
        conditions, so we return false.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= indexDiff &lt;= nums.length</code>
        </li>
        <li>
          <code>
            0 &lt;= valueDiff &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  451: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, sort it in{" "}
        <strong>decreasing order</strong> based on the{" "}
        <strong>frequency</strong> of the characters. The{" "}
        <strong>frequency</strong> of a character is the number of times it
        appears in the string.
      </p>

      <p>
        Return <em>the sorted string</em>. If there are multiple answers, return{" "}
        <em>any of them</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "tree" <br />
        <strong>Output:</strong> "eert"
        <br />
        <strong>Explanation:</strong> 'e' appears twice while 'r' and 't' both
        appear once.
        <br />
        So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a
        valid answer.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "cccaaa"
        <br />
        <strong>Output:</strong> "aaaccc"
        <br />
        <strong>Explanation:</strong> Both 'c' and 'a' appear three times, so
        both "cccaaa" and "aaaccc" are valid answers.
        <br />
        Note that "cacaca" is incorrect, as the same characters must be
        together.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "Aabb"
        <br />
        <strong>Output:</strong> "bbAa"
        <br />
        <strong>Explanation:</strong> "bbaA" is also a valid answer, but "Aabb"
        is incorrect.
        <br />
        Note that 'A' and 'a' are treated as two different characters.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 5 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of uppercase and lowercase English letters and
          digits.
        </li>
      </ul>
    </div>
  ),
  692: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of strings <code>words</code> and an integer{" "}
        <code>k</code>, return <em>the </em>
        <code>k</code>
        <em> most frequent strings</em>.
      </p>

      <p>
        Return the answer <strong>sorted</strong> by{" "}
        <strong>the frequency</strong> from highest to lowest. Sort the words
        with the same frequency by their <strong>lexicographical order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words =
        ["i","love","leetcode","i","love","coding"], k = 2 <br />
        <strong>Output:</strong> ["i","love"] <br />
        <strong>Explanation:</strong> "i" and "love" are the two most frequent
        words. <br />
        Note that "i" comes before "love" due to a lower alphabetical order.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words =
        ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4{" "}
        <br />
        <strong>Output:</strong> ["the","is","sunny","day"] <br />
        <strong>Explanation:</strong> "the", "is", "sunny" and "day" are the
        four most frequent words, with the number of occurrence being 4, 3, 2
        and 1 respectively.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= words.length &lt;= 500</code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 10</code>
        </li>
        <li>
          <code>words[i]</code> consists of lowercase English letters.
        </li>
        <li>
          <code>k</code> is in the range{" "}
          <code>
            [1, The number of <strong>unique</strong> words[i]]
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow-up:</strong> Could you solve it in{" "}
        <code>O(n log(k))</code> time and <code>O(n)</code> extra space?
      </p>
    </div>
  ),
  1230: (
    <div class="markdown-body div-width">
      <p>
        You have some coins.&nbsp; The <code>i</code>-th&nbsp;coin has a
        probability&nbsp;<code>prob[i]</code>
        of facing heads when tossed.
      </p>
      <p>
        Return the probability that the number of coins facing heads equals{" "}
        <code>target</code> if you toss every coin exactly once.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>{" "}
      <pre>
        <strong>Input:</strong> prob = [0.4], target = 1<br />
        <strong>Output:</strong> 0.40000
      </pre>
      <p>
        <strong>Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> prob = [0.5,0.5,0.5,0.5,0.5], target = 0<br />
        <strong>Output:</strong> 0.03125
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= prob.length &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= prob[i] &lt;= 1</code>
        </li>
        <li>
          <code>0 &lt;= target&nbsp;</code>
          <code>&lt;= prob.length</code>
        </li>
        <li>
          Answers will be accepted as correct if they are within{" "}
          <code>10^-5</code> of the correct answer.
        </li>
      </ul>
    </div>
  ),
  716: (
    <div class="markdown-body div-width">
      <p>
        Design a max stack that supports push, pop, top, peekMax and popMax.
      </p>

      <p></p>
      <ul>
        <li>push(x) -- Push element x onto stack.</li>
        <li>pop() -- Remove the element on top of the stack and return it.</li>
        <li>top() -- Get the element on the top.</li>
        <li>peekMax() -- Retrieve the maximum element in the stack.</li>
        <li>
          popMax() -- Retrieve the maximum element in the stack, and remove it.
          If you find more than one maximum elements, only remove the top-most
          one.
        </li>
      </ul>
      <p></p>

      <p>
        <b>Example 1:</b>
        <br />
      </p>
      <pre>
        MaxStack stack = new MaxStack(); <br />
        stack.push(5);
        <br />
        stack.push(1);
        <br />
        stack.push(5);
        <br />
        stack.top(); -&gt; 5<br />
        stack.popMax(); -&gt; 5<br />
        stack.top(); -&gt; 1<br />
        stack.peekMax(); -&gt; 5<br />
        stack.pop(); -&gt; 1<br />
        stack.top(); -&gt; 5
      </pre>
      <p></p>

      <p>
        <b>Note:</b>
        <br />
      </p>
      <ul>
        <li>-1e7 &lt;= x &lt;= 1e7</li>
        <li>Number of operations won't exceed 10000.</li>
        <li>The last four operations won't be called when stack is empty.</li>
      </ul>
      <p></p>
    </div>
  ),
  426: (
    <div class="markdown-body div-width">
      <p>
        Convert a BST to a sorted circular doubly-linked list in-place. Think of
        the left and right pointers as synonymous to the previous and next
        pointers in a doubly-linked list.
      </p>
      <p>
        Let's take the following BST as an example, it may help you understand
        the problem better:
      </p>
      &nbsp;
      <p>
        <img
          src="https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png"
          style={{ width: "100%", maxWidth: 300 }}
          alt="img"
        />
      </p>
      &nbsp;
      <p>
        We want to transform this BST into a circular doubly linked list. Each
        node in a doubly linked list has a predecessor and successor. For a
        circular doubly linked list, the predecessor of the first element is the
        last element, and the successor of the last element is the first
        element.
      </p>
      <p>
        The figure below shows the circular doubly linked list for the BST
        above. The "head" symbol means the node it points to is the smallest
        element of the linked list.
      </p>
      &nbsp;
      <p>
        <img
          src="https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png"
          style={{ width: "100%", maxWidth: 450 }}
          alt="img"
        />
      </p>
      &nbsp;
      <p>
        Specifically, we want to do the transformation in place. After the
        transformation, the left pointer of the tree node should point to its
        predecessor, and the right pointer should point to its successor. We
        should return the pointer to the first element of the linked list.
      </p>
      <p>
        The figure below shows the transformed BST. The solid line indicates the
        successor relationship, while the dashed line means the predecessor
        relationship.
      </p>
      &nbsp;
      <p>
        <img
          src="https://assets.leetcode.com/uploads/2018/10/12/bstdllreturnbst.png"
          style={{ width: "100%", maxWidth: 450 }}
          alt="img"
        />
      </p>
    </div>
  ),
  1188: (
    <div class="markdown-body div-width">
      <p>
        Implement a thread safe bounded&nbsp;blocking queue that has&nbsp;the
        following&nbsp;methods:
      </p>

      <ul>
        <li>
          <code>BoundedBlockingQueue(int capacity)</code> The constructor
          initializes the queue with a maximum <code>capacity</code>.
        </li>
        <li>
          <code>void enqueue(int element)</code> Adds an <code>element</code> to
          the front of the queue. If the queue is full, the calling thread is
          blocked until the queue is no longer full.
        </li>
        <li>
          <code>int dequeue()</code> Returns the element at the rear of the
          queue and removes it. If the queue is empty, the calling thread is
          blocked until the queue is no longer empty.
        </li>
        <li>
          <code>int size()</code>&nbsp;Returns the number of elements currently
          in the queue.
        </li>
      </ul>

      <p>
        Your implementation will be tested using multiple threads at the same
        time. Each thread will either be a producer thread that only makes calls
        to the&nbsp;<code>enqueue</code>&nbsp;method or a consumer thread that
        only makes calls to the&nbsp;<code>dequeue</code>&nbsp;method. The&nbsp;
        <code>size</code>&nbsp;method will be called after every test case.
      </p>

      <p>
        Please do not use built-in implementations of bounded&nbsp;blocking
        queue as this will not be accepted in an interview.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong>
        <br />
        1<br />
        1<br />
        ["BoundedBlockingQueue","enqueue","dequeue", <br />
        "dequeue","enqueue", "enqueue", <br />
        "enqueue","enqueue","dequeue"] <br />
        [[2],[1],[],[],[0],[2],[3],[4],[]]
        <br />
        <strong>Output:</strong>
        <br />
        [1,0,2,2]
        <br />
        <strong>
          Explanation:
          <br />
        </strong>
        Number of producer threads = 1<br />
        Number of consumer threads = 1<br />
        BoundedBlockingQueue queue = new BoundedBlockingQueue(2); // initialize
        the queue with capacity = 2.
        <br />
        queue.enqueue(1); // The producer thread enqueues 1 to the queue.
        <br />
        queue.dequeue(); // The consumer thread calls dequeue and returns 1 from
        the queue.
        <br />
        queue.dequeue(); // Since the queue is empty, the consumer thread is
        blocked.
        <br />
        queue.enqueue(0); // The producer thread enqueues 0 to the queue. The
        consumer thread is unblocked and returns 0 from the queue.
        <br />
        queue.enqueue(2); // The producer thread enqueues 2 to the queue.
        <br />
        queue.enqueue(3); // The producer thread enqueues 3 to the queue.
        <br />
        queue.enqueue(4); // The producer thread is blocked because the queue's
        capacity (2) is reached.
        <br />
        queue.dequeue(); // The consumer thread returns 2 from the queue. The
        producer thread is unblocked and enqueues 4 to the queue.
        <br />
        queue.size(); // 2 elements remaining in the queue. size() is always
        called at the end of each test case.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        3 <br />
        4<br />
        ["BoundedBlockingQueue","enqueue", <br />
        "enqueue","enqueue", "dequeue", <br />
        "dequeue","dequeue","enqueue"]
        <br />
        [[3],[1],[0],[2],[],[],[],[3]]
        <br />
        <strong>Output:</strong>
        <br />
        [1,0,2,1]
        <br />
        <strong>Explanation:</strong>Number of producer threads = 3 Number of
        consumer threads = 4 BoundedBlockingQueue queue = new
        BoundedBlockingQueue(3); // initialize the queue with capacity = 3.
        queue.enqueue(1); // Producer thread P1 enqueues 1 to the queue.
        queue.enqueue(0); // Producer thread P2 enqueues 0 to the queue.
        queue.enqueue(2); // Producer thread P3 enqueues 2 to the queue.
        queue.dequeue(); // Consumer thread C1 calls dequeue. queue.dequeue();
        // Consumer thread C2 calls dequeue. queue.dequeue(); // Consumer thread
        C3 calls dequeue. queue.enqueue(3); // One of the producer threads
        enqueues 3 to the queue. queue.size(); // 1 element remaining in the
        queue. Since the number of threads for producer/consumer is greater than
        1, we do not know how the threads will be scheduled in the operating
        system, even though the input seems to imply the ordering. Therefore,
        any of the output [1,0,2] or [1,2,0] or [0,1,2] or [0,2,1] or [2,0,1] or
        [2,1,0] will be accepted.
      </pre>
    </div>
  ),
  1242: (
    <div class="markdown-body div-width">
      <p>
        Given a url <code>startUrl</code> and an interface{" "}
        <code>HtmlParser</code>, implement
        <strong>a Multi-threaded web&nbsp;crawler</strong> to crawl all links
        that are under the&nbsp;<strong>same hostname</strong> as&nbsp;
        <code>startUrl</code>.&nbsp;
      </p>

      <p>
        Return&nbsp;all urls obtained by your web crawler in{" "}
        <strong>any</strong> order.
      </p>

      <p>Your crawler should:</p>

      <ul>
        <li>
          Start from the page: <code>startUrl</code>
        </li>
        <li>
          Call <code>HtmlParser.getUrls(url)</code> to get all urls from a
          webpage of given url.
        </li>
        <li>Do not crawl the same link twice.</li>
        <li>
          Explore only the links that are under the{" "}
          <strong>same hostname</strong> as <code>startUrl</code>.
        </li>
      </ul>

      <p>
        <img alt="" src="img/1236_1.png" />
      </p>

      <p>
        As shown in the example url above, the hostname is{" "}
        <code>example.org</code>. For simplicity sake, you may assume
        all&nbsp;urls use <strong>http protocol</strong> without any&nbsp;
        <strong>port</strong> specified. For example, the urls&nbsp;
        <code>http://leetcode.com/problems</code>
        and&nbsp;<code>http://leetcode.com/contest</code> are under the same
        hostname, while urls
        <code>http://example.org/test</code> and{" "}
        <code>http://example.com/abc</code> are not under the same hostname.
      </p>

      <p>
        The <code>HtmlParser</code> interface is defined as such:&nbsp;
      </p>

      <pre>{`interface HtmlParser {
  // Return a list of all urls from a webpage of given <em>url</em>.
  // This is a blocking call, that means it will do HTTP request and return when this request is finished.
  public List&lt;String&gt; getUrls(String url);
}`}</pre>

      <p>
        Note that&nbsp;<code>getUrls(String url)</code>&nbsp;simulates
        performing a&nbsp;HTTP request. You can treat it as a blocking function
        call which waits for a&nbsp;HTTP request to finish. It is guaranteed
        that&nbsp;<code>getUrls(String url)</code> will return the urls within{" "}
        <strong>15ms.&nbsp;</strong> Single-threaded solutions will exceed the
        time limit so, can your multi-threaded web crawler do better?
      </p>

      <p>
        Below&nbsp;are two examples explaining the functionality of the problem,
        for custom testing purposes you'll have three&nbsp;variables&nbsp;
        <code data-stringify-type="code">urls</code>,&nbsp;
        <code data-stringify-type="code">edges</code>&nbsp;and&nbsp;
        <code data-stringify-type="code">startUrl</code>. Notice that you will
        only have access to&nbsp;
        <code data-stringify-type="code">startUrl</code>&nbsp;in your code,
        while&nbsp;<code data-stringify-type="code">urls</code>&nbsp;and&nbsp;
        <code data-stringify-type="code">edges</code>&nbsp;are not directly
        accessible to you in code.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Follow up:</strong>
      </p>

      <ul>
        <li>
          Assume we have 10,000 nodes and 1 billion URLs to crawl.&nbsp;We will
          deploy the same software onto each node.&nbsp;The software can know
          about all the nodes. We have to minimize communication between
          machines and make sure each node does equal amount of work. How would
          your web crawler design change?
        </li>
        <li>What if one node fails or does not work?</li>
        <li>How do you know when the crawler is done?</li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <img alt="" src="img/1236_2.png" />
      </p>

      <pre>
        <strong>
          Input: <br />
        </strong>
        urls = [ <br />
        &nbsp; "http://news.yahoo.com", <br />
        &nbsp; "http://news.yahoo.com/news", <br />
        &nbsp; "http://news.yahoo.com/news/topics/", <br />
        &nbsp; "http://news.google.com", <br />
        &nbsp; "http://news.yahoo.com/us" <br />
        ] edges = [[2,0],[2,1],[3,2],[3,1],[0,4]] <br />
        startUrl = "http://news.yahoo.com/news/topics/" <br />
        <strong>Output:</strong> [ <br />
        &nbsp; "http://news.yahoo.com", <br />
        &nbsp; "http://news.yahoo.com/news", <br />
        &nbsp; "http://news.yahoo.com/news/topics/", <br />
        &nbsp; "http://news.yahoo.com/us" <br />]
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/10/23/sample_3_1497.png"
            style={{ width: 540, height: 270 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        urls = [ <br />
        &nbsp; "http://news.yahoo.com", <br />
        &nbsp; "http://news.yahoo.com/news", <br />
        &nbsp; "http://news.yahoo.com/news/topics/", <br />
        &nbsp; "http://news.google.com" <br />
        ] <br />
        edges = [[0,2],[2,1],[3,2],[3,1],[3,0]] <br />
        startUrl = "http://news.google.com" <br />
        <strong>Output:</strong> ["http://news.google.com"] <br />
        <strong>Explanation: </strong>The startUrl links to all other pages that
        do not share the same hostname.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= urls.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= urls[i].length &lt;= 300</code>
        </li>
        <li>
          <code>startUrl</code>&nbsp;is one of the <code>urls</code>.
        </li>
        <li>
          Hostname label must be from 1 to 63 characters long, including the
          dots, may contain only the ASCII letters from 'a' to&nbsp;'z', digits
          from '0' to '9' and the&nbsp;hyphen-minus&nbsp;character ('-').
        </li>
        <li>
          The hostname may not start or end with&nbsp;the hyphen-minus character
          ('-').&nbsp;
        </li>
        <li>
          See:&nbsp;&nbsp;
          <a href="https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames">
            https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames
          </a>
        </li>
        <li>You may assume there're&nbsp;no duplicates in url library.</li>
      </ul>
    </div>
  ),
  1279: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            There is an intersection of two roads. First road is road A where
            cars travel&nbsp;from North to South in direction 1 and from South
            to North in direction 2. Second road is road B where cars travel
            from West to East in direction 3 and from East to West in direction
            4.
          </p>

          <p>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2019/11/11/exp.png"
              style={{ width: 600, height: 417 }}
            />
          </p>

          <p>
            There is a traffic light&nbsp;located on each road before the
            intersection. A traffic light&nbsp;can&nbsp;either be green or red.
          </p>

          <ul>
            <li>
              <strong>Green</strong> means&nbsp;cars can cross the
              intersection&nbsp;in both directions of the road.
            </li>
            <li>
              <strong>Red</strong> means cars in both directions cannot cross
              the intersection and must wait until the light turns green.
            </li>
          </ul>

          <p>
            The traffic lights cannot be green on both roads at the same time.
            That means when the light is green on road A, it is red on&nbsp;road
            B and when the light is green on road B, it is red on&nbsp;road A.
          </p>

          <p>
            Initially, the traffic light is <strong>green</strong> on road A and
            <strong>red</strong>&nbsp;on road B. When the light is green on one
            road, all cars can cross the intersection in both directions until
            the light becomes green on the other road.&nbsp;No two cars
            traveling on different roads should cross at the same time.
          </p>

          <p>
            Design a deadlock-free&nbsp;traffic light controlled system at this
            intersection.
          </p>

          <p>
            Implement the function&nbsp;
            <code>
              void carArrived(carId, roadId, direction, turnGreen, crossCar)
            </code>{" "}
            where:
          </p>

          <ul>
            <li>
              <code>carId</code>&nbsp;is the id of the car that arrived.
            </li>
            <li>
              <code>roadId</code>&nbsp;is the id of the road that the car
              travels&nbsp;on.
            </li>
            <li>
              <code>direction</code>&nbsp;is the direction of the car.
            </li>
            <li>
              <code>turnGreen</code>&nbsp;is a function you can call to turn the
              traffic light to green on the current road.
            </li>
            <li>
              <code>crossCar</code>&nbsp;is a function you can call to let the
              current car cross the intersection.
            </li>
          </ul>

          <p>
            Your answer is considered correct if it avoids cars deadlock in the
            intersection.&nbsp;Turning the light green on a road when it was
            already green is considered a&nbsp;wrong answer.
          </p>

          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>

          <pre>
            <strong>Input:</strong>
            <br />
            cars = [1,3,5,2,4], directions = [2,1,2,4,3], arrivalTimes =
            [10,20,30,40,50] <br />
            <strong>Output:</strong> [ <br />
            "Car 1 Has Passed Road A In Direction 2", // Traffic light on road A
            is green, car 1 can cross the intersection. <br />
            "Car 3 Has Passed Road A In Direction 1", // Car 3 crosses the
            intersection as the light is still green. <br />
            "Car 5 Has Passed Road A In Direction 2", // Car 5 crosses the
            intersection as the light is still green. <br />
            "Traffic Light On Road B Is Green", // Car 2 requests green light
            for road B. <br />
            "Car 2 Has Passed Road B In Direction 4", // Car 2 crosses as the
            light is green on road B now. <br />
            "Car 4 Has Passed Road B In Direction 3" // Car 4 crosses the
            intersection as the light is still green. ]
          </pre>

          <p>
            <strong>Example 2:</strong>
          </p>

          <pre>
            <strong>Input:</strong>
            <br />
            cars = [1,2,3,4,5], directions = [2,4,3,3,1], arrivalTimes =
            [10,20,30,40,40] <br />
            <strong>Output:</strong> [ <br />
            "Car 1 Has Passed Road A In Direction 2", // Traffic light on road A
            is green, car 1 can cross the intersection. <br />
            "Traffic Light On Road B Is Green", // Car 2 requests green light
            for road B. <br />
            "Car 2 Has Passed Road B In Direction 4", // Car 2 crosses as the
            light is green on road B now. <br />
            "Car 3 Has Passed Road B In Direction 3", // Car 3 crosses as the
            light is green on road B now. <br />
            "Traffic Light On Road A Is Green", // Car 5 requests green light
            for road A. <br />
            "Car 5 Has Passed Road A In Direction 1", // Car 5 crosses as the
            light is green on road A now. <br />
            "Traffic Light On Road B Is Green", // Car 4 requests green light
            for road B. Car 4 blocked until car 5 crosses and then traffic light
            is green on road B. <br />
            "Car 4 Has Passed Road B In Direction 3" // Car 4 crosses as the
            light is green on road B now. <br />
            ] <br />
            <strong>Explanation:</strong> This is a dead-lock free scenario.
            Note that the scenario when car 4 crosses before turning light into
            green on road A and allowing car 5 to pass is also{" "}
            <strong>correct</strong> and <strong>Accepted</strong> scenario.
          </pre>

          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              <code>1 &lt;= cars.length &lt;= 20</code>
            </li>
            <li>
              <code>cars.length = directions.length</code>
            </li>
            <li>
              <code>cars.length = arrivalTimes.length</code>
            </li>
            <li>
              All values of <code>cars</code> are unique
            </li>
            <li>
              <code>1 &lt;= directions[i] &lt;= 4</code>
            </li>
            <li>
              <code>arrivalTimes</code> is non-decreasing
            </li>
          </ul>
        </div>
      </div>
    </div>
  ),
  251: (
    <div class="markdown-body div-width">
      <p>
        Design and implement an iterator to flatten a 2d vector. It should
        support the following operations: <code>next</code> and{" "}
        <code>hasNext</code>.
      </p>
      <p>&nbsp;</p>
      <p>
        <b>Example:</b>
      </p>{" "}
      <pre>
        Vector2D iterator = new Vector2D([[1,2],[3],[4]]);
        <br />
        iterator.next(); // return 1<br />
        iterator.next(); // return 2<br />
        iterator.next(); // return 3<br />
        iterator.hasNext(); // return true
        <br />
        iterator.hasNext(); // return true
        <br />
        iterator.next(); // return 4<br />
        iterator.hasNext(); // return false
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Notes:</strong>
      </p>
      <ul>
        <li>
          Please remember to <b>RESET</b> your class variables declared in
          Vector2D, as static/class variables are{" "}
          <b>persisted across multiple test cases</b>. Please see{" "}
          <a href="https://leetcode.com/faq/" target="_blank" rel="noreferrer">
            here
          </a>{" "}
          for more details.
        </li>
        <li>
          You may assume that <code>next()</code> call will always be valid,
          that is, there will be at least a next element in the 2d vector when{" "}
          <code>next()</code> is called.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <b>Follow up:</b>
      </p>
      <p>
        As an added challenge, try to code it using only{" "}
        <a
          href="http://www.cplusplus.com/reference/iterator/iterator/"
          target="_blank"
          rel="noreferrer"
        >
          iterators in C++
        </a>{" "}
        or{" "}
        <a
          href="http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html"
          target="_blank"
          rel="noreferrer"
        >
          iterators in Java
        </a>
        .
      </p>
    </div>
  ),
  281: (
    <div class="markdown-body div-width">
      <p>
        Given two 1d vectors, implement an iterator to return their elements
        alternately.
      </p>
      <br />
      <p>
        <strong>Example:</strong>
      </p>
      <pre>
        <strong>Input:</strong>
        <br />
        v1 = [1,2]
        <br />
        v2 = [3,4,5,6]
        <br />
        <strong>Output:</strong>
        <br />
        <code>[1,3,2,4,5,6]</code>
        <br />
        <strong>Explanation:</strong> <br />
        By calling <i>next</i> repeatedly until <i>hasNext</i> returns{" "}
        <code>false</code>, &nbsp; the order of elements returned by <i>next</i>{" "}
        should be: <code>[1,3,2,4,5,6]</code>.
      </pre>
      <br />

      <p>
        <strong>Follow up</strong>: What if you are given <code>k</code> 1d
        vectors? How well can your code be extended to such cases?
      </p>

      <p>
        <strong>Clarification </strong>
        <strong>for the follow up question</strong>
        <strong>:</strong>
        <br />
        <br />
        The "Zigzag" order is not clearly defined and is ambiguous for{" "}
        <code>k &gt; 2</code> cases. If "Zigzag" does not look right to you,
        replace "Zigzag" with "Cyclic". For example:
      </p>

      <pre>
        <strong>Input:</strong>
        [1,2,3] [4,5,6,7] [8,9] <br />
        <strong>Output: </strong>
        <code>[1,4,8,2,5,9,3,6,7]</code>.
      </pre>
    </div>
  ),
  604: (
    <div class="markdown-body div-width">
      <p>
        Design and implement a data structure for a compressed string iterator.
        It should support the following operations: <code>next</code> and{" "}
        <code>hasNext</code>.
      </p>

      <p>
        The given compressed string will be in the form of each letter followed
        by a positive integer representing the number of this letter existing in
        the original uncompressed string.
      </p>

      <p>
        <code>next()</code> - if the original string still has uncompressed
        characters, return the next letter; Otherwise return a white space.
        <br />
        <code>hasNext()</code> - Judge whether there is any letter needs to be
        uncompressed.
      </p>

      <p>
        <b>Note:</b>
        <br />
        Please remember to <b>RESET</b> your class variables declared in
        StringIterator, as static/class variables are{" "}
        <b>persisted across multiple test cases</b>. Please see{" "}
        <a href="https://leetcode.com/faq/#different-output">here</a> for more
        details.
      </p>

      <p>
        <b>Example:</b>
      </p>
      <pre>
        StringIterator iterator = new StringIterator("L1e2t1C1o1d1e1");' <br />
        iterator.next(); // return 'L' <br />
        iterator.next(); // return 'e'' <br />
        iterator.next(); // return 'e'' <br />
        iterator.next(); // return 't'' <br />
        iterator.next(); // return 'C'' <br />
        iterator.next(); // return 'o'' <br />
        iterator.next(); // return 'd'' <br />
        iterator.hasNext(); // return true' <br />
        iterator.next(); // return 'e'' <br />
        iterator.hasNext(); // return false' <br />
        iterator.next(); // return ' '
      </pre>
      <p></p>
    </div>
  ),
  1586: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            Implement the <code>BSTIterator</code> class that represents an
            iterator over&nbsp;the
            <strong>
              <a href="https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR)">
                {" "}
                in-order traversal{" "}
              </a>
            </strong>
            &nbsp;of&nbsp;a binary search tree (BST):
          </p>

          <ul>
            <li>
              <code>BSTIterator(TreeNode root)</code> Initializes an object of
              the <code>BSTIterator</code>
              class. The <code>root</code> of the BST is given as part of the
              constructor. The pointer should be initialized to a non-existent
              number smaller than any element in the BST.
            </li>
            <li>
              <code>boolean hasNext()</code> Returns <code>true</code> if there
              exists a number in the traversal to the right of the pointer,
              otherwise returns <code>false</code>.
            </li>
            <li>
              <code>int next()</code> Moves the pointer to the right, then
              returns the number at the pointer.
            </li>
            <li>
              <code>boolean hasPrev()</code> Returns <code>true</code> if there
              exists a number in the traversal to the left of the pointer,
              otherwise returns <code>false</code>.
            </li>
            <li>
              <code>int prev()</code> Moves the pointer to the left, then
              returns the number at the pointer.
            </li>
          </ul>

          <p>
            Notice that by initializing the pointer to a non-existent smallest
            number, the first call to <code>next()</code> will return the
            smallest element in the BST.
          </p>

          <p>
            You may assume that <code>next()</code> and <code>prev()</code>{" "}
            calls will always be valid. That is, there will be at least a
            next/previous number in the in-order traversal&nbsp;when{" "}
            <code>next()</code>/<code>prev()</code> is called.
          </p>

          <p>
            <strong>Follow up:</strong> Could you solve the problem without
            precalculating the values of the tree?
          </p>

          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>

          <p>
            <strong>
              <img
                alt=""
                src="https://assets.leetcode.com/uploads/2020/09/14/untitled-diagram-1.png"
                style={{ width: 201, height: 201 }}
              />
            </strong>
          </p>

          <pre>
            <strong>Input</strong> <br />
            ["BSTIterator", "next", "next", "prev", "next", "hasNext",
            <br /> "next", "next", "next", "hasNext", "hasPrev", "prev", "prev"]
            <br />
            [[[7, 3, 15, null, null, 9, 20]], [null], [null], [null]
            <br /> [null], [null], [null], [null], [null], [null], [null],
            [null], [null]]
            <br />
            <strong>Output</strong>
            <br />
            [null, 3, 7, 3, 7, true, 9, 15, 20, false, true, 15, 9]
            <br />
            <strong>Explanation</strong>
            <br />
            // The underlined element is where the pointer currently is.
            <br />
            BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9,
            20]); // state is <u> </u> [3, 7, 9, 15, 20]
            <br />
            bSTIterator.next(); // state becomes [<u>3</u>, 7, 9, 15, 20],
            return 3<br />
            bSTIterator.next(); // state becomes [3, <u>7</u>, 9, 15, 20],
            return 7<br />
            bSTIterator.prev(); // state becomes [<u>3</u>, 7, 9, 15, 20],
            return 3<br />
            bSTIterator.next(); // state becomes [3, <u>7</u>, 9, 15, 20],
            return 7<br />
            bSTIterator.hasNext(); // return true
            <br />
            bSTIterator.next(); // state becomes [3, 7, <u>9</u>, 15, 20],
            return 9<br />
            bSTIterator.next(); // state becomes [3, 7, 9, <u>15</u>, 20],
            return 15
            <br />
            bSTIterator.next(); // state becomes [3, 7, 9, 15, <u>20</u>],
            return 20
            <br />
            bSTIterator.hasNext(); // return false
            <br />
            bSTIterator.hasPrev(); // return true
            <br />
            bSTIterator.prev(); // state becomes [3, 7, 9, <u>15</u>, 20],
            return 15
            <br />
            bSTIterator.prev(); // state becomes [3, 7, <u>9</u>, 15, 20],
            return 9
          </pre>

          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              The number of nodes in the tree is in the range{" "}
              <code>
                [1, 10<sup>5</sup>]
              </code>
              .
            </li>
            <li>
              <code>
                0 &lt;= Node.val &lt;= 10<sup>6</sup>
              </code>
            </li>
            <li>
              At most 10<sup>5</sup> calls will be made to <code>hasNext</code>,
              <code>next</code>, <code>hasPrev</code>, and <code>prev</code>.
            </li>
          </ul>
        </div>
      </div>
    </div>
  ),
  2031: (
    <article role="main" class="blog-post">
      <p>
        You are given a binary array <code>nums</code> containing only the
        integers <code>0</code> and <code>1</code>. Return
        <em>
          {" "}
          the number of <strong>subarrays</strong> in nums that have{" "}
          <strong>more</strong>{" "}
        </em>
        <code>1</code>'<em>s than </em>
        <code>0</code>
        <em>
          's. Since the answer may be very large, return it{" "}
          <strong>modulo</strong>{" "}
        </em>
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous sequence of elements within
        an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1,1,0,1] <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> <br />
        The subarrays of size 1 that have more ones than zeros are: [1], [1],
        [1] <br />
        The subarrays of size 2 that have more ones than zeros are: [1,1] <br />
        The subarrays of size 3 that have more ones than zeros are: [0,1,1],
        [1,1,0], [1,0,1] <br />
        The subarrays of size 4 that have more ones than zeros are: [1,1,0,1]{" "}
        <br />
        The subarrays of size 5 that have more ones than zeros are: [0,1,1,0,1]
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> <br />
        No subarrays have more ones than zeros.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> <br />
        The subarrays of size 1 that have more ones than zeros are: [1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 1</code>
        </li>
      </ul>
    </article>
  ),
  2519: (
    <article role="main" class="blog-post">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> and a positive integer <code>k</code>.
      </p>

      <p>
        We call an index <code>i</code> <strong>k-big</strong> if the following
        conditions are satisfied:
      </p>

      <ul>
        <li>
          There exist at least <code>k</code> different indices{" "}
          <code>idx1</code> such that <code>idx1 &lt; i</code> and{" "}
          <code>nums[idx1] &lt; nums[i]</code>.
        </li>
        <li>
          There exist at least <code>k</code> different indices{" "}
          <code>idx2</code> such that <code>idx2 &gt; i</code> and{" "}
          <code>nums[idx2] &lt; nums[i]</code>.
        </li>
      </ul>

      <p>
        Return <em>the number of k-big indices</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,6,5,2,3], k = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> There are only two 2-big indices in nums:{" "}
        <br />
        - i = 2 --&gt; There are two valid idx1: 0 and 1. There are three valid
        idx2: 2, 3, and 4. <br />- i = 3 --&gt; There are two valid idx1: 0 and
        1. There are two valid idx2: 3 and 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1], k = 3 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There are no 3-big indices in nums.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= nums[i], k &lt;= nums.length</code>
        </li>
      </ul>
    </article>
  ),
  3109: (
    <article class="markdown-body entry-content container-lg" itemprop="text">
      <p dir="auto">
        Given an array <code>perm</code> of length <code>n</code> which is a
        permutation of <code>[1, 2, ..., n]</code>, return the index of{" "}
        <code>perm</code> in the <span>lexicographically sorted</span> array of
        all of the permutations of <code>[1, 2, ..., n]</code>.
      </p>
      <p dir="auto">
        Since the answer may be very large, return it <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup>&nbsp;+ 7
        </code>
        .
      </p>
      <p dir="auto">&nbsp;</p>
      <p dir="auto">
        <strong>Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> <span>perm = [1,2]</span>
        <br />
        <strong>Output:</strong> <span>0</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        There are only two permutations in the following order:
        <code>[1,2]</code>, <code>[2,1]</code>
        <br />
        And <code>[1,2]</code> is at index 0.
      </pre>
      <p dir="auto">
        <strong>Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> <span>perm = [3,1,2]</span>
        <br />
        <strong>Output:</strong> <span>4</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        There are only six permutations in the following order:
        <code>[1,2,3]</code>, <code>[1,3,2]</code>, <code>[2,1,3]</code>,{" "}
        <code>[2,3,1]</code>, <code>[3,1,2]</code>, <code>[3,2,1]</code>
        <br />
        And <code>[3,1,2]</code> is at index 4.
      </pre>
      <p dir="auto">&nbsp;</p>
      <p dir="auto">
        <strong>Constraints:</strong>
      </p>
      <ul dir="auto">
        <li>
          <code>
            1 &lt;= n == perm.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>perm</code> is a permutation of <code>[1, 2, ..., n]</code>.
        </li>
      </ul>
    </article>
  ),
  380: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Implement the <code>RandomizedSet</code> class:
      </p>

      <ul>
        <li>
          <code>RandomizedSet()</code> Initializes the{" "}
          <code>RandomizedSet</code> object.
        </li>
        <li>
          <code>bool insert(int val)</code> Inserts an item <code>val</code>{" "}
          into the set if not present. Returns <code>true</code> if the item was
          not present, <code>false</code> otherwise.
        </li>
        <li>
          <code>bool remove(int val)</code> Removes an item <code>val</code>{" "}
          from the set if present. Returns <code>true</code> if the item was
          present, <code>false</code> otherwise.
        </li>
        <li>
          <code>int getRandom()</code> Returns a random element from the current
          set of elements (it's guaranteed that at least one element exists when
          this method is called). Each element must have the{" "}
          <b>same probability</b> of being returned.
        </li>
      </ul>

      <p>
        You must implement the functions of the class such that each function
        works in&nbsp;<strong>average</strong>&nbsp;<code>O(1)</code>&nbsp;time
        complexity.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        <br />
        ["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove",
        "insert", "getRandom"]
        <br />
        [[], [1], [2], [2], [], [1], [2], []]
        <br />
        <strong>Output</strong>
        <br />
        [null, true, false, true, 2, true, false, 2]
        <br />
        <strong>Explanation</strong> <br />
        RandomizedSet randomizedSet = new RandomizedSet();
        <br />
        randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was
        inserted successfully.
        <br />
        randomizedSet.remove(2); // Returns false as 2 does not exist in the
        set.
        <br />
        randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now
        contains [1,2].
        <br />
        randomizedSet.getRandom(); // getRandom() should return either 1 or 2
        randomly.
        <br />
        randomizedSet.remove(1); // Removes 1 from the set, returns true. Set
        now contains [2].
        <br />
        randomizedSet.insert(2); // 2 was already in the set, so return false.
        <br />
        randomizedSet.getRandom(); // Since 2 is the only number in the set,
        getRandom() will always return 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            -2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          At most <code>2 *&nbsp;</code>
          <code>
            10<sup>5</sup>
          </code>{" "}
          calls will be made to <code>insert</code>, <code>remove</code>, and{" "}
          <code>getRandom</code>.
        </li>
        <li>
          There will be <strong>at least one</strong> element in the data
          structure when <code>getRandom</code> is called.
        </li>
      </ul>
    </div>
  ),
  381: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        <code>RandomizedCollection</code> is a data structure that contains a
        collection of numbers, possibly duplicates (i.e., a multiset). It should
        support inserting and removing specific elements and also reporting a
        random element.
      </p>

      <p>
        Implement the <code>RandomizedCollection</code> class:
      </p>

      <ul>
        <li>
          <code>RandomizedCollection()</code> Initializes the empty{" "}
          <code>RandomizedCollection</code> object.
        </li>
        <li>
          <code>bool insert(int val)</code> Inserts an item <code>val</code>{" "}
          into the multiset, even if the item is already present. Returns{" "}
          <code>true</code> if the item is not present, <code>false</code>{" "}
          otherwise.
        </li>
        <li>
          <code>bool remove(int val)</code> Removes an item <code>val</code>{" "}
          from the multiset if present. Returns <code>true</code> if the item is
          present, <code>false</code> otherwise. Note that if <code>val</code>{" "}
          has multiple occurrences in the multiset, we only remove one of them.
        </li>
        <li>
          <code>int getRandom()</code> Returns a random element from the current
          multiset of elements. The probability of each element being returned
          is <strong>linearly related</strong> to the number of the same values
          the multiset contains.
        </li>
      </ul>

      <p>
        You must implement the functions of the class such that each function
        works on <strong>average</strong> <code>O(1)</code> time complexity.
      </p>

      <p>
        <strong>Note:</strong> The test cases are generated such that{" "}
        <code>getRandom</code> will only be called if there is{" "}
        <strong>at least one</strong> item in the{" "}
        <code>RandomizedCollection</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["RandomizedCollection", "insert", "insert", "insert", <br />
        "getRandom", "remove", "getRandom"] <br />
        [[], [1], [1], [2], [], [1], []] <br />
        <strong>Output</strong> <br />
        [null, true, false, true, 2, true, 1] <br />
        <strong>Explanation</strong> <br />
        RandomizedCollection randomizedCollection = new RandomizedCollection();{" "}
        <br />
        randomizedCollection.insert(1); // return true since the collection does
        not contain 1. <br />
        // Inserts 1 into the collection. <br />
        randomizedCollection.insert(1); // return false since the collection
        contains 1. <br />
        // Inserts another 1 into the collection. Collection now contains [1,1].{" "}
        <br />
        randomizedCollection.insert(2); // return true since the collection does
        not contain 2. <br />
        // Inserts 2 into the collection. Collection now contains [1,1,2].{" "}
        <br />
        randomizedCollection.getRandom(); // getRandom should: <br />
        // - return 1 with probability 2/3, or <br />
        // - return 2 with probability 1/3. <br />
        randomizedCollection.remove(1); // return true since the collection
        contains 1. <br />
        // Removes 1 from the collection. Collection now contains [1,2]. <br />
        randomizedCollection.getRandom(); // getRandom should return 1 or 2,
        both equally likely.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            -2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            2 * 10<sup>5</sup>
          </code>{" "}
          calls <strong>in total</strong> will be made to <code>insert</code>,{" "}
          <code>remove</code>, and <code>getRandom</code>.
        </li>
        <li>
          There will be <strong>at least one</strong> element in the data
          structure when <code>getRandom</code> is called.
        </li>
      </ul>
    </div>
  ),
  384: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, design an algorithm to
        randomly shuffle the array. All permutations of the array should be{" "}
        <strong>equally likely</strong> as a result of the shuffling.
      </p>

      <p>
        Implement the <code>Solution</code> class:
      </p>

      <ul>
        <li>
          <code>Solution(int[] nums)</code> Initializes the object with the
          integer array <code>nums</code>.
        </li>
        <li>
          <code>int[] reset()</code> Resets the array to its original
          configuration and returns it.
        </li>
        <li>
          <code>int[] shuffle()</code> Returns a random shuffling of the array.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["Solution", "shuffle", "reset", "shuffle"] <br />
        [[[1, 2, 3]], [], [], []] <br />
        <strong>Output</strong> <br />
        [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]] <br />
        <strong>Explanation</strong> <br />
        Solution solution = new Solution([1, 2, 3]); <br />
        solution.shuffle(); // Shuffle the array [1,2,3] and return its result.{" "}
        <br />
        // Any permutation of [1,2,3] must be equally likely to be returned.{" "}
        <br />
        // Example: return [3, 1, 2] <br />
        solution.reset(); // Resets the array back to its original configuration
        [1,2,3]. Return [1, 2, 3] <br />
        solution.shuffle(); // Returns the random shuffling of array [1,2,3].
        Example: return [1, 3, 2]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>
            -10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          All the elements of <code>nums</code> are <strong>unique</strong>.
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls <strong>in total</strong> will be made to <code>reset</code> and{" "}
          <code>shuffle</code>.
        </li>
      </ul>
    </div>
  ),
  528: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array of positive integers{" "}
        <code>w</code> where <code>w[i]</code> describes the{" "}
        <strong>weight</strong> of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        index.
      </p>
      <p>
        You need to implement the function <code>pickIndex()</code>, which{" "}
        <strong>randomly</strong> picks an index in the range{" "}
        <code>[0, w.length - 1]</code> (<strong>inclusive</strong>) and returns
        it. The <strong>probability</strong> of picking an index <code>i</code>{" "}
        is <code>w[i] / sum(w)</code>.
      </p>
      <ul>
        <li>
          For example, if <code>w = [1, 3]</code>, the probability of picking
          index <code>0</code> is <code>1 / (1 + 3) = 0.25</code> (i.e.,{" "}
          <code>25%</code>), and the probability of picking index <code>1</code>{" "}
          is <code>3 / (1 + 3) = 0.75</code> (i.e., <code>75%</code>).
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input</strong> <br />
        ["Solution","pickIndex"] <br />
        [[[1]],[]] <br />
        <strong>Output</strong> <br />
        [null,0] <br />
        <strong>Explanation</strong>
        Solution solution = new Solution([1]); solution.pickIndex(); // return
        0. The only option is to return 0 since there is only one element in w.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <pre>
        <strong>Input</strong> <br />
        ["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]{" "}
        <br />
        [[[1,3]],[],[],[],[],[]] <br />
        <strong>Output</strong> <br />
        [null,1,1,1,1,0] <br />
        <strong>Explanation</strong> <br />
        Solution solution = new Solution([1, 3]); <br />
        solution.pickIndex(); // return 1. It is returning the second element
        (index = 1) that has a probability of 3/4. <br />
        solution.pickIndex(); // return 1 <br />
        solution.pickIndex(); // return 1 <br />
        solution.pickIndex(); // return 1 <br />
        solution.pickIndex(); // return 0. It is returning the first element
        (index = 0) that has a probability of 1/4. <br />
        <br />
        Since this is a randomization problem, multiple answers are allowed.{" "}
        <br />
        All of the following outputs can be considered correct: <br />
        [null,1,1,1,1,0] <br />
        [null,1,1,1,1,1] <br />
        [null,1,1,1,0,0] <br />
        [null,1,1,1,0,1] <br />
        [null,1,0,1,0,0] <br />
        ...... <br />
        and so on.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= w.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= w[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>pickIndex</code> will be called at most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          times.
        </li>
      </ul>
    </div>
  ),
  1515: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A delivery company wants to build a new service center in a new city.
        The company knows the positions of all the customers in this city on a
        2D-Map and wants to build the new center in a position such that{" "}
        <strong>
          the sum of the euclidean distances to all customers is minimum
        </strong>
        .
      </p>
      <p>
        Given an array <code>positions</code> where{" "}
        <code>
          positions[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>{" "}
        is the position of the <code>ith</code> customer on the map, return{" "}
        <em>the minimum sum of the euclidean distances</em> to all customers.
      </p>
      <p>
        In other words, you need to choose the position of the service center{" "}
        <code>
          [x<sub>centre</sub>, y<sub>centre</sub>]
        </code>{" "}
        such that the following formula is minimized:
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/06/25/q4_edited.jpg"
      />
      <p>
        Answers within{" "}
        <code>
          10<sup>-5</sup>
        </code>{" "}
        of the actual value will be accepted.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/06/25/q4_e1.jpg"
        style={{ width: 377, height: 362 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> positions = [[0,1],[1,0],[1,2],[2,1]] <br />
        <strong>Output:</strong> 4.00000 <br />
        <strong>Explanation:</strong> As shown, you can see that choosing [x
        <sub>centre</sub>, y<sub>centre</sub>] = [1, 1] will make the distance
        to each customer = 1, the sum of all distances is 4 which is the minimum
        possible we can achieve.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/06/25/q4_e3.jpg"
        style={{ width: 419, height: 419 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> positions = [[1,1],[3,3]] <br />
        <strong>Output:</strong> 2.82843 <br />
        <strong>Explanation:</strong> The minimum possible sum of distances =
        sqrt(2) + sqrt(2) = 2.82843
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= positions.length &lt;= 50</code>
        </li>
        <li>
          <code>positions[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100
          </code>
        </li>
      </ul>
    </div>
  ),
  239: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of integers&nbsp;<code>nums</code>, there is a
        sliding window of size <code>k</code> which is moving from the very left
        of the array to the very right. You can only see the <code>k</code>{" "}
        numbers in the window. Each time the sliding window moves right by one
        position.
      </p>

      <p>
        Return <em>the max sliding window</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,-1,-3,5,3,6,7], k = 3 <br />
        <strong>Output:</strong> [3,3,5,5,6,7] <br />
        <strong>Explanation:</strong>
        {`
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       <strong>3</strong>
 1 [3  -1  -3] 5  3  6  7       <strong>3</strong>
 1  3 [-1  -3  5] 3  6  7      <strong> 5</strong>
 1  3  -1 [-3  5  3] 6  7       <strong>5</strong>
 1  3  -1  -3 [5  3  6] 7       <strong>6</strong>
 1  3  -1  -3  5 [3  6  7]      <strong>7</strong>
`}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1], k = 1<br />
        <strong>Output:</strong> [1]
        <br />
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= nums.length</code>
        </li>
      </ul>
    </div>
  ),
  862: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and an integer <code>k</code>,
        return{" "}
        <em>
          the length of the shortest non-empty <strong>subarray</strong> of{" "}
        </em>
        <code>nums</code>
        <em> with a sum of at least </em>
        <code>k</code>. If there is no such <strong>subarray</strong>, return{" "}
        <code>-1</code>.
      </p>

      <p>
        A <strong>subarray</strong> is a <strong>contiguous</strong> part of an
        array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1], k = 1 <br />
        <strong>Output:</strong> 1 <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,2], k = 4 <br />
        <strong>Output:</strong> -1 <br />
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [2,-1,2], k = 3 <br />
        <strong>Output:</strong> 3
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  918: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <strong>circular integer array</strong> <code>nums</code> of
        length <code>n</code>, return{" "}
        <em>
          the maximum possible sum of a non-empty <strong>subarray</strong> of{" "}
        </em>
        <code>nums</code>.
      </p>

      <p>
        A <strong>circular array</strong> means the end of the array connects to
        the beginning of the array. Formally, the next element of{" "}
        <code>nums[i]</code> is <code>nums[(i + 1) % n]</code> and the previous
        element of <code>nums[i]</code> is <code>nums[(i - 1 + n) % n]</code>.
      </p>

      <p>
        A <strong>subarray</strong> may only include each element of the fixed
        buffer <code>nums</code> at most once. Formally, for a subarray{" "}
        <code>nums[i], nums[i + 1], ..., nums[j]</code>, there does not exist{" "}
        <code>i &lt;= k1</code>, <code>k2 &lt;= j</code> with{" "}
        <code>k1 % n == k2 % n</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,-2,3,-2] <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> Subarray [3] has maximum sum 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,-3,5]
        <br />
        <strong>Output:</strong> 10
        <br />
        <strong>Explanation:</strong> Subarray [5,5] has maximum sum 5 + 5 = 10.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-3,-2,-3]
        <br />
        <strong>Output:</strong> -2
        <br />
        <strong>Explanation:</strong> Subarray [-2] has maximum sum -2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1425: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and an integer <code>k</code>,
        return the maximum sum of a <strong>non-empty</strong> subsequence of
        that array such that for every two <strong>consecutive</strong> integers
        in the subsequence, <code>nums[i]</code> and <code>nums[j]</code>, where{" "}
        <code>i &lt; j</code>, the condition <code>j - i &lt;= k</code> is
        satisfied.
      </p>

      <p>
        A <em>subsequence</em> of an array is obtained by deleting some number
        of elements (can be zero) from the array, leaving the remaining elements
        in their original order.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [10,2,-10,5,20], k = 2<br />
        <strong>Output:</strong> 37
        <br />
        <b>Explanation:</b> The subsequence is [10, 2, 5, 20].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-1,-2,-3], k = 1 <br />
        <strong>Output:</strong> -1
        <br />
        <b>Explanation:</b> The subsequence must be non-empty, so we choose the
        largest number.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [10,-2,-10,-5,20], k = 2<br />
        <strong>Output:</strong> 23
        <br />
        <b>Explanation:</b> The subsequence is [10, -2, -5, 20].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1438: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code> and an integer{" "}
        <code>limit</code>, return the size of the longest{" "}
        <strong>non-empty</strong> subarray such that the absolute difference
        between any two elements of this subarray is less than or equal to{" "}
        <code>limit</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [8,2,4,7], limit = 4 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> All subarrays are: <br />
        [8] with maximum absolute diff |8-8| = 0 &lt;= 4.
        <br />
        [8,2] with maximum absolute diff |8-2| = 6 &gt; 4. <br />
        [8,2,4] with maximum absolute diff |8-2| = 6 &gt; 4.
        <br />
        [8,2,4,7] with maximum absolute diff |8-2| = 6 &gt; 4.
        <br />
        [2] with maximum absolute diff |2-2| = 0 &lt;= 4.
        <br />
        [2,4] with maximum absolute diff |2-4| = 2 &lt;= 4.
        <br />
        [2,4,7] with maximum absolute diff |2-7| = 5 &gt; 4.
        <br />
        [4] with maximum absolute diff |4-4| = 0 &lt;= 4.
        <br />
        [4,7] with maximum absolute diff |4-7| = 3 &lt;= 4.
        <br />
        [7] with maximum absolute diff |7-7| = 0 &lt;= 4. <br />
        Therefore, the size of the longest subarray is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [10,1,2,4,7,2], limit = 5<br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The subarray [2,4,7,2] is the longest
        since the maximum absolute diff is |2-7| = 5 &lt;= 5.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,2,2,4,4,2,2], limit = 0<br />
        <strong>Output:</strong> 3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= limit &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1499: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>points</code> containing the coordinates of
        points on a 2D plane, sorted by the x-values, where{" "}
        <code>
          points[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>{" "}
        such that{" "}
        <code>
          x<sub>i</sub> &lt; x<sub>j</sub>
        </code>{" "}
        for all <code>1 &lt;= i &lt; j &lt;= points.length</code>. You are also
        given an integer <code>k</code>.
      </p>

      <p>
        Return <em>the maximum value of the equation </em>
        <code>
          y<sub>i</sub> + y<sub>j</sub> + |x<sub>i</sub> - x<sub>j</sub>|
        </code>{" "}
        where{" "}
        <code>
          |x<sub>i</sub> - x<sub>j</sub>| &lt;= k
        </code>{" "}
        and <code>1 &lt;= i &lt; j &lt;= points.length</code>.
      </p>

      <p>
        It is guaranteed that there exists at least one pair of points that
        satisfy the constraint{" "}
        <code>
          |x<sub>i</sub> - x<sub>j</sub>| &lt;= k
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> points = [[1,3],[2,0],[5,10],[6,-10]], k = 1{" "}
        <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The first two points satisfy the condition
        |x<sub>i</sub> - x<sub>j</sub>| &lt;= 1 and if we calculate the equation
        we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the
        condition and give a value of 10 + -10 + |5 - 6| = 1. No other pairs
        satisfy the condition, so we return the max of 4 and 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> points = [[0,0],[3,0],[9,2]], k = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation: </strong>Only the first two points have an absolute
        difference of 3 or less in the x-values, and give the value of 0 + 0 +
        |0 - 3| = 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= points.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>points[i].length == 2</code>
        </li>
        <li>
          <code>
            -10<sup>8</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10
            <sup>8</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 2 * 10<sup>8</sup>
          </code>
        </li>
        <li>
          <code>
            x<sub>i</sub> &lt; x<sub>j</sub>
          </code>{" "}
          for all <code>1 &lt;= i &lt; j &lt;= points.length</code>
        </li>
        <li>
          <code>
            x<sub>i</sub>
          </code>{" "}
          form a strictly increasing sequence.
        </li>
      </ul>
    </div>
  ),
  1687: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have the task of delivering some boxes from storage to their ports
        using only one ship. However, this ship has a <strong>limit</strong> on
        the <strong>number of boxes</strong> and the{" "}
        <strong>total weight</strong> that it can carry.
      </p>

      <p>
        You are given an array <code>boxes</code>, where{" "}
        <code>
          boxes[i] = [ports<sub>​​i</sub>​, weight<sub>i</sub>]
        </code>
        , and three integers <code>portsCount</code>, <code>maxBoxes</code>, and{" "}
        <code>maxWeight</code>.
      </p>

      <ul>
        <li>
          <code>
            ports<sub>​​i</sub>
          </code>{" "}
          is the port where you need to deliver the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          box and{" "}
          <code>
            weights<sub>i</sub>
          </code>{" "}
          is the weight of the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          box.
        </li>
        <li>
          <code>portsCount</code> is the number of ports.
        </li>
        <li>
          <code>maxBoxes</code> and <code>maxWeight</code> are the respective
          box and weight limits of the ship.
        </li>
      </ul>

      <p>
        The boxes need to be delivered{" "}
        <strong>in the order they are given</strong>. The ship will follow these
        steps:
      </p>

      <ul>
        <li>
          The ship will take some number of boxes from the <code>boxes</code>{" "}
          queue, not violating the <code>maxBoxes</code> and{" "}
          <code>maxWeight</code> constraints.
        </li>
        <li>
          For each loaded box <strong>in order</strong>, the ship will make a{" "}
          <strong>trip</strong> to the port the box needs to be delivered to and
          deliver it. If the ship is already at the correct port, no{" "}
          <strong>trip</strong> is needed, and the box can immediately be
          delivered.
        </li>
        <li>
          The ship then makes a return <strong>trip</strong> to storage to take
          more boxes from the queue.
        </li>
      </ul>

      <p>
        The ship must end at storage after all the boxes have been delivered.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of <strong>trips</strong> the ship
          needs to make to deliver all boxes to their respective ports.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> boxes = [[1,1],[2,1],[1,1]], portsCount = 2,
        maxBoxes = 3, maxWeight = 3 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The optimal strategy is as follows: <br />
        - The ship takes all the boxes in the queue, goes to port 1, then port
        2, then port 1 again, then returns to storage. 4 trips. <br />
        So the total number of trips is 4. <br /> <br />
        Note that the first and third boxes cannot be delivered together because
        the boxes need to be delivered in order (i.e. the second box needs to be
        delivered at port 2 before the third box).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]],
        portsCount = 3, maxBoxes = 3, maxWeight = 6 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The optimal strategy is as follows: <br />
        - The ship takes the first box, goes to port 1, then returns to storage.
        2 trips. <br />
        - The ship takes the second, third and fourth boxes, goes to port 3,
        then returns to storage. 2 trips. <br />
        - The ship takes the fifth box, goes to port 2, then returns to storage.
        2 trips. <br />
        So the total number of trips is 2 + 2 + 2 = 6.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]],
        portsCount = 3, maxBoxes = 6, maxWeight = 7 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The optimal strategy is as follows: <br />
        - The ship takes the first and second boxes, goes to port 1, then
        returns to storage. 2 trips. <br />
        - The ship takes the third and fourth boxes, goes to port 2, then
        returns to storage. 2 trips. <br />
        - The ship takes the fifth and sixth boxes, goes to port 3, then returns
        to storage. 2 trips. <br />
        So the total number of trips is 2 + 2 + 2 = 6.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= boxes.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= portsCount, maxBoxes, maxWeight &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= ports<sub>​​i</sub> &lt;= portsCount
          </code>
        </li>
        <li>
          <code>
            1 &lt;= weights<sub>i</sub> &lt;= maxWeight
          </code>
        </li>
      </ul>
    </div>
  ),
  1696: (
    <>
      <div class="elfjS" data-track-load="description_content">
        <p>
          You are given a <strong>0-indexed</strong> integer array{" "}
          <code>nums</code> and an integer <code>k</code>.
        </p>

        <p>
          You are initially standing at index <code>0</code>. In one move, you
          can jump at most <code>k</code> steps forward without going outside
          the boundaries of the array. That is, you can jump from index{" "}
          <code>i</code> to any index in the range{" "}
          <code>[i + 1, min(n - 1, i + k)]</code> <strong>inclusive</strong>.
        </p>

        <p>
          You want to reach the last index of the array (index{" "}
          <code>n - 1</code>). Your <strong>score</strong> is the{" "}
          <strong>sum</strong> of all <code>nums[j]</code> for each index{" "}
          <code>j</code> you visited in the array.
        </p>

        <p>
          Return{" "}
          <em>
            the <strong>maximum score</strong> you can get
          </em>
          .
        </p>

        <p>&nbsp;</p>
        <p>
          <strong class="example">Example 1:</strong>
        </p>

        <pre>
          <strong>Input:</strong> nums = [<u>1</u>,<u>-1</u>,-2,<u>4</u>,-7,
          <u>3</u>], k = 2 <br />
          <strong>Output:</strong> 7 <br />
          <strong>Explanation:</strong> You can choose your jumps forming the
          subsequence [1,-1,4,3] (underlined above). The sum is 7.
        </pre>

        <p>
          <strong class="example">Example 2:</strong>
        </p>

        <pre>
          <strong>Input:</strong> nums = [<u>10</u>,-5,-2,<u>4</u>,0,<u>3</u>],
          k = 3 <br />
          <strong>Output:</strong> 17 <br />
          <strong>Explanation:</strong> You can choose your jumps forming the
          subsequence [10,4,3] (underlined above). The sum is 17.
        </pre>

        <p>
          <strong class="example">Example 3:</strong>
        </p>

        <pre>
          <strong>Input:</strong> nums = [1,-5,-20,4,-1,3,-6,-3], k = 2 <br />
          <strong>Output:</strong> 0
        </pre>

        <p>&nbsp;</p>
        <p>
          <strong>Constraints:</strong>
        </p>

        <ul>
          <li>
            <code>
              1 &lt;= nums.length, k &lt;= 10<sup>5</sup>
            </code>
          </li>
          <li>
            <code>
              -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
            </code>
          </li>
        </ul>
      </div>
    </>
  ),
  2071: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have <code>n</code> tasks and <code>m</code> workers. Each task has
        a strength requirement stored in a <strong>0-indexed</strong> integer
        array <code>tasks</code>, with the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        task requiring <code>tasks[i]</code> strength to complete. The strength
        of each worker is stored in a <strong>0-indexed</strong> integer array{" "}
        <code>workers</code>, with the{" "}
        <code>
          j<sup>th</sup>
        </code>{" "}
        worker having <code>workers[j]</code> strength. Each worker can only be
        assigned to a <strong>single</strong> task and must have a strength{" "}
        <strong>greater than or equal</strong> to the task's strength
        requirement (i.e., <code>workers[j] &gt;= tasks[i]</code>).
      </p>

      <p>
        Additionally, you have <code>pills</code> magical pills that will{" "}
        <strong>increase a worker's strength</strong> by <code>strength</code>.
        You can decide which workers receive the magical pills, however, you may
        only give each worker <strong>at most one</strong> magical pill.
      </p>

      <p>
        Given the <strong>0-indexed </strong>integer arrays <code>tasks</code>{" "}
        and <code>workers</code> and the integers <code>pills</code> and{" "}
        <code>strength</code>, return{" "}
        <em>
          the <strong>maximum</strong> number of tasks that can be completed.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        tasks = [
        <u>
          <strong>3</strong>
        </u>
        ,
        <u>
          <strong>2</strong>
        </u>
        ,
        <u>
          <strong>1</strong>
        </u>
        ], <br />
        workers = [
        <u>
          <strong>0</strong>
        </u>
        ,
        <u>
          <strong>3</strong>
        </u>
        ,
        <u>
          <strong>3</strong>
        </u>
        ], pills = 1, strength = 1<strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong>
        <br />
        We can assign the magical pill and tasks as follows:
        <br />
        - Give the magical pill to worker 0.
        <br />
        - Assign worker 0 to task 2 (0 + 1 &gt;= 1)
        <br />
        - Assign worker 1 to task 1 (3 &gt;= 2)
        <br />- Assign worker 2 to task 0 (3 &gt;= 3)
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        tasks = [
        <u>
          <strong>5</strong>
        </u>
        ,4],
        <br />
        workers = [
        <u>
          <strong>0</strong>
        </u>
        ,0,0], pills = 1, strength = 5<br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong>
        <br />
        We can assign the magical pill and tasks as follows:
        <br />
        - Give the magical pill to worker 0.
        <br />- Assign worker 0 to task 0 (0 + 5 &gt;= 5)
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong>
        <br />
        tasks = [
        <u>
          <strong>10</strong>
        </u>
        ,
        <u>
          <strong>15</strong>
        </u>
        ,30],
        <br />
        workers = [
        <u>
          <strong>0</strong>
        </u>
        ,
        <u>
          <strong>10</strong>
        </u>
        ,10,10,10], pills = 3, strength = 10
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong>
        <br />
        We can assign the magical pills and tasks as follows:
        <br />
        - Give the magical pill to worker 0 and worker 1.
        <br />
        - Assign worker 0 to task 0 (0 + 10 &gt;= 10)
        <br />
        - Assign worker 1 to task 1 (10 + 10 &gt;= 15)
        <br />
        The last pill is not given because it will not make any worker strong
        enough for the last task.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == tasks.length</code>
        </li>
        <li>
          <code>m == workers.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n, m &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= pills &lt;= m</code>
        </li>
        <li>
          <code>
            0 &lt;= tasks[i], workers[j], strength &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2407: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and an integer{" "}
        <code>k</code>.
      </p>

      <p>
        Find the longest subsequence of <code>nums</code> that meets the
        following requirements:
      </p>

      <ul>
        <li>
          The subsequence is <strong>strictly increasing</strong> and
        </li>
        <li>
          The difference between adjacent elements in the subsequence is{" "}
          <strong>at most</strong> <code>k</code>.
        </li>
      </ul>

      <p>
        Return
        <em>
          {" "}
          the length of the <strong>longest</strong>{" "}
          <strong>subsequence</strong> that meets the requirements.
        </em>
      </p>

      <p>
        A <strong>subsequence</strong> is an array that can be derived from
        another array by deleting some or no elements without changing the order
        of the remaining elements.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,1,4,3,4,5,8,15], k = 3 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> <br />
        The longest subsequence that meets the requirements is [1,3,4,5,8].{" "}
        <br />
        The subsequence has a length of 5, so we return 5. <br />
        Note that the subsequence [1,3,4,5,8,15] does not meet the requirements
        because 15 - 8 = 7 is larger than 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [7,4,5,1,8,12,4,7], k = 5 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> <br />
        The longest subsequence that meets the requirements is [4,5,8,12].{" "}
        <br />
        The subsequence has a length of 4, so we return 4.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,5], k = 1 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> <br />
        The longest subsequence that meets the requirements is [1]. <br />
        The subsequence has a length of 1, so we return 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i], k &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2444: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and two integers{" "}
        <code>minK</code> and <code>maxK</code>.
      </p>

      <p>
        A <strong>fixed-bound subarray</strong> of <code>nums</code> is a
        subarray that satisfies the following conditions:
      </p>

      <ul>
        <li>
          The <strong>minimum</strong> value in the subarray is equal to{" "}
          <code>minK</code>.
        </li>
        <li>
          The <strong>maximum</strong> value in the subarray is equal to{" "}
          <code>maxK</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>number</strong> of fixed-bound subarrays
        </em>
        .
      </p>

      <p>
        A <strong>subarray</strong> is a <strong>contiguous</strong> part of an
        array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,5,2,7,5], minK = 1, maxK = 5 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The fixed-bound subarrays are [1,3,5] and
        [1,3,5,2].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1], minK = 1, maxK = 1 <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation:</strong> Every subarray of nums is a fixed-bound
        subarray. There are 10 possible subarrays.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i], minK, maxK &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2762: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code>. A subarray of <code>nums</code> is called{" "}
        <strong>continuous</strong> if:
      </p>

      <ul>
        <li>
          Let <code>i</code>, <code>i + 1</code>, ..., <code>j</code>
          <sub> </sub>be the indices in the subarray. Then, for each pair of
          indices{" "}
          <code>
            i &lt;= i<sub>1</sub>, i<sub>2</sub> &lt;= j
          </code>
          ,{" "}
          <code>
            <font face="monospace">0 &lt;=</font> |nums[i<sub>1</sub>] - nums[i
            <sub>2</sub>]| &lt;= 2
          </code>
          .
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the total number of <strong>continuous</strong> subarrays.
        </em>
      </p>

      <p>
        A subarray is a contiguous <strong>non-empty</strong> sequence of
        elements within an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,4,2,4]
        <br />
        <strong>Output:</strong> 8<br />
        <strong>Explanation:</strong> <br />
        Continuous subarray of size 1: [5], [4], [2], [4].
        <br />
        Continuous subarray of size 2: [5,4], [4,2], [2,4].
        <br />
        Continuous subarray of size 3: [4,2,4].
        <br />
        Thereare no subarrys of size 4.
        <br />
        Total continuous subarrays = 4 + 3 + 1 = 8.
        <br />
        It can be shown that there are no more continuous subarrays.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> 6<br />
        <strong>Explanation:</strong> <br />
        Continuous subarray of size 1: [1], [2], [3].
        <br />
        Continuous subarray of size 2: [1,2], [2,3].
        <br />
        Continuous subarray of size 3: [1,2,3].
        <br />
        Total continuous subarrays = 3 + 2 + 1 = 6.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2944: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>prices</code> where{" "}
        <code>prices[i]</code> denotes the number of coins needed to purchase
        the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        fruit.
      </p>

      <p>The fruit market has the following reward for each fruit:</p>

      <ul>
        <li>
          If you purchase the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          fruit at <code>prices[i]</code> coins, you can get any number of the
          next <code>(i + 1)</code> fruits for free.
        </li>
      </ul>

      <p>
        <strong>Note</strong> that even if you <strong>can</strong> take fruit{" "}
        <code>j</code> for free, you can still purchase it for{" "}
        <code>prices[j]</code> coins to receive its reward.
      </p>

      <p>
        Return the <strong>minimum</strong> number of coins needed to acquire
        all the fruits.
      </p>

      <p>&nbsp;</p>
      <strong class="example">Example 1:</strong>

      <pre class="example-block">
        <strong>Input:</strong> <span class="example-io">prices = [3,1,2]</span>{" "}
        <br />
        <strong>Output:</strong> <span class="example-io">4</span> <br />
        <strong>Explanation:</strong>
        <ul>
          <li>
            Purchase the 1<sup>st</sup> fruit with <code>prices[0] = 3</code>{" "}
            coins, you are allowed to take the 2<sup>nd</sup> fruit for free.
          </li>
          <li>
            Purchase the 2<sup>nd</sup> fruit with <code>prices[1] = 1</code>{" "}
            coin, you are allowed to take the 3<sup>rd</sup> fruit for free.
          </li>
          <li>
            Take the 3<sup>rd</sup> fruit for free.
          </li>
        </ul>
        <p>
          Note that even though you could take the 2<sup>nd</sup> fruit for free
          as a reward of buying 1<sup>st</sup> fruit, you purchase it to receive
          its reward, which is more optimal.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">prices = [1,10,1,1]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">2</span>
        <br />
        <strong>Explanation:</strong>
        <ul>
          <li>
            Purchase the 1<sup>st</sup> fruit with <code>prices[0] = 1</code>{" "}
            coin, you are allowed to take the 2<sup>nd</sup> fruit for free.
          </li>
          <li>
            Take the 2<sup>nd</sup> fruit for free.
          </li>
          <li>
            Purchase the 3<sup>rd</sup> fruit for <code>prices[2] = 1</code>{" "}
            coin, you are allowed to take the 4<sup>th</sup> fruit for free.
          </li>
          <li>
            Take the 4<sup>t</sup>
            <sup>h</sup> fruit for free.
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">prices = [26,18,6,12,49,7,45,45]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">39</span>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <ul>
          <li>
            Purchase the 1<sup>st</sup> fruit with <code>prices[0] = 26</code>{" "}
            coin, you are allowed to take the 2<sup>nd</sup> fruit for free.
          </li>
          <li>
            Take the 2<sup>nd</sup> fruit for free.
          </li>
          <li>
            Purchase the 3<sup>rd</sup> fruit for <code>prices[2] = 6</code>{" "}
            coin, you are allowed to take the 4<sup>th</sup>, 5<sup>th</sup> and
            6<sup>th</sup> (the next three) fruits for free.
          </li>
          <li>
            Take the 4<sup>t</sup>
            <sup>h</sup> fruit for free.
          </li>
          <li>
            Take the 5<sup>t</sup>
            <sup>h</sup> fruit for free.
          </li>
          <li>
            Purchase the 6<sup>th</sup> fruit with <code>prices[5] = 7</code>{" "}
            coin, you are allowed to take the 8<sup>th</sup> and 9<sup>th</sup>{" "}
            fruit for free.
          </li>
          <li>
            Take the 7<sup>t</sup>
            <sup>h</sup> fruit for free.
          </li>
          <li>
            Take the 8<sup>t</sup>
            <sup>h</sup> fruit for free.
          </li>
        </ul>
        <p>
          Note that even though you could take the 6<sup>th</sup> fruit for free
          as a reward of buying 3<sup>rd</sup> fruit, you purchase it to receive
          its reward, which is more optimal.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= prices.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= prices[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2945: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code>.
      </p>

      <p>
        You can perform any number of operations, where each operation involves
        selecting a <strong>subarray</strong> of the array and replacing it with
        the <strong>sum</strong> of its elements. For example, if the given
        array is <code>[1,3,5,6]</code> and you select subarray{" "}
        <code>[3,5]</code> the array will convert to <code>[1,8,6]</code>.
      </p>

      <p>
        Return <em>the </em>
        <strong>
          <em>maximum</em>
        </strong>
        <em> length of a </em>
        <strong>
          <em>non-decreasing</em>
        </strong>
        <em> array that can be made after applying operations.</em>
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous <strong>non-empty</strong>{" "}
        sequence of elements within an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,2,2] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> This array with length 3 is not
        non-decreasing. <br />
        We have two ways to make the array length two. <br />
        First, choosing subarray [2,2] converts the array to [5,4]. <br />
        Second, choosing subarray [5,2] converts the array to [7,2]. <br />
        In these two ways the array is not non-decreasing. <br />
        And if we choose subarray [5,2,2] and replace it with [9] it becomes
        non-decreasing. <br />
        So the answer is 1.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The array is non-decreasing. So the answer
        is 4.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,3,2,6] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Replacing [3,2] with [5] converts the
        given array to [4,5,6] that is non-decreasing. Because the given array
        is not non-decreasing, the maximum possible answer is 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2969: (
    <article role="main" class="blog-post">
      <p>
        You are at a fruit market with different types of exotic fruits on
        display.
      </p>

      <p>
        You are given a <strong>1-indexed</strong> array <code>prices</code>,
        where <code>prices[i]</code> denotes the number of coins needed to
        purchase the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        fruit.
      </p>

      <p>The fruit market has the following offer:</p>

      <ul>
        <li>
          If you purchase the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          fruit at <code>prices[i]</code> coins, you can get the next{" "}
          <code>i</code> fruits for free.
        </li>
      </ul>

      <p>
        <strong>Note</strong> that even if you <strong>can</strong> take fruit{" "}
        <code>j</code> for free, you can still purchase it for{" "}
        <code>prices[j]</code> coins to receive a new offer.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of coins needed to acquire all the
          fruits
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [3,1,2] <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> You can acquire the fruits as follows:
        <br />- Purchase the 1<sup>st</sup> fruit with 3 coins, and you are
        allowed to take the 2<sup>nd</sup> fruit for free.
        <br />- Purchase the 2<sup>nd</sup> fruit with 1 coin, and you are
        allowed to take the 3<sup>rd</sup> fruit for free.
        <br />- Take the 3<sup>rd</sup> fruit for free.
        <br />
        Note that even though you were allowed to take the 2<sup>nd</sup> fruit
        for free, you purchased it because it is more optimal.
        <br />
        It can be proven that 4 is the minimum number of coins needed to acquire
        all the fruits.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [1,10,1,1]
        <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> You can acquire the fruits as follows:
        <br />- Purchase the 1<sup>st</sup> fruit with 1 coin, and you are
        allowed to take the 2<sup>nd</sup> fruit for free.
        <br />- Take the 2<sup>nd</sup> fruit for free.
        <br />- Purchase the 3<sup>rd</sup> fruit for 1 coin, and you are
        allowed to take the 4<sup>th</sup> fruit for free.
        <br />- Take the 4<sup>t</sup>
        <sup>h</sup> fruit for free.
        <br />
        It can be proven that 2 is the minimum number of coins needed to acquire
        all the fruits.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= prices.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= prices[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </article>
  ),
  5: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, return <em>the longest</em>{" "}
        <span
          data-keyword="palindromic-string"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rt:"
              >
                <div>
                  <em>palindromic</em>
                </div>
              </div>
            </div>
          </div>
        </span>{" "}
        <span
          data-keyword="substring-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rv:"
              >
                <div>
                  <em>substring</em>
                </div>
              </div>
            </div>
          </div>
        </span>{" "}
        in <code>s</code>.
      </p>

      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "babad" <br />
        <strong>Output:</strong> "bab" <br />
        <strong>Explanation:</strong> "aba" is also a valid answer.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "cbbd" <br />
        <strong>Output:</strong> "bb"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>s</code> consist of only digits and English letters.
        </li>
      </ul>
    </div>
  ),
  11: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>height</code> of length{" "}
        <code>n</code>. There are <code>n</code> vertical lines drawn such that
        the two endpoints of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        line are <code>(i, 0)</code> and <code>(i, height[i])</code>.
      </p>

      <p>
        Find two lines that together with the x-axis form a container, such that
        the container contains the most water.
      </p>

      <p>
        Return <em>the maximum amount of water a container can store</em>.
      </p>

      <p>
        <strong>Notice</strong> that you may not slant the container.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg"
        style={{ width: 600, height: 287 }}
      />
      <pre>
        <strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7] <br />
        <strong>Output:</strong> 49 <br />
        <strong>Explanation:</strong> The above vertical lines are represented
        by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue
        section) the container can contain is 49.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> height = [1,1] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == height.length</code>
        </li>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= height[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  15: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array nums, return all the triplets{" "}
        <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>,{" "}
        <code>i != k</code>, and <code>j != k</code>, and{" "}
        <code>nums[i] + nums[j] + nums[k] == 0</code>.
      </p>

      <p>Notice that the solution set must not contain duplicate triplets.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-1,0,1,2,-1,-4] <br />
        <strong>Output:</strong> [[-1,-1,2],[-1,0,1]] <br />
        <strong>Explanation:</strong> <br />
        nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. <br />
        nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. <br />
        nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. <br />
        The distinct triplets are [-1,0,1] and [-1,-1,2]. <br />
        Notice that the order of the output and the order of the triplets does
        not matter.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1,1] <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> The only possible triplet does not sum up
        to 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,0,0] <br />
        <strong>Output:</strong> [[0,0,0]] <br />
        <strong>Explanation:</strong> The only possible triplet sums up to 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>3 &lt;= nums.length &lt;= 3000</code>
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  16: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> of length <code>n</code> and an
        integer <code>target</code>, find three integers in <code>nums</code>{" "}
        such that the sum is closest to <code>target</code>.
      </p>

      <p>
        Return <em>the sum of the three integers</em>.
      </p>

      <p>You may assume that each input would have exactly one solution.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-1,2,1,-4], target = 1 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The sum that is closest to the target is
        2. (-1 + 2 + 1 = 2).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,0,0], target = 1 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The sum that is closest to the target is
        0. (0 + 0 + 0 = 0).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>3 &lt;= nums.length &lt;= 500</code>
        </li>
        <li>
          <code>-1000 &lt;= nums[i] &lt;= 1000</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  18: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> of <code>n</code> integers, return{" "}
        <em>
          an array of all the <strong>unique</strong> quadruplets
        </em>{" "}
        <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:
      </p>

      <ul>
        <li>
          <code>0 &lt;= a, b, c, d&nbsp;&lt; n</code>
        </li>
        <li>
          <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are{" "}
          <strong>distinct</strong>.
        </li>
        <li>
          <code>nums[a] + nums[b] + nums[c] + nums[d] == target</code>
        </li>
      </ul>

      <p>
        You may return the answer in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,0,-1,0,-2,2], target = 0 <br />
        <strong>Output:</strong> [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,2,2,2,2], target = 8 <br />
        <strong>Output:</strong> [[2,2,2,2]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 200</code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  19: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a linked list, remove the{" "}
        <code>
          n<sup>th</sup>
        </code>{" "}
        node from the end of the list and return its head.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg"
        style={{ width: 542, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5], n = 2 <br />
        <strong>Output:</strong> [1,2,3,5]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [1], n = 1 <br />
        <strong>Output:</strong> []
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [1,2], n = 1 <br />
        <strong>Output:</strong> [1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is <code>sz</code>.
        </li>
        <li>
          <code>1 &lt;= sz &lt;= 30</code>
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= sz</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you do this in one pass?
      </p>
    </div>
  ),
  26: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> sorted in{" "}
        <strong>non-decreasing order</strong>, remove the duplicates{" "}
        <a
          href="https://en.wikipedia.org/wiki/In-place_algorithm"
          target="_blank"
          rel="noreferrer"
        >
          <strong>in-place</strong>
        </a>{" "}
        such that each unique element appears only <strong>once</strong>. The{" "}
        <strong>relative order</strong> of the elements should be kept the{" "}
        <strong>same</strong>. Then return{" "}
        <em>the number of unique elements in </em>
        <code>nums</code>.
      </p>

      <p>
        Consider the number of unique elements of <code>nums</code> to be{" "}
        <code>k</code>, to get accepted, you need to do the following things:
      </p>

      <ul>
        <li>
          Change the array <code>nums</code> such that the first <code>k</code>{" "}
          elements of <code>nums</code> contain the unique elements in the order
          they were present in <code>nums</code> initially. The remaining
          elements of <code>nums</code> are not important as well as the size of{" "}
          <code>nums</code>.
        </li>
        <li>
          Return <code>k</code>.
        </li>
      </ul>

      <p>
        <strong>Custom Judge:</strong>
      </p>

      <p>The judge will test your solution with the following code:</p>

      <pre>
        {`int[] nums = [...]; // Input array
    int[] expectedNums = [...]; // The expected answer with correct length
    
    int k = removeDuplicates(nums); // Calls your implementation
    
    assert k == expectedNums.length;
    for (int i = 0; i &lt; k; i++) {
        assert nums[i] == expectedNums[i];
    }`}
      </pre>

      <p>
        If all assertions pass, then your solution will be{" "}
        <strong>accepted</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2] <br />
        <strong>Output:</strong> 2, nums = [1,2,_] <br />
        <strong>Explanation:</strong> Your function should return k = 2, with
        the first two elements of nums being 1 and 2 respectively. It does not
        matter what you leave beyond the returned k (hence they are
        underscores).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,0,1,1,1,2,2,3,3,4] <br />
        <strong>Output:</strong> 5, nums = [0,1,2,3,4,_,_,_,_,_] <br />
        <strong>Explanation:</strong> Your function should return k = 5, with
        the first five elements of nums being 0, 1, 2, 3, and 4 respectively. It
        does not matter what you leave beyond the returned k (hence they are
        underscores).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>-100 &lt;= nums[i] &lt;= 100</code>
        </li>
        <li>
          <code>nums</code> is sorted in <strong>non-decreasing</strong> order.
        </li>
      </ul>
    </div>
  ),
  27: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and an integer <code>val</code>
        , remove all occurrences of <code>val</code> in <code>nums</code>{" "}
        <a
          href="https://en.wikipedia.org/wiki/In-place_algorithm"
          target="_blank"
          rel="noreferrer"
        >
          <strong>in-place</strong>
        </a>
        . The order of the elements may be changed. Then return{" "}
        <em>the number of elements in </em>
        <code>nums</code>
        <em> which are not equal to </em>
        <code>val</code>.
      </p>

      <p>
        Consider the number of elements in <code>nums</code> which are not equal
        to <code>val</code> be <code>k</code>, to get accepted, you need to do
        the following things:
      </p>

      <ul>
        <li>
          Change the array <code>nums</code> such that the first <code>k</code>{" "}
          elements of <code>nums</code> contain the elements which are not equal
          to <code>val</code>. The remaining elements of <code>nums</code> are
          not important as well as the size of <code>nums</code>.
        </li>
        <li>
          Return <code>k</code>.
        </li>
      </ul>

      <p>
        <strong>Custom Judge:</strong>
      </p>

      <p>The judge will test your solution with the following code:</p>

      <pre>
        {`int[] nums = [...]; // Input array
int val = ...; // Value to remove
int[] expectedNums = [...]; // The expected answer with correct length.
                            // It is sorted with no values equaling val.

int k = removeElement(nums, val); // Calls your implementation

assert k == expectedNums.length;
sort(nums, 0, k); // Sort the first k elements of nums
for (int i = 0; i &lt; actualLength; i++) {
    assert nums[i] == expectedNums[i];
}`}
      </pre>

      <p>
        If all assertions pass, then your solution will be{" "}
        <strong>accepted</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,2,2,3], val = 3 <br />
        <strong>Output:</strong> 2, nums = [2,2,_,_]
        <br />
        <strong>Explanation:</strong> Your function should return k = 2, with
        the first two elements of nums being 2. It does not matter what you
        leave beyond the returned k (hence they are underscores).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1,2,2,3,0,4,2], val = 2<br />
        <strong>Output:</strong> 5, nums = [0,1,4,0,3,_,_,_]
        <br />
        <strong>Explanation:</strong> Your function should return k = 5, with
        the first five elements of nums containing 0, 0, 1, 3, and 4. Note that
        the five elements can be returned in any order. It does not matter what
        you leave beyond the returned k (hence they are underscores).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 50</code>
        </li>
        <li>
          <code>0 &lt;= val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  28: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>needle</code> and <code>haystack</code>, return
        the index of the first occurrence of <code>needle</code> in{" "}
        <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not
        part of <code>haystack</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> haystack = "sadbutsad", needle = "sad" <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> "sad" occurs at index 0 and 6. The first
        occurrence is at index 0, so we return 0.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> haystack = "leetcode", needle = "leeto"
        <br />
        <strong>Output:</strong> -1
        <br />
        <strong>Explanation:</strong> "leeto" did not occur in "leetcode", so we
        return -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= haystack.length, needle.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>haystack</code> and <code>needle</code> consist of only
          lowercase English characters.
        </li>
      </ul>
    </div>
  ),
  31: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>permutation</strong> of an array of integers is an arrangement
        of its members into a sequence or linear order.
      </p>

      <ul>
        <li>
          For example, for <code>arr = [1,2,3]</code>, the following are all the
          permutations of <code>arr</code>:{" "}
          <code>[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]</code>.
        </li>
      </ul>

      <p>
        The <strong>next permutation</strong> of an array of integers is the
        next lexicographically greater permutation of its integer. More
        formally, if all the permutations of the array are sorted in one
        container according to their lexicographical order, then the{" "}
        <strong>next permutation</strong> of that array is the permutation that
        follows it in the sorted container. If such arrangement is not possible,
        the array must be rearranged as the lowest possible order (i.e., sorted
        in ascending order).
      </p>

      <ul>
        <li>
          For example, the next permutation of <code>arr = [1,2,3]</code> is{" "}
          <code>[1,3,2]</code>.
        </li>
        <li>
          Similarly, the next permutation of <code>arr = [2,3,1]</code> is{" "}
          <code>[3,1,2]</code>.
        </li>
        <li>
          While the next permutation of <code>arr = [3,2,1]</code> is{" "}
          <code>[1,2,3]</code> because <code>[3,2,1]</code> does not have a
          lexicographical larger rearrangement.
        </li>
      </ul>

      <p>
        Given an array of integers <code>nums</code>,{" "}
        <em>find the next permutation of</em> <code>nums</code>.
      </p>

      <p>
        The replacement must be{" "}
        <strong>
          <a
            href="http://en.wikipedia.org/wiki/In-place_algorithm"
            target="_blank"
            rel="noreferrer"
          >
            in place
          </a>
        </strong>{" "}
        and use only constant extra memory.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> [1,3,2]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,2,1] <br />
        <strong>Output:</strong> [1,2,3]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,5] <br />
        <strong>Output:</strong> [1,5,1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  42: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given <code>n</code> non-negative integers representing an elevation map
        where the width of each bar is <code>1</code>, compute how much water it
        can trap after raining.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png"
        style={{ width: 412, height: 161 }}
      />
      <pre>
        <strong>Input:</strong> height = [0,1,0,2,1,0,1,3,2,1,2,1] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The above elevation map (black section) is
        represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of
        rain water (blue section) are being trapped.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> height = [4,2,0,3,2,5] <br />
        <strong>Output:</strong> 9
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == height.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= height[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  61: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a linked&nbsp;list, rotate the list to
        the right by <code>k</code> places.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg"
        style={{ width: 450, height: 191 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5], k = 2 <br />
        <strong>Output:</strong> [4,5,1,2,3]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg"
        style={{ width: 305, height: 350 }}
      />
      <pre>
        <strong>Input:</strong> head = [0,1,2], k = 4<br />
        <strong>Output:</strong> [2,0,1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is in the range <code>[0, 500]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 2 * 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  75: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> with <code>n</code> objects colored
        red, white, or blue, sort them{" "}
        <strong>
          <a
            href="https://en.wikipedia.org/wiki/In-place_algorithm"
            target="_blank"
            rel="noreferrer"
          >
            in-place
          </a>{" "}
        </strong>
        so that objects of the same color are adjacent, with the colors in the
        order red, white, and blue.
      </p>

      <p>
        We will use the integers <code>0</code>, <code>1</code>, and{" "}
        <code>2</code> to represent the color red, white, and blue,
        respectively.
      </p>

      <p>
        You must solve this problem without using the library's sort function.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,0,2,1,1,0] <br />
        <strong>Output:</strong> [0,0,1,1,2,2]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,0,1] <br />
        <strong>Output:</strong> [0,1,2]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 300</code>
        </li>
        <li>
          <code>nums[i]</code> is either <code>0</code>, <code>1</code>, or{" "}
          <code>2</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>&nbsp;Could you come up with a one-pass
        algorithm using only&nbsp;constant extra space?
      </p>
    </div>
  ),
  80: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> sorted in{" "}
        <strong>non-decreasing order</strong>, remove some duplicates{" "}
        <a
          href="https://en.wikipedia.org/wiki/In-place_algorithm"
          target="_blank"
          rel="noreferrer"
        >
          <strong>in-place</strong>
        </a>{" "}
        such that each unique element appears <strong>at most twice</strong>.
        The <strong>relative order</strong> of the elements should be kept the{" "}
        <strong>same</strong>.
      </p>

      <p>
        Since it is impossible to change the length of the array in some
        languages, you must instead have the result be placed in the{" "}
        <strong>first part</strong> of the array <code>nums</code>. More
        formally, if there are <code>k</code> elements after removing the
        duplicates, then the first <code>k</code> elements of <code>nums</code>
        &nbsp;should hold the final result. It does not matter what you leave
        beyond the first&nbsp;<code>k</code>&nbsp;elements.
      </p>

      <p>
        Return <code>k</code>
        <em> after placing the final result in the first </em>
        <code>k</code>
        <em> slots of </em>
        <code>nums</code>.
      </p>

      <p>
        Do <strong>not</strong> allocate extra space for another array. You must
        do this by{" "}
        <strong>
          modifying the input array{" "}
          <a
            href="https://en.wikipedia.org/wiki/In-place_algorithm"
            target="_blank"
            rel="noreferrer"
          >
            in-place
          </a>
        </strong>{" "}
        with O(1) extra memory.
      </p>

      <p>
        <strong>Custom Judge:</strong>
      </p>

      <p>The judge will test your solution with the following code:</p>

      <pre>
        {`int[] nums = [...]; // Input array
    int[] expectedNums = [...]; // The expected answer with correct length
    
    int k = removeDuplicates(nums); // Calls your implementation
    
    assert k == expectedNums.length;
    for (int i = 0; i &lt; k; i++) {
        assert nums[i] == expectedNums[i];
    }`}
      </pre>

      <p>
        If all assertions pass, then your solution will be{" "}
        <strong>accepted</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,2,2,3] <br />
        <strong>Output:</strong> 5, nums = [1,1,2,2,3,_] <br />
        <strong>Explanation:</strong> Your function should return k = 5, with
        the first five elements of nums being 1, 1, 2, 2 and 3 respectively. It
        does not matter what you leave beyond the returned k (hence they are
        underscores).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,0,1,1,1,1,2,3,3] <br />
        <strong>Output:</strong> 7, nums = [0,0,1,1,2,3,3,_,_] <br />
        <strong>Explanation:</strong> Your function should return k = 7, with
        the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3
        respectively. It does not matter what you leave beyond the returned k
        (hence they are underscores).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>nums</code> is sorted in <strong>non-decreasing</strong> order.
        </li>
      </ul>
    </div>
  ),
  82: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a sorted linked list,{" "}
        <em>
          delete all nodes that have duplicate numbers, leaving only distinct
          numbers from the original list
        </em>
        . Return{" "}
        <em>
          the linked list <strong>sorted</strong> as well
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg"
        style={{ width: 500, height: 142 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,3,4,4,5] <br />
        <strong>Output:</strong> [1,2,5]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/04/linkedlist2.jpg"
        style={{ width: 500, height: 205 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,1,1,2,3] <br />
        <strong>Output:</strong> [2,3]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is in the range <code>[0, 300]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
        <li>
          The list is guaranteed to be <strong>sorted</strong> in ascending
          order.
        </li>
      </ul>
    </div>
  ),
  86: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a linked list and a value <code>x</code>,
        partition it such that all nodes <strong>less than</strong>{" "}
        <code>x</code> come before nodes <strong>greater than or equal</strong>{" "}
        to <code>x</code>.
      </p>

      <p>
        You should <strong>preserve</strong> the original relative order of the
        nodes in each of the two partitions.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/04/partition.jpg"
        style={{ width: 662, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,4,3,2,5,2], x = 3 <br />
        <strong>Output:</strong> [1,2,2,4,3,5]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [2,1], x = 2 <br />
        <strong>Output:</strong> [1,2]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is in the range <code>[0, 200]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
        <li>
          <code>-200 &lt;= x &lt;= 200</code>
        </li>
      </ul>
    </div>
  ),
  88: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two integer arrays <code>nums1</code> and{" "}
        <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and
        two integers <code>m</code> and <code>n</code>, representing the number
        of elements in <code>nums1</code> and <code>nums2</code> respectively.
      </p>

      <p>
        <strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a
        single array sorted in <strong>non-decreasing order</strong>.
      </p>

      <p>
        The final sorted array should not be returned by the function, but
        instead be <em>stored inside the array </em>
        <code>nums1</code>. To accommodate this, <code>nums1</code> has a length
        of <code>m + n</code>, where the first <code>m</code> elements denote
        the elements that should be merged, and the last <code>n</code> elements
        are set to <code>0</code> and should be ignored. <code>nums2</code> has
        a length of <code>n</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n
        = 3 <br />
        <strong>Output:</strong> [1,2,2,3,5,6]
        <br />
        <strong>Explanation:</strong> The arrays we are merging are [1,2,3] and
        [2,5,6].
        <br />
        The result of the merge is [<u>1</u>,<u>2</u>,2,<u>3</u>,5,6] with the
        underlined elements coming from nums1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1], m = 1, nums2 = [], n = 0<br />
        <strong>Output:</strong> [1]
        <br />
        <strong>Explanation:</strong> The arrays we are merging are [1] and [].
        The result of the merge is [1].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [0], m = 0, nums2 = [1], n = 1<br />
        <strong>Output:</strong> [1]
        <br />
        <strong>Explanation:</strong> The arrays we are merging are [] and [1].
        <br />
        The result of the merge is [1].
        <br />
        Note that because m = 0, there are no elements in nums1. The 0 is only
        there to ensure the merge result can fit in nums1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>nums1.length == m + n</code>
        </li>
        <li>
          <code>nums2.length == n</code>
        </li>
        <li>
          <code>0 &lt;= m, n &lt;= 200</code>
        </li>
        <li>
          <code>1 &lt;= m + n &lt;= 200</code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up: </strong>Can you come up with an algorithm that runs
        in <code>O(m + n)</code> time?
      </p>
    </div>
  ),
  125: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A phrase is a <strong>palindrome</strong> if, after converting all
        uppercase letters into lowercase letters and removing all
        non-alphanumeric characters, it reads the same forward and backward.
        Alphanumeric characters include letters and numbers.
      </p>

      <p>
        Given a string <code>s</code>, return <code>true</code>
        <em>
          {" "}
          if it is a <strong>palindrome</strong>, or{" "}
        </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "A man, a plan, a canal: Panama" <br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong> "amanaplanacanalpanama" is a palindrome.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "race a car"
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> "raceacar" is not a palindrome.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = " "<br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> s is an empty string "" after removing
        non-alphanumeric characters. Since an empty string reads the same
        forward and backward, it is a palindrome.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 2 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists only of printable ASCII characters.
        </li>
      </ul>
    </div>
  ),
  141: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given <code>head</code>, the head of a linked list, determine if the
        linked list has a cycle in it.
      </p>

      <p>
        There is a cycle in a linked list if there is some node in the list that
        can be reached again by continuously following the&nbsp;
        <code>next</code>&nbsp;pointer. Internally, <code>pos</code>&nbsp;is
        used to denote the index of the node that&nbsp;tail's&nbsp;
        <code>next</code>&nbsp;pointer is connected to.&nbsp;
        <strong>
          Note that&nbsp;<code>pos</code>&nbsp;is not passed as a parameter
        </strong>
        .
      </p>

      <p>
        Return&nbsp;<code>true</code>
        <em> if there is a cycle in the linked list</em>. Otherwise, return{" "}
        <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png"
        style={{ width: 300, height: 97, marginTop: 8, marginBottom: 8 }}
      />
      <pre>
        <strong>Input:</strong> head = [3,2,0,-4], pos = 1 <br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong> There is a cycle in the linked list, where
        the tail connects to the 1st node (0-indexed).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png"
        style={{ width: 141, height: 74 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2], pos = 0<br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong> There is a cycle in the linked list, where
        the tail connects to the 0th node.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png"
        style={{ width: 45, height: 45 }}
      />
      <pre>
        <strong>Input:</strong> head = [1], pos = -1
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> There is no cycle in the linked list.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of the nodes in the list is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>pos</code> is <code>-1</code> or a <strong>valid index</strong>{" "}
          in the linked-list.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Can you solve it using <code>O(1)</code>{" "}
        (i.e. constant) memory?
      </p>
    </div>
  ),
  142: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a linked list, return{" "}
        <em>the node where the cycle begins. If there is no cycle, return </em>
        <code>null</code>.
      </p>

      <p>
        There is a cycle in a linked list if there is some node in the list that
        can be reached again by continuously following the <code>next</code>{" "}
        pointer. Internally, <code>pos</code> is used to denote the index of the
        node that tail's <code>next</code> pointer is connected to (
        <strong>0-indexed</strong>). It is <code>-1</code> if there is no cycle.{" "}
        <strong>Note that</strong> <code>pos</code>{" "}
        <strong>is not passed as a parameter</strong>.
      </p>

      <p>
        <strong>Do not modify</strong> the linked list.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png"
        style={{ height: 145, width: 450 }}
      />
      <pre>
        <strong>Input:</strong> head = [3,2,0,-4], pos = 1 <br />
        <strong>Output:</strong> tail connects to node index 1<br />
        <strong>Explanation:</strong> There is a cycle in the linked list, where
        tail connects to the second node.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png"
        style={{ height: 105, width: 201 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2], pos = 0<br />
        <strong>Output:</strong> tail connects to node index 0<br />
        <strong>Explanation:</strong> There is a cycle in the linked list, where
        tail connects to the first node.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png"
        style={{ height: 65, width: 65 }}
      />
      <pre>
        <strong>Input:</strong> head = [1], pos = -1
        <br />
        <strong>Output:</strong> no cycle
        <br />
        <strong>Explanation:</strong> There is no cycle in the linked list.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of the nodes in the list is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>pos</code> is <code>-1</code> or a <strong>valid index</strong>{" "}
          in the linked-list.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Can you solve it using <code>O(1)</code>{" "}
        (i.e. constant) memory?
      </p>
    </div>
  ),
  3: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, find the length of the{" "}
        <strong>longest</strong>{" "}
        <span
          data-keyword="substring-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rj:"
              >
                <div>
                  <strong>substring</strong>
                </div>
              </div>
            </div>
          </div>
        </span>{" "}
        without repeating characters.
      </p>

      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcabcbb"
        <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The answer is "abc", with the length of 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "bbbbb"
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> The answer is "b", with the length of 1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "pwwkew"
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The answer is "wke", with the length of 3.
        <br />
        Notice that the answer must be a substring, "pwke" is a subsequence and
        not a substring.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= s.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of English letters, digits, symbols and
          spaces.
        </li>
      </ul>
    </div>
  ),
  30: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> and an array of strings{" "}
        <code>words</code>. All the strings of <code>words</code> are of{" "}
        <strong>the same length</strong>.
      </p>

      <p>
        A <strong>concatenated string</strong> is a string that exactly contains
        all the strings of any permutation of <code>words</code> concatenated.
      </p>

      <ul>
        <li>
          For example, if <code>words = ["ab","cd","ef"]</code>, then{" "}
          <code>"abcdef"</code>, <code>"abefcd"</code>, <code>"cdabef"</code>,{" "}
          <code>"cdefab"</code>, <code>"efabcd"</code>, and{" "}
          <code>"efcdab"</code> are all concatenated strings.{" "}
          <code>"acdbef"</code> is not a concatenated string because it is not
          the concatenation of any permutation of <code>words</code>.
        </li>
      </ul>

      <p>
        Return an array of <em>the starting indices</em> of all the concatenated
        substrings in <code>s</code>. You can return the answer in{" "}
        <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">
          s = "barfoothefoobarman", words = ["foo","bar"]
        </span>{" "}
        <br />
        <strong>Output:</strong> <span class="example-io">[0,9]</span>
        <br />
        <strong>Explanation: </strong>
        The substring starting at 0 is <code>"barfoo"</code>. It is the
        concatenation of <code>["bar","foo"]</code> which is a permutation of{" "}
        <code>words</code>.<br />
        The substring starting at 9 is <code>"foobar"</code>. It is the
        concatenation of <code>["foo","bar"]</code> which is a permutation of{" "}
        <code>words</code>.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">
          s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]
        </span>
        <br />
        <strong>Output:</strong> <span class="example-io">[]</span>
        <br />
        <strong>Explanation: </strong>
        <p>There is no concatenated substring.</p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">
          s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]
        </span>
        <br />
        <strong>Output:</strong> <span class="example-io">[6,9,12]</span>
        <br />
        <strong>Explanation: </strong>
        The substring starting at 6 is <code>"foobarthe"</code>. It is the
        concatenation of <code>["foo","bar","the"]</code>.<br />
        The substring starting at 9 is <code>"barthefoo"</code>. It is the
        concatenation of <code>["bar","the","foo"]</code>.<br />
        The substring starting at 12 is <code>"thefoobar"</code>. It is the
        concatenation of <code>["the","foo","bar"]</code>.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= words.length &lt;= 5000</code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 30</code>
        </li>
        <li>
          <code>s</code> and <code>words[i]</code> consist of lowercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  76: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>s</code> and <code>t</code> of lengths{" "}
        <code>m</code> and <code>n</code> respectively, return{" "}
        <em>
          the <strong>minimum window</strong>
        </em>{" "}
        <span
          data-keyword="substring-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rv:"
              >
                <div>
                  <strong>
                    <em>substring</em>
                  </strong>
                </div>
              </div>
            </div>
          </div>
        </span>
        <em> of </em>
        <code>s</code>
        <em> such that every character in </em>
        <code>t</code>
        <em>
          {" "}
          (<strong>including duplicates</strong>) is included in the window
        </em>
        . If there is no such substring, return <em>the empty string </em>
        <code>""</code>.
      </p>

      <p>
        The testcases will be generated such that the answer is{" "}
        <strong>unique</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "ADOBECODEBANC", t = "ABC"
        <br />
        <strong>Output:</strong> "BANC"
        <br />
        <strong>Explanation:</strong> The minimum window substring "BANC"
        includes 'A', 'B', and 'C' from string t.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "a", t = "a"
        <br />
        <strong>Output:</strong> "a"
        <br />
        <strong>Explanation:</strong> The entire string s is the minimum window.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "a", t = "aa" <br />
        <strong>Output:</strong> ""
        <br />
        <strong>Explanation:</strong> Both 'a's from t must be included in the
        window. Since the largest window of s only has one 'a', return empty
        string.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == s.length</code>
        </li>
        <li>
          <code>n == t.length</code>
        </li>
        <li>
          <code>
            1 &lt;= m, n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> and <code>t</code> consist of uppercase and lowercase
          English letters.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you find an algorithm that runs in{" "}
        <code>O(m + n)</code> time?
      </p>
    </div>
  ),
  159: (
    <div class="markdown-body div-width">
      <p>
        Given a string{" "}
        <strong>
          <em>s</em>
        </strong>{" "}
        , find the length of the longest substring&nbsp;
        <strong>
          <em>t&nbsp;&nbsp;</em>
        </strong>
        that contains <strong>at most </strong>2 distinct characters.
      </p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> "eceba" <br />
        <strong>Output: </strong>3 <br />
        <strong>
          Explanation: <em>t</em>
        </strong>
        <em> </em>is "ece" which its length is 3.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> "ccaabbb" <br />
        <strong>Output: </strong>5 <br />
        <strong>
          Explanation: <em>t</em>
        </strong>
        <em> </em>is "aabbb" which its length is 5.
      </pre>
    </div>
  ),
  187: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>DNA sequence</strong> is composed of a series of nucleotides
        abbreviated as <code>'A'</code>, <code>'C'</code>, <code>'G'</code>, and{" "}
        <code>'T'</code>.
      </p>

      <ul>
        <li>
          For example, <code>"ACGAATTCCG"</code> is a{" "}
          <strong>DNA sequence</strong>.
        </li>
      </ul>

      <p>
        When studying <strong>DNA</strong>, it is useful to identify repeated
        sequences within the DNA.
      </p>

      <p>
        Given a string <code>s</code> that represents a{" "}
        <strong>DNA sequence</strong>, return all the{" "}
        <strong>
          <code>10</code>-letter-long
        </strong>{" "}
        sequences (substrings) that occur more than once in a DNA molecule. You
        may return the answer in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
        <br />
        <strong>Output:</strong> ["AAAAACCCCC","CCCCCAAAAA"]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = "AAAAAAAAAAAAA"
        <br />
        <strong>Output:</strong> ["AAAAAAAAAA"]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s[i]</code> is either <code>'A'</code>, <code>'C'</code>,{" "}
          <code>'G'</code>, or <code>'T'</code>.
        </li>
      </ul>
    </div>
  ),
  209: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of positive integers <code>nums</code> and a positive
        integer <code>target</code>, return{" "}
        <em>
          the <strong>minimal length</strong> of a{" "}
        </em>
        <span
          data-keyword="subarray-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rt:"
              >
                <div>
                  <em>subarray</em>
                </div>
              </div>
            </div>
          </div>
        </span>
        <em> whose sum is greater than or equal to</em> <code>target</code>. If
        there is no such subarray, return <code>0</code> instead.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> target = 7, nums = [2,3,1,2,4,3] <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> The subarray [4,3] has the minimal length
        under the problem constraint.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> target = 4, nums = [1,4,4]
        <br />
        <strong>Output:</strong> 1
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> target = 11, nums = [1,1,1,1,1,1,1,1]
        <br />
        <strong>Output:</strong> 0
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= target &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> If you have figured out the <code>O(n)</code>{" "}
      solution, try coding another solution of which the time complexity is{" "}
      <code>O(n log(n))</code>.
    </div>
  ),
  219: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and an integer <code>k</code>,
        return <code>true</code>{" "}
        <em>
          if there are two <strong>distinct indices</strong>{" "}
        </em>
        <code>i</code>
        <em> and </em>
        <code>j</code>
        <em> in the array such that </em>
        <code>nums[i] == nums[j]</code>
        <em> and </em>
        <code>abs(i - j) &lt;= k</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,1], k = 3 <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,0,1,1], k = 1<br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,1,2,3], k = 2<br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  340: (
    <div class="markdown-body div-width">
      <p>
        Given a string, find the length of the longest substring T that contains
        at most <i>k</i>
        distinct characters.
      </p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <div>
        <pre>
          <strong>Input: </strong>s ={" "}
          <span id="example-input-1-1">"eceba"</span>, k ={" "}
          <span id="example-input-1-2">2</span> <br />
          <strong>Output: </strong>
          <span id="example-output-1">3</span> <br />
          <strong>Explanation: </strong>T is "ece" which its length is 3.
        </pre>

        <div>
          <p>
            <strong>Example 2:</strong>
          </p>

          <pre>
            <strong>Input: </strong>s = <span id="example-input-2-1">"aa"</span>
            , k = <span id="example-input-2-2">1</span> <br />
            <strong>Output: </strong>2 <br />
            <strong>Explanation: </strong>T is "aa" which its length is 2.
          </pre>
        </div>
      </div>
    </div>
  ),
  395: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> and an integer <code>k</code>, return{" "}
        <em>the length of the longest substring of</em> <code>s</code>{" "}
        <em>
          such that the frequency of each character in this substring is greater
          than or equal to
        </em>{" "}
        <code>k</code>.
      </p>

      <p data-pm-slice="1 1 []">if no such substring exists, return 0.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aaabb", k = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The longest substring is "aaa", as 'a' is
        repeated 3 times.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "ababbc", k = 2 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The longest substring is "ababb", as 'a'
        is repeated 2 times and 'b' is repeated 3 times.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of only lowercase English letters.
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  424: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> and an integer <code>k</code>. You
        can choose any character of the string and change it to any other
        uppercase English character. You can perform this operation at most{" "}
        <code>k</code> times.
      </p>

      <p>
        Return{" "}
        <em>
          the length of the longest substring containing the same letter you can
          get after performing the above operations
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "ABAB", k = 2 <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> Replace the two 'A's with two 'B's or vice
        versa.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "AABABBA", k = 1<br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> Replace the one 'A' in the middle with 'B'
        and form "AABBBBA".
        <br />
        The substring "BBBB" has the longest repeating letters, which is 4.
        <br />
        There may exists other ways to achieve this answer too.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of only uppercase English letters.
        </li>
        <li>
          <code>0 &lt;= k &lt;= s.length</code>
        </li>
      </ul>
    </div>
  ),
  438: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>s</code> and <code>p</code>, return{" "}
        <em>an array of all the start indices of </em>
        <code>p</code>
        <em>'s anagrams in </em>
        <code>s</code>. You may return the answer in <strong>any order</strong>.
      </p>

      <p>
        An <strong>Anagram</strong> is a word or phrase formed by rearranging
        the letters of a different word or phrase, typically using all the
        original letters exactly once.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "cbaebabacd", p = "abc" <br />
        <strong>Output:</strong> [0,6] <br />
        <strong>Explanation:</strong> <br />
        The substring with start index = 0 is "cba", which is an anagram of
        "abc". <br />
        The substring with start index = 6 is "bac", which is an anagram of
        "abc".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abab", p = "ab" <br />
        <strong>Output:</strong> [0,1,2] <br />
        <strong>Explanation:</strong> <br />
        The substring with start index = 0 is "ab", which is an anagram of "ab".{" "}
        <br />
        The substring with start index = 1 is "ba", which is an anagram of "ab".{" "}
        <br />
        The substring with start index = 2 is "ab", which is an anagram of "ab".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length, p.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>{" "}
        <br />
        <li>
          <code>s</code> and <code>p</code> consist of lowercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  480: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>median</strong> is the middle value in an ordered integer
        list. If the size of the list is even, there is no middle value. So the
        median is the mean of the two middle values.
      </p>

      <ul>
        <li>
          For examples, if{" "}
          <code>
            arr = [2,<u>3</u>,4]
          </code>
          , the median is <code>3</code>.
        </li>
        <li>
          For examples, if{" "}
          <code>
            arr = [1,<u>2,3</u>,4]
          </code>
          , the median is <code>(2 + 3) / 2 = 2.5</code>.
        </li>
      </ul>

      <p>
        You are given an integer array <code>nums</code> and an integer{" "}
        <code>k</code>. There is a sliding window of size <code>k</code> which
        is moving from the very left of the array to the very right. You can
        only see the <code>k</code> numbers in the window. Each time the sliding
        window moves right by one position.
      </p>

      <p>
        Return <em>the median array for each window in the original array</em>.
        Answers within{" "}
        <code>
          10<sup>-5</sup>
        </code>{" "}
        of the actual value will be accepted.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,-1,-3,5,3,6,7], k = 3 <br />
        <strong>Output:</strong> <br />
        [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000] <br />
        <strong>Explanation:</strong>
        {`Window position                Median
    ---------------                -----
    [1  3  -1] -3  5  3  6  7        1
     1 [3  -1  -3] 5  3  6  7       -1
     1  3 [-1  -3  5] 3  6  7       -1
     1  3  -1 [-3  5  3] 6  7        3
     1  3  -1  -3 [5  3  6] 7        5
     1  3  -1  -3  5 [3  6  7]       6`}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,2,3,1,4,2], k = 3 <br />
        <strong>Output:</strong>{" "}
        [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  487: (
    <div class="markdown-body div-width">
      <p>
        Given a binary array, find the maximum number of consecutive 1s in this
        array if you can flip at most one 0.
      </p>

      <p>
        <b>Example 1:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b> [1,0,1,1,0] <br />
        <b>Output:</b> 4 <br />
        <b>Explanation:</b> Flip the first zero will get the the maximum number
        of consecutive 1s. After flipping, the maximum number of consecutive 1s
        is 4.
      </pre>
      <p></p>

      <p>
        <b>Note:</b>
      </p>
      <ul>
        <li>
          The input array will only contain <code>0</code> and <code>1</code>.
        </li>
        <li>
          The length of input array is a positive integer and will not exceed
          10,000
        </li>
      </ul>
      <p></p>

      <p>
        <b>Follow up:</b>
        <br />
        What if the input numbers come in one by one as an{" "}
        <b>infinite stream</b>? In other words, you can't store all numbers
        coming from the stream as it's too large to hold in memory. Could you
        solve it efficiently?
      </p>
    </div>
  ),
  567: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>s1</code> and <code>s2</code>, return{" "}
        <code>true</code>
        <em> if </em>
        <code>s2</code>
        <em> contains a permutation of </em>
        <code>s1</code>
        <em>, or </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>
        In other words, return <code>true</code> if one of <code>s1</code>'s
        permutations is the substring of <code>s2</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "ab", s2 = "eidbaooo" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> s2 contains one permutation of s1 ("ba").
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "ab", s2 = "eidboaoo" <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s1.length, s2.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s1</code> and <code>s2</code> consist of lowercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  594: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        We define a harmonious array as an array where the difference between
        its maximum value and its minimum value is <b>exactly</b> <code>1</code>
        .
      </p>

      <p>
        Given an integer array <code>nums</code>, return{" "}
        <em>
          the length of its longest harmonious subsequence among all its
          possible subsequences
        </em>
        .
      </p>

      <p>
        A <strong>subsequence</strong> of array is a sequence that can be
        derived from the array by deleting some or no elements without changing
        the order of the remaining elements.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,2,2,5,2,3,7] <br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation:</strong> The longest harmonious subsequence is
        [3,2,2,2,3].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4]
        <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1]
        <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  632: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have <code>k</code> lists of sorted integers in{" "}
        <strong>non-decreasing&nbsp;order</strong>. Find the <b>smallest</b>{" "}
        range that includes at least one number from each of the <code>k</code>{" "}
        lists.
      </p>

      <p>
        We define the range <code>[a, b]</code> is smaller than range{" "}
        <code>[c, d]</code> if <code>b - a &lt; d - c</code> <strong>or</strong>{" "}
        <code>a &lt; c</code> if <code>b - a == d - c</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums =
        [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]] <br />
        <strong>Output:</strong> [20,24]
        <br />
        <strong>Explanation: </strong>
        <br />
        List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
        <br />
        List 2: [0, 9, 12, 20], 20 is in range [20,24].
        <br />
        List 3: [5, 18, 22, 30], 22 is in range [20,24].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [[1,2,3],[1,2,3],[1,2,3]]
        <br />
        <strong>Output:</strong> [1,1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>nums.length == k</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= 3500</code>
        </li>
        <li>
          <code>1 &lt;= nums[i].length &lt;= 50</code>
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= nums[i][j] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>nums[i]</code>&nbsp;is sorted in <strong>non-decreasing</strong>{" "}
          order.
        </li>
      </ul>
    </div>
  ),
  643: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> consisting of{" "}
        <code>n</code> elements, and an integer <code>k</code>.
      </p>

      <p>
        Find a contiguous subarray whose <strong>length is equal to</strong>{" "}
        <code>k</code> that has the maximum average value and return{" "}
        <em>this value</em>. Any answer with a calculation error less than{" "}
        <code>
          10<sup>-5</sup>
        </code>{" "}
        will be accepted.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,12,-5,-6,50,3], k = 4 <br />
        <strong>Output:</strong> 12.75000 <br />
        <strong>Explanation:</strong> Maximum average is (12 - 5 - 6 + 50) / 4 =
        51 / 4 = 12.75
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5], k = 1 <br />
        <strong>Output:</strong> 5.00000
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  658: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <strong>sorted</strong> integer array <code>arr</code>, two
        integers <code>k</code> and <code>x</code>, return the <code>k</code>{" "}
        closest integers to <code>x</code> in the array. The result should also
        be sorted in ascending order.
      </p>

      <p>
        An integer <code>a</code> is closer to <code>x</code> than an integer{" "}
        <code>b</code> if:
      </p>

      <ul>
        <li>
          <code>|a - x| &lt; |b - x|</code>, or
        </li>
        <li>
          <code>|a - x| == |b - x|</code> and <code>a &lt; b</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> arr = [1,2,3,4,5], k = 4, x = 3 <br />
        <strong>Output:</strong> [1,2,3,4]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> arr = [1,2,3,4,5], k = 4, x = -1
        <br />
        <strong>Output:</strong> [1,2,3,4]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= arr.length</code>
        </li>
        <li>
          <code>
            1 &lt;= arr.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>arr</code> is sorted in <strong>ascending</strong> order.
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= arr[i], x &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  683: (
    <div class="markdown-body div-width">
      <p>
        You have <code>N</code> bulbs in a row numbered from <code>1</code> to{" "}
        <code>N</code>. Initially, all the bulbs everyday until all bulbs are on
        after <code>N</code> days.
      </p>

      <p>
        You are given an array <code>bulbs</code>&nbsp;of length <code>N</code>
        &nbsp;where <code>bulbs[i] = x</code> means that on the{" "}
        <code>(i+1)th</code> day, we will turn on the bulb at position
        <code>x</code>&nbsp;where&nbsp;<code>i</code>&nbsp;is&nbsp;
        <code>0-indexed</code>&nbsp;and&nbsp;<code>x</code>&nbsp;is&nbsp;
        <code>1-indexed.</code>
      </p>

      <p>
        Given an integer <code>K</code>, find out the{" "}
        <strong>minimum day number</strong> such that there exists two{" "}
        <strong>turned on</strong> bulbs that have
        <strong>exactly</strong>&nbsp;<code>K</code> bulbs between them that are{" "}
        <strong>all turned off</strong>.
      </p>

      <p>
        If there isn't such day, return <code>-1</code>.
      </p>

      <p>&nbsp;</p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        <strong>Input:</strong>
        bulbs: [1,3,2] K: 1
        <br />
        <strong>Output:</strong> 2
        <strong>
          <br />
          Explanation:
        </strong>
        On the first day: bulbs[0] = 1, first bulb is turned on: [1,0,0] On the
        second day: bulbs[1] = 3, third bulb is turned on: [1,0,1] On the third
        day: bulbs[2] = 2, second bulb is turned on: [1,1,1] We return 2 because
        on the second day, there were two on bulbs with one off bulb between
        them.
      </pre>

      <p>
        <b>Example 2:</b>
      </p>

      <pre>
        <strong>Input:</strong>
        bulbs: [1,2,3] K: 1<br />
        <strong>Output:</strong> -1
      </pre>

      <p>
        <b>Note:</b>
      </p>

      <ul>
        <li>
          <code>1 &lt;= N &lt;= 20000</code>
        </li>
        <li>
          <code>1 &lt;= bulbs[i] &lt;= N</code>
        </li>
        <li>
          <code>bulbs</code>&nbsp;is a permutation of numbers from&nbsp;
          <code>1</code>&nbsp;to&nbsp;<code>N</code>.
        </li>
        <li>
          <code>0 &lt;= K &lt;= 20000</code>
        </li>
      </ul>
    </div>
  ),
  713: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code> and an integer{" "}
        <code>k</code>, return{" "}
        <em>
          the number of contiguous subarrays where the product of all the
          elements in the subarray is strictly less than{" "}
        </em>
        <code>k</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [10,5,2,6], k = 100 <br />
        <strong>Output:</strong> 8<br />
        <strong>Explanation:</strong> The 8 subarrays that have product less
        than 100 are:
        <br />
        [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]
        <br />
        Note that [10, 5, 2] is not included as the product of 100 is not
        strictly less than k.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3], k = 0<br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 1000</code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  718: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integer arrays <code>nums1</code> and <code>nums2</code>,
        return{" "}
        <em>
          the maximum length of a subarray that appears in <strong>both</strong>{" "}
          arrays
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7] <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The repeated subarray with maximum length
        is [3,2,1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]
        <br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation:</strong> The repeated subarray with maximum length
        is [0,0,0,0,0].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= nums1[i], nums2[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  727: (
    <div class="markdown-body div-width">
      <p>
        Given strings <code>S</code> and <code>T</code>, find the minimum
        (contiguous)
        <b>substring</b> <code>W</code> of <code>S</code>, so that{" "}
        <code>T</code> is a <b>subsequence</b>
        of <code>W</code>.
      </p>

      <p>
        If there is no such window in <code>S</code> that covers all characters
        in <code>T</code>, return the empty string <code>""</code>. If there are
        multiple such minimum-length windows, return the one with the left-most
        starting index.
      </p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        <strong>Input:</strong>
        S = "abcdebdde", T = "bde" <br />
        <strong>Output:</strong> "bcde"
        <br />
        <strong>Explanation:</strong>
        <br />
        "bcde" is the answer because it occurs before "bdde" which has the same
        length.
        <br />
        "deb" is not a smaller window because the elements of T in the window
        must occur in order.
      </pre>

      <p>&nbsp;</p>

      <p>
        <b>Note:</b>
      </p>

      <ul>
        <li>
          All the strings in the input will only contain lowercase letters.
        </li>
        <li>
          The length of <code>S</code> will be in the range{" "}
          <code>[1, 20000]</code>.
        </li>
        <li>
          The length of <code>T</code> will be in the range{" "}
          <code>[1, 100]</code>.
        </li>
      </ul>
    </div>
  ),
  904: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are visiting a farm that has a single row of fruit trees arranged
        from left to right. The trees are represented by an integer array{" "}
        <code>fruits</code> where <code>fruits[i]</code> is the{" "}
        <strong>type</strong> of fruit the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        tree produces.
      </p>

      <p>
        You want to collect as much fruit as possible. However, the owner has
        some strict rules that you must follow:
      </p>

      <ul>
        <li>
          You only have <strong>two</strong> baskets, and each basket can only
          hold a <strong>single type</strong> of fruit. There is no limit on the
          amount of fruit each basket can hold.
        </li>
        <li>
          Starting from any tree of your choice, you must pick{" "}
          <strong>exactly one fruit</strong> from <strong>every</strong> tree
          (including the start tree) while moving to the right. The picked
          fruits must fit in one of your baskets.
        </li>
        <li>
          Once you reach a tree with fruit that cannot fit in your baskets, you
          must stop.
        </li>
      </ul>

      <p>
        Given the integer array <code>fruits</code>, return{" "}
        <em>
          the <strong>maximum</strong> number of fruits you can pick
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> fruits = [<u>1,2,1</u>] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> We can pick from all 3 trees.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> fruits = [0,<u>1,2,2</u>] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> We can pick from trees [1,2,2]. <br />
        If we had started at the first tree, we would only pick from trees
        [0,1].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> fruits = [1,<u>2,3,2,2</u>] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> We can pick from trees [2,3,2,2]. <br />
        If we had started at the first tree, we would only pick from trees
        [1,2].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= fruits.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= fruits[i] &lt; fruits.length</code>
        </li>
      </ul>
    </div>
  ),
  930: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a binary array <code>nums</code> and an integer <code>goal</code>,
        return{" "}
        <em>
          the number of non-empty <strong>subarrays</strong> with a sum
        </em>{" "}
        <code>goal</code>.
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous part of the array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,0,1,0,1], goal = 2<br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> The 4 subarrays are bolded and underlined
        below:
        <br />[
        <u>
          <strong>1,0,1</strong>
        </u>
        ,0,1] <br />[
        <u>
          <strong>1,0,1,0</strong>
        </u>
        ,1]
        <br />
        [1,
        <u>
          <strong>0,1,0,1</strong>
        </u>
        ]<br />
        [1,0,
        <u>
          <strong>1,0,1</strong>
        </u>
        ]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,0,0,0,0], goal = 0<br />
        <strong>Output:</strong> 15
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>nums[i]</code> is either <code>0</code> or <code>1</code>.
        </li>
        <li>
          <code>0 &lt;= goal &lt;= nums.length</code>
        </li>
      </ul>
    </div>
  ),
  978: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>arr</code>, return{" "}
        <em>the length of a maximum size turbulent subarray of</em>{" "}
        <code>arr</code>.
      </p>

      <p>
        A subarray is <strong>turbulent</strong> if the comparison sign flips
        between each adjacent pair of elements in the subarray.
      </p>

      <p>
        More formally, a subarray <code>[arr[i], arr[i + 1], ..., arr[j]]</code>{" "}
        of <code>arr</code> is said to be turbulent if and only if:
      </p>

      <ul>
        <li>
          For <code>i &lt;= k &lt; j</code>:
          <ul>
            <li>
              <code>arr[k] &gt; arr[k + 1]</code> when <code>k</code> is odd,
              and
            </li>
            <li>
              <code>arr[k] &lt; arr[k + 1]</code> when <code>k</code> is even.
            </li>
          </ul>
        </li>
        <li>
          Or, for <code>i &lt;= k &lt; j</code>:
          <ul>
            <li>
              <code>arr[k] &gt; arr[k + 1]</code> when <code>k</code> is even,
              and
            </li>
            <li>
              <code>arr[k] &lt; arr[k + 1]</code> when <code>k</code> is odd.
            </li>
          </ul>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [9,4,2,10,7,8,8,1,9] <br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation:</strong> arr[1] &gt; arr[2] &lt; arr[3] &gt; arr[4]
        &lt; arr[5]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [4,8,12,16]
        <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [100]
        <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= arr.length &lt;= 4 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= arr[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  992: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and an integer <code>k</code>,
        return{" "}
        <em>
          the number of <strong>good subarrays</strong> of{" "}
        </em>
        <code>nums</code>.
      </p>

      <p>
        A <strong>good array</strong> is an array where the number of different
        integers in that array is exactly <code>k</code>.
      </p>

      <ul>
        <li>
          For example, <code>[1,2,3,1,2]</code> has <code>3</code> different
          integers: <code>1</code>, <code>2</code>, and <code>3</code>.
        </li>
      </ul>

      <p>
        A <strong>subarray</strong> is a <strong>contiguous</strong> part of an
        array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,1,2,3], k = 2 <br />
        <strong>Output:</strong> 7<br />
        <strong>Explanation:</strong> Subarrays formed with exactly 2 different
        integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,1,3,4], k = 3<br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> Subarrays formed with exactly 3 different
        integers: [1,2,1,3], [2,1,3], [1,3,4].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= nums[i], k &lt;= nums.length</code>
        </li>
      </ul>
    </div>
  ),
  995: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a binary array <code>nums</code> and an integer{" "}
        <code>k</code>.
      </p>

      <p>
        A <strong>k-bit flip</strong> is choosing a <strong>subarray</strong> of
        length <code>k</code> from <code>nums</code> and simultaneously changing
        every <code>0</code> in the subarray to <code>1</code>, and every{" "}
        <code>1</code> in the subarray to <code>0</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum number of <strong>k-bit flips</strong> required so that
          there is no{" "}
        </em>
        <code>0</code>
        <em> in the array</em>. If it is not possible, return <code>-1</code>.
      </p>

      <p>
        A <strong>subarray</strong> is a <strong>contiguous</strong> part of an
        array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1,0], k = 1 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> Flip nums[0], then flip nums[2].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,0], k = 2 <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> No matter how we flip subarrays of size 2,
        we cannot make the array become [1,1,1].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,0,0,1,0,1,1,0], k = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> <br />
        Flip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0] <br />
        Flip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0] <br />
        Flip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= nums.length</code>
        </li>
      </ul>
    </div>
  ),
  1004: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a binary array <code>nums</code> and an integer <code>k</code>,
        return <em>the maximum number of consecutive </em>
        <code>1</code>
        <em>'s in the array if you can flip at most</em> <code>k</code>{" "}
        <code>0</code>'s.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> [1,1,1,0,0,
        <u>
          <strong>1</strong>,1,1,1,1,<strong>1</strong>
        </u>
        ] Bolded numbers were flipped from 0 to 1. The longest subarray is
        underlined.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1],
        k = 3 <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation:</strong> [0,0,
        <u>
          1,1,<strong>1</strong>,<strong>1</strong>,1,1,1,<strong>1</strong>,1,1
        </u>
        ,0,0,0,1,1,1,1] Bolded numbers were flipped from 0 to 1. The longest
        subarray is underlined.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>nums[i]</code> is either <code>0</code> or <code>1</code>.
        </li>
        <li>
          <code>0 &lt;= k &lt;= nums.length</code>
        </li>
      </ul>
    </div>
  ),
  1031: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and two integers{" "}
        <code>firstLen</code> and <code>secondLen</code>, return{" "}
        <em>
          the maximum sum of elements in two non-overlapping{" "}
          <strong>subarrays</strong> with lengths{" "}
        </em>
        <code>firstLen</code>
        <em> and </em>
        <code>secondLen</code>.
      </p>

      <p>
        The array with length <code>firstLen</code> could occur before or after
        the array with length <code>secondLen</code>, but they have to be
        non-overlapping.
      </p>

      <p>
        A <strong>subarray</strong> is a <strong>contiguous</strong> part of an
        array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,6,5,2,2,5,1,9,4], firstLen = 1,
        secondLen = 2 <br />
        <strong>Output:</strong> 20 <br />
        <strong>Explanation:</strong> One choice of subarrays is [9] with length
        1, and [6,5] with length 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,8,1,3,2,1,8,9,0], firstLen = 3,
        secondLen = 2 <br />
        <strong>Output:</strong> 29 <br />
        <strong>Explanation:</strong> One choice of subarrays is [3,8,1] with
        length 3, and [8,9] with length 2.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4,
        secondLen = 3 <br />
        <strong>Output:</strong> 31 <br />
        <strong>Explanation:</strong> One choice of subarrays is [5,6,0,9] with
        length 4, and [0,3,8] with length 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= firstLen, secondLen &lt;= 1000</code>
        </li>
        <li>
          <code>2 &lt;= firstLen + secondLen &lt;= 1000</code>
        </li>
        <li>
          <code>firstLen + secondLen &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1052: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a bookstore owner that has a store open for <code>n</code>{" "}
        minutes. Every minute, some number of customers enter the store. You are
        given an integer array <code>customers</code> of length <code>n</code>{" "}
        where <code>customers[i]</code> is the number of the customer that
        enters the store at the start of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        minute and all those customers leave after the end of that minute.
      </p>

      <p>
        On some minutes, the bookstore owner is grumpy. You are given a binary
        array grumpy where <code>grumpy[i]</code> is <code>1</code> if the
        bookstore owner is grumpy during the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        minute, and is <code>0</code> otherwise.
      </p>

      <p>
        When the bookstore owner is grumpy, the customers of that minute are not
        satisfied, otherwise, they are satisfied.
      </p>

      <p>
        The bookstore owner knows a secret technique to keep themselves not
        grumpy for <code>minutes</code> consecutive minutes, but can only use it
        once.
      </p>

      <p>
        Return{" "}
        <em>
          the maximum number of customers that can be satisfied throughout the
          day
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> customers = [1,0,1,2,1,1,7,5], grumpy =
        [0,1,0,1,0,1,0,1], minutes = 3 <br />
        <strong>Output:</strong> 16 <br />
        <strong>Explanation:</strong> The bookstore owner keeps themselves not
        grumpy for the last 3 minutes. <br />
        The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 +
        7 + 5 = 16.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> customers = [1], grumpy = [0], minutes = 1{" "}
        <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == customers.length == grumpy.length</code>
        </li>
        <li>
          <code>
            1 &lt;= minutes &lt;= n &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= customers[i] &lt;= 1000</code>
        </li>
        <li>
          <code>grumpy[i]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  1156: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>text</code>. You can swap two of the
        characters in the <code>text</code>.
      </p>

      <p>
        Return{" "}
        <em>the length of the longest substring with repeated characters</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> text = "ababa" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> We can swap the first 'b' with the last
        'a', or the last 'b' with the first 'a'. Then, the longest repeated
        character substring is "aaa" with length 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> text = "aaabaaa" <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> Swap 'b' with the last 'a' (or the first
        'a'), and we get longest repeated character substring "aaaaaa" with
        length 6.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> text = "aaaaa" <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> No need to swap, longest repeated
        character substring is "aaaaa" with length is 5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= text.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>text</code> consist of lowercase English characters only.
        </li>
      </ul>
    </div>
  ),
  1100: (
    <div class="markdown-body div-width">
      <p>
        Given a string <code>S</code>, return the number of substrings of length{" "}
        <code>K</code> with no repeated characters.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input: </strong>S ={" "}
        <span id="example-input-1-1">"havefunonleetcode"</span>, K ={" "}
        <span id="example-input-1-2">5</span> <br />
        <strong>Output: </strong>
        <span id="example-output-1">6</span> <br />
        <strong>Explanation: </strong>
        There are 6 substrings they are :
        'havef','avefu','vefun','efuno','etcod','tcode'.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input: </strong>S = <span id="example-input-2-1">"home"</span>,
        K = <span id="example-input-2-2">5</span> <br />
        <strong>Output: </strong>
        <span id="example-output-2">0</span> <br />
        <strong>Explanation: </strong>
        Notice K can be larger than the length of S. In this case is not
        possible to find any substring.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= S.length &lt;= 10^4</code>
        </li>
        <li>All characters of S are lowercase English letters.</li>
        <li>
          <code>1 &lt;= K &lt;= 10^4</code>
        </li>
      </ul>
    </div>
  ),
  1151: (
    <div class="markdown-body div-width">
      <p>
        Given a&nbsp;binary array <code>data</code>, return&nbsp;the minimum
        number of swaps required to group all <code>1</code>’s present in the
        array together in <strong>any place</strong> in the array.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-1-1">[1,0,1,0,1]</span> <br />
        <strong>Output: </strong>
        <span id="example-output-1">1</span> <br />
        <strong>Explanation: </strong> <br />
        There are 3 ways to group all 1's together: <br />
        [1,1,1,0,0] using 1 swap. <br />
        [0,1,1,1,0] using 2 swaps. <br />
        [0,0,1,1,1] using 1 swap. <br />
        The minimum is 1.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-2-1">[0,0,0,1,0]</span> <br />
        <strong>Output: </strong>
        <span id="example-output-2">0</span> <br />
        <strong>Explanation: </strong> <br />
        Since there is only one 1 in the array, no swaps needed.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-3-1">[1,0,1,0,1,0,0,1,1,0,1]</span> <br />
        <strong>Output: </strong>
        <span id="example-output-3">3</span> <br />
        <strong>Explanation: </strong> <br />
        One possible solution that uses 3 swaps is [0,0,0,0,0,1,1,1,1,1,1].
      </pre>

      <p>&nbsp;</p>

      <p>
        <span>
          <strong>Note</strong>
          <strong>:</strong>
        </span>
      </p>

      <ul>
        <li>
          <code>1 &lt;= data.length &lt;= 10^5</code>
        </li>
        <li>
          <code>0 &lt;= data[i] &lt;= 1</code>
        </li>
      </ul>
    </div>
  ),
  1176: (
    <div class="markdown-body div-width">
      <p>
        A dieter consumes&nbsp;<code>calories[i]</code>&nbsp;calories on the{" "}
        <code>i</code>-th day.&nbsp;
      </p>

      <p>
        Given an integer <code>k</code>, for <strong>every</strong> consecutive
        sequence of
        <code>k</code> days (
        <code>calories[i], calories[i+1], ..., calories[i+k-1]</code>&nbsp;for
        all <code>0 &lt;= i &lt;= n-k</code>), they look at <em>T</em>, the
        total calories consumed during that sequence of <code>k</code> days (
        <code>calories[i] + calories[i+1] + ... + calories[i+k-1]</code>):
      </p>

      <ul>
        <li>
          If <code>T &lt; lower</code>, they performed poorly on their diet and
          lose 1 point;&nbsp;
        </li>
        <li>
          If <code>T &gt; upper</code>, they performed well on their diet and
          gain 1 point;
        </li>
        <li>
          Otherwise, they performed normally and there is no change in points.
        </li>
      </ul>

      <p>
        Initially, the dieter has zero points. Return the total number of points
        the dieter has after dieting for <code>calories.length</code>&nbsp;days.
      </p>

      <p>Note that the total points can be negative.</p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> calories = [1,2,3,4,5], k = 1, lower = 3, upper
        = 3 <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation</strong>: Since k = 1, we consider each element of
        the array separately and compare it to lower and upper.
        <br />
        calories[0] and calories[1] are less than lower so 2 points are lost.
        <br />
        calories[3] and calories[4] are greater than upper so 2 points are
        gained.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> calories = [3,2], k = 2, lower = 0, upper = 1
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation</strong>: Since k = 2, we consider subarrays of
        length 2.
        <br />
        calories[0] + calories[1] &gt; upper so 1 point is gained.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> calories = [6,5,0,0], k = 2, lower = 1, upper =
        5
        <strong>
          <br />
          Output:
        </strong>{" "}
        0
        <strong>
          <br />
          Explanation
        </strong>
        : calories[0] + calories[1] &gt; upper so 1 point is gained. lower &lt;=
        calories[1] + calories[2] &lt;= upper so no change in points.
        calories[2] + calories[3] &lt; lower so 1 point is lost.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= calories.length &lt;= 10^5</code>
        </li>
        <li>
          <code>0 &lt;= calories[i] &lt;= 20000</code>
        </li>
        <li>
          <code>0 &lt;= lower &lt;= upper</code>
        </li>
      </ul>
    </div>
  ),
  1208: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two strings <code>s</code> and <code>t</code> of the same
        length and an integer <code>maxCost</code>.
      </p>

      <p>
        You want to change <code>s</code> to <code>t</code>. Changing the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        character of <code>s</code> to{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        character of <code>t</code> costs <code>|s[i] - t[i]|</code> (i.e., the
        absolute difference between the ASCII values of the characters).
      </p>

      <p>
        Return <em>the maximum length of a substring of </em>
        <code>s</code>
        <em>
          {" "}
          that can be changed to be the same as the corresponding substring of{" "}
        </em>
        <code>t</code>
        <em> with a cost less than or equal to </em>
        <code>maxCost</code>. If there is no substring from <code>s</code> that
        can be changed to its corresponding substring from <code>t</code>,
        return <code>0</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcd", t = "bcdf", maxCost = 3 <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> "abc" of s can change to "bcd".
        <br />
        That costs 3, so the maximum length is 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcd", t = "cdef", maxCost = 3<br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> Each character in s costs 2 to change to
        character in t, so the maximum length is 1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcd", t = "acde", maxCost = 0<br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> You cannot make any change, so the maximum
        length is 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>t.length == s.length</code>
        </li>
        <li>
          <code>
            0 &lt;= maxCost &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>s</code> and <code>t</code> consist of only lowercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  1234: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string s of length <code>n</code> containing only four
        kinds of characters: <code>'Q'</code>, <code>'W'</code>,{" "}
        <code>'E'</code>, and <code>'R'</code>.
      </p>

      <p>
        A string is said to be <strong>balanced</strong>
        <em> </em>if each of its characters appears <code>n / 4</code> times
        where <code>n</code> is the length of the string.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum length of the substring that can be replaced with{" "}
          <strong>any</strong> other string of the same length to make{" "}
        </em>
        <code>s</code>
        <em>
          {" "}
          <strong>balanced</strong>
        </em>
        . If s is already <strong>balanced</strong>, return <code>0</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "QWER" <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> s is already balanced.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "QQWE" <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> We need to replace a 'Q' to 'R', so that
        "RQWE" (or "QRWE") is balanced.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "QQQW" <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> We can replace the first "QQ" to "ER".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == s.length</code>
        </li>
        <li>
          <code>
            4 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>n</code> is a multiple of <code>4</code>.
        </li>
        <li>
          <code>s</code> contains only <code>'Q'</code>, <code>'W'</code>,{" "}
          <code>'E'</code>, and <code>'R'</code>.
        </li>
      </ul>
    </div>
  ),
  1248: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code> and an integer{" "}
        <code>k</code>. A continuous subarray is called <strong>nice</strong> if
        there are <code>k</code> odd numbers on it.
      </p>

      <p>
        Return{" "}
        <em>
          the number of <strong>nice</strong> sub-arrays
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,1,1], k = 3<br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> The only sub-arrays with 3 odd numbers are
        [1,1,2,1] and [1,2,1,1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,4,6], k = 1<br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> There are no odd numbers in the array.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,2,2,1,2,2,1,2,2,2], k = 2 <br />
        <strong>Output:</strong> 16
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 50000</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 10^5</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= nums.length</code>
        </li>
      </ul>
    </div>
  ),
  1297: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, return the maximum number of occurrences
        of <strong>any</strong> substring under the following rules:
      </p>

      <ul>
        <li>
          The number of unique characters in the substring must be less than or
          equal to <code>maxLetters</code>.
        </li>
        <li>
          The substring size must be between <code>minSize</code> and{" "}
          <code>maxSize</code> inclusive.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aababcaab", maxLetters = 2, minSize = 3,
        maxSize = 4 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> Substring "aab" has 2 occurrences in the
        original string. <br />
        It satisfies the conditions, 2 unique letters and size 3 (between
        minSize and maxSize).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aaaa", maxLetters = 1, minSize = 3, maxSize
        = 3 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> Substring "aaa" occur 2 times in the
        string. It can overlap.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= maxLetters &lt;= 26</code>
        </li>
        <li>
          <code>1 &lt;= minSize &lt;= maxSize &lt;= min(26, s.length)</code>
        </li>
        <li>
          <code>s</code> consists of only lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  1343: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>arr</code> and two integers{" "}
        <code>k</code> and <code>threshold</code>, return{" "}
        <em>the number of sub-arrays of size </em>
        <code>k</code>
        <em> and average greater than or equal to </em>
        <code>threshold</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4{" "}
        <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Sub-arrays [2,5,5],[5,5,5] and [5,5,8]
        have averages 4, 5 and 6 respectively. All other sub-arrays of size 3
        have averages less than 4 (the threshold).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [11,13,17,23,29,31,7,5,2,3], k = 3,
        threshold = 5 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The first 6 sub-arrays of size 3 have
        averages greater than 5. Note that averages are not integers.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= arr.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= arr[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= arr.length</code>
        </li>
        <li>
          <code>
            0 &lt;= threshold &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1358: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>&nbsp;consisting only of characters{" "}
        <em>a</em>, <em>b</em> and <em>c</em>.
      </p>

      <p>
        Return the number of substrings containing <b>at least</b>&nbsp;one
        occurrence of all these characters <em>a</em>, <em>b</em> and <em>c</em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcabc" <br />
        <strong>Output:</strong> 10
        <br />
        <strong>Explanation:</strong> The substrings containing&nbsp;at
        least&nbsp;one occurrence of the characters&nbsp;<em>a</em>,&nbsp;
        <em>b</em>&nbsp;and&nbsp;<em>c are "</em>abc<em>", "</em>abca
        <em>", "</em>abcab<em>", "</em>abcabc<em>", "</em>bca<em>", "</em>bcab
        <em>", "</em>bcabc<em>", "</em>cab<em>", "</em>cabc<em>" </em>and
        <em> "</em>abc<em>" </em>(<strong>again</strong>)<em>. </em>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aaacb"
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The substrings containing&nbsp;at
        least&nbsp;one occurrence of the characters&nbsp;<em>a</em>,&nbsp;
        <em>b</em>&nbsp;and&nbsp;<em>c are "</em>aaacb<em>", "</em>aacb
        <em>" </em>and<em> "</em>acb<em>".</em>
        <em> </em>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abc"
        <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>3 &lt;= s.length &lt;= 5 x 10^4</code>
        </li>
        <li>
          <code>s</code>&nbsp;only consists of&nbsp;<em>a</em>, <em>b</em> or{" "}
          <em>c&nbsp;</em>characters.
        </li>
      </ul>
    </div>
  ),
  1423: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are several cards <strong>arranged in a row</strong>, and each
        card has an associated number of points. The points are given in the
        integer array <code>cardPoints</code>.
      </p>

      <p>
        In one step, you can take one card from the beginning or from the end of
        the row. You have to take exactly <code>k</code> cards.
      </p>

      <p>Your score is the sum of the points of the cards you have taken.</p>

      <p>
        Given the integer array <code>cardPoints</code> and the integer{" "}
        <code>k</code>, return the <em>maximum score</em> you can obtain.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> cardPoints = [1,2,3,4,5,6,1], k = 3 <br />
        <strong>Output:</strong> 12
        <br />
        <strong>Explanation:</strong> After the first step, your score will
        always be 1. However, choosing the rightmost card first will maximize
        your total score. The optimal strategy is to take the three cards on the
        right, giving a final score of 1 + 6 + 5 = 12.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> cardPoints = [2,2,2], k = 2<br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> Regardless of which two cards you take,
        your score will always be 4.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> cardPoints = [9,7,7,9,7,7,9], k = 7<br />
        <strong>Output:</strong> 55
        <br />
        <strong>Explanation:</strong> You have to take all the cards. Your score
        is the sum of points of all cards.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= cardPoints.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= cardPoints[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= cardPoints.length</code>
        </li>
      </ul>
    </div>
  ),
  1456: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> and an integer <code>k</code>, return{" "}
        <em>the maximum number of vowel letters in any substring of </em>
        <code>s</code>
        <em> with length </em>
        <code>k</code>.
      </p>

      <p>
        <strong>Vowel letters</strong> in English are <code>'a'</code>,{" "}
        <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and{" "}
        <code>'u'</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abciiidef", k = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The substring "iii" contains 3 vowel
        letters.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aeiou", k = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> Any substring of length 2 contains 2
        vowels.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "leetcode", k = 3 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> "lee", "eet" and "ode" contain 2 vowels.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
        <li>
          <code>1 &lt;= k &lt;= s.length</code>
        </li>
      </ul>
    </div>
  ),
  1477: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of integers <code>arr</code> and an integer{" "}
        <code>target</code>.
      </p>

      <p>
        You have to find <strong>two non-overlapping sub-arrays</strong> of{" "}
        <code>arr</code> each with a sum equal <code>target</code>. There can be
        multiple answers so you have to find an answer where the sum of the
        lengths of the two sub-arrays is <strong>minimum</strong>.
      </p>

      <p>
        Return <em>the minimum sum of the lengths</em> of the two required
        sub-arrays, or return <code>-1</code> if you cannot find such two
        sub-arrays.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [3,2,2,4,3], target = 3 <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> Only two sub-arrays have sum = 3 ([3] and
        [3]). The sum of their lengths is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [7,3,4,7], target = 7<br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> Although we have three non-overlapping
        sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first
        and third sub-arrays as the sum of their lengths is 2.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [4,3,2,6,2,3,4], target = 6<br />
        <strong>Output:</strong> -1
        <br />
        <strong>Explanation:</strong> We have only one sub-array of sum = 6.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= arr.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= arr[i] &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= target &lt;= 10<sup>8</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1493: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a binary array <code>nums</code>, you should delete one element
        from it.
      </p>

      <p>
        Return{" "}
        <em>the size of the longest non-empty subarray containing only </em>
        <code>1</code>
        <em>'s in the resulting array</em>. Return <code>0</code> if there is no
        such subarray.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,0,1] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> After deleting the number in position 2,
        [1,1,1] contains 3 numbers with value of 1's.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1,1,1,0,1,1,0,1] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> After deleting the number in position 4,
        [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> You must delete one element.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>nums[i]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  1610: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>points</code>, an integer{" "}
        <code>angle</code>, and your <code>location</code>, where{" "}
        <code>
          location = [pos<sub>x</sub>, pos<sub>y</sub>]
        </code>{" "}
        and{" "}
        <code>
          points[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>{" "}
        both denote <strong>integral coordinates</strong> on the X-Y plane.
      </p>

      <p>
        Initially, you are facing directly east from your position. You{" "}
        <strong>cannot move</strong> from your position, but you can{" "}
        <strong>rotate</strong>. In other words,{" "}
        <code>
          pos<sub>x</sub>
        </code>{" "}
        and{" "}
        <code>
          pos<sub>y</sub>
        </code>{" "}
        cannot be changed. Your field of view in <strong>degrees</strong> is
        represented by <code>angle</code>, determining how wide you can see from
        any given view direction. Let <code>d</code> be the amount in degrees
        that you rotate counterclockwise. Then, your field of view is the{" "}
        <strong>inclusive</strong> range of angles{" "}
        <code>[d - angle/2, d + angle/2]</code>.
      </p>

      <p>
        <video
          autoplay=""
          controls=""
          height="360"
          width="480"
          style={{ maxWidth: "100%", height: "auto" }}
        >
          <source
            src="https://assets.leetcode.com/uploads/2020/09/30/angle.mp4"
            type="video/mp4"
          />
          Your browser does not support the video tag or this video format.
        </video>
      </p>

      <p>
        You can <strong>see</strong> some set of points if, for each point, the{" "}
        <strong>angle</strong> formed by the point, your position, and the
        immediate east direction from your position is{" "}
        <strong>in your field of view</strong>.
      </p>

      <p>
        There can be multiple points at one coordinate. There may be points at
        your location, and you can always see these points regardless of your
        rotation. Points do not obstruct your vision to other points.
      </p>

      <p>
        Return <em>the maximum number of points you can see</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/30/89a07e9b-00ab-4967-976a-c723b2aa8656.png"
        style={{ width: 400, height: 300 }}
      />
      <pre>
        <strong>Input:</strong> points = [[2,1],[2,2],[3,3]], angle = 90,
        location = [1,1] <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The shaded region represents your field of
        view. All points can be made visible in your field of view, including
        [3,3] even though [2,2] is in front and in the same line of sight.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> points = [[2,1],[2,2],[3,4],[1,1]], angle = 90,
        location = [1,1]
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> All points can be made visible in your
        field of view, including the one at your location.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/30/5010bfd3-86e6-465f-ac64-e9df941d2e49.png"
        style={{ width: 690, height: 348 }}
      />
      <pre>
        <strong>Input:</strong> points = [[1,0],[2,1]], angle = 13, location =
        [1,1]
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> You can only see one of the two points, as
        shown above.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= points.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>points[i].length == 2</code>
        </li>
        <li>
          <code>location.length == 2</code>
        </li>
        <li>
          <code>0 &lt;= angle &lt; 360</code>
        </li>
        <li>
          <code>
            0 &lt;= pos<sub>x</sub>, pos<sub>y</sub>, x<sub>i</sub>, y
            <sub>i</sub> &lt;= 100
          </code>
        </li>
      </ul>
    </div>
  ),
  1652: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have a bomb to defuse, and your time is running out! Your informer
        will provide you with a <strong>circular</strong> array{" "}
        <code>code</code>&nbsp;of length of <code>n</code>&nbsp;and a key{" "}
        <code>k</code>.
      </p>

      <p>
        To decrypt the code, you must replace every number. All the numbers are
        replaced <strong>simultaneously</strong>.
      </p>

      <ul>
        <li>
          If <code>k &gt; 0</code>, replace the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          number with the sum of the <strong>next</strong> <code>k</code>{" "}
          numbers.
        </li>
        <li>
          If <code>k &lt; 0</code>, replace the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          number with the sum of the <strong>previous</strong> <code>k</code>{" "}
          numbers.
        </li>
        <li>
          If <code>k == 0</code>, replace the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          number with <code>0</code>.
        </li>
      </ul>

      <p>
        As <code>code</code> is circular, the next element of{" "}
        <code>code[n-1]</code> is <code>code[0]</code>, and the previous element
        of <code>code[0]</code> is <code>code[n-1]</code>.
      </p>

      <p>
        Given the <strong>circular</strong> array <code>code</code> and an
        integer key <code>k</code>, return{" "}
        <em>the decrypted code to defuse the bomb</em>!
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> code = [5,7,1,4], k = 3 <br />
        <strong>Output:</strong> [12,10,16,13] <br />
        <strong>Explanation:</strong> Each number is replaced by the sum of the
        next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1].
        Notice that the numbers wrap around.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> code = [1,2,3,4], k = 0 <br />
        <strong>Output:</strong> [0,0,0,0] <br />
        <strong>Explanation:</strong> When k is zero, the numbers are replaced
        by 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> code = [2,4,9,3], k = -2 <br />
        <strong>Output:</strong> [12,5,6,13] <br />
        <strong>Explanation:</strong> The decrypted code is [3+9, 2+3, 4+2,
        9+4]. Notice that the numbers wrap around again. If k is negative, the
        sum is of the <strong>previous</strong> numbers.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == code.length</code>
        </li>
        <li>
          <code>1 &lt;= n&nbsp;&lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= code[i] &lt;= 100</code>
        </li>
        <li>
          <code>-(n - 1) &lt;= k &lt;= n - 1</code>
        </li>
      </ul>
    </div>
  ),
  1658: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and an integer{" "}
        <code>x</code>. In one operation, you can either remove the leftmost or
        the rightmost element from the array <code>nums</code> and subtract its
        value from <code>x</code>. Note that this <strong>modifies</strong> the
        array for future operations.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum number</strong> of operations to reduce{" "}
        </em>
        <code>x</code>{" "}
        <em>
          to <strong>exactly</strong>
        </em>{" "}
        <code>0</code> <em>if it is possible</em>
        <em>, otherwise, return </em>
        <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,4,2,3], x = 5 <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> The optimal solution is to remove the last
        two elements to reduce x to zero.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,6,7,8,9], x = 4<br />
        <strong>Output:</strong> -1
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,2,20,1,1,3], x = 10
        <br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation:</strong> The optimal solution is to remove the last
        three elements and the first two elements (5 operations in total) to
        reduce x to zero.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= x &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1695: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of positive integers <code>nums</code> and want
        to erase a subarray containing&nbsp;<strong>unique elements</strong>.
        The <strong>score</strong> you get by erasing the subarray is equal to
        the <strong>sum</strong> of its elements.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum score</strong> you can get by erasing{" "}
          <strong>exactly one</strong> subarray.
        </em>
      </p>

      <p>
        An array <code>b</code> is called to be a{" "}
        <span class="tex-font-style-it">subarray</span> of <code>a</code> if it
        forms a contiguous subsequence of <code>a</code>, that is, if it is
        equal to <code>a[l],a[l+1],...,a[r]</code> for some <code>(l,r)</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,4,5,6] <br />
        <strong>Output:</strong> 17 <br />
        <strong>Explanation:</strong> The optimal subarray here is [2,4,5,6].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,2,1,2,5,2,1,2,5] <br />
        <strong>Output:</strong> 8 <br />
        <strong>Explanation:</strong> The optimal subarray here is [5,2,1] or
        [1,2,5].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1703: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array, <code>nums</code>, and an integer{" "}
        <code>k</code>. <code>nums</code> comprises of only <code>0</code>'s and{" "}
        <code>1</code>'s. In one move, you can choose two{" "}
        <strong>adjacent</strong> indices and swap their values.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of moves required so that{" "}
        </em>
        <code>nums</code>
        <em> has </em>
        <code>k</code>
        <em>
          {" "}
          <strong>consecutive</strong>{" "}
        </em>
        <code>1</code>
        <em>'s</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,0,0,1,0,1], k = 2 <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> In 1 move, nums could be [1,0,0,0,<u>1</u>
        ,<u>1</u>] and have 2 consecutive 1's.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,0,0,0,0,0,1,1], k = 3<br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation:</strong> In 5 moves, the leftmost 1 can be shifted
        right until nums = [0,0,0,0,0,<u>1</u>,<u>1</u>,<u>1</u>].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,0,1], k = 2<br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> nums already has 2 consecutive 1's.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>nums[i]</code> is <code>0</code> or <code>1</code>.
        </li>
        <li>
          <code>1 &lt;= k &lt;= sum(nums)</code>
        </li>
      </ul>
    </div>
  ),
  1763: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A string <code>s</code> is <strong>nice</strong> if, for every letter of
        the alphabet that <code>s</code> contains, it appears{" "}
        <strong>both</strong> in uppercase and lowercase. For example,{" "}
        <code>"abABB"</code> is nice because <code>'A'</code> and{" "}
        <code>'a'</code> appear, and <code>'B'</code> and <code>'b'</code>{" "}
        appear. However, <code>"abA"</code> is not because <code>'b'</code>{" "}
        appears, but <code>'B'</code> does not.
      </p>

      <p>
        Given a string <code>s</code>, return{" "}
        <em>
          the longest <strong>substring</strong> of <code>s</code> that is{" "}
          <strong>nice</strong>. If there are multiple, return the substring of
          the <strong>earliest</strong> occurrence. If there are none, return an
          empty string
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "YazaAay" <br />
        <strong>Output:</strong> "aAa" <br />
        <strong>Explanation: </strong>"aAa" is a nice string because 'A/a' is
        the only letter of the alphabet in s, and both 'A' and 'a' appear. "aAa"
        is the longest nice substring.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "Bb" <br />
        <strong>Output:</strong> "Bb" <br />
        <strong>Explanation:</strong> "Bb" is a nice string because both 'B' and
        'b' appear. The whole string is a substring.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "c" <br />
        <strong>Output:</strong> "" <br />
        <strong>Explanation:</strong> There are no nice substrings.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code> consists of uppercase and lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  1838: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>frequency</strong> of an element is the number of times it
        occurs in an array.
      </p>

      <p>
        You are given an integer array <code>nums</code> and an integer{" "}
        <code>k</code>. In one operation, you can choose an index of{" "}
        <code>nums</code> and increment the element at that index by{" "}
        <code>1</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum possible frequency</strong> of an element after
          performing <strong>at most</strong>{" "}
        </em>
        <code>k</code>
        <em> operations</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,4], k = 5 <br />
        <strong>Output:</strong> 3
        <strong>
          {" "}
          <br />
          Explanation:
        </strong>{" "}
        Increment the first element three times and the second element two times
        to make nums = [4,4,4]. <br />4 has a frequency of 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,4,8,13], k = 5 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> There are multiple optimal solutions:{" "}
        <br />
        - Increment the first element three times to make nums = [4,4,8,13]. 4
        has a frequency of 2. <br />
        - Increment the second element four times to make nums = [1,8,8,13]. 8
        has a frequency of 2. <br />- Increment the third element five times to
        make nums = [1,4,13,13]. 13 has a frequency of 2.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,9,6], k = 2 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1839: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A string is considered <strong>beautiful</strong> if it satisfies the
        following conditions:
      </p>

      <ul>
        <li>
          Each of the 5 English vowels (<code>'a'</code>, <code>'e'</code>,{" "}
          <code>'i'</code>, <code>'o'</code>, <code>'u'</code>) must appear{" "}
          <strong>at least once</strong> in it.
        </li>
        <li>
          The letters must be sorted in <strong>alphabetical order</strong>{" "}
          (i.e. all <code>'a'</code>s before <code>'e'</code>s, all{" "}
          <code>'e'</code>s before <code>'i'</code>s, etc.).
        </li>
      </ul>

      <p>
        For example, strings <code>"aeiou"</code> and{" "}
        <code>"aaaaaaeiiiioou"</code> are considered <strong>beautiful</strong>,
        but <code>"uaeio"</code>, <code>"aeoiu"</code>, and{" "}
        <code>"aaaeeeooo"</code> are <strong>not beautiful</strong>.
      </p>

      <p>
        Given a string <code>word</code> consisting of English vowels, return{" "}
        <em>
          the <strong>length of the longest beautiful substring</strong> of{" "}
        </em>
        <code>word</code>
        <em>. If no such substring exists, return </em>
        <code>0</code>.
      </p>

      <p>
        A <strong>substring</strong> is a contiguous sequence of characters in a
        string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "aeiaaio<u>aaaaeiiiiouuu</u>ooaauuaeiu"{" "}
        <br />
        <strong>Output:</strong> 13 <br />
        <b>Explanation:</b> The longest beautiful substring in word is
        "aaaaeiiiiouuu" of length 13.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "aeeeiiiioooauuu<u>aeiou</u>" <br />
        <strong>Output:</strong> 5 <br />
        <b>Explanation:</b> The longest beautiful substring in word is "aeiou"
        of length 5.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "a" <br />
        <strong>Output:</strong> 0 <br />
        <b>Explanation:</b> There is no beautiful substring, so return 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= word.length &lt;= 5 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>word</code> consists of characters <code>'a'</code>,{" "}
          <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and{" "}
          <code>'u'</code>.
        </li>
      </ul>
    </div>
  ),
  1852: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            Given an integer array <code>nums</code> and an integer{" "}
            <code>k</code>, you are asked to construct the array{" "}
            <code>ans</code> of size <code>n-k+1</code> where{" "}
            <code>ans[i]</code> is the number of <strong>distinct</strong>{" "}
            numbers in the subarray{" "}
            <code>nums[i:i+k-1] = [nums[i], nums[i+1], ..., nums[i+k-1]]</code>.
          </p>

          <p>
            Return <em>the array </em>
            <code>ans</code>.
          </p>

          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>

          <pre>
            <strong>Input:</strong> nums = [1,2,3,2,2,1,3], k = 3<br />
            <strong>Output:</strong> [3,2,2,2,3]
            <br />
            <strong>Explanation: </strong>The number of distinct elements in
            each subarray goes as follows: - nums[0:2] = [1,2,3] so ans[0] = 3{" "}
            <br />
            - nums[1:3] = [2,3,2] so ans[1] = 2<br />
            - nums[2:4] = [3,2,2] so ans[2] = 2<br />
            - nums[3:5] = [2,2,1] so ans[3] = 2<br />- nums[4:6] = [2,1,3] so
            ans[4] = 3
          </pre>

          <p>
            <strong>Example 2:</strong>
          </p>

          <pre>
            <strong>Input:</strong> nums = [1,1,1,1,2,3,4], k = 4<br />
            <strong>Output:</strong> [1,2,3,4]
            <br />
            <strong>Explanation: </strong>The number of distinct elements in
            each subarray goes as follows:
            <br />
            - nums[0:3] = [1,1,1,1] so ans[0] = 1<br />
            - nums[1:4] = [1,1,1,2] so ans[1] = 2<br />
            - nums[2:5] = [1,1,2,3] so ans[2] = 3<br />- nums[3:6] = [1,2,3,4]
            so ans[3] = 4
          </pre>

          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              <code>
                1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup>
              </code>
            </li>
            <li>
              <code>
                1 &lt;= nums[i] &lt;= 10<sup>5</sup>
              </code>
            </li>
          </ul>
        </div>
      </div>
    </div>
  ),
  1871: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> binary string <code>s</code>{" "}
        and two integers <code>minJump</code> and <code>maxJump</code>. In the
        beginning, you are standing at index <code>0</code>, which is equal to{" "}
        <code>'0'</code>. You can move from index <code>i</code> to index{" "}
        <code>j</code> if the following conditions are fulfilled:
      </p>

      <ul>
        <li>
          <code>i + minJump &lt;= j &lt;= min(i + maxJump, s.length - 1)</code>,
          and
        </li>
        <li>
          <code>s[j] == '0'</code>.
        </li>
      </ul>

      <p>
        Return <code>true</code>
        <i> if you can reach index </i>
        <code>s.length - 1</code>
        <i> in </i>
        <code>s</code>
        <em>, or </em>
        <code>false</code>
        <em> otherwise.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "<u>0</u>11<u>0</u>1<u>0</u>", minJump = 2,
        maxJump = 3 <br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong>
        <br />
        In the first step, move from index 0 to index 3. <br />
        In the second step, move from index 3 to index 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "01101110", minJump = 2, maxJump = 3<br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.
        </li>
        <li>
          <code>s[0] == '0'</code>
        </li>
        <li>
          <code>1 &lt;= minJump &lt;= maxJump &lt; s.length</code>
        </li>
      </ul>
    </div>
  ),
  1876: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A string is <strong>good</strong> if there are no repeated characters.
      </p>

      <p>
        Given a string <code>s</code>​​​​​, return{" "}
        <em>
          the number of <strong>good substrings</strong> of length{" "}
          <strong>three </strong>in{" "}
        </em>
        <code>s</code>​​​​​​.
      </p>

      <p>
        Note that if there are multiple occurrences of the same substring, every
        occurrence should be counted.
      </p>

      <p>
        A <strong>substring</strong> is a contiguous sequence of characters in a
        string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "xyzzaz" <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> There are 4 substrings of size 3: "xyz",
        "yzz", "zza", and "zaz". The only good substring of length 3 is "xyz".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aababcabc" <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> There are 7 substrings of size 3: "aab",
        "aba", "bab", "abc", "bca", "cab", and "abc". The good substrings are
        "abc", "bca", "cab", and "abc".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code>​​​​​​ consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  1888: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a binary string <code>s</code>. You are allowed to perform
        two types of operations on the string in any sequence:
      </p>

      <ul>
        <li>
          <strong>Type-1: Remove</strong> the character at the start of the
          string <code>s</code> and <strong>append</strong> it to the end of the
          string.
        </li>
        <li>
          <strong>Type-2: Pick</strong> any character in <code>s</code> and{" "}
          <strong>flip</strong> its value, i.e., if its value is{" "}
          <code>'0'</code> it becomes <code>'1'</code> and vice-versa.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of <strong>type-2</strong>{" "}
          operations you need to perform
        </em>{" "}
        <em>such that </em>
        <code>s</code>{" "}
        <em>
          becomes <strong>alternating</strong>.
        </em>
      </p>

      <p>
        The string is called <strong>alternating</strong> if no two adjacent
        characters are equal.
      </p>

      <ul>
        <li>
          For example, the strings <code>"010"</code> and <code>"1010"</code>{" "}
          are alternating, while the string <code>"0100"</code> is not.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "111000" <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation</strong>: Use the first operation two times to make
        s = "100011". Then, use the second operation on the third and sixth
        elements to make s = "10<u>1</u>01<u>0</u>".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "010" <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation</strong>: The string is already alternating.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "1110" <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation</strong>: Use the second operation on the second
        element to make s = "1<u>0</u>10".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.
        </li>
      </ul>
    </div>
  ),
  1918: (
    <article role="main" class="blog-post">
      <p>
        Given an integer array{" "}
        <code class="language-plaintext highlighter-rouge">nums</code> of length{" "}
        <code class="language-plaintext highlighter-rouge">n</code> and an
        integer <code class="language-plaintext highlighter-rouge">k</code>,
        return{" "}
        <em>
          the <code class="language-plaintext highlighter-rouge">k-th</code>{" "}
          <strong>smallest subarray sum</strong>
        </em>
        .
      </p>
      <p>
        A <strong>subarray</strong> is defined as a <strong>non-empty</strong>{" "}
        contiguous sequence of elements in an array. A{" "}
        <strong>subarray sum</strong> is the sum of all elements in the
        subarray.
      </p>
      <br />
      <p>
        <strong>Example 1:</strong>
      </p>
      <p>
        <strong>Input:</strong> nums = [2,1,3], k = 4
      </p>{" "}
      <p>
        <strong>Output:</strong> 3
      </p>
      <p>
        <strong>Explanation:</strong> The subarrays of [2,1,3] are:
      </p>
      <ul>
        <li>[2] with sum 2</li>
        <li>[1] with sum 1</li>
        <li>[3] with sum 3</li>
        <li>[2,1] with sum 3</li>
        <li>[1,3] with sum 4</li>
        <li>[2,1,3] with sum 6</li>
      </ul>
      <p>
        Ordering the sums from smallest to largest gives 1, 2, 3, 3, 4, 6. The
        4th smallest is 3.
      </p>
      <br />
      <p>
        <strong>Example 2:</strong>
      </p>
      <p>
        <strong>Input:</strong> nums = [3,3,5,5], k = 7
      </p>
      <p>
        <strong>Output:</strong> 10
      </p>
      <p>
        <strong>Explanation:</strong> The subarrays of [3,3,5,5] are:
      </p>
      <ul>
        <li>[3] with sum 3</li>
        <li>[3] with sum 3</li>
        <li>[5] with sum 5</li>
        <li>[5] with sum 5</li>
        <li>[3,3] with sum 6</li>
        <li>[3,5] with sum 8</li>
        <li>[5,5] with sum 10</li>
        <li>[3,3,5], with sum 11</li>
        <li>[3,5,5] with sum 13</li>
        <li>[3,3,5,5] with sum 16</li>
      </ul>
      <p>
        Ordering the sums from smallest to largest gives 3, 3, 5, 5, 6, 8, 10,
        11, 13, 16. The 7th smallest is 10.
      </p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code class="language-plaintext highlighter-rouge">
            n == nums.length
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= n &lt;= 2 * 10^4
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= nums[i] &lt;= 5 * 10^4
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= k &lt;= n * (n + 1) / 2
          </code>
        </li>
      </ul>
    </article>
  ),
  1984: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code>, where <code>nums[i]</code> represents the score of
        the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        student. You are also given an integer <code>k</code>.
      </p>

      <p>
        Pick the scores of any <code>k</code> students from the array so that
        the <strong>difference</strong> between the <strong>highest</strong> and
        the <strong>lowest</strong> of the <code>k</code> scores is{" "}
        <strong>minimized</strong>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> possible difference
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [90], k = 1 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There is one way to pick score(s) of one
        student: <br />- [
        <strong>
          <u>90</u>
        </strong>
        ]. The difference between the highest and lowest score is 90 - 90 = 0.{" "}
        <br />
        The minimum possible difference is 0.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [9,4,1,7], k = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> There are six ways to pick score(s) of two
        students: <br />- [
        <strong>
          <u>9</u>
        </strong>
        ,
        <strong>
          <u>4</u>
        </strong>
        ,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.{" "}
        <br />- [
        <strong>
          <u>9</u>
        </strong>
        ,4,
        <strong>
          <u>1</u>
        </strong>
        ,7]. The difference between the highest and lowest score is 9 - 1 = 8.{" "}
        <br />- [
        <strong>
          <u>9</u>
        </strong>
        ,4,1,
        <strong>
          <u>7</u>
        </strong>
        ]. The difference between the highest and lowest score is 9 - 7 = 2.{" "}
        <br />- [9,
        <strong>
          <u>4</u>
        </strong>
        ,
        <strong>
          <u>1</u>
        </strong>
        ,7]. The difference between the highest and lowest score is 4 - 1 = 3.{" "}
        <br />- [9,
        <strong>
          <u>4</u>
        </strong>
        ,1,
        <strong>
          <u>7</u>
        </strong>
        ]. The difference between the highest and lowest score is 7 - 4 = 3.{" "}
        <br />- [9,4,
        <strong>
          <u>1</u>
        </strong>
        ,
        <strong>
          <u>7</u>
        </strong>
        ]. The difference between the highest and lowest score is 7 - 1 = 6. The
        minimum possible difference is 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2009: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>. In one operation, you
        can replace <strong>any</strong> element in <code>nums</code> with{" "}
        <strong>any</strong> integer.
      </p>

      <p>
        <code>nums</code> is considered <strong>continuous</strong> if both of
        the following conditions are fulfilled:
      </p>

      <ul>
        <li>
          All elements in <code>nums</code> are <strong>unique</strong>.
        </li>
        <li>
          The difference between the <strong>maximum</strong> element and the{" "}
          <strong>minimum</strong> element in <code>nums</code> equals{" "}
          <code>nums.length - 1</code>.
        </li>
      </ul>

      <p>
        For example, <code>nums = [4, 2, 5, 3]</code> is{" "}
        <strong>continuous</strong>, but <code>nums = [1, 2, 3, 5, 6]</code> is{" "}
        <strong>not continuous</strong>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of operations to make{" "}
        </em>
        <code>nums</code>
        <em> </em>
        <strong>
          <em>continuous</em>
        </strong>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,5,3] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong>&nbsp;nums is already continuous.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,5,6]
        <strong>Output:</strong> 1<strong>Explanation:</strong>&nbsp;One
        possible solution is to change the last element to 4. <br />
        The resulting array is [1,2,3,5,4], which is continuous.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,10,100,1000] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong>&nbsp;One possible solution is to: <br />
        - Change the second element to 2. <br />
        - Change the third element to 3. <br />
        - Change the fourth element to 4. <br />
        The resulting array is [1,2,3,4], which is continuous.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2024: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A teacher is writing a test with <code>n</code> true/false questions,
        with <code>'T'</code> denoting true and <code>'F'</code> denoting false.
        He wants to confuse the students by <strong>maximizing</strong> the
        number of <strong>consecutive</strong> questions with the{" "}
        <strong>same</strong> answer (multiple trues or multiple falses in a
        row).
      </p>

      <p>
        You are given a string <code>answerKey</code>, where{" "}
        <code>answerKey[i]</code> is the original answer to the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        question. In addition, you are given an integer <code>k</code>, the
        maximum number of times you may perform the following operation:
      </p>

      <ul>
        <li>
          Change the answer key for any question to <code>'T'</code> or{" "}
          <code>'F'</code> (i.e., set <code>answerKey[i]</code> to{" "}
          <code>'T'</code> or <code>'F'</code>).
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong> number of consecutive
        </em>{" "}
        <code>'T'</code>s or <code>'F'</code>s{" "}
        <em>in the answer key after performing the operation at most</em>{" "}
        <code>k</code> <em>times</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> answerKey = "TTFF", k = 2
        <strong>Output:</strong> 4<strong>Explanation:</strong> We can replace
        both the 'F's with 'T's to make answerKey = "<u>TTTT</u>". There are
        four consecutive 'T's.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> answerKey = "TFFT", k = 1 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> We can replace the first 'T' with an 'F'
        to make answerKey = "<u>FFF</u>T". <br />
        Alternatively, we can replace the second 'T' with an 'F' to make
        answerKey = "T<u>FFF</u>". <br />
        In both cases, there are three consecutive 'F's.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> answerKey = "TTFTTFTT", k = 1 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> We can replace the first 'F' to make
        answerKey = "<u>TTTTT</u>FTT" <br />
        Alternatively, we can replace the second 'F' to make answerKey = "TTF
        <u>TTTTT</u>". <br />
        In both cases, there are five consecutive 'T's.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == answerKey.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>answerKey[i]</code> is either <code>'T'</code> or{" "}
          <code>'F'</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= n</code>
        </li>
      </ul>
    </div>
  ),
  2090: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array <code>nums</code> of{" "}
        <code>n</code> integers, and an integer <code>k</code>.
      </p>

      <p>
        The <strong>k-radius average</strong> for a subarray of{" "}
        <code>nums</code> <strong>centered</strong> at some index <code>i</code>{" "}
        with the <strong>radius</strong> <code>k</code> is the average of{" "}
        <strong>all</strong> elements in <code>nums</code> between the indices{" "}
        <code>i - k</code> and <code>i + k</code> (<strong>inclusive</strong>).
        If there are less than <code>k</code> elements before{" "}
        <strong>or</strong> after the index <code>i</code>, then the{" "}
        <strong>k-radius average</strong> is <code>-1</code>.
      </p>

      <p>
        Build and return <em>an array </em>
        <code>avgs</code>
        <em> of length </em>
        <code>n</code>
        <em> where </em>
        <code>avgs[i]</code>
        <em>
          {" "}
          is the <strong>k-radius average</strong> for the subarray centered at
          index{" "}
        </em>
        <code>i</code>.
      </p>

      <p>
        The <strong>average</strong> of <code>x</code> elements is the sum of
        the <code>x</code> elements divided by <code>x</code>, using{" "}
        <strong>integer division</strong>. The integer division truncates toward
        zero, which means losing its fractional part.
      </p>

      <ul>
        <li>
          For example, the average of four elements <code>2</code>,{" "}
          <code>3</code>, <code>1</code>, and <code>5</code> is{" "}
          <code>(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75</code>, which truncates to{" "}
          <code>2</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/11/07/eg1.png"
        style={{ width: 343, height: 119 }}
      />
      <pre>
        <strong>Input:</strong> nums = [7,4,3,9,1,8,5,2,6], k = 3 <br />
        <strong>Output:</strong> [-1,-1,-1,5,4,4,-1,-1,-1] <br />
        <strong>Explanation:</strong>- avg[0], avg[1], and avg[2] are -1 because
        there are less than k elements <strong>before</strong> each index. - The
        sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9
        + 1 + 8 + 5 = 37. Using <strong>integer division</strong>, avg[3] = 37 /
        7 = 5. - For the subarray centered at index 4, avg[4] = (4 + 3 + 9 + 1 +
        8 + 5 + 2) / 7 = 4. - For the subarray centered at index 5, avg[5] = (3
        + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4. - avg[6], avg[7], and avg[8] are -1
        because there are less than k elements <strong>after</strong> each
        index.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [100000], k = 0<br />
        <strong>Output:</strong> [100000]
        <br />
        <strong>Explanation:</strong>
        <br />
        - The sum of the subarray centered at index 0 with radius 0 is: 100000.
        <br />
        avg[0] = 100000 / 1 = 100000.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [8], k = 100000 <br />
        <strong>Output:</strong> [-1]
        <br />
        <strong>Explanation:</strong> <br />- avg[0] is -1 because there are
        less than k elements before and after index 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i], k &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2106: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Fruits are available at some positions on an infinite x-axis. You are
        given a 2D integer array <code>fruits</code> where{" "}
        <code>
          fruits[i] = [position<sub>i</sub>, amount<sub>i</sub>]
        </code>{" "}
        depicts{" "}
        <code>
          amount<sub>i</sub>
        </code>{" "}
        fruits at the position{" "}
        <code>
          position<sub>i</sub>
        </code>
        . <code>fruits</code> is already <strong>sorted</strong> by{" "}
        <code>
          position<sub>i</sub>
        </code>{" "}
        in <strong>ascending order</strong>, and each{" "}
        <code>
          position<sub>i</sub>
        </code>{" "}
        is <strong>unique</strong>.
      </p>
      <p>
        You are also given an integer <code>startPos</code> and an integer{" "}
        <code>k</code>. Initially, you are at the position <code>startPos</code>
        . From any position, you can either walk to the{" "}
        <strong>left or right</strong>. It takes <strong>one step</strong> to
        move <strong>one unit</strong> on the x-axis, and you can walk{" "}
        <strong>at most</strong> <code>k</code> steps in total. For every
        position you reach, you harvest all the fruits at that position, and the
        fruits will disappear from that position.
      </p>
      <p>
        Return{" "}
        <em>
          the <strong>maximum total number</strong> of fruits you can harvest
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/11/21/1.png"
        style={{ width: 472, height: 115 }}
      />
      <pre>
        <strong>Input:</strong> fruits = [[2,8],[6,3],[8,6]], startPos = 5, k =
        4<strong>Output:</strong> 9<strong>Explanation:</strong>
        The optimal way is to: - Move right to position 6 and harvest 3 fruits -
        Move right to position 8 and harvest 6 fruits You moved 3 steps and
        harvested 3 + 6 = 9 fruits in total.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/11/21/2.png"
        style={{ width: 512, height: 129 }}
      />
      <pre>
        <strong>Input:</strong> fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]],
        startPos = 5, k = 4<br />
        <strong>Output:</strong> 14
        <br />
        <strong>Explanation:</strong> <br />
        You can move at most k = 4 steps, so you cannot reach position 0 nor 10.
        <br />
        The optimal way is to:
        <br />
        - Harvest the 7 fruits at the starting position 5<br />
        - Move left to position 4 and harvest 1 fruit
        <br />
        - Move right to position 6 and harvest 2 fruits
        <br />
        - Move right to position 7 and harvest 4 fruits
        <br />
        You moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in
        total.
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/11/21/3.png"
        style={{ width: 476, height: 100 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> fruits = [[0,3],[6,4],[8,5]], startPos = 3, k =
        2<br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong>
        <br />
        You can move at most k = 2 steps and cannot reach any position with
        fruits.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= fruits.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>fruits[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= startPos, position<sub>i</sub> &lt;= 2 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            position<sub>i-1</sub> &lt; position<sub>i</sub>
          </code>{" "}
          for any <code>i &gt; 0</code>&nbsp;(<strong>0-indexed</strong>)
        </li>
        <li>
          <code>
            1 &lt;= amount<sub>i</sub> &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 2 * 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2107: (
    <article role="main" class="blog-post">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>candies</code>, where <code>candies[i]</code> represents the
        flavor of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        candy. Your mom wants you to share these candies with your little sister
        by giving her <code>k</code> <strong>consecutive</strong> candies, but
        you want to keep as many flavors of candies as possible.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong> number of <strong>unique</strong> flavors
          of candy you can keep after sharing{" "}
        </em>
        <em> with your sister.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> candies = [1,<u>2,2,3</u>,4,3], k = 3 <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> <br />
        Give the candies in the range [1, 3] (inclusive) with flavors [2,2,3].
        <br />
        You can eat candies with flavors [1,4,3].
        <br />
        There are 3 unique flavors, so return 3.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> candies = [2,2,2,<u>2,3</u>,3], k = 2<br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> <br />
        Give the candies in the range [3, 4] (inclusive) with flavors [2,3].
        <br />
        You can eat candies with flavors [2,2,2,3].
        <br />
        There are 2 unique flavors, so return 2.
        <br />
        Note that you can also share the candies with flavors [2,2] and eat the
        candies with flavors [2,2,3,3].
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> candies = [2,4,5], k = 0<br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> <br />
        You do not have to give any candies.
        <br />
        You can eat the candies with flavors [2,4,5].
        <br />
        There are 3 unique flavors, so return 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= candies.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= candies[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= k &lt;= candies.length</code>
        </li>
      </ul>
    </article>
  ),
  2134: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>swap</strong> is defined as taking two{" "}
        <strong>distinct</strong> positions in an array and swapping the values
        in them.
      </p>

      <p>
        A <strong>circular</strong> array is defined as an array where we
        consider the <strong>first</strong> element and the{" "}
        <strong>last</strong> element to be <strong>adjacent</strong>.
      </p>

      <p>
        Given a <strong>binary</strong> <strong>circular</strong> array{" "}
        <code>nums</code>, return{" "}
        <em>the minimum number of swaps required to group all </em>
        <code>1</code>
        <em>
          's present in the array together at <strong>any location</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1,0,1,1,0,0] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> Here are a few of the ways to group all
        the 1's together: <br />
        [0,<u>0</u>,<u>1</u>,1,1,0,0] using 1 swap. <br />
        [0,1,<u>1</u>,1,<u>0</u>,0,0] using 1 swap. <br />
        [1,1,0,0,0,0,1] using 2 swaps (using the circular property of the
        array). <br />
        There is no way to group all 1's together with 0 swaps. <br />
        Thus, the minimum number of swaps required is 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1,1,1,0,0,1,1,0] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> Here are a few of the ways to group all
        the 1's together: <br />
        [1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the
        array). <br />
        [1,1,1,1,1,0,0,0,0] using 2 swaps. <br />
        There is no way to group all 1's together with 0 or 1 swaps. <br />
        Thus, the minimum number of swaps required is 2.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,0,0,1] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> All the 1's are already grouped together
        due to the circular property of the array. <br />
        Thus, the minimum number of swaps required is 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>nums[i]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  2156: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The hash of a <strong>0-indexed</strong> string <code>s</code> of length{" "}
        <code>k</code>, given integers <code>p</code> and <code>m</code>, is
        computed using the following function:
      </p>

      <ul>
        <li>
          <code>
            hash(s, p, m) = (val(s[0]) * p<sup>0</sup> + val(s[1]) * p
            <sup>1</sup> + ... + val(s[k-1]) * p<sup>k-1</sup>) mod m
          </code>
          .
        </li>
      </ul>

      <p>
        Where <code>val(s[i])</code> represents the index of <code>s[i]</code>{" "}
        in the alphabet from <code>val('a') = 1</code> to{" "}
        <code>val('z') = 26</code>.
      </p>

      <p>
        You are given a string <code>s</code> and the integers{" "}
        <code>power</code>, <code>modulo</code>, <code>k</code>, and{" "}
        <code>hashValue.</code> Return <code>sub</code>,
        <em>
          {" "}
          the <strong>first</strong> <strong>substring</strong> of{" "}
        </em>
        <code>s</code>
        <em> of length </em>
        <code>k</code>
        <em> such that </em>
        <code>hash(sub, power, modulo) == hashValue</code>.
      </p>

      <p>
        The test cases will be generated such that an answer always{" "}
        <strong>exists</strong>.
      </p>

      <p>
        A <b>substring</b> is a contiguous non-empty sequence of characters
        within a string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "leetcode", power = 7, modulo = 20, k = 2,
        hashValue = 0 <br />
        <strong>Output:</strong> "ee" <br />
        <strong>Explanation:</strong> The hash of "ee" can be computed to be
        hash("ee", 7, 20) = (5 * 1 + 5 * 7) mod 20 = 40 mod 20 = 0. <br />
        "ee" is the first substring of length 2 with hashValue 0. Hence, we
        return "ee".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "fbxzaad", power = 31, modulo = 100, k = 3,
        hashValue = 32 <br />
        <strong>Output:</strong> "fbx" <br />
        <strong>Explanation:</strong> The hash of "fbx" can be computed to be
        hash("fbx", 31, 100) = (6 * 1 + 2 * 31 + 24 * 31<sup>2</sup>) mod 100 =
        23132 mod 100 = 32. <br />
        The hash of "bxz" can be computed to be hash("bxz", 31, 100) = (2 * 1 +
        24 * 31 + 26 * 31<sup>2</sup>) mod 100 = 25732 mod 100 = 32. <br />
        "fbx" is the first substring of length 3 with hashValue 32. Hence, we
        return "fbx". <br />
        Note that "bxz" also has a hash of 32 but it appears later than "fbx".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= k &lt;= s.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= power, modulo &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= hashValue &lt; modulo</code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters only.
        </li>
        <li>
          The test cases are generated such that an answer always{" "}
          <strong>exists</strong>.
        </li>
      </ul>
    </div>
  ),
  2260: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>cards</code> where{" "}
        <code>cards[i]</code> represents the <strong>value</strong> of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        card. A pair of cards are <strong>matching</strong> if the cards have
        the <strong>same</strong> value.
      </p>

      <p>
        Return
        <em>
          {" "}
          the <strong>minimum</strong> number of <strong>consecutive</strong>{" "}
          cards you have to pick up to have a pair of <strong>matching</strong>{" "}
          cards among the picked cards.
        </em>{" "}
        If it is impossible to have matching cards, return <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> cards = [3,4,2,3,4,7] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> We can pick up the cards [3,4,2,3] which
        contain a matching pair of cards with value 3. Note that picking up the
        cards [4,2,3,4] is also optimal.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> cards = [1,0,5,3] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> There is no way to pick up a set of
        consecutive cards that contain a pair of matching cards.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= cards.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= cards[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2269: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>k-beauty</strong> of an integer <code>num</code> is defined
        as the number of <strong>substrings</strong> of <code>num</code> when it
        is read as a string that meet the following conditions:
      </p>

      <ul>
        <li>
          It has a length of <code>k</code>.
        </li>
        <li>
          It is a divisor of <code>num</code>.
        </li>
      </ul>

      <p>
        Given integers <code>num</code> and <code>k</code>, return{" "}
        <em>the k-beauty of </em>
        <code>num</code>.
      </p>

      <p>Note:</p>

      <ul>
        <li>
          <strong>Leading zeros</strong> are allowed.
        </li>
        <li>
          <code>0</code> is not a divisor of any value.
        </li>
      </ul>

      <p>
        A <strong>substring</strong> is a contiguous sequence of characters in a
        string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 240, k = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The following are the substrings of num of
        length k: <br />- "24" from "
        <strong>
          <u>24</u>
        </strong>
        0": 24 is a divisor of 240. <br />- "40" from "2
        <u>
          <strong>40</strong>
        </u>
        ": 40 is a divisor of 240. <br />
        Therefore, the k-beauty is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 430043, k = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The following are the substrings of num of
        length k: <br />- "43" from "
        <u>
          <strong>43</strong>
        </u>
        0043": 43 is a divisor of 430043. <br />- "30" from "4
        <u>
          <strong>30</strong>
        </u>
        043": 30 is not a divisor of 430043. <br />- "00" from "43
        <u>
          <strong>00</strong>
        </u>
        43": 0 is not a divisor of 430043. <br />- "04" from "430
        <u>
          <strong>04</strong>
        </u>
        3": 4 is not a divisor of 430043. <br />- "43" from "4300
        <u>
          <strong>43</strong>
        </u>
        ": 43 is a divisor of 430043. Therefore, the k-beauty is 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= num &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= num.length</code> (taking <code>num</code> as a
          string)
        </li>
      </ul>
    </div>
  ),
  2302: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>score</strong> of an array is defined as the{" "}
        <strong>product</strong> of its sum and its length.
      </p>

      <ul>
        <li>
          For example, the score of <code>[1, 2, 3, 4, 5]</code> is{" "}
          <code>(1 + 2 + 3 + 4 + 5) * 5 = 75</code>.
        </li>
      </ul>

      <p>
        Given a positive integer array <code>nums</code> and an integer{" "}
        <code>k</code>, return{" "}
        <em>
          the <strong>number of non-empty subarrays</strong> of
        </em>{" "}
        <code>nums</code>{" "}
        <em>
          whose score is <strong>strictly less</strong> than
        </em>{" "}
        <code>k</code>.
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous sequence of elements within
        an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1,4,3,5], k = 10 <br />
        <strong>Output:</strong> 6<br />
        <strong>Explanation:</strong>
        <br />
        The 6 subarrays having scores less than 10 are:
        <br />
        - [2] with score 2 * 1 = 2.
        <br />
        - [1] with score 1 * 1 = 1.
        <br />
        - [4] with score 4 * 1 = 4.
        <br />
        - [3] with score 3 * 1 = 3. <br />
        - [5] with score 5 * 1 = 5.
        <br />
        - [2,1] with score (2 + 1) * 2 = 6.
        <br />
        Note that subarrays such as [1,4] and [4,3,5] are not considered because
        their scores are 10 and 36 respectively, while we need scores strictly
        less than 10.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1], k = 5<br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation:</strong>
        <br />
        Every subarray except [1,1,1] has a score less than 5.
        <br />
        [1,1,1] has a score (1 + 1 + 1) * 3 = 9, which is greater than 5.
        <br />
        Thus, there are 5 subarrays having scores less than 5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>15</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2379: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> string <code>blocks</code> of
        length <code>n</code>, where <code>blocks[i]</code> is either{" "}
        <code>'W'</code> or <code>'B'</code>, representing the color of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        block. The characters <code>'W'</code> and <code>'B'</code> denote the
        colors white and black, respectively.
      </p>

      <p>
        You are also given an integer <code>k</code>, which is the desired
        number of <strong>consecutive</strong> black blocks.
      </p>

      <p>
        In one operation, you can <strong>recolor</strong> a white block such
        that it becomes a black block.
      </p>

      <p>
        Return
        <em>
          {" "}
          the <strong>minimum</strong> number of operations needed such that
          there is at least <strong>one</strong> occurrence of{" "}
        </em>
        <code>k</code>
        <em> consecutive black blocks.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> blocks = "WBBWWBBWBW", k = 7 <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong>
        <br />
        One way to achieve 7 consecutive black blocks is to recolor the 0th,
        3rd, and 4th blocks
        <br />
        so that blocks = "BBBBBBBWBW". <br />
        It can be shown that there is no way to achieve 7 consecutive black
        blocks in less than 3 operations.
        <br />
        Therefore, we return 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> blocks = "WBWBBBW", k = 2<br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong>
        <br />
        No changes need to be made, since 2 consecutive black blocks already
        exist.
        <br />
        Therefore, we return 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == blocks.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>blocks[i]</code> is either <code>'W'</code> or <code>'B'</code>.
        </li>
        <li>
          <code>1 &lt;= k &lt;= n</code>
        </li>
      </ul>
    </div>
  ),
  2398: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have <code>n</code> robots. You are given two{" "}
        <strong>0-indexed</strong> integer arrays, <code>chargeTimes</code> and{" "}
        <code>runningCosts</code>, both of length <code>n</code>. The{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        robot costs <code>chargeTimes[i]</code> units to charge and costs{" "}
        <code>runningCosts[i]</code> units to run. You are also given an integer{" "}
        <code>budget</code>.
      </p>

      <p>
        The <strong>total cost</strong> of running <code>k</code> chosen robots
        is equal to <code>max(chargeTimes) + k * sum(runningCosts)</code>, where{" "}
        <code>max(chargeTimes)</code> is the largest charge cost among the{" "}
        <code>k</code> robots and <code>sum(runningCosts)</code> is the sum of
        running costs among the <code>k</code> robots.
      </p>

      <p>
        Return
        <em>
          {" "}
          the <strong>maximum</strong> number of <strong>consecutive</strong>{" "}
          robots you can run such that the total cost <strong>does not</strong>{" "}
          exceed{" "}
        </em>
        <code>budget</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> chargeTimes = [3,6,1,3,4], runningCosts =
        [2,1,3,4,5], budget = 25 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> <br />
        It is possible to run all individual and consecutive pairs of robots
        within budget. <br />
        To obtain answer 3, consider the first 3 robots. The total cost will be
        max(3,6,1) + 3 * sum(2,1,3) = 6 + 3 * 6 = 24 which is less than 25.{" "}
        <br />
        It can be shown that it is not possible to run more than 3 consecutive
        robots within budget, so we return 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> chargeTimes = [11,12,19], runningCosts =
        [10,8,7], budget = 19 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> No robot can be run that does not exceed
        the budget, so we return 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>chargeTimes.length == runningCosts.length == n</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= chargeTimes[i], runningCosts[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= budget &lt;= 10<sup>15</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2401: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>nums</code> consisting of{" "}
        <strong>positive</strong> integers.
      </p>

      <p>
        We call a subarray of <code>nums</code> <strong>nice</strong> if the
        bitwise <strong>AND</strong> of every pair of elements that are in{" "}
        <strong>different</strong> positions in the subarray is equal to{" "}
        <code>0</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the length of the <strong>longest</strong> nice subarray
        </em>
        .
      </p>

      <p>
        A <strong>subarray</strong> is a <strong>contiguous</strong> part of an
        array.
      </p>

      <p>
        <strong>Note</strong> that subarrays of length <code>1</code> are always
        considered nice.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,8,48,10] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The longest nice subarray is [3,8,48].
        This subarray satisfies the conditions: <br />
        - 3 AND 8 = 0. <br />
        - 3 AND 48 = 0. <br />
        - 8 AND 48 = 0. <br />
        It can be proven that no longer nice subarray can be obtained, so we
        return 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,1,5,11,13] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The length of the longest nice subarray is
        1. Any subarray of length 1 can be chosen.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2411: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array <code>nums</code> of
        length <code>n</code>, consisting of non-negative integers. For each
        index <code>i</code> from <code>0</code> to <code>n - 1</code>, you must
        determine the size of the <strong>minimum sized</strong> non-empty
        subarray of <code>nums</code> starting at <code>i</code> (
        <strong>inclusive</strong>) that has the <strong>maximum</strong>{" "}
        possible <strong>bitwise OR</strong>.
      </p>

      <ul>
        <li>
          In other words, let{" "}
          <code>
            B<sub>ij</sub>
          </code>{" "}
          be the bitwise OR of the subarray <code>nums[i...j]</code>. You need
          to find the smallest subarray starting at <code>i</code>, such that
          bitwise OR of this subarray is equal to{" "}
          <code>
            max(B<sub>ik</sub>)
          </code>{" "}
          where <code>i &lt;= k &lt;= n - 1</code>.
        </li>
      </ul>

      <p>
        The bitwise OR of an array is the bitwise OR of all the numbers in it.
      </p>

      <p>
        Return <em>an integer array </em>
        <code>answer</code>
        <em> of size </em>
        <code>n</code>
        <em> where </em>
        <code>answer[i]</code>
        <em>
          {" "}
          is the length of the <strong>minimum</strong> sized subarray starting
          at{" "}
        </em>
        <code>i</code>
        <em>
          {" "}
          with <strong>maximum</strong> bitwise OR.
        </em>
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous non-empty sequence of
        elements within an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,0,2,1,3]
        <br />
        <strong>Output:</strong> [3,3,2,2,1]
        <br />
        <strong>Explanation:</strong>
        <br />
        The maximum possible bitwise OR starting at any index is 3. <br />
        - Starting at index 0, the shortest subarray that yields it is [1,0,2].
        <br />
        - Starting at index 1, the shortest subarray that yields the maximum
        bitwise OR is [0,2,1].
        <br />
        - Starting at index 2, the shortest subarray that yields the maximum
        bitwise OR is [2,1].
        <br />
        - Starting at index 3, the shortest subarray that yields the maximum
        bitwise OR is [1,3].
        <br />- Starting at index 4, the shortest subarray that yields the
        maximum bitwise OR is [3]. Therefore, we return [3,3,2,2,1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2] <br />
        <strong>Output:</strong> [2,1]
        <br />
        <strong>
          Explanation:
          <br />
        </strong>
        Starting at index 0, the shortest subarray that yields the maximum
        bitwise OR is of length 2.
        <br />
        Starting at index 1, the shortest subarray that yields the maximum
        bitwise OR is of length 1.
        <br />
        Therefore, we return [2,1].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2461: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and an integer{" "}
        <code>k</code>. Find the maximum subarray sum of all the subarrays of{" "}
        <code>nums</code> that meet the following conditions:
      </p>

      <ul>
        <li>
          The length of the subarray is <code>k</code>, and
        </li>
        <li>
          All the elements of the subarray are <strong>distinct</strong>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the maximum subarray sum of all the subarrays that meet the conditions
        </em>
        <em>.</em> If no subarray meets the conditions, return <code>0</code>.
      </p>

      <p>
        <em>
          A <strong>subarray</strong> is a contiguous non-empty sequence of
          elements within an array.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,5,4,2,9,9,9], k = 3<br />
        <strong>Output:</strong> 15
        <br />
        <strong>Explanation:</strong> The subarrays of nums with length 3 are:
        <br />
        - [1,5,4] which meets the requirements and has a sum of 10.
        <br />
        - [5,4,2] which meets the requirements and has a sum of 11.
        <br />
        - [4,2,9] which meets the requirements and has a sum of 15.
        <br />
        - [2,9,9] which does not meet the requirements because the element 9 is
        repeated.
        <br />
        - [9,9,9] which does not meet the requirements because the element 9 is
        repeated.
        <br />
        We return 15 because it is the maximum subarray sum of all the subarrays
        that meet the conditions
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,4,4], k = 3 <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> The subarrays of nums with length 3 are:
        <br />
        - [4,4,4] which does not meet the requirements because the element 4 is
        repeated.
        <br />
        We return 0 because no subarrays meet the conditions.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2516: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> consisting of the characters{" "}
        <code>'a'</code>, <code>'b'</code>, and <code>'c'</code> and a
        non-negative integer <code>k</code>. Each minute, you may take either
        the <strong>leftmost</strong> character of <code>s</code>, or the{" "}
        <strong>rightmost</strong> character of <code>s</code>.
      </p>

      <p>
        Return
        <em>
          {" "}
          the <strong>minimum</strong> number of minutes needed for you to take{" "}
          <strong>at least</strong>{" "}
        </em>
        <code>k</code>
        <em> of each character, or return </em>
        <code>-1</code>
        <em> if it is not possible to take </em>
        <code>k</code>
        <em> of each character.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aabaaaacaabc", k = 2 <br />
        <strong>Output:</strong> 8<br />
        <strong>Explanation:</strong> <br />
        Take three characters from the left of s. You now have two 'a'
        characters, and one 'b' character.
        <br />
        Take five characters from the right of s. You now have four 'a'
        characters, two 'b' characters, and two 'c' characters.
        <br />
        A total of 3 + 5 = 8 minutes is needed.
        <br />
        It can be proven that 8 is the minimum number of minutes needed.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "a", k = 1<br />
        <strong>Output:</strong> -1
        <br />
        <strong>Explanation:</strong> It is not possible to take one 'b' or 'c'
        so return -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of only the letters <code>'a'</code>,{" "}
          <code>'b'</code>, and <code>'c'</code>.
        </li>
        <li>
          <code>0 &lt;= k &lt;= s.length</code>
        </li>
      </ul>
    </div>
  ),
  2524: (
    <article role="main" class="blog-post">
      <p>
        You are given an integer array <code>nums</code> and a{" "}
        <strong>positive</strong> integer <code>k</code>.
      </p>

      <p>
        The <strong>frequency score</strong> of an array is the sum of the{" "}
        <strong>distinct</strong> values in the array raised to the power of
        their <strong>frequencies</strong>, taking the sum{" "}
        <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <ul>
        <li>
          For example, the frequency score of the array{" "}
          <code>[5,4,5,7,4,4]</code> is{" "}
          <code>
            (4<sup>3</sup> + 5<sup>2</sup> + 7<sup>1</sup>) modulo (10
            <sup>9</sup> + 7) = 96
          </code>
          .
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong> frequency score of a{" "}
          <strong>subarray</strong> of size{" "}
        </em>
        <code>k</code>
        <em> in </em>
        <code>nums</code>. You should maximize the value under the modulo and
        not the actual value.
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous part of an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,2,1,2], k = 3 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The subarray [2,1,2] has a frequency score
        equal to 5. It can be shown that it is the maximum frequency score we
        can have.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1,1,1], k = 4 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> All the subarrays of length 4 have a
        frequency score equal to 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </article>
  ),
  2528: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>stations</code> of length <code>n</code>, where{" "}
        <code>stations[i]</code> represents the number of power stations in the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        city.
      </p>

      <p>
        Each power station can provide power to every city in a fixed{" "}
        <strong>range</strong>. In other words, if the range is denoted by{" "}
        <code>r</code>, then a power station at city <code>i</code> can provide
        power to all cities <code>j</code> such that{" "}
        <code>|i - j| &lt;= r</code> and <code>0 &lt;= i, j &lt;= n - 1</code>.
      </p>

      <ul>
        <li>
          Note that <code>|x|</code> denotes <strong>absolute</strong> value.
          For example, <code>|7 - 5| = 2</code> and <code>|3 - 10| = 7</code>.
        </li>
      </ul>

      <p>
        The <strong>power</strong> of a city is the total number of power
        stations it is being provided power from.
      </p>

      <p>
        The government has sanctioned building <code>k</code> more power
        stations, each of which can be built in any city, and have the same
        range as the pre-existing ones.
      </p>

      <p>
        Given the two integers <code>r</code> and <code>k</code>, return{" "}
        <em>
          the <strong>maximum possible minimum power</strong> of a city, if the
          additional power stations are built optimally.
        </em>
      </p>

      <p>
        <strong>Note</strong> that you can build the <code>k</code> power
        stations in multiple cities.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stations = [1,2,4,5,0], r = 1, k = 2 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> <br />
        One of the optimal ways is to install both the power stations at city 1.{" "}
        <br />
        So stations will become [1,4,4,5,0]. <br />
        - City 0 is provided by 1 + 4 = 5 power stations. <br />
        - City 1 is provided by 1 + 4 + 4 = 9 power stations. <br />
        - City 2 is provided by 4 + 4 + 5 = 13 power stations. <br />
        - City 3 is provided by 5 + 4 = 9 power stations. <br />
        - City 4 is provided by 5 + 0 = 5 power stations. <br />
        So the minimum power of a city is 5. <br />
        Since it is not possible to obtain a larger power, we return 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stations = [4,4,4,4], r = 0, k = 3 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> <br />
        It can be proved that we cannot make the minimum power of a city greater
        than 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == stations.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= stations[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= r&nbsp;&lt;= n - 1</code>
        </li>
        <li>
          <code>
            0 &lt;= k&nbsp;&lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2537: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and an integer <code>k</code>,
        return{" "}
        <em>
          the number of <strong>good</strong> subarrays of
        </em>{" "}
        <code>nums</code>.
      </p>

      <p>
        A subarray <code>arr</code> is <strong>good</strong> if it there are{" "}
        <strong>at least </strong>
        <code>k</code> pairs of indices <code>(i, j)</code> such that{" "}
        <code>i &lt; j</code> and <code>arr[i] == arr[j]</code>.
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous <strong>non-empty</strong>{" "}
        sequence of elements within an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1,1], k = 10 <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> The only good subarray is the array nums
        itself.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,1,4,3,2,2,4], k = 2<br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> There are 4 different good subarrays:
        <br />
        - [3,1,4,3,2,2] that has 2 pairs.
        <br />
        - [3,1,4,3,2,2,4] that has 3 pairs.
        <br />
        - [1,4,3,2,2,4] that has 2 pairs.
        <br />- [4,3,2,2,4] that has 2 pairs.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i], k &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2555: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are some prizes on the <strong>X-axis</strong>. You are given an
        integer array <code>prizePositions</code> that is{" "}
        <strong>sorted in non-decreasing order</strong>, where{" "}
        <code>prizePositions[i]</code> is the position of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        prize. There could be different prizes at the same position on the line.
        You are also given an integer <code>k</code>.
      </p>

      <p>
        You are allowed to select two segments with integer endpoints. The
        length of each segment must be <code>k</code>. You will collect all
        prizes whose position falls within at least one of the two selected
        segments (including the endpoints of the segments). The two selected
        segments may intersect.
      </p>

      <ul>
        <li>
          For example if <code>k = 2</code>, you can choose segments{" "}
          <code>[1, 3]</code> and <code>[2, 4]</code>, and you will win any
          prize <font face="monospace">i</font> that satisfies{" "}
          <code>1 &lt;= prizePositions[i] &lt;= 3</code> or{" "}
          <code>2 &lt;= prizePositions[i] &lt;= 4</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong> number of prizes you can win if you
          choose the two segments optimally
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prizePositions = [1,1,2,2,3,3,5], k = 2 <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> In this example, you can win all 7 prizes
        by selecting two segments [1, 3] and [3, 5].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prizePositions = [1,2,3,4], k = 0 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> For this example,{" "}
        <strong>one choice</strong> for the segments is <code>[3, 3]</code> and{" "}
        <code>[4, 4],</code> and you will be able to get <code>2</code> prizes.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= prizePositions.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= prizePositions[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 10<sup>9</sup>{" "}
          </code>
        </li>
        <li>
          <code>prizePositions</code> is sorted in non-decreasing order.
        </li>
      </ul>
    </div>
  ),
  2653: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> containing <code>n</code>{" "}
        integers, find the <strong>beauty</strong> of each subarray of size{" "}
        <code>k</code>.
      </p>

      <p>
        The <strong>beauty</strong> of a subarray is the{" "}
        <code>
          x<sup>th</sup>
        </code>
        <strong> smallest integer </strong>in the subarray if it is{" "}
        <strong>negative</strong>, or <code>0</code> if there are fewer than{" "}
        <code>x</code> negative integers.
      </p>

      <p>
        Return <em>an integer array containing </em>
        <code>n - k + 1</code> <em>integers, which denote the </em>
        <strong>beauty</strong>
        <em>
          {" "}
          of the subarrays <strong>in order</strong> from the first index in the
          array.
        </em>
      </p>

      <ul>
        <li>
          <p>
            A subarray is a contiguous <strong>non-empty</strong> sequence of
            elements within an array.
          </p>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,-1,-3,-2,3], k = 3, x = 2 <br />
        <strong>Output:</strong> [-1,-2,-2]
        <br />
        <strong>Explanation:</strong> There are 3 subarrays with size k = 3.{" "}
        <br />
        The first subarray is <code>[1, -1, -3]</code> and the 2<sup>nd</sup>{" "}
        smallest negative integer is -1.&nbsp;
        <br />
        The second subarray is <code>[-1, -3, -2]</code> and the 2<sup>nd</sup>{" "}
        smallest negative integer is -2.&nbsp;
        <br />
        The third subarray is <code>[-3, -2, 3]&nbsp;</code>and the 2
        <sup>nd</sup> smallest negative integer is -2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-1,-2,-3,-4,-5], k = 2, x = 2<br />
        <strong>Output:</strong> [-1,-2,-3,-4]
        <br />
        <strong>Explanation:</strong> There are 4 subarrays with size k = 2.
        <br />
        For <code>[-1, -2]</code>, the 2<sup>nd</sup> smallest negative integer
        is -1.
        <br />
        For <code>[-2, -3]</code>, the 2<sup>nd</sup> smallest negative integer
        is -2.
        <br />
        For <code>[-3, -4]</code>, the 2<sup>nd</sup> smallest negative integer
        is -3.
        <br />
        For <code>[-4, -5]</code>, the 2<sup>nd</sup> smallest negative integer
        is -4.&nbsp;
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-3,1,2,-3,0,-3], k = 2, x = 1<br />
        <strong>Output:</strong> [-3,0,-3,-3,-3]
        <br />
        <strong>Explanation:</strong> There are 5 subarrays with size k = 2
        <strong>.</strong>
        <br />
        For <code>[-3, 1]</code>, the 1<sup>st</sup> smallest negative integer
        is -3.
        <br />
        For <code>[1, 2]</code>, there is no negative integer so the beauty is
        0.
        <br />
        For <code>[2, -3]</code>, the 1<sup>st</sup> smallest negative integer
        is -3.
        <br />
        For <code>[-3, 0]</code>, the 1<sup>st</sup> smallest negative integer
        is -3.
        <br />
        For <code>[0, -3]</code>, the 1<sup>st</sup> smallest negative integer
        is -3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length&nbsp;</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= n</code>
        </li>
        <li>
          <code>1 &lt;= x &lt;= k&nbsp;</code>
        </li>
        <li>
          <code>-50&nbsp;&lt;= nums[i] &lt;= 50&nbsp;</code>
        </li>
      </ul>
    </div>
  ),
  2730: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a digit string <code>s</code> that consists of digits from
        0 to 9.
      </p>

      <p>
        A string is called <strong>semi-repetitive</strong> if there is{" "}
        <strong>at most</strong> one adjacent pair of the same digit. For
        example, <code>"0010"</code>, <code>"002020"</code>, <code>"0123"</code>
        , <code>"2002"</code>, and <code>"54944"</code> are semi-repetitive
        while the following are not: <code>"00101022"</code> (adjacent same
        digit pairs are 00 and 22), and <code>"1101234883"</code> (adjacent same
        digit pairs are 11 and 88).
      </p>

      <p>
        Return the length of the{" "}
        <strong>
          longest semi-repetitive{" "}
          <span
            data-keyword="substring-nonempty"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:rt:"
                >
                  <div>substring</div>
                </div>
              </div>
            </div>
          </span>
        </strong>{" "}
        of <code>s</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "52233"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">4</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          The longest semi-repetitive substring is "5223". Picking the whole
          string "52233" has two adjacent same digit pairs 22 and 33, but at
          most one is allowed.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "5494"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">4</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          <code>s</code> is a semi-repetitive string.
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "1111111"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          The longest semi-repetitive substring is "11". Picking the substring
          "111" has two adjacent same digit pairs, but at most one is allowed.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 50</code>
        </li>
        <li>
          <code>'0' &lt;= s[i] &lt;= '9'</code>
        </li>
      </ul>
    </div>
  ),
  2743: (
    <article role="main" class="blog-post">
      <p>
        You are given a string <code>s</code> consisting only of lowercase
        English letters. We call a substring <b>special</b> if it contains no
        character which has occurred at least twice (in other words, it does not
        contain a repeating character). Your task is to count the number of{" "}
        <b>special</b> substrings. For example, in the string <code>"pop"</code>
        , the substring <code>"po"</code> is a <strong>special</strong>{" "}
        substring, however, <code>"pop"</code> is not <strong>special</strong>{" "}
        (since <code>'p'</code> has occurred twice).
      </p>

      <p>
        Return{" "}
        <em>
          the number of <b>special</b> substrings.
        </em>
      </p>

      <p>
        A <strong>substring</strong> is a contiguous sequence of characters
        within a string. For example, <code>"abc"</code> is a substring of{" "}
        <code>"abcd"</code>, but <code>"acd"</code> is not.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcd"
        <br />
        <strong>Output:</strong> 10
        <br />
        <strong>Explanation:</strong> Since each character occurs once, every
        substring is a special substring. We have 4 substrings of length one, 3
        of length two, 2 of length three, and 1 substring of length four. So
        overall there are 4 + 3 + 2 + 1 = 10 special substrings.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "ooo" <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> Any substring with a length of at least
        two contains a repeating character. So we have to count the number of
        substrings of length one, which is 3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abab"
        <br />
        <strong>Output:</strong> 7<br />
        <strong>Explanation:</strong> Special substrings are as follows (sorted
        by their start positions):
        <br />
        Special substrings of length 1: "a", "b", "a", "b"
        <br />
        Special substrings of length 2: "ab", "ba", "ab"
        <br />
        And it can be shown that there are no special substrings with a length
        of at least three. So the answer would be 4 + 3 = 7.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters
        </li>
      </ul>
    </article>
  ),
  2747: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code> denoting the total number of
        servers and a <strong>2D</strong> <strong>0-indexed </strong>integer
        array <code>logs</code>, where <code>logs[i] = [server_id, time]</code>{" "}
        denotes that the server with id <code>server_id</code> received a
        request at time <code>time</code>.
      </p>

      <p>
        You are also given an integer <code>x</code> and a{" "}
        <strong>0-indexed</strong> integer array <code>queries</code>.
      </p>

      <p>
        Return{" "}
        <em>
          a <strong>0-indexed</strong> integer array
        </em>{" "}
        <code>arr</code> <em>of length</em> <code>queries.length</code>{" "}
        <em>where</em> <code>arr[i]</code>{" "}
        <em>
          represents the number of servers that <strong>did not receive</strong>{" "}
          any requests during the time interval
        </em>{" "}
        <code>[queries[i] - x, queries[i]]</code>.
      </p>

      <p>Note that the time intervals are inclusive.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, logs = [[1,3],[2,6],[1,5]], x = 5,
        queries = [10,11] <br />
        <strong>Output:</strong> [1,2] <br />
        <strong>Explanation:</strong> <br />
        For queries[0]: The servers with ids 1 and 2 get requests in the
        duration of [5, 10]. Hence, only server 3 gets zero requests. <br />
        For queries[1]: Only the server with id 2 gets a request in duration of
        [6,11]. Hence, the servers with ids 1 and 3 are the only servers that do
        not receive any requests during that time period.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, logs = [[2,4],[2,1],[1,2],[3,1]], x = 2,
        queries = [3,4] <br />
        <strong>Output:</strong> [0,1] <br />
        <strong>Explanation:</strong> <br />
        For queries[0]: All servers get at least one request in the duration of
        [1, 3]. <br />
        For queries[1]: Only server with id 3 gets no request in the duration
        [2,4].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= logs.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= queries.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            <font face="monospace">logs[i].length == 2</font>
          </code>
        </li>
        <li>
          <code>1 &lt;= logs[i][0] &lt;= n</code>
        </li>
        <li>
          <code>
            1 &lt;= logs[i][1] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= x &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            x &lt;&nbsp;queries[i]&nbsp;&lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2760: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> and an integer <code>threshold</code>.
      </p>

      <p>
        Find the length of the <strong>longest subarray</strong> of{" "}
        <code>nums</code> starting at index <code>l</code> and ending at index{" "}
        <code>r</code> <code>(0 &lt;= l &lt;= r &lt; nums.length)</code> that
        satisfies the following conditions:
      </p>

      <ul>
        <li>
          <code>nums[l] % 2 == 0</code>
        </li>
        <li>
          For all indices <code>i</code> in the range <code>[l, r - 1]</code>,{" "}
          <code>nums[i] % 2 != nums[i + 1] % 2</code>
        </li>
        <li>
          For all indices <code>i</code> in the range <code>[l, r]</code>,{" "}
          <code>nums[i] &lt;= threshold</code>
        </li>
      </ul>

      <p>
        Return{" "}
        <em>an integer denoting the length of the longest such subarray.</em>
      </p>

      <p>
        <strong>Note:</strong> A <strong>subarray</strong> is a contiguous
        non-empty sequence of elements within an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,2,5,4], threshold = 5 <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> In this example, we can select the
        subarray that starts at l = 1 and ends at r = 3 =&gt; [2,5,4]. This
        subarray satisfies the conditions.
        <br />
        Hence, the answer is the length of the subarray, 3. We can show that 3
        is the maximum possible achievable length.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2], threshold = 2<br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> In this example, we can select the
        subarray that starts at l = 1 and ends at r = 1 =&gt; [2]. <br />
        It satisfies all the conditions and we can show that 1 is the maximum
        possible achievable length.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,4,5], threshold = 4<br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> In this example, we can select the
        subarray that starts at l = 0 and ends at r = 2 =&gt; [2,3,4]. <br />
        It satisfies all the conditions.
        <br />
        Hence, the answer is the length of the subarray, 3. We can show that 3
        is the maximum possible achievable length.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100 </code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100 </code>
        </li>
        <li>
          <code>1 &lt;= threshold &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  2779: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array <code>nums</code> and a{" "}
        <strong>non-negative</strong> integer <code>k</code>.
      </p>

      <p>In one operation, you can do the following:</p>

      <ul>
        <li>
          Choose an index <code>i</code> that{" "}
          <strong>hasn't been chosen before</strong> from the range{" "}
          <code>[0, nums.length - 1]</code>.
        </li>
        <li>
          Replace <code>nums[i]</code> with any integer from the range{" "}
          <code>[nums[i] - k, nums[i] + k]</code>.
        </li>
      </ul>

      <p>
        The <strong>beauty</strong> of the array is the length of the longest
        subsequence consisting of equal elements.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong> possible beauty of the array{" "}
        </em>
        <code>nums</code>
        <em> after applying the operation any number of times.</em>
      </p>

      <p>
        <strong>Note</strong> that you can apply the operation to each index{" "}
        <strong>only once</strong>.
      </p>

      <p>
        A&nbsp;<strong>subsequence</strong> of an array is a new array generated
        from the original array by deleting some elements (possibly none)
        without changing the order of the remaining elements.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,6,1,2], k = 2 <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> In this example, we apply the following
        operations:
        <br />
        - Choose index 1, replace it with 4 (from range [4,8]), nums =
        [4,4,1,2].
        <br />
        - Choose index 3, replace it with 4 (from range [0,4]), nums =
        [4,4,1,4].
        <br />
        After the applied operations, the beauty of the array nums is 3
        (subsequence consisting of indices 0, 1, and 3).
        <br />
        It can be proven that 3 is the maximum possible length we can achieve.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1], k = 10
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> In this example we don't have to apply any
        operations.
        <br />
        The beauty of the array nums is 4 (whole array).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i], k &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2781: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>word</code> and an array of strings{" "}
        <code>forbidden</code>.
      </p>

      <p>
        A string is called <strong>valid</strong> if none of its substrings are
        present in <code>forbidden</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the length of the <strong>longest valid substring</strong> of the
          string{" "}
        </em>
        <code>word</code>.
      </p>

      <p>
        A <strong>substring</strong> is a contiguous sequence of characters in a
        string, possibly empty.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "cbaaaabc", forbidden = ["aaa","cb"]{" "}
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> There are 11 valid substrings in word:
        "c", "b", "a", "ba", "aa", "bc", "baa", "aab", "ab", "abc" and "aabc".
        The length of the longest valid substring is 4. <br />
        It can be shown that all other substrings contain either "aaa" or "cb"
        as a substring.{" "}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "leetcode", forbidden = ["de","le","e"]
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> There are 11 valid substrings in word:
        "l", "t", "c", "o", "d", "tc", "co", "od", "tco", "cod", and "tcod". The
        length of the longest valid substring is 4.
        <br />
        It can be shown that all other substrings contain either "de", "le", or
        "e" as a substring.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= word.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>word</code> consists only of lowercase English letters.
        </li>
        <li>
          <code>
            1 &lt;= forbidden.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= forbidden[i].length &lt;= 10</code>
        </li>
        <li>
          <code>forbidden[i]</code> consists only of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  2799: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>nums</code> consisting of{" "}
        <strong>positive</strong> integers.
      </p>

      <p>
        We call a subarray of an array <strong>complete</strong> if the
        following condition is satisfied:
      </p>

      <ul>
        <li>
          The number of <strong>distinct</strong> elements in the subarray is
          equal to the number of distinct elements in the whole array.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the number of <strong>complete</strong> subarrays
        </em>
        .
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous non-empty part of an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,1,2,2]
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> The complete subarrays are the following:
        [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,5,5,5] <br />
        <strong>Output:</strong> 10
        <br />
        <strong>Explanation:</strong> The array consists only of the integer 5,
        so any subarray is complete. The number of subarrays that we can choose
        is 10.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 2000</code>
        </li>
      </ul>
    </div>
  ),
  2831: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> and an integer <code>k</code>.
      </p>

      <p>
        A subarray is called <strong>equal</strong> if all of its elements are
        equal. Note that the empty subarray is an <strong>equal</strong>{" "}
        subarray.
      </p>

      <p>
        Return{" "}
        <em>
          the length of the <strong>longest</strong> possible equal subarray
          after deleting <strong>at most</strong>{" "}
        </em>
        <code>k</code>
        <em> elements from </em>
        <code>nums</code>.
      </p>

      <p>
        A <b>subarray</b> is a contiguous, possibly empty sequence of elements
        within an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,2,3,1,3], k = 3<br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> It's optimal to delete the elements at
        index 2 and index 4.
        <br />
        After deleting them, nums becomes equal to [1, 3, 3, 3].
        <br />
        The longest equal subarray starts at i = 1 and ends at j = 3 with length
        equal to 3.
        <br />
        It can be proven that no longer equal subarrays can be created.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,2,1,1], k = 2<br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> It's optimal to delete the elements at
        index 2 and index 3.
        <br />
        After deleting them, nums becomes equal to [1, 1, 1, 1].
        <br />
        The array itself is an equal subarray, so the answer is 4.
        <br />
        It can be proven that no longer equal subarrays can be created.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= nums.length</code>
        </li>
        <li>
          <code>0 &lt;= k &lt;= nums.length</code>
        </li>
      </ul>
    </div>
  ),
  2841: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and two positive
        integers <code>m</code> and <code>k</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum sum</strong> out of all{" "}
          <strong>almost unique</strong> subarrays of length{" "}
        </em>
        <code>k</code>
        <em> of</em> <code>nums</code>. If no such subarray exists, return{" "}
        <code>0</code>.
      </p>

      <p>
        A subarray of <code>nums</code> is <strong>almost unique</strong> if it
        contains at least <code>m</code> distinct elements.
      </p>

      <p>
        A subarray is a contiguous <strong>non-empty</strong> sequence of
        elements within an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,6,7,3,1,7], m = 3, k = 4 <br />
        <strong>Output:</strong> 18
        <br />
        <strong>Explanation:</strong> There are 3 almost unique subarrays of
        size <code>k = 4</code>. These subarrays are [2, 6, 7, 3], [6, 7, 3, 1],
        and [7, 3, 1, 7]. Among these subarrays, the one with the maximum sum is
        [2, 6, 7, 3] which has a sum of 18.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,9,9,2,4,5,4], m = 1, k = 3<br />
        <strong>Output:</strong> 23
        <br />
        <strong>Explanation:</strong> There are 5 almost unique subarrays of
        size k. These subarrays are [5, 9, 9], [9, 9, 2], [9, 2, 4], [2, 4, 5],
        and [4, 5, 4]. Among these subarrays, the one with the maximum sum is
        [5, 9, 9] which has a sum of 23.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,1,2,1,2,1], m = 3, k = 3<br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> There are no subarrays of size{" "}
        <code>k = 3</code> that contain at least <code>m = 3</code> distinct
        elements in the given array [1,2,1,2,1,2,1]. Therefore, no almost unique
        subarrays exist, and the maximum sum is 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= m &lt;= k &lt;= nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2875: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array <code>nums</code> and
        an integer <code>target</code>.
      </p>

      <p>
        A <strong>0-indexed</strong> array <code>infinite_nums</code> is
        generated by infinitely appending the elements of <code>nums</code> to
        itself.
      </p>

      <p>
        Return{" "}
        <em>
          the length of the <strong>shortest</strong> subarray of the array{" "}
        </em>
        <code>infinite_nums</code>
        <em> with a sum equal to </em>
        <code>target</code>
        <em>.</em> If there is no such subarray return <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3], target = 5 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> In this example infinite_nums =
        [1,2,3,1,2,3,1,2,...]. <br />
        The subarray in the range [1,2], has the sum equal to target = 5 and
        length = 2. <br />
        It can be proven that 2 is the shortest length of a subarray with sum
        equal to target = 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,2,3], target = 4 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> In this example infinite_nums =
        [1,1,1,2,3,1,1,1,2,3,1,1,...]. <br />
        The subarray in the range [4,5], has the sum equal to target = 4 and
        length = 2. <br />
        It can be proven that 2 is the shortest length of a subarray with sum
        equal to target = 4.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,4,6,8], target = 3 <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> In this example infinite_nums =
        [2,4,6,8,2,4,6,8,...]. <br />
        It can be proven that there is no subarray with sum equal to target = 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= target &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2902: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array <code>nums</code> of
        non-negative integers, and two integers <code>l</code> and{" "}
        <code>r</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>count of sub-multisets</strong> within
        </em>{" "}
        <code>nums</code>{" "}
        <em>
          where the sum of elements in each subset falls within the inclusive
          range of
        </em>{" "}
        <code>[l, r]</code>.
      </p>

      <p>
        Since the answer may be large, return it modulo{" "}
        <code>
          10<sup>9 </sup>+ 7
        </code>
        .
      </p>

      <p>
        A <strong>sub-multiset</strong> is an <strong>unordered</strong>{" "}
        collection of elements of the array in which a given value{" "}
        <code>x</code> can occur <code>0, 1, ..., occ[x]</code> times, where{" "}
        <code>occ[x]</code> is the number of occurrences of <code>x</code> in
        the array.
      </p>

      <p>
        <strong>Note</strong> that:
      </p>

      <ul>
        <li>
          Two <strong>sub-multisets</strong> are the same if sorting both
          sub-multisets results in identical multisets.
        </li>
        <li>
          The sum of an <strong>empty</strong> multiset is <code>0</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,2,3], l = 6, r = 6 <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> The only subset of nums that has a sum of
        6 is {(1, 2, 3)}.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1,4,2,7], l = 1, r = 5<br />
        <strong>Output:</strong> 7<br />
        <strong>Explanation:</strong> The subsets of nums that have a sum within
        the range [1, 5] are {1}, {2}, {4}, {(2, 2)}, {(1, 2)}, {(1, 4)}, and{" "}
        {(1, 2, 2)}.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,1,3,5,2], l = 3, r = 5<br />
        <strong>Output:</strong> 9<br />
        <strong>Explanation:</strong> The subsets of nums that have a sum within
        the range [3, 5] are {3}, {5}, {(1, 2)}, {(1, 3)}, {(2, 2)}, {(2, 3)},{" "}
        {(1, 1, 2)}, {(1, 1, 3)}, and {(1, 2, 2)}.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          Sum of <code>nums</code> does not exceed{" "}
          <code>
            2 * 10<sup>4</sup>
          </code>
          .
        </li>
        <li>
          <code>
            0 &lt;= l &lt;= r &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3023: (
    <article role="main" class="blog-post">
      <p>
        You are given a binary array <code>pattern</code> and an object{" "}
        <code>stream</code> of class <code>InfiniteStream</code> representing a{" "}
        <strong>0-indexed</strong> infinite stream of bits.
      </p>

      <p>
        The class <code>InfiniteStream</code> contains the following function:
      </p>

      <ul>
        <li>
          <code>int next()</code>: Reads a <strong>single</strong> bit (which is
          either <code>0</code> or <code>1</code>) from the stream and returns
          it.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>first starting</strong> index where the pattern matches
          the bits read from the stream
        </em>
        . For example, if the pattern is <code>[1, 0]</code>, the first match is
        the highlighted part in the stream{" "}
        <code>
          [0,{" "}
          <strong>
            <u>1, 0</u>
          </strong>
          , 1, ...]
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stream = [1,1,1,0,1,1,1,...], pattern = [0,1]{" "}
        <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The first occurrence of the pattern [0,1]
        is highlighted in the stream [1,1,1,
        <strong>
          <u>0,1</u>
        </strong>
        ,...], which starts at index 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stream = [0,0,0,0,...], pattern = [0] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The first occurrence of the pattern [0] is
        highlighted in the stream [
        <strong>
          <u>0</u>
        </strong>
        ,...], which starts at index 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stream = [1,0,1,1,0,1,1,0,1,...], pattern =
        [1,1,0,1] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The first occurrence of the pattern
        [1,1,0,1] is highlighted in the stream [1,0,
        <strong>
          <u>1,1,0,1</u>
        </strong>
        ,...], which starts at index 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= pattern.length &lt;= 100</code>
        </li>
        <li>
          <code>pattern</code> consists only of <code>0</code> and{" "}
          <code>1</code>.
        </li>
        <li>
          <code>stream</code> consists only of <code>0</code> and <code>1</code>
          .
        </li>
        <li>
          The input is generated such that the pattern's start index exists in
          the first{" "}
          <code>
            10<sup>5</sup>
          </code>{" "}
          bits of the stream.
        </li>
      </ul>
    </article>
  ),
  3037: (
    <article role="main" class="blog-post">
      <p>
        You are given a binary array <code>pattern</code> and an object{" "}
        <code>stream</code> of class <code>InfiniteStream</code> representing a{" "}
        <strong>0-indexed</strong> infinite stream of bits.
      </p>

      <p>
        The class <code>InfiniteStream</code> contains the following function:
      </p>

      <ul>
        <li>
          <code>int next()</code>: Reads a <strong>single</strong> bit (which is
          either <code>0</code> or <code>1</code>) from the stream and returns
          it.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>first starting</strong> index where the pattern matches
          the bits read from the stream
        </em>
        . For example, if the pattern is <code>[1, 0]</code>, the first match is
        the highlighted part in the stream{" "}
        <code>
          [0,{" "}
          <strong>
            <u>1, 0</u>
          </strong>
          , 1, ...]
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stream = [1,1,1,0,1,1,1,...], pattern = [0,1]{" "}
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The first occurrence of the pattern [0,1]
        is highlighted in the stream [1,1,1,
        <strong>
          <u>0,1</u>
        </strong>
        ,...], which starts at index 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stream = [0,0,0,0,...], pattern = [0]
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> The first occurrence of the pattern [0] is
        highlighted in the stream [
        <strong>
          <u>0</u>
        </strong>
        ,...], which starts at index 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stream = [1,0,1,1,0,1,1,0,1,...], pattern =
        [1,1,0,1]
        <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> The first occurrence of the pattern
        [1,1,0,1] is highlighted in the stream [1,0,
        <strong>
          <u>1,1,0,1</u>
        </strong>
        ,...], which starts at index 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= pattern.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>pattern</code> consists only of <code>0</code> and{" "}
          <code>1</code>.
        </li>
        <li>
          <code>stream</code> consists only of <code>0</code> and <code>1</code>
          .
        </li>
        <li>
          The input is generated such that the pattern's start index exists in
          the first{" "}
          <code>
            10<sup>5</sup>
          </code>{" "}
          bits of the stream.
        </li>
      </ul>
    </article>
  ),
  3135: (
    <article role="main" class="blog-post">
      <p>
        Given two strings <code>initial</code> and <code>target</code>, your
        task is to modify <code>initial</code> by performing a series of
        operations to make it equal to <code>target</code>.
      </p>

      <p>
        In one operation, you can add or remove <strong>one character</strong>{" "}
        only at the <em>beginning</em> or the <em>end</em> of the string{" "}
        <code>initial</code>.
      </p>
      <div
        class="google-auto-placed ap_container"
        style={{
          width: "100%",
          height: "auto",
          clear: "both",
          textAlign: "center",
        }}
      >
        <ins
          data-ad-format="auto"
          class="adsbygoogle adsbygoogle-noablate"
          data-ad-client="ca-pub-6766885420008650"
          data-adsbygoogle-status="done"
          style={{
            display: "block",
            margin: "auto",
            backgroundColor: "transparent",
            height: "0px",
          }}
          data-ad-status="unfilled"
        >
          <div
            id="aswift_1_host"
            style={{
              border: "none",
              height: "0px",
              width: "730px",
              margin: "0px",
              padding: "0px",
              position: "relative",
              visibility: "visible",
              backgroundColor: "transparent",
              display: "inline-block",
              overflow: "hidden",
              opacity: "0",
            }}
          >
            <iframe
              id="aswift_1"
              name="aswift_1"
              browsingtopics="true"
              style={{
                left: "0px",
                position: "absolute",
                top: "0px",
                border: "0px",
                width: "730px",
                height: "0px",
              }}
              sandbox="allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation"
              width="730"
              height="0"
              frameborder="0"
              marginwidth="0"
              marginheight="0"
              vspace="0"
              hspace="0"
              allowtransparency="true"
              scrolling="no"
              allow="attribution-reporting; run-ad-auction"
              src="https://googleads.g.doubleclick.net/pagead/ads?gdpr=0&amp;client=ca-pub-6766885420008650&amp;output=html&amp;h=280&amp;adk=3766017644&amp;adf=2799003785&amp;pi=t.aa~a.3123491585~i.18~rp.4&amp;w=730&amp;abgtt=3&amp;fwrn=4&amp;fwrnh=100&amp;lmt=1719504794&amp;num_ads=1&amp;rafmt=1&amp;armr=3&amp;sem=mc&amp;pwprc=2295191326&amp;ad_type=text_image&amp;format=730x280&amp;url=https%3A%2F%2Fleetcode.ca%2F2024-05-20-3135-Equalize-Strings-by-Adding-or-Removing-Characters-at-Ends%2F&amp;fwr=0&amp;pra=3&amp;rh=183&amp;rw=730&amp;rpe=1&amp;resp_fmts=3&amp;wgl=1&amp;fa=27&amp;uach=WyJtYWNPUyIsIjEyLjIuMCIsImFybSIsIiIsIjEyNi4wLjY0NzguMTE2IixudWxsLDAsbnVsbCwiNjQiLFtbIk5vdC9BKUJyYW5kIiwiOC4wLjAuMCJdLFsiQ2hyb21pdW0iLCIxMjYuMC42NDc4LjExNiJdLFsiR29vZ2xlIENocm9tZSIsIjEyNi4wLjY0NzguMTE2Il1dLDBd&amp;dt=1719562796147&amp;bpp=3&amp;bdt=446&amp;idt=3&amp;shv=r20240625&amp;mjsv=m202406250101&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;cookie=ID%3D09d2a9b544f17345%3AT%3D1717604490%3ART%3D1719562728%3AS%3DALNI_MaWLjkPukvjTU79nDXQOU50jGM72A&amp;gpic=UID%3D00000e41e1a25d50%3AT%3D1717604490%3ART%3D1719562728%3AS%3DALNI_MYwcxS6KhZpxQL2WMYDFOxY1wxEkg&amp;eo_id_str=ID%3Dfa6b3c6d7ed523fd%3AT%3D1717604490%3ART%3D1719562728%3AS%3DAA-AfjYfRq-RLFAgRd1nyoJHXp6S&amp;prev_fmts=0x0&amp;nras=2&amp;correlator=8185043645010&amp;frm=20&amp;pv=1&amp;ga_vid=522084150.1717604490&amp;ga_sid=1719562796&amp;ga_hid=1664627876&amp;ga_fc=1&amp;u_tz=330&amp;u_his=7&amp;u_h=900&amp;u_w=1440&amp;u_ah=822&amp;u_aw=1440&amp;u_cd=30&amp;u_sd=2&amp;dmc=8&amp;adx=355&amp;ady=788&amp;biw=1440&amp;bih=550&amp;scr_x=0&amp;scr_y=0&amp;eid=44759876%2C44759927%2C44759842%2C95330000%2C95334509%2C95334526%2C95334572%2C95335896%2C95335247%2C95335290%2C31078663%2C31078665%2C31078668%2C31078670&amp;oid=2&amp;pvsid=1655004951637640&amp;tmod=814666498&amp;uas=0&amp;nvt=1&amp;ref=https%3A%2F%2Fleetcode.ca%2Fsearch%2F&amp;fc=1408&amp;brdim=0%2C25%2C0%2C25%2C1440%2C25%2C1440%2C821%2C1440%2C550&amp;vis=1&amp;rsz=%7C%7Cs%7C&amp;abl=NS&amp;fu=128&amp;bc=31&amp;bz=1&amp;td=1&amp;tdf=2&amp;psd=W251bGwsbnVsbCxudWxsLDNd&amp;nt=1&amp;ifi=2&amp;uci=a!2&amp;btvi=1&amp;fsb=1&amp;dtd=249"
              data-google-container-id="a!2"
              tabindex="0"
              title="Advertisement"
              aria-label="Advertisement"
              data-google-query-id="CI7Lpc3u_YYDFW9NnQkdlw4Psg"
              data-load-complete="true"
            ></iframe>
          </div>
        </ins>
      </div>

      <p>
        Return the <strong>minimum</strong> number of operations required to{" "}
        <em>transform</em> <code>initial</code> into <code>target</code>.
      </p>

      <br />

      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">initial = "abcde", target = "cdef"</span>
        <br />
        <strong>Output:</strong> 3
        <br />
        <strong>Explanation:</strong>
        <br />
        <p>
          Remove <code>'a'</code> and <code>'b'</code> from the beginning of{" "}
          <code>initial</code>, then add <code>'f'</code> to the end.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">initial = "axxy", target = "yabx"</span>
        <br />
        <strong>Output:</strong> 6
        <br />
        <strong>Explanation:</strong> <br />
        <table border="1">
          <tbody>
            <tr>
              <th style={{ textAlign: "start" }}>Operation</th>
              <th style={{ textAlign: "start" }}>Resulting String</th>
            </tr>
            <tr>
              <td>
                Add <code>'y'</code> to the beginning
              </td>
              <td>
                <code>"yaxxy"</code>
              </td>
            </tr>
            <tr>
              <td>Remove from end</td>
              <td>
                <code>"yaxx"</code>
              </td>
            </tr>
            <tr>
              <td>Remove from end</td>
              <td>
                <code>"yax"</code>
              </td>
            </tr>
            <tr>
              <td>Remove from end</td>
              <td>
                <code>"ya"</code>
              </td>
            </tr>
            <tr>
              <td>
                Add <code>'b'</code> to the end
              </td>
              <td>
                <code>"yab"</code>
              </td>
            </tr>
            <tr>
              <td>
                Add <code>'x'</code> to the end
              </td>
              <td>
                <code>"yabx"</code>
              </td>
            </tr>
          </tbody>
        </table>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">initial = "xyz", target = "xyz"</span>
        <br />
        <strong>Output:</strong> <span class="example-io">0</span>
        <br />
        <strong>Explanation:</strong> <br />
        No operations are needed as the strings are already equal.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= initial.length, target.length &lt;= 1000</code>
        </li>
        <li>
          <code>initial</code> and <code>target</code> consist only of lowercase
          English letters.
        </li>
      </ul>
    </article>
  ),
  2904: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a binary string <code>s</code> and a positive integer{" "}
        <code>k</code>.
      </p>

      <p>
        A substring of <code>s</code> is <strong>beautiful</strong> if the
        number of <code>1</code>'s in it is exactly <code>k</code>.
      </p>

      <p>
        Let <code>len</code> be the length of the <strong>shortest</strong>{" "}
        beautiful substring.
      </p>

      <p>
        Return{" "}
        <em>
          the lexicographically <strong>smallest</strong> beautiful substring of
          string{" "}
        </em>
        <code>s</code>
        <em> with length equal to </em>
        <code>len</code>. If <code>s</code> doesn't contain a beautiful
        substring, return{" "}
        <em>
          an <strong>empty</strong> string
        </em>
        .
      </p>

      <p>
        A string <code>a</code> is lexicographically <strong>larger</strong>{" "}
        than a string <code>b</code> (of the same length) if in the first
        position where <code>a</code> and <code>b</code> differ, <code>a</code>{" "}
        has a character strictly larger than the corresponding character in{" "}
        <code>b</code>.
      </p>

      <ul>
        <li>
          For example, <code>"abcd"</code> is lexicographically larger than{" "}
          <code>"abcc"</code> because the first position they differ is at the
          fourth character, and <code>d</code> is greater than <code>c</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "100011001", k = 3<br />
        <strong>Output:</strong> "11001"
        <br />
        <strong>Explanation:</strong> There are 7 beautiful substrings in this
        example:
        <br />
        1. The substring "<u>100011</u>001".
        <br />
        2. The substring "<u>1000110</u>01".
        <br />
        3. The substring "<u>10001100</u>1".
        <br />
        4. The substring "1<u>00011001</u>".
        <br />
        5. The substring "10<u>0011001</u>".
        <br />
        6. The substring "100<u>011001</u>".
        <br />
        7. The substring "1000<u>11001</u>".
        <br />
        The length of the shortest beautiful substring is 5.
        <br />
        The lexicographically smallest beautiful substring with length 5 is the
        substring "11001".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "1011", k = 2<br />
        <strong>Output:</strong> "11"
        <br />
        <strong>Explanation:</strong> There are 3 beautiful substrings in this
        example:
        <br />
        1. The substring "<u>101</u>1".
        <br />
        2. The substring "1<u>011</u>".
        <br />
        3. The substring "10<u>11</u>".
        <br />
        The length of the shortest beautiful substring is 2.
        <br />
        The lexicographically smallest beautiful substring with length 2 is the
        substring "11".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "000", k = 1 <br />
        <strong>Output:</strong> "" <br />
        <strong>Explanation:</strong> There are no beautiful substrings in this
        example.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= s.length</code>
        </li>
      </ul>
    </div>
  ),
  2932: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code>. A pair of integers <code>x</code> and <code>y</code>{" "}
        is called a <strong>strong</strong> pair if it satisfies the condition:
      </p>

      <ul>
        <li>
          <code>|x - y| &lt;= min(x, y)</code>
        </li>
      </ul>

      <p>
        You need to select two integers from <code>nums</code> such that they
        form a strong pair and their bitwise <code>XOR</code> is the{" "}
        <strong>maximum</strong> among all strong pairs in the array.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong>{" "}
        </em>
        <code>XOR</code>
        <em> value out of all possible strong pairs in the array</em>{" "}
        <code>nums</code>.
      </p>

      <p>
        <strong>Note</strong> that you can pick the same integer twice to form a
        pair.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> There are 11 strong pairs in the array{" "}
        <code>nums</code>: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3,
        4), (3, 5), (4, 4), (4, 5) and (5, 5). <br />
        The maximum XOR possible from these pairs is 3 XOR 4 = 7.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [10,100] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There are 2 strong pairs in the array{" "}
        <code>nums</code>: (10, 10) and (100, 100). <br />
        The maximum XOR possible from these pairs is 10 XOR 10 = 0 since the
        pair (100, 100) also gives 100 XOR 100 = 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,6,25,30] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> There are 6 strong pairs in the array{" "}
        <code>nums</code>: (5, 5), (5, 6), (6, 6), (25, 25), (25, 30) and (30,
        30). <br />
        The maximum XOR possible from these pairs is 25 XOR 30 = 7 since the
        only other non-zero XOR value is 5 XOR 6 = 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  2935: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code>. A pair of integers <code>x</code> and <code>y</code>{" "}
        is called a <strong>strong</strong> pair if it satisfies the condition:
      </p>

      <ul>
        <li>
          <code>|x - y| &lt;= min(x, y)</code>
        </li>
      </ul>

      <p>
        You need to select two integers from <code>nums</code> such that they
        form a strong pair and their bitwise <code>XOR</code> is the{" "}
        <strong>maximum</strong> among all strong pairs in the array.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong>{" "}
        </em>
        <code>XOR</code>
        <em> value out of all possible strong pairs in the array</em>{" "}
        <code>nums</code>.
      </p>

      <p>
        <strong>Note</strong> that you can pick the same integer twice to form a
        pair.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> There are 11 strong pairs in the array{" "}
        <code>nums</code>: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3,
        4), (3, 5), (4, 4), (4, 5) and (5, 5). The maximum XOR possible from
        these pairs is 3 XOR 4 = 7.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [10,100] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There are 2 strong pairs in the array
        nums: (10, 10) and (100, 100). <br />
        The maximum XOR possible from these pairs is 10 XOR 10 = 0 since the
        pair (100, 100) also gives 100 XOR 100 = 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [500,520,2500,3000] <br />
        <strong>Output:</strong> 1020 <br />
        <strong>Explanation:</strong> There are 6 strong pairs in the array
        nums: (500, 500), (500, 520), (520, 520), (2500, 2500), (2500, 3000) and
        (3000, 3000). <br />
        The maximum XOR possible from these pairs is 500 XOR 520 = 1020 since
        the only other non-zero XOR value is 2500 XOR 3000 = 636.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 2<sup>20</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  2953: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>word</code> and an integer <code>k</code>.
      </p>

      <p>
        A substring <code>s</code> of <code>word</code> is{" "}
        <strong>complete</strong> if:
      </p>

      <ul>
        <li>
          Each character in <code>s</code> occurs <strong>exactly</strong>{" "}
          <code>k</code> times.
        </li>
        <li>
          The difference between two adjacent characters is{" "}
          <strong>at most</strong> <code>2</code>. That is, for any two adjacent
          characters <code>c1</code> and <code>c2</code> in <code>s</code>, the
          absolute difference in their positions in the alphabet is{" "}
          <strong>at most</strong> <code>2</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the number of <strong>complete </strong>substrings of
        </em>{" "}
        <code>word</code>.
      </p>

      <p>
        A <strong>substring</strong> is a <strong>non-empty</strong> contiguous
        sequence of characters in a string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "igigee", k = 2 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The complete substrings where each
        character appears exactly twice and the difference between adjacent
        characters is at most 2 are:{" "}
        <u>
          <strong>igig</strong>
        </u>
        ee, igig
        <u>
          <strong>ee</strong>
        </u>
        ,{" "}
        <u>
          <strong>igigee</strong>
        </u>
        .
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word = "aaabbbccc", k = 3 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The complete substrings where each
        character appears exactly three times and the difference between
        adjacent characters is at most 2 are:{" "}
        <strong>
          <u>aaa</u>
        </strong>
        bbbccc, aaa
        <u>
          <strong>bbb</strong>
        </u>
        ccc, aaabbb
        <u>
          <strong>ccc</strong>
        </u>
        ,{" "}
        <strong>
          <u>aaabbb</u>
        </strong>
        ccc, aaa
        <u>
          <strong>bbbccc</strong>
        </u>
        ,{" "}
        <u>
          <strong>aaabbbccc</strong>
        </u>
        .
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= word.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>word</code> consists only of lowercase English letters.
        </li>
        <li>
          <code>1 &lt;= k &lt;= word.length</code>
        </li>
      </ul>
    </div>
  ),
  2958: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and an integer{" "}
        <code>k</code>.
      </p>

      <p>
        The <strong>frequency</strong> of an element <code>x</code> is the
        number of times it occurs in an array.
      </p>

      <p>
        An array is called <strong>good</strong> if the frequency of each
        element in this array is <strong>less than or equal</strong> to{" "}
        <code>k</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the length of the <strong>longest</strong> <strong>good</strong>{" "}
          subarray of
        </em>{" "}
        <code>nums</code>
        <em>.</em>
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous non-empty sequence of
        elements within an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,1,2,3,1,2], k = 2 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The longest possible good subarray is
        [1,2,3,1,2,3] since the values 1, 2, and 3 occur at most twice in this
        subarray. Note that the subarrays [2,3,1,2,3,1] and [3,1,2,3,1,2] are
        also good. It can be shown that there are no good subarrays with length
        more than 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,1,2,1,2,1,2], k = 1 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The longest possible good subarray is
        [1,2] since the values 1 and 2 occur at most once in this subarray. Note
        that the subarray [2,1] is also good. It can be shown that there are no
        good subarrays with length more than 2.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,5,5,5,5,5,5], k = 4 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The longest possible good subarray is
        [5,5,5,5] since the value 5 occurs 4 times in this subarray. It can be
        shown that there are no good subarrays with length more than 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= nums.length</code>
        </li>
      </ul>
    </div>
  ),
  2962: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and a{" "}
        <strong>positive</strong> integer <code>k</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the number of subarrays where the <strong>maximum</strong> element of{" "}
        </em>
        <code>nums</code>
        <em>
          {" "}
          appears <strong>at least</strong>{" "}
        </em>
        <code>k</code>
        <em> times in that subarray.</em>
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous sequence of elements within
        an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,2,3,3], k = 2 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The subarrays that contain the element 3
        at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3],
        [2,3,3] and [3,3].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,4,2,1], k = 3<br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> No subarray contains the element 4 at
        least 3 times.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2968: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> and an integer <code>k</code>.
      </p>

      <p>
        You can perform the following operation on the array{" "}
        <strong>at most</strong> <code>k</code> times:
      </p>

      <ul>
        <li>
          Choose any index <code>i</code> from the array and{" "}
          <strong>increase</strong> or <strong>decrease</strong>{" "}
          <code>nums[i]</code> by <code>1</code>.
        </li>
      </ul>

      <p>
        The score of the final array is the <strong>frequency</strong> of the
        most frequent element in the array.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong> score you can achieve
        </em>
        .
      </p>

      <p>
        The frequency of an element is the number of occurences of that element
        in the array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,6,4], k = 3<br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> We can do the following operations on the
        array:
        <br />
        - Choose i = 0, and increase the value of nums[0] by 1. The resulting
        array is [2,2,6,4].
        <br />
        - Choose i = 3, and decrease the value of nums[3] by 1. The resulting
        array is [2,2,6,3].
        <br />
        - Choose i = 3, and decrease the value of nums[3] by 1. The resulting
        array is [2,2,6,2].
        <br />
        The element 2 is the most frequent in the final array so our score is 3.
        <br />
        It can be shown that we cannot achieve a better score.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,4,4,2,4], k = 0<br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> We cannot apply any operations so our
        score will be the frequency of the most frequent element in the original
        array, which is 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 10<sup>14</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2981: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> that consists of lowercase English
        letters.
      </p>

      <p>
        A string is called <strong>special</strong> if it is made up of only a
        single character. For example, the string <code>"abc"</code> is not
        special, whereas the strings <code>"ddd"</code>, <code>"zz"</code>, and{" "}
        <code>"f"</code> are special.
      </p>

      <p>
        Return{" "}
        <em>
          the length of the <strong>longest special substring</strong> of{" "}
        </em>
        <code>s</code>{" "}
        <em>
          which occurs <strong>at least thrice</strong>
        </em>
        , <em>or </em>
        <code>-1</code>
        <em> if no special substring occurs at least thrice</em>.
      </p>

      <p>
        A <strong>substring</strong> is a contiguous <strong>non-empty</strong>{" "}
        sequence of characters within a string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aaaa" <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The longest special substring which occurs
        thrice is "aa": substrings "
        <u>
          <strong>aa</strong>
        </u>
        aa", "a
        <u>
          <strong>aa</strong>
        </u>
        a", and "aa
        <u>
          <strong>aa</strong>
        </u>
        ". It can be shown that the maximum length achievable is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcdef" <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> There exists no special substring which
        occurs at least thrice. Hence return -1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcaba" <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The longest special substring which occurs
        thrice is "a": substrings "
        <u>
          <strong>a</strong>
        </u>
        bcaba", "abc
        <u>
          <strong>a</strong>
        </u>
        ba", and "abcab
        <u>
          <strong>a</strong>
        </u>
        ". It can be shown that the maximum length achievable is 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>3 &lt;= s.length &lt;= 50</code>
        </li>
        <li>
          <code>s</code> consists of only lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  2982: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> that consists of lowercase English
        letters.
      </p>

      <p>
        A string is called <strong>special</strong> if it is made up of only a
        single character. For example, the string <code>"abc"</code> is not
        special, whereas the strings <code>"ddd"</code>, <code>"zz"</code>, and{" "}
        <code>"f"</code> are special.
      </p>

      <p>
        Return{" "}
        <em>
          the length of the <strong>longest special substring</strong> of{" "}
        </em>
        <code>s</code>{" "}
        <em>
          which occurs <strong>at least thrice</strong>
        </em>
        , <em>or </em>
        <code>-1</code>
        <em> if no special substring occurs at least thrice</em>.
      </p>

      <p>
        A <strong>substring</strong> is a contiguous <strong>non-empty</strong>{" "}
        sequence of characters within a string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aaaa" <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> The longest special substring which occurs
        thrice is "aa": substrings "
        <u>
          <strong>aa</strong>
        </u>
        aa", "a
        <u>
          <strong>aa</strong>
        </u>
        a", and "aa
        <u>
          <strong>aa</strong>
        </u>
        ". It can be shown that the maximum length achievable is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcdef"
        <br />
        <strong>Output:</strong> -1
        <br />
        <strong>Explanation:</strong> There exists no special substring which
        occurs at least thrice. Hence return -1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcaba"
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> The longest special substring which occurs
        thrice is "a": substrings "
        <u>
          <strong>a</strong>
        </u>
        bcaba", "abc
        <u>
          <strong>a</strong>
        </u>
        ba", and "abcab
        <u>
          <strong>a</strong>
        </u>
        ". It can be shown that the maximum length achievable is 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= s.length &lt;= 5 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of only lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  3013: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array of integers{" "}
        <code>nums</code> of length <code>n</code>, and two{" "}
        <strong>positive</strong> integers <code>k</code> and <code>dist</code>.
      </p>

      <p>
        The <strong>cost</strong> of an array is the value of its{" "}
        <strong>first</strong> element. For example, the cost of{" "}
        <code>[1,2,3]</code> is <code>1</code> while the cost of{" "}
        <code>[3,4,1]</code> is <code>3</code>.
      </p>

      <p>
        You need to divide <code>nums</code> into <code>k</code>{" "}
        <strong>disjoint contiguous </strong>
        <span
          data-keyword="subarray-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rt:"
              >
                <div>subarrays</div>
              </div>
            </div>
          </div>
        </span>
        , such that the difference between the starting index of the{" "}
        <strong>second</strong> subarray and the starting index of the{" "}
        <code>kth</code> subarray should be{" "}
        <strong>less than or equal to</strong> <code>dist</code>. In other
        words, if you divide <code>nums</code> into the subarrays{" "}
        <code>
          nums[0..(i<sub>1</sub> - 1)], nums[i<sub>1</sub>..(i<sub>2</sub> -
          1)], ..., nums[i<sub>k-1</sub>..(n - 1)]
        </code>
        , then{" "}
        <code>
          i<sub>k-1</sub> - i<sub>1</sub> &lt;= dist
        </code>
        .
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> possible sum of the cost of these
        </em>{" "}
        <em>subarrays</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,2,6,4,2], k = 3, dist = 3<br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The best possible way to divide nums into
        3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because i
        <sub>k-1</sub> - i<sub>1</sub> is 5 - 2 = 3 which is equal to dist. The
        total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 = 5. It can
        be shown that there is no possible way to divide nums into 3 subarrays
        at a cost lower than 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [10,1,2,2,2,1], k = 4, dist = 3<br />
        <strong>Output:</strong> 15
        <br />
        <strong>Explanation:</strong> The best possible way to divide nums into
        4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid
        because i<sub>k-1</sub> - i<sub>1</sub> is 3 - 1 = 2 which is less than
        dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is
        10 + 1 + 2 + 2 = 15. The division [10], [1], [2,2,2], and [1] is not
        valid, because the difference between i<sub>k-1</sub> and i<sub>1</sub>{" "}
        is 5 - 1 = 4, which is greater than dist. It can be shown that there is
        no possible way to divide nums into 4 subarrays at a cost lower than 15.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [10,8,18,9], k = 3, dist = 1<br />
        <strong>Output:</strong> 36
        <br />
        <strong>Explanation:</strong> The best possible way to divide nums into
        4 subarrays is: [10], [8], and [18,9]. This choice is valid because i
        <sub>k-1</sub> - i<sub>1</sub> is 2 - 1 = 1 which is equal to dist.The
        total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 = 36. The
        division [10], [8,18], and [9] is not valid, because the difference
        between i<sub>k-1</sub> and i<sub>1</sub> is 3 - 1 = 2, which is greater
        than dist. It can be shown that there is no possible way to divide nums
        into 3 subarrays at a cost lower than 36.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>3 &lt;= k &lt;= n</code>
        </li>
        <li>
          <code>k - 2 &lt;= dist &lt;= n - 2</code>
        </li>
      </ul>
    </div>
  ),
  3086: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a binary array <code>nums</code> of length <code>n</code>,
        a <strong>positive</strong> integer <code>k</code> and a{" "}
        <strong>non-negative</strong> integer <code>maxChanges</code>.
      </p>

      <p>
        Alice plays a game, where the goal is for Alice to pick up{" "}
        <code>k</code> ones from <code>nums</code> using the{" "}
        <strong>minimum</strong> number of <strong>moves</strong>. When the game
        starts, Alice picks up any index <code>aliceIndex</code> in the range{" "}
        <code>[0, n - 1]</code> and stands there. If{" "}
        <code>nums[aliceIndex] == 1</code> , Alice picks up the one and{" "}
        <code>nums[aliceIndex]</code> becomes <code>0</code>(this{" "}
        <strong>does not</strong> count as a move). After this, Alice can make{" "}
        <strong>any</strong> number of <strong>moves</strong> (
        <strong>including</strong> <strong>zero</strong>) where in each move
        Alice must perform <strong>exactly</strong> one of the following
        actions:
      </p>

      <ul>
        <li>
          Select any index <code>j != aliceIndex</code> such that{" "}
          <code>nums[j] == 0</code> and set <code>nums[j] = 1</code>. This
          action can be performed <strong>at</strong> <strong>most</strong>{" "}
          <code>maxChanges</code> times.
        </li>
        <li>
          Select any two adjacent indices <code>x</code> and <code>y</code> (
          <code>|x - y| == 1</code>) such that <code>nums[x] == 1</code>,{" "}
          <code>nums[y] == 0</code>, then swap their values (set{" "}
          <code>nums[y] = 1</code> and <code>nums[x] = 0</code>). If{" "}
          <code>y == aliceIndex</code>, Alice picks up the one after this move
          and <code>nums[y]</code> becomes <code>0</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of moves required by Alice to pick{" "}
          <strong>exactly </strong>
        </em>
        <code>k</code> <em>ones</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <strong>Input: </strong>
        <span class="example-io">
          nums = [1,1,0,0,0,1,1,0,0,1], k = 3, maxChanges = 1
        </span>
        <br />
        <strong>Output: </strong>
        <span class="example-io">3</span>
        <br />
        <strong>Explanation:</strong> Alice can pick up <code>3</code> ones in{" "}
        <code>3</code> moves, if Alice performs the following actions in each
        move when standing at <code>aliceIndex == 1</code>:
        <ul>
          <li>
            &nbsp;At the start of the game Alice picks up the one and{" "}
            <code>nums[1]</code> becomes <code>0</code>. <code>nums</code>{" "}
            becomes{" "}
            <code>
              [1,
              <strong>
                <u>1</u>
              </strong>
              ,1,0,0,1,1,0,0,1]
            </code>
            .
          </li>
          <li>
            Select <code>j == 2</code> and perform an action of the first type.{" "}
            <code>nums</code> becomes{" "}
            <code>
              [1,
              <strong>
                <u>0</u>
              </strong>
              ,1,0,0,1,1,0,0,1]
            </code>
          </li>
          <li>
            Select <code>x == 2</code> and <code>y == 1</code>, and perform an
            action of the second type. <code>nums</code> becomes{" "}
            <code>
              [1,
              <strong>
                <u>1</u>
              </strong>
              ,0,0,0,1,1,0,0,1]
            </code>
            . As <code>y == aliceIndex</code>, Alice picks up the one and{" "}
            <code>nums</code> becomes&nbsp;
            <code>
              [1,
              <strong>
                <u>0</u>
              </strong>
              ,0,0,0,1,1,0,0,1]
            </code>
            .
          </li>
          <li>
            Select <code>x == 0</code> and <code>y == 1</code>, and perform an
            action of the second type. <code>nums</code> becomes{" "}
            <code>
              [0,
              <strong>
                <u>1</u>
              </strong>
              ,0,0,0,1,1,0,0,1]
            </code>
            . As <code>y == aliceIndex</code>, Alice picks up the one and{" "}
            <code>nums</code> becomes&nbsp;
            <code>
              [0,
              <strong>
                <u>0</u>
              </strong>
              ,0,0,0,1,1,0,0,1]
            </code>
            .
          </li>
        </ul>
        <p>
          Note that it may be possible for Alice to pick up <code>3</code> ones
          using some other sequence of <code>3</code> moves.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <strong>Input: </strong>
        <span class="example-io">nums = [0,0,0,0], k = 2, maxChanges = 3</span>
        <br />
        <strong>Output: </strong>
        <span class="example-io">4</span>
        <br />
        <strong>Explanation:</strong> Alice can pick up <code>2</code> ones in{" "}
        <code>4</code> moves, if Alice performs the following actions in each
        move when standing at <code>aliceIndex == 0</code>:
        <ul>
          <li>
            Select <code>j == 1</code> and perform an action of the first type.{" "}
            <code>nums</code> becomes{" "}
            <code>
              [
              <strong>
                <u>0</u>
              </strong>
              ,1,0,0]
            </code>
            .
          </li>
          <li>
            Select <code>x == 1</code> and <code>y == 0</code>, and perform an
            action of the second type. <code>nums</code> becomes{" "}
            <code>
              [
              <strong>
                <u>1</u>
              </strong>
              ,0,0,0]
            </code>
            . As <code>y == aliceIndex</code>, Alice picks up the one and{" "}
            <code>nums</code> becomes&nbsp;
            <code>
              [
              <strong>
                <u>0</u>
              </strong>
              ,0,0,0]
            </code>
            .
          </li>
          <li>
            Select <code>j == 1</code> again and perform an action of the first
            type. <code>nums</code> becomes{" "}
            <code>
              [
              <strong>
                <u>0</u>
              </strong>
              ,1,0,0]
            </code>
            .
          </li>
          <li>
            Select <code>x == 1</code> and <code>y == 0</code> again, and
            perform an action of the second type. <code>nums</code> becomes{" "}
            <code>
              [
              <strong>
                <u>1</u>
              </strong>
              ,0,0,0]
            </code>
            . As <code>y == aliceIndex</code>, Alice picks up the one and{" "}
            <code>nums</code> becomes&nbsp;
            <code>
              [
              <strong>
                <u>0</u>
              </strong>
              ,0,0,0]
            </code>
            .
          </li>
        </ul>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 1</code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= maxChanges &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>maxChanges + sum(nums) &gt;= k</code>
        </li>
      </ul>
    </div>
  ),
  3134: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>. The{" "}
        <strong>uniqueness array</strong> of <code>nums</code> is the sorted
        array that contains the number of distinct elements of all the{" "}
        <span
          data-keyword="subarray-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rt:"
              >
                <div>subarrays</div>
              </div>
            </div>
          </div>
        </span>{" "}
        of <code>nums</code>. In other words, it is a sorted array consisting of{" "}
        <code>distinct(nums[i..j])</code>, for all{" "}
        <code>0 &lt;= i &lt;= j &lt; nums.length</code>.
      </p>

      <p>
        Here, <code>distinct(nums[i..j])</code> denotes the number of distinct
        elements in the subarray that starts at index <code>i</code> and ends at
        index <code>j</code>.
      </p>

      <p>
        Return the <strong>median</strong> of the{" "}
        <strong>uniqueness array</strong> of <code>nums</code>.
      </p>

      <p>
        <strong>Note</strong> that the <strong>median</strong> of an array is
        defined as the middle element of the array when it is sorted in
        non-decreasing order. If there are two choices for a median, the{" "}
        <strong>smaller</strong> of the two values is taken.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [1,2,3]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          The uniqueness array of <code>nums</code> is{" "}
          <code>
            [distinct(nums[0..0]), distinct(nums[1..1]), distinct(nums[2..2]),
            distinct(nums[0..1]), distinct(nums[1..2]), distinct(nums[0..2])]
          </code>{" "}
          which is equal to <code>[1, 1, 1, 2, 2, 3]</code>. The uniqueness
          array has a median of 1. Therefore, the answer is 1.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [3,4,3,4,5]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">2</span>
        <br />
        <strong>Explanation:</strong>
        The uniqueness array of <code>nums</code> is{" "}
        <code>[1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3]</code>. The
        uniqueness array has a median of 2. Therefore, the answer is 2.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong> <span class="example-io">nums = [4,3,5,4]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">2</span>
        <br />
        <strong>Explanation:</strong>
        The uniqueness array of <code>nums</code> is{" "}
        <code>[1, 1, 1, 1, 2, 2, 2, 3, 3, 3]</code>. The uniqueness array has a
        median of 2. Therefore, the answer is 2.
      </pre>

      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3090: (
    <div class="elfjS" data-track-load="description_content">
      Given a string <code>s</code>, return the <strong>maximum</strong> length
      of a{" "}
      <span
        data-keyword="substring"
        class=" cursor-pointer relative text-dark-blue-s text-sm"
      >
        <div class="popover-wrapper inline-block" data-headlessui-state="">
          <div>
            <div
              aria-expanded="false"
              data-headlessui-state=""
              id="headlessui-popover-button-:rt:"
            >
              <div>substring</div>
            </div>
          </div>
        </div>
      </span>
      &nbsp;such that it contains <em>at most two occurrences</em> of each
      character.
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre class="example-block">
        <strong>Input:</strong> <span class="example-io">s = "bcbbbcba"</span>
        <br />
        <strong>Output:</strong> <span class="example-io">4</span> <br />
        <strong>Explanation:</strong>
        The following substring has a length of 4 and contains at most two
        occurrences of each character:{" "}
        <code>
          "bcbb<u>bcba</u>"
        </code>
        .
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre class="example-block">
        <strong>Input:</strong> <span class="example-io">s = "aaaa"</span>{" "}
        <br />
        <strong>Output:</strong> <span class="example-io">2</span> <br />
        <strong>Explanation:</strong>
        The following substring has a length of 2 and contains at most two
        occurrences of each character:{" "}
        <code>
          "<u>aa</u>aa"
        </code>
        .
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>2 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code> consists only of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  3095: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>nums</code> of{" "}
        <strong>non-negative</strong> integers and an integer <code>k</code>.
      </p>

      <p>
        An array is called <strong>special</strong> if the bitwise{" "}
        <code>OR</code> of all of its elements is <strong>at least</strong>{" "}
        <code>k</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the length of the <strong>shortest</strong> <strong>special</strong>{" "}
          <strong>non-empty</strong>{" "}
          <span
            data-keyword="subarray-nonempty"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:rj:"
                >
                  <div>subarray</div>
                </div>
              </div>
            </div>
          </span>{" "}
          of
        </em>{" "}
        <code>nums</code>, <em>or return</em> <code>-1</code>{" "}
        <em>if no special subarray exists</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [1,2,3], k = 2</span>
        <br />
        <strong>Output:</strong> <span class="example-io">1</span>
        <br />
        <strong>Explanation:</strong> <br />
        The subarray <code>[3]</code> has <code>OR</code> value of{" "}
        <code>3</code>. Hence, we return <code>1</code>.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [2,1,8], k = 10</span>
        <br />
        <strong>Output:</strong> <span class="example-io">3</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        The subarray <code>[2,1,8]</code> has <code>OR</code> value of{" "}
        <code>11</code>. Hence, we return <code>3</code>.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [1,2], k = 0</span>
        <br />
        <strong>Output:</strong> <span class="example-io">1</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        The subarray <code>[1]</code> has <code>OR</code> value of{" "}
        <code>1</code>. Hence, we return <code>1</code>.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 50</code>
        </li>
        <li>
          <code>0 &lt;= k &lt; 64</code>
        </li>
      </ul>
    </div>
  ),
  3097: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>nums</code> of{" "}
        <strong>non-negative</strong> integers and an integer <code>k</code>.
      </p>

      <p>
        An array is called <strong>special</strong> if the bitwise{" "}
        <code>OR</code> of all of its elements is <strong>at least</strong>{" "}
        <code>k</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the length of the <strong>shortest</strong> <strong>special</strong>{" "}
          <strong>non-empty</strong>{" "}
          <span
            data-keyword="subarray-nonempty"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:rj:"
                >
                  <div>subarray</div>
                </div>
              </div>
            </div>
          </span>{" "}
          of
        </em>{" "}
        <code>nums</code>, <em>or return</em> <code>-1</code>{" "}
        <em>if no special subarray exists</em>.
      </p>

      <strong class="example">Example 1:</strong>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [1,2,3], k = 2</span> <br />
        <strong>Output:</strong> <span class="example-io">1</span> <br />
        <strong>Explanation:</strong>
        The subarray <code>[3]</code> has <code>OR</code> value of{" "}
        <code>3</code>. Hence, we return <code>1</code>.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [2,1,8], k = 10</span> <br />
        <strong>Output:</strong> <span class="example-io">3</span> <br />
        <strong>Explanation:</strong>
        The subarray <code>[2,1,8]</code> has <code>OR</code> value of{" "}
        <code>11</code>. Hence, we return <code>3</code>.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [1,2], k = 0</span> <br />
        <strong>Output:</strong> <span class="example-io">1</span> <br />
        <strong>Explanation:</strong>
        <p>
          The subarray <code>[1]</code> has <code>OR</code> value of{" "}
          <code>1</code>. Hence, we return <code>1</code>.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 2 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  95: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          all the structurally unique <strong>BST'</strong>s (binary search
          trees), which has exactly{" "}
        </em>
        <code>n</code>
        <em> nodes of unique values from</em> <code>1</code> <em>to</em>{" "}
        <code>n</code>. Return the answer in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg"
        style={{ width: 600, height: 148 }}
      />
      <pre>
        <strong>Input:</strong> n = 3<br />
        <strong>Output:</strong>{" "}
        [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> [[1]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 8</code>
        </li>
      </ul>
    </div>
  ),
  36: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Determine if a&nbsp;<code>9 x 9</code> Sudoku board&nbsp;is
        valid.&nbsp;Only the filled cells need to be validated&nbsp;
        <strong>according to the following rules</strong>:
      </p>

      <ul>
        <li>
          Each row&nbsp;must contain the&nbsp;digits&nbsp;<code>1-9</code>{" "}
          without repetition.
        </li>
        <li>
          Each column must contain the digits&nbsp;<code>1-9</code>&nbsp;without
          repetition.
        </li>
        <li>
          Each of the nine&nbsp;<code>3 x 3</code> sub-boxes of the grid must
          contain the digits&nbsp;<code>1-9</code>&nbsp;without repetition.
        </li>
      </ul>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          A Sudoku board (partially filled) could be valid but is not
          necessarily solvable.
        </li>
        <li>
          Only the filled cells need to be validated according to the
          mentioned&nbsp;rules.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png"
        style={{ height: 250, width: 250 }}
      />
      <pre>
        <strong>Input:</strong> board = <br />
        {`[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]`}{" "}
        <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> board = <br />
        {`[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]`}{" "}
        <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Same as Example 1, except with the{" "}
        <strong>5</strong> in the top left corner being modified to{" "}
        <strong>8</strong>. Since there are two 8's in the top left 3x3 sub-box,
        it is invalid.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>board.length == 9</code>
        </li>
        <li>
          <code>board[i].length == 9</code>
        </li>
        <li>
          <code>board[i][j]</code> is a digit <code>1-9</code> or{" "}
          <code>'.'</code>.
        </li>
      </ul>
    </div>
  ),
  37: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Write a program to solve a Sudoku puzzle by filling the empty cells.
      </p>

      <p>
        A sudoku solution must satisfy{" "}
        <strong>all of the following rules</strong>:
      </p>

      <ul>
        <li>
          Each of the digits <code>1-9</code> must occur exactly once in each
          row.
        </li>
        <li>
          Each of the digits <code>1-9</code> must occur exactly once in each
          column.
        </li>
        <li>
          Each of the digits <code>1-9</code> must occur exactly once in each of
          the 9 <code>3x3</code> sub-boxes of the grid.
        </li>
      </ul>

      <p>
        The <code>'.'</code> character indicates empty cells.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png"
        style={{ height: 250, width: 250 }}
        alt=""
      />
      <pre>
        <strong>Input:</strong> board =
        [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
        <br />
        <strong>Output:</strong>{" "}
        [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
        <br />
        <strong>Explanation:</strong>&nbsp;The input board is shown above and
        the only valid solution is shown below:
        <img
          src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png"
          style={{ height: 250, width: 250 }}
          alt=""
        />
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>board.length == 9</code>
        </li>
        <li>
          <code>board[i].length == 9</code>
        </li>
        <li>
          <code>board[i][j]</code> is a digit or <code>'.'</code>.
        </li>
        <li>
          It is <strong>guaranteed</strong> that the input board has only one
          solution.
        </li>
      </ul>
    </div>
  ),
  48: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>n x n</code> 2D <code>matrix</code> representing
        an image, rotate the image by <strong>90</strong> degrees (clockwise).
      </p>

      <p>
        You have to rotate the image{" "}
        <a
          href="https://en.wikipedia.org/wiki/In-place_algorithm"
          target="_blank"
          rel="noreferrer"
        >
          <strong>in-place</strong>
        </a>
        , which means you have to modify the input 2D matrix directly.{" "}
        <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg"
        style={{ width: 500, height: 188 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]] <br />
        <strong>Output:</strong> [[7,4,1],[8,5,2],[9,6,3]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg"
        style={{ width: 500, height: 201 }}
      />
      <pre>
        <strong>Input:</strong> matrix =
        [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]] <br />
        <strong>Output:</strong>{" "}
        [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == matrix.length == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 20</code>
        </li>
        <li>
          <code>-1000 &lt;= matrix[i][j] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  54: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> <code>matrix</code>, return{" "}
        <em>all elements of the</em> <code>matrix</code>{" "}
        <em>in spiral order</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg"
        style={{ width: 242, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]] <br />
        <strong>Output:</strong> [1,2,3,6,9,8,7,4,5]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg"
        style={{ width: 322, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]{" "}
        <br />
        <strong>Output:</strong> [1,2,3,4,8,12,11,10,9,5,6,7]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == matrix.length</code>
        </li>
        <li>
          <code>n == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 10</code>
        </li>
        <li>
          <code>-100 &lt;= matrix[i][j] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  59: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a positive integer <code>n</code>, generate an <code>n x n</code>{" "}
        <code>matrix</code> filled with elements from <code>1</code> to{" "}
        <code>
          n<sup>2</sup>
        </code>{" "}
        in spiral order.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg"
        style={{ width: 242, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> [[1,2,3],[8,9,4],[7,6,5]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> [[1]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 20</code>
        </li>
      </ul>
    </div>
  ),
  3191: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a{" "}
        <span
          data-keyword="binary-array"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r10:"
              >
                <div>binary array</div>
              </div>
            </div>
          </div>
        </span>{" "}
        <code>nums</code>.
      </p>

      <p>
        You can do the following operation on the array <strong>any</strong>{" "}
        number of times (possibly zero):
      </p>

      <ul>
        <li>
          Choose <strong>any</strong> 3 <strong>consecutive</strong> elements
          from the array and <strong>flip</strong> <strong>all</strong> of them.
        </li>
      </ul>

      <p>
        <strong>Flipping</strong> an element means changing its value from 0 to
        1, and from 1 to 0.
      </p>

      <p>
        Return the <strong>minimum</strong> number of operations required to
        make all elements in <code>nums</code> equal to 1. If it is impossible,
        return -1.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [0,1,1,1,0,0]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">3</span> <br />
        <strong>Explanation:</strong>
        <br />
        We can do the following operations:
        <br />
        <ul>
          <li>
            Choose the elements at indices 0, 1 and 2. The resulting array is{" "}
            <code>
              nums = [
              <u>
                <strong>1</strong>
              </u>
              ,
              <u>
                <strong>0</strong>
              </u>
              ,
              <u>
                <strong>0</strong>
              </u>
              ,1,0,0]
            </code>
            .
          </li>
          <li>
            Choose the elements at indices 1, 2 and 3. The resulting array is{" "}
            <code>
              nums = [1,
              <u>
                <strong>1</strong>
              </u>
              ,
              <u>
                <strong>1</strong>
              </u>
              ,
              <strong>
                <u>0</u>
              </strong>
              ,0,0]
            </code>
            .
          </li>
          <li>
            Choose the elements at indices 3, 4 and 5. The resulting array is{" "}
            <code>
              nums = [1,1,1,
              <strong>
                <u>1</u>
              </strong>
              ,
              <u>
                <strong>1</strong>
              </u>
              ,
              <u>
                <strong>1</strong>
              </u>
              ]
            </code>
            .
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong> <span class="example-io">nums = [0,1,1,1]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">-1</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        It is impossible to make all elements equal to 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 1</code>
        </li>
      </ul>
    </div>
  ),
  167: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <strong>1-indexed</strong> array of integers{" "}
        <code>numbers</code> that is already{" "}
        <strong>
          <em>sorted in non-decreasing order</em>
        </strong>
        , find two numbers such that they add up to a specific{" "}
        <code>target</code> number. Let these two numbers be{" "}
        <code>
          numbers[index<sub>1</sub>]
        </code>{" "}
        and{" "}
        <code>
          numbers[index<sub>2</sub>]
        </code>{" "}
        where{" "}
        <code>
          1 &lt;= index<sub>1</sub> &lt; index<sub>2</sub> &lt;= numbers.length
        </code>
        .
      </p>

      <p>
        Return<em> the indices of the two numbers, </em>
        <code>
          index<sub>1</sub>
        </code>
        <em> and </em>
        <code>
          index<sub>2</sub>
        </code>
        <em>
          , <strong>added by one</strong> as an integer array{" "}
        </em>
        <code>
          [index<sub>1</sub>, index<sub>2</sub>]
        </code>
        <em> of length 2.</em>
      </p>

      <p>
        The tests are generated such that there is{" "}
        <strong>exactly one solution</strong>. You <strong>may not</strong> use
        the same element twice.
      </p>

      <p>Your solution must use only constant extra space.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numbers = [<u>2</u>,<u>7</u>,11,15], target = 9{" "}
        <br />
        <strong>Output:</strong> [1,2]
        <br />
        <strong>Explanation:</strong> The sum of 2 and 7 is 9. Therefore, index
        <sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numbers = [<u>2</u>,3,<u>4</u>], target = 6
        <br />
        <strong>Output:</strong> [1,3]
        <br />
        <strong>Explanation:</strong> The sum of 2 and 4 is 6. Therefore index
        <sub>1</sub> = 1, index<sub>2</sub> = 3. We return [1, 3].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numbers = [<u>-1</u>,<u>0</u>], target = -1
        <br />
        <strong>Output:</strong> [1,2]
        <br />
        <strong>Explanation:</strong> The sum of -1 and 0 is -1. Therefore index
        <sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= numbers.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>-1000 &lt;= numbers[i] &lt;= 1000</code>
        </li>
        <li>
          <code>numbers</code> is sorted in{" "}
          <strong>non-decreasing order</strong>.
        </li>
        <li>
          <code>-1000 &lt;= target &lt;= 1000</code>
        </li>
        <li>
          The tests are generated such that there is{" "}
          <strong>exactly one solution</strong>.
        </li>
      </ul>
    </div>
  ),
  189: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, rotate the array to the right
        by <code>k</code> steps, where <code>k</code> is non-negative.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5,6,7], k = 3 <br />
        <strong>Output:</strong> [5,6,7,1,2,3,4] <br />
        <strong>Explanation:</strong> <br />
        rotate 1 steps to the right: [7,1,2,3,4,5,6] <br />
        rotate 2 steps to the right: [6,7,1,2,3,4,5] <br />
        rotate 3 steps to the right: [5,6,7,1,2,3,4]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-1,-100,3,99], k = 2 <br />
        <strong>Output:</strong> [3,99,-1,-100] <br />
        <strong>Explanation:</strong> <br />
        rotate 1 steps to the right: [99,-1,-100,3] <br />
        rotate 2 steps to the right: [3,99,-1,-100]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <ul>
        <li>
          Try to come up with as many solutions as you can. There are at least{" "}
          <strong>three</strong> different ways to solve this problem.
        </li>
        <li>
          Could you do it in-place with <code>O(1)</code> extra space?
        </li>
      </ul>
    </div>
  ),
  202: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Write an algorithm to determine if a number <code>n</code> is happy.
      </p>

      <p>
        A <strong>happy number</strong> is a number defined by the following
        process:
      </p>

      <ul>
        <li>
          Starting with any positive integer, replace the number by the sum of
          the squares of its digits.
        </li>
        <li>
          Repeat the process until the number equals 1 (where it will stay), or
          it <strong>loops endlessly in a cycle</strong> which does not include
          1.
        </li>
        <li>
          Those numbers for which this process <strong>ends in 1</strong> are
          happy.
        </li>
      </ul>

      <p>
        Return <code>true</code> <em>if</em> <code>n</code>{" "}
        <em>is a happy number, and</em> <code>false</code> <em>if not</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 19 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> <br />1<sup>2</sup> + 9<sup>2</sup> = 82{" "}
        <br />8<sup>2</sup> + 2<sup>2</sup> = 68 <br />6<sup>2</sup> + 8
        <sup>2</sup> = 100 <br />1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> =
        1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  283: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, move all <code>0</code>'s to
        the end of it while maintaining the relative order of the non-zero
        elements.
      </p>
      <p>
        <strong>Note</strong> that you must do this in-place without making a
        copy of the array.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [0,1,0,3,12] <br />
        <strong>Output:</strong> [1,3,12,0,0]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [0] <br />
        <strong>Output:</strong> [0]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you minimize the total number of
      operations done?
    </div>
  ),
  287: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code> containing&nbsp;
        <code>n + 1</code> integers where each integer is in the range{" "}
        <code>[1, n]</code> inclusive.
      </p>

      <p>
        There is only <strong>one repeated number</strong> in <code>nums</code>,
        return <em>this&nbsp;repeated&nbsp;number</em>.
      </p>

      <p>
        You must solve the problem <strong>without</strong> modifying the array{" "}
        <code>nums</code>&nbsp;and uses only constant extra space.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,4,2,2] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,1,3,4,2] <br />
        <strong>Output:</strong> 3
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,3,3,3,3] <br />
        <strong>Output:</strong> 3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>nums.length == n + 1</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= n</code>
        </li>
        <li>
          All the integers in <code>nums</code> appear only{" "}
          <strong>once</strong> except for{" "}
          <strong>precisely one integer</strong> which appears{" "}
          <strong>two or more</strong> times.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <b>Follow up:</b>
      </p>

      <ul>
        <li>
          How can we prove that at least one duplicate number must exist in{" "}
          <code>nums</code>?
        </li>
        <li>Can you solve the problem in linear runtime complexity?</li>
      </ul>
    </div>
  ),
  344: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Write a function that reverses a string. The input string is given as an
        array of characters <code>s</code>.
      </p>

      <p>
        You must do this by modifying the input array{" "}
        <a
          href="https://en.wikipedia.org/wiki/In-place_algorithm"
          target="_blank"
          rel="noreferrer"
        >
          in-place
        </a>{" "}
        with <code>O(1)</code> extra memory.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = ["h","e","l","l","o"] <br />
        <strong>Output:</strong> ["o","l","l","e","h"]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = ["H","a","n","n","a","h"] <br />
        <strong>Output:</strong> ["h","a","n","n","a","H"]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s[i]</code> is a{" "}
          <a
            href="https://en.wikipedia.org/wiki/ASCII#Printable_characters"
            target="_blank"
            rel="noreferrer"
          >
            printable ascii character
          </a>
          .
        </li>
      </ul>
    </div>
  ),
  345: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, reverse only all the vowels in the string
        and return it.
      </p>

      <p>
        The vowels are <code>'a'</code>, <code>'e'</code>, <code>'i'</code>,{" "}
        <code>'o'</code>, and <code>'u'</code>, and they can appear in both
        lower and upper cases, more than once.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = "hello" <br />
        <strong>Output:</strong> "holle"
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = "leetcode"
        <br />
        <strong>Output:</strong> "leotcede"
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 3 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consist of <strong>printable ASCII</strong> characters.
        </li>
      </ul>
    </div>
  ),
  349: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integer arrays <code>nums1</code> and <code>nums2</code>,
        return{" "}
        <em>
          an array of their{" "}
          <span
            data-keyword="array-intersection"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:rt:"
                >
                  <div>intersection</div>
                </div>
              </div>
            </div>
          </span>
        </em>
        . Each element in the result must be <strong>unique</strong> and you may
        return the result in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,2,2,1], nums2 = [2,2] <br />
        <strong>Output:</strong> [2]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]
        <br />
        <strong>Output:</strong> [9,4]
        <br />
        <strong>Explanation:</strong> [4,9] is also accepted.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  350: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integer arrays <code>nums1</code> and <code>nums2</code>,
        return <em>an array of their intersection</em>. Each element in the
        result must appear as many times as it shows in both arrays and you may
        return the result in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,2,2,1], nums2 = [2,2] <br />
        <strong>Output:</strong> [2,2]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]
        <br />
        <strong>Output:</strong> [4,9]
        <br />
        <strong>Explanation:</strong> [9,4] is also accepted.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <ul>
        <li>
          What if the given array is already sorted? How would you optimize your
          algorithm?
        </li>
        <li>
          What if <code>nums1</code>'s size is small compared to{" "}
          <code>nums2</code>'s size? Which algorithm is better?
        </li>
        <li>
          What if elements of <code>nums2</code> are stored on disk, and the
          memory is limited such that you cannot load all elements into the
          memory at once?
        </li>
      </ul>
    </div>
  ),
  360: (
    <div class="markdown-body div-width">
      <p>
        Given a <b>sorted</b> array of integers <i>nums</i> and integer values{" "}
        <i>a</i>, <i>b</i> and
        <i>c</i>. Apply a quadratic function of the form f(<i>x</i>) = <i>ax</i>
        <sup>2</sup> +<i>bx</i> + <i>c</i> to each element <i>x</i> in the
        array.
      </p>

      <p>
        The returned array must be in <b>sorted order</b>.
      </p>

      <p>
        Expected time complexity:{" "}
        <b>
          O(<i>n</i>)
        </b>
      </p>

      <div>
        <p>
          <strong>Example 1:</strong>
        </p>

        <pre>
          <strong>Input: </strong>nums ={" "}
          <span id="example-input-1-1">[-4,-2,2,4]</span>, a ={" "}
          <span id="example-input-1-2">1</span>, b ={" "}
          <span id="example-input-1-3">3</span>, c ={" "}
          <span id="example-input-1-4">5</span> <br />
          <strong>Output: </strong>
          <span id="example-output-1">[3,9,15,33]</span>
        </pre>

        <div>
          <p>
            <strong>Example 2:</strong>
          </p>

          <pre>
            <strong>Input: </strong>nums ={" "}
            <span id="example-input-2-1">[-4,-2,2,4]</span>, a ={" "}
            <span id="example-input-2-2">-1</span>, b ={" "}
            <span id="example-input-2-3">3</span>, c ={" "}
            <span id="example-input-2-4">5</span>
            <br />
            <strong>Output: </strong>
            <span id="example-output-2">[-23,-5,1,7]</span>
          </pre>
        </div>
      </div>
    </div>
  ),
  457: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are playing a game involving a <strong>circular</strong> array of
        non-zero integers <code>nums</code>. Each <code>nums[i]</code> denotes
        the number of indices forward/backward you must move if you are located
        at index <code>i</code>:
      </p>

      <ul>
        <li>
          If <code>nums[i]</code> is positive, move <code>nums[i]</code> steps{" "}
          <strong>forward</strong>, and
        </li>
        <li>
          If <code>nums[i]</code> is negative, move <code>nums[i]</code> steps{" "}
          <strong>backward</strong>.
        </li>
      </ul>

      <p>
        Since the array is <strong>circular</strong>, you may assume that moving
        forward from the last element puts you on the first element, and moving
        backwards from the first element puts you on the last element.
      </p>

      <p>
        A <strong>cycle</strong> in the array consists of a sequence of indices{" "}
        <code>seq</code> of length <code>k</code> where:
      </p>

      <ul>
        <li>
          Following the movement rules above results in the repeating index
          sequence{" "}
          <code>
            seq[0] -&gt; seq[1] -&gt; ... -&gt; seq[k - 1] -&gt; seq[0] -&gt;
            ...
          </code>
        </li>
        <li>
          Every <code>nums[seq[j]]</code> is either{" "}
          <strong>all positive</strong> or <strong>all negative</strong>.
        </li>
        <li>
          <code>k &gt; 1</code>
        </li>
      </ul>

      <p>
        Return <code>true</code>
        <em>
          {" "}
          if there is a <strong>cycle</strong> in{" "}
        </em>
        <code>nums</code>
        <em>, or </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/09/01/img1.jpg"
        style={{ width: 402, height: 289 }}
      />
      <pre>
        <strong>Input:</strong> nums = [2,-1,1,2,2] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The graph shows how the indices are
        connected. White nodes are jumping forward, while red is jumping
        backward. We can see the cycle 0 --&gt; 2 --&gt; 3 --&gt; 0 --&gt; ...,
        and all of its nodes are white (jumping in the same direction).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/09/01/img2.jpg"
        style={{ width: 402, height: 289 }}
      />
      <pre>
        <strong>Input:</strong> nums = [-1,-2,-3,-4,-5,6] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The graph shows how the indices are
        connected. White nodes are jumping forward, while red is jumping
        backward. The only cycle is of size 1, so we return false.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/09/01/img3.jpg"
        style={{ width: 402, height: 289 }}
      />
      <pre>
        <strong>Input:</strong> nums = [1,-1,5,1,4] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The graph shows how the indices are
        connected. White nodes are jumping forward, while red is jumping
        backward. We can see the cycle 0 --&gt; 1 --&gt; 0 --&gt; ..., and while
        it is of size &gt; 1, it has a node jumping forward and a node jumping
        backward, so <strong>it is not a cycle</strong>. <br />
        We can see the cycle 3 --&gt; 4 --&gt; 3 --&gt; ..., and all of its
        nodes are white (jumping in the same direction). <br />
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 5000</code>
        </li>
        <li>
          <code>-1000 &lt;= nums[i] &lt;= 1000</code>
        </li>
        <li>
          <code>nums[i] != 0</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you solve it in <code>O(n)</code> time
        complexity and <code>O(1)</code> extra space complexity?
      </p>
    </div>
  ),
  532: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code> and an integer{" "}
        <code>k</code>, return{" "}
        <em>
          the number of <b>unique</b> k-diff pairs in the array
        </em>
        .
      </p>

      <p>
        A <strong>k-diff</strong> pair is an integer pair{" "}
        <code>(nums[i], nums[j])</code>, where the following are true:
      </p>

      <ul>
        <li>
          <code>0 &lt;= i, j &lt; nums.length</code>
        </li>
        <li>
          <code>i != j</code>
        </li>
        <li>
          <code>|nums[i] - nums[j]| == k</code>
        </li>
      </ul>

      <p>
        <strong>Notice</strong> that <code>|val|</code> denotes the absolute
        value of <code>val</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,1,4,1,5], k = 2 <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> There are two 2-diff pairs in the array,
        (1, 3) and (3, 5).
        <br />
        Although we have two 1s in the input, we should only return the number
        of <strong>unique</strong> pairs.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5], k = 1<br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> There are four 1-diff pairs in the array,
        (1, 2), (2, 3), (3, 4) and (4, 5).
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,1,5,4], k = 0<br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> There is one 0-diff pair in the array, (1,
        1).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 10<sup>7</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  556: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a positive integer <code>n</code>, find{" "}
        <em>
          the smallest integer which has exactly the same digits existing in the
          integer
        </em>{" "}
        <code>n</code> <em>and is greater in value than</em> <code>n</code>. If
        no such positive integer exists, return <code>-1</code>.
      </p>

      <p>
        <strong>Note</strong> that the returned integer should fit in{" "}
        <strong>32-bit integer</strong>, if there is a valid answer but it does
        not fit in <strong>32-bit integer</strong>, return <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 12 <br />
        <strong>Output:</strong> 21
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 21
        <br />
        <strong>Output:</strong> -1
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  581: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, you need to find one{" "}
        <b>continuous subarray</b> such that if you only sort this subarray in
        non-decreasing order, then the whole array will be sorted in
        non-decreasing order.
      </p>
      <p>
        Return <em>the shortest such subarray and output its length</em>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [2,6,4,8,10,9,15] <br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation:</strong> You need to sort [6, 4, 8, 10, 9] in
        ascending order to make the whole array sorted in ascending order.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,2,3,4]
        <br />
        <strong>Output:</strong> 0
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1]
        <br />
        <strong>Output:</strong> 0
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Can you solve it in <code>O(n)</code> time
      complexity?
    </div>
  ),
  611: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return{" "}
        <em>
          the number of triplets chosen from the array that can make triangles
          if we take them as side lengths of a triangle
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,2,3,4] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Valid combinations are: <br />
        2,3,4 (using the first 2) <br />
        2,3,4 (using the second 2) <br />
        2,2,3
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,3,4] <br />
        <strong>Output:</strong> 4
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  633: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a non-negative integer <code>c</code>, decide whether there're two
        integers <code>a</code> and <code>b</code> such that{" "}
        <code>
          a<sup>2</sup> + b<sup>2</sup> = c
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> c = 5 <br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong> 1 * 1 + 2 * 2 = 5
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> c = 3<br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= c &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  647: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, return{" "}
        <em>
          the number of <strong>palindromic substrings</strong> in it
        </em>
        .
      </p>

      <p>
        A string is a <strong>palindrome</strong> when it reads the same
        backward as forward.
      </p>

      <p>
        A <strong>substring</strong> is a contiguous sequence of characters
        within the string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abc" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Three palindromic strings: "a", "b", "c".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aaa"
        <br />
        <strong>Output:</strong> 6<strong>Explanation:</strong> Six palindromic
        strings: "a", "a", "a", "aa", "aa", "aaa".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  719: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>distance of a pair</strong> of integers <code>a</code> and{" "}
        <code>b</code> is defined as the absolute difference between{" "}
        <code>a</code> and <code>b</code>.
      </p>

      <p>
        Given an integer array <code>nums</code> and an integer <code>k</code>,
        return <em>the</em>{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        <em>
          smallest <strong>distance among all the pairs</strong>
        </em>{" "}
        <code>nums[i]</code> <em>and</em> <code>nums[j]</code> <em>where</em>{" "}
        <code>0 &lt;= i &lt; j &lt; nums.length</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,1], k = 1 <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> Here are all the pairs:
        <br />
        (1,3) -&gt; 2<br />
        (1,1) -&gt; 0<br />
        (3,1) -&gt; 2<br />
        Then the 1<sup>st</sup> smallest distance pair is (1,1), and its
        distance is 0.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1], k = 2<br />
        <strong>Output:</strong> 0
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,6,1], k = 3<br />
        <strong>Output:</strong> 5
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= n * (n - 1) / 2</code>
        </li>
      </ul>
    </div>
  ),
  786: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a sorted integer array <code>arr</code> containing{" "}
        <code>1</code> and <strong>prime</strong> numbers, where all the
        integers of <code>arr</code> are unique. You are also given an integer{" "}
        <code>k</code>.
      </p>
      <p>
        For every <code>i</code> and <code>j</code> where{" "}
        <code>0 &lt;= i &lt; j &lt; arr.length</code>, we consider the fraction{" "}
        <code>arr[i] / arr[j]</code>.
      </p>
      <p>
        Return <em>the</em>{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        <em>smallest fraction considered</em>. Return your answer as an array of
        integers of size <code>2</code>, where <code>answer[0] == arr[i]</code>{" "}
        and <code>answer[1] == arr[j]</code>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> arr = [1,2,3,5], k = 3 <br />
        <strong>Output:</strong> [2,5] <br />
        <strong>Explanation:</strong> The fractions to be considered in sorted
        order are: <br />
        1/5, 1/3, 2/5, 1/2, 3/5, and 2/3. <br />
        The third fraction is 2/5.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> arr = [1,7], k = 1 <br />
        <strong>Output:</strong> [1,7]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>2 &lt;= arr.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= arr[i] &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>arr[0] == 1</code>
        </li>
        <li>
          <code>arr[i]</code> is a <strong>prime</strong> number for{" "}
          <code>i &gt; 0</code>.
        </li>
        <li>
          All the numbers of <code>arr</code> are <strong>unique</strong> and
          sorted in <strong>strictly increasing</strong> order.
        </li>
        <li>
          <code>1 &lt;= k &lt;= arr.length * (arr.length - 1) / 2</code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Can you solve the problem with better than{" "}
      <code>
        O(n<sup>2</sup>)
      </code>{" "}
      complexity?
    </div>
  ),
  923: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>arr</code>, and an integer{" "}
        <code>target</code>, return the number of tuples <code>i, j, k</code>{" "}
        such that <code>i &lt; j &lt; k</code> and{" "}
        <code>arr[i] + arr[j] + arr[k] == target</code>.
      </p>

      <p>
        As the answer can be very large, return it <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,1,2,2,3,3,4,4,5,5], target = 8<br />
        <strong>Output:</strong> 20
        <br />
        <strong>Explanation: </strong>
        <br />
        Enumerating by the values (arr[i], arr[j], arr[k]):
        <br />
        (1, 2, 5) occurs 8 times;
        <br />
        (1, 3, 4) occurs 8 times;
        <br />
        (2, 2, 4) occurs 2 times;
        <br />
        (2, 3, 3) occurs 2 times.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,1,2,2,2,2], target = 5 <br />
        <strong>Output:</strong> 12
        <br />
        <strong>Explanation: </strong>
        <br />
        arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:
        <br />
        We choose one 1 from [1,1] in 2 ways,
        <br />
        and two 2s from [2,2,2,2] in 6 ways.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [2,1,3], target = 6<br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> (1, 2, 3) occured one time in the array so
        we return 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>3 &lt;= arr.length &lt;= 3000</code>
        </li>
        <li>
          <code>0 &lt;= arr[i] &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= target &lt;= 300</code>
        </li>
      </ul>
    </div>
  ),
  977: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> sorted in{" "}
        <strong>non-decreasing</strong> order, return{" "}
        <em>
          an array of <strong>the squares of each number</strong> sorted in
          non-decreasing order
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [-4,-1,0,3,10] <br />
        <strong>Output:</strong> [0,1,9,16,100] <br />
        <strong>Explanation:</strong> After squaring, the array becomes
        [16,1,0,9,100]. <br />
        After sorting, it becomes [0,1,9,16,100].
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [-7,-3,2,3,11] <br />
        <strong>Output:</strong> [4,9,9,49,121]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            <span>1 &lt;= nums.length &lt;= </span>10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>nums</code> is sorted in <strong>non-decreasing</strong> order.
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Squaring each element and sorting the new
      array is very trivial, could you find an <code>O(n)</code> solution using
      a different approach?
    </div>
  ),
  1089: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a fixed-length integer array <code>arr</code>, duplicate each
        occurrence of zero, shifting the remaining elements to the right.
      </p>

      <p>
        <strong>Note</strong> that elements beyond the length of the original
        array are not written. Do the above modifications to the input array in
        place and do not return anything.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,0,2,3,0,4,5,0] <br />
        <strong>Output:</strong> [1,0,0,2,3,0,0,4]
        <br />
        <strong>Explanation:</strong> After calling your function, the input
        array is modified to: [1,0,0,2,3,0,0,4]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,2,3]
        <br />
        <strong>Output:</strong> [1,2,3]
        <br />
        <strong>Explanation:</strong> After calling your function, the input
        array is modified to: [1,2,3]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= arr.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= arr[i] &lt;= 9</code>
        </li>
      </ul>
    </div>
  ),
  1099: (
    <div class="markdown-body div-width">
      <p>
        Given an array <code>A</code> of integers and&nbsp;integer{" "}
        <code>K</code>, return the maximum
        <code>S</code> such that there exists <code>i &lt; j</code> with{" "}
        <code>A[i] + A[j] = S</code> and <code>S &lt; K</code>. If no{" "}
        <code>i, j</code> exist satisfying this equation, return -1.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input: </strong>A ={" "}
        <span id="example-input-1-1">[34,23,1,24,75,33,54,8]</span>, K ={" "}
        <span id="example-input-1-2">60</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-1">58</span> <br />
        <strong>Explanation: </strong> <br />
        We can use 34 and 24 to sum 58 which is less than 60.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input: </strong>A ={" "}
        <span id="example-input-2-1">[10,20,30]</span>, K ={" "}
        <span id="example-input-2-2">15</span> <br />
        <strong>Output: </strong>
        <span id="example-output-2">-1</span> <br />
        <strong>Explanation: </strong> <br />
        In this case it's not possible to get a pair sum less that 15.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= A.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= A[i] &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= K &lt;= 2000</code>
        </li>
      </ul>
    </div>
  ),
  1712: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A split of an integer array is <strong>good</strong> if:
      </p>

      <ul>
        <li>
          The array is split into three <strong>non-empty</strong> contiguous
          subarrays - named <code>left</code>, <code>mid</code>,{" "}
          <code>right</code> respectively from left to right.
        </li>
        <li>
          The sum of the elements in <code>left</code> is less than or equal to
          the sum of the elements in <code>mid</code>, and the sum of the
          elements in <code>mid</code> is less than or equal to the sum of the
          elements in <code>right</code>.
        </li>
      </ul>

      <p>
        Given <code>nums</code>, an array of <strong>non-negative</strong>{" "}
        integers, return{" "}
        <em>
          the number of <strong>good</strong> ways to split
        </em>{" "}
        <code>nums</code>. As the number may be too large, return it{" "}
        <strong>modulo</strong>{" "}
        <code>
          10<sup>9 </sup>+ 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The only good way to split nums is [1] [1]
        [1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,2,2,5,0] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> There are three good ways of splitting
        nums: <br />
        [1] [2] [2,2,5,0] <br />
        [1] [2,2] [2,5,0] <br />
        [1,2] [2,2] [5,0]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,2,1] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There is no good way to split nums.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1885: (
    <article role="main" class="blog-post">
      <p>
        Given two integer arrays{" "}
        <code class="language-plaintext highlighter-rouge">nums1</code> and{" "}
        <code class="language-plaintext highlighter-rouge">nums2</code> of
        length <code class="language-plaintext highlighter-rouge">n</code>,
        count the pairs of indices{" "}
        <code class="language-plaintext highlighter-rouge">(i, j)</code> such
        that <code class="language-plaintext highlighter-rouge">i &lt; j</code>{" "}
        and{" "}
        <code class="language-plaintext highlighter-rouge">
          nums1[i] + nums1[j] &gt; nums2[i] + nums2[j]
        </code>
        .
      </p>
      <p>
        Return{" "}
        <em>
          the <strong>number of pairs</strong> satisfying the condition
        </em>
        .
      </p>

      <strong>Example 1:</strong>
      <pre>
        <strong>Input:</strong> nums1 = [2,1,2,1], nums2 = [1,2,1,2] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The pairs satisfying the condition are:
        <ul>
          <li>(0, 2) where 2 + 2 &gt; 1 + 1.</li>
        </ul>
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums1 = [1,10,6,2], nums2 = [1,4,1,5] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The pairs satisfying the condition are:
        <ul>
          <li>(0, 1) where 1 + 10 &gt; 1 + 4.</li>
          <li>(0, 2) where 1 + 6 &gt; 1 + 1.</li>
          <li>(1, 2) where 10 + 6 &gt; 4 + 1.</li>
          <li>(1, 3) where 10 + 2 &gt; 4 + 5.</li>
          <li>(2, 3) where 6 + 2 &gt; 1 + 5.</li>
        </ul>
      </pre>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code class="language-plaintext highlighter-rouge">
            n == nums1.length == nums2.length
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= n &lt;= 10^5
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= nums1[i], nums2[i] &lt;= 10^5
          </code>
        </li>
      </ul>
    </article>
  ),
  2856: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>num</code> sorted in non-decreasing order.
      </p>

      <p>You can perform the following operation any number of times:</p>

      <ul>
        <li>
          Choose <strong>two</strong> indices, <code>i</code> and <code>j</code>
          , where <code>nums[i] &lt; nums[j]</code>.
        </li>
        <li>
          Then, remove the elements at indices <code>i</code> and <code>j</code>{" "}
          from <code>nums</code>. The remaining elements retain their original
          order, and the array is re-indexed.
        </li>
      </ul>

      <p>
        Return the <strong>minimum</strong> length of <code>nums</code> after
        applying the operation zero or more times.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong> <span class="example-io">nums = [1,2,3,4]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">0</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/05/18/tcase1.gif"
            style={{ width: 210, height: 70 }}
          />
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [1,1,2,2,3,3]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">0</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/05/19/tcase2.gif"
            style={{ width: 210, height: 70 }}
          />
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [1000000000,1000000000]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">2</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <p>Since both numbers are equal, they cannot be removed.</p>
      </pre>

      <p>
        <strong class="example">Example 4:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [2,3,4,4,4]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">1</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/05/19/tcase3.gif"
            style={{ width: 210, height: 70 }}
          />
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>nums</code> is sorted in <strong>non-decreasing</strong> order.
        </li>
      </ul>
    </div>
  ),
  3194: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have an array of floating point numbers <code>averages</code> which
        is initially empty. You are given an array <code>nums</code> of{" "}
        <code>n</code> integers where <code>n</code> is even.
      </p>

      <p>
        You repeat the following procedure <code>n / 2</code> times:
      </p>

      <ul>
        <li>
          Remove the <strong>smallest</strong> element, <code>minElement</code>,
          and the <strong>largest</strong> element <code>maxElement</code>
          ,&nbsp;from <code>nums</code>.
        </li>
        <li>
          Add <code>(minElement + maxElement) / 2</code> to{" "}
          <code>averages</code>.
        </li>
      </ul>

      <p>
        Return the <strong>minimum</strong> element in <code>averages</code>.
      </p>

      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [7,8,3,4,15,13,4,1]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">5.5</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <table>
          <tbody>
            <tr>
              <th>step</th>
              <th>nums</th>
              <th>averages</th>
            </tr>
            <tr>
              <td>0</td>
              <td>[7,8,3,4,15,13,4,1]</td>
              <td>[]</td>
            </tr>
            <tr>
              <td>1</td>
              <td>[7,8,3,4,13,4]</td>
              <td>[8]</td>
            </tr>
            <tr>
              <td>2</td>
              <td>[7,8,4,4]</td>
              <td>[8,8]</td>
            </tr>
            <tr>
              <td>3</td>
              <td>[7,4]</td>
              <td>[8,8,6]</td>
            </tr>
            <tr>
              <td>4</td>
              <td>[]</td>
              <td>[8,8,6,5.5]</td>
            </tr>
          </tbody>
        </table>
        The smallest element of averages, 5.5, is returned.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [1,9,8,3,10,5]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">5.5</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <table>
          <tbody>
            <tr>
              <th>step</th>
              <th>nums</th>
              <th>averages</th>
            </tr>
            <tr>
              <td>0</td>
              <td>
                <span class="example-io">[1,9,8,3,10,5]</span>
              </td>
              <td>[]</td>
            </tr>
            <tr>
              <td>1</td>
              <td>
                <span class="example-io">[9,8,3,5]</span>
              </td>
              <td>[5.5]</td>
            </tr>
            <tr>
              <td>2</td>
              <td>
                <span class="example-io">[8,5]</span>
              </td>
              <td>[5.5,6]</td>
            </tr>
            <tr>
              <td>3</td>
              <td>[]</td>
              <td>[5.5,6,6.5]</td>
            </tr>
          </tbody>
        </table>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [1,2,3,7,8,9]</span> <br />
        <strong>Output:</strong> <span class="example-io">5.0</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <table>
          <tbody>
            <tr>
              <th>step</th>
              <th>nums</th>
              <th>averages</th>
            </tr>
            <tr>
              <td>0</td>
              <td>
                <span class="example-io">[1,2,3,7,8,9]</span>
              </td>
              <td>[]</td>
            </tr>
            <tr>
              <td>1</td>
              <td>
                <span class="example-io">[2,3,7,8]</span>
              </td>
              <td>[5]</td>
            </tr>
            <tr>
              <td>2</td>
              <td>
                <span class="example-io">[3,7]</span>
              </td>
              <td>[5,5]</td>
            </tr>
            <tr>
              <td>3</td>
              <td>
                <span class="example-io">[]</span>
              </td>
              <td>[5,5,5]</td>
            </tr>
          </tbody>
        </table>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n == nums.length &lt;= 50</code>
        </li>
        <li>
          <code>n</code> is even.
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  2903: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> having length <code>n</code>, an integer{" "}
        <code>indexDifference</code>, and an integer{" "}
        <code>valueDifference</code>.
      </p>

      <p>
        Your task is to find <strong>two</strong> indices <code>i</code> and{" "}
        <code>j</code>, both in the range <code>[0, n - 1]</code>, that satisfy
        the following conditions:
      </p>

      <ul>
        <li>
          <code>abs(i - j) &gt;= indexDifference</code>, and
        </li>
        <li>
          <code>abs(nums[i] - nums[j]) &gt;= valueDifference</code>
        </li>
      </ul>

      <p>
        Return <em>an integer array</em> <code>answer</code>, <em>where</em>{" "}
        <code>answer = [i, j]</code> <em>if there are two such indices</em>,{" "}
        <em>and</em> <code>answer = [-1, -1]</code> <em>otherwise</em>. If there
        are multiple choices for the two indices, return <em>any of them</em>.
      </p>

      <p>
        <strong>Note:</strong> <code>i</code> and <code>j</code> may be{" "}
        <strong>equal</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,1,4,1], indexDifference = 2,
        valueDifference = 4<br />
        <strong>Output:</strong> [0,3]
        <br />
        <strong>Explanation:</strong> In this example, i = 0 and j = 3 can be
        selected.
        <br />
        abs(0 - 3) &gt;= 2 and abs(nums[0] - nums[3]) &gt;= 4.
        <br />
        Hence, a valid answer is [0,3].
        <br />
        [3,0] is also a valid answer.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1], indexDifference = 0,
        valueDifference = 0 <br />
        <strong>Output:</strong> [0,0]
        <br />
        <strong>Explanation:</strong> In this example, i = 0 and j = 0 can be
        selected.
        <br />
        abs(0 - 0) &gt;= 0 and abs(nums[0] - nums[0]) &gt;= 0.
        <br />
        Hence, a valid answer is [0,0].
        <br />
        Other valid answers are [0,1], [1,0], and [1,1].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3], indexDifference = 2,
        valueDifference = 4<br />
        <strong>Output:</strong> [-1,-1]
        <br />
        <strong>Explanation:</strong> In this example, it can be shown that it
        is impossible to find two indices that satisfy both conditions.
        <br />
        Hence, [-1,-1] is returned.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n == nums.length &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 50</code>
        </li>
        <li>
          <code>0 &lt;= indexDifference &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= valueDifference &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  2905: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> having length <code>n</code>, an integer{" "}
        <code>indexDifference</code>, and an integer{" "}
        <code>valueDifference</code>.
      </p>

      <p>
        Your task is to find <strong>two</strong> indices <code>i</code> and{" "}
        <code>j</code>, both in the range <code>[0, n - 1]</code>, that satisfy
        the following conditions:
      </p>

      <ul>
        <li>
          <code>abs(i - j) &gt;= indexDifference</code>, and
        </li>
        <li>
          <code>abs(nums[i] - nums[j]) &gt;= valueDifference</code>
        </li>
      </ul>

      <p>
        Return <em>an integer array</em> <code>answer</code>, <em>where</em>{" "}
        <code>answer = [i, j]</code> <em>if there are two such indices</em>,{" "}
        <em>and</em> <code>answer = [-1, -1]</code> <em>otherwise</em>. If there
        are multiple choices for the two indices, return <em>any of them</em>.
      </p>

      <p>
        <strong>Note:</strong> <code>i</code> and <code>j</code> may be{" "}
        <strong>equal</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,1,4,1], indexDifference = 2,
        valueDifference = 4<br />
        <strong>Output:</strong> [0,3]
        <br />
        <strong>Explanation:</strong> In this example, i = 0 and j = 3 can be
        selected.
        <br />
        abs(0 - 3) &gt;= 2 and abs(nums[0] - nums[3]) &gt;= 4.
        <br />
        Hence, a valid answer is [0,3].
        <br />
        [3,0] is also a valid answer.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1], indexDifference = 0,
        valueDifference = 0<br />
        <strong>Output:</strong> [0,0]
        <br />
        <strong>Explanation:</strong> In this example, i = 0 and j = 0 can be
        selected.
        <br />
        abs(0 - 0) &gt;= 0 and abs(nums[0] - nums[0]) &gt;= 0.
        <br />
        Hence, a valid answer is [0,0].
        <br />
        Other valid answers are [0,1], [1,0], and [1,1].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3], indexDifference = 2,
        valueDifference = 4<br />
        <strong>Output:</strong> [-1,-1]
        <br />
        <strong>Explanation:</strong> In this example, it can be shown that it
        is impossible to find two indices that satisfy both conditions.
        <br />
        Hence, [-1,-1] is returned.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n == nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= indexDifference &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= valueDifference &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2970: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array of{" "}
        <strong>positive</strong> integers <code>nums</code>.
      </p>

      <p>
        A subarray of <code>nums</code> is called <strong>incremovable</strong>{" "}
        if <code>nums</code> becomes <strong>strictly increasing</strong> on
        removing the subarray. For example, the subarray <code>[3, 4]</code> is
        an incremovable subarray of <code>[5, 3, 4, 6, 7]</code> because
        removing this subarray changes the array <code>[5, 3, 4, 6, 7]</code> to{" "}
        <code>[5, 6, 7]</code> which is strictly increasing.
      </p>

      <p>
        Return{" "}
        <em>
          the total number of <strong>incremovable</strong> subarrays of
        </em>{" "}
        <code>nums</code>.
      </p>

      <p>
        <strong>Note</strong> that an empty array is considered strictly
        increasing.
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous non-empty sequence of
        elements within an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4]
        <br />
        <strong>Output:</strong> 10
        <br />
        <strong>Explanation:</strong> The 10 incremovable subarrays are: [1],
        [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4],
        because on removing any one of these subarrays nums becomes strictly
        increasing. Note that you cannot select an empty subarray.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [6,5,7,8]
        <br />
        <strong>Output:</strong> 7<br />
        <strong>Explanation:</strong> The 7 incremovable subarrays are: [5],
        [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8].
        <br />
        It can be shown that there are only 7 incremovable subarrays in nums.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [8,7,6,6]
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The 3 incremovable subarrays are: [8,7,6],
        [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray
        because after removing [8,7] nums becomes [6,6], which is sorted in
        ascending order but not strictly increasing.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  2972: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array of{" "}
        <strong>positive</strong> integers <code>nums</code>.
      </p>

      <p>
        A subarray of <code>nums</code> is called <strong>incremovable</strong>{" "}
        if <code>nums</code> becomes <strong>strictly increasing</strong> on
        removing the subarray. For example, the subarray <code>[3, 4]</code> is
        an incremovable subarray of <code>[5, 3, 4, 6, 7]</code> because
        removing this subarray changes the array <code>[5, 3, 4, 6, 7]</code> to{" "}
        <code>[5, 6, 7]</code> which is strictly increasing.
      </p>

      <p>
        Return{" "}
        <em>
          the total number of <strong>incremovable</strong> subarrays of
        </em>{" "}
        <code>nums</code>.
      </p>

      <p>
        <strong>Note</strong> that an empty array is considered strictly
        increasing.
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous non-empty sequence of
        elements within an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4]
        <br />
        <strong>Output:</strong> 10
        <br />
        <strong>Explanation:</strong> The 10 incremovable subarrays are: [1],
        [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4],
        because on removing any one of these subarrays nums becomes strictly
        increasing. Note that you cannot select an empty subarray.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [6,5,7,8] <br />
        <strong>Output:</strong> 7<br />
        <strong>Explanation:</strong> The 7 incremovable subarrays are: [5],
        [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8].
        <br />
        It can be shown that there are only 7 incremovable subarrays in nums.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [8,7,6,6]
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The 3 incremovable subarrays are: [8,7,6],
        [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray
        because after removing [8,7] nums becomes [6,6], which is sorted in
        ascending order but not strictly increasing.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  96: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          the number of structurally unique <strong>BST'</strong>s (binary
          search trees) which has exactly{" "}
        </em>
        <code>n</code>
        <em> nodes of unique values from</em> <code>1</code> <em>to</em>{" "}
        <code>n</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg"
        style={{ width: 600, height: 148 }}
      />
      <pre>
        <strong>Input:</strong> n = 3<br />
        <strong>Output:</strong> 5
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 19</code>
        </li>
      </ul>
    </div>
  ),
  98: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree,{" "}
        <em>determine if it is a valid binary search tree (BST)</em>.
      </p>
      <p>
        A <strong>valid BST</strong> is defined as follows:
      </p>
      <ul>
        <li>
          The left <span>subtree</span> of a node contains only nodes with keys{" "}
          <strong>less than</strong> the node's key.
        </li>
        <li>
          The right subtree of a node contains only nodes with keys{" "}
          <strong>greater than</strong> the node's key.
        </li>
        <li>
          Both the left and right subtrees must also be binary search trees.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg"
        style={{ width: 302, height: 182 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> root = [2,1,3]
        <br />
        <strong>Output:</strong> true
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg"
        style={{ width: 422, height: 292 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> root = [5,1,4,null,null,3,6]
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> The root node's value is 5 but its right
        child's value is 4.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  99: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>root</code> of a binary search tree (BST), where
        the values of <strong>exactly</strong> two nodes of the tree were
        swapped by mistake.{" "}
        <em>Recover the tree without changing its structure</em>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/28/recover1.jpg"
        style={{ width: 422, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,3,null,null,2] <br />
        <strong>Output:</strong> [3,1,null,null,2]
        <br />
        <strong>Explanation:</strong> 3 cannot be a left child of 1 because 3
        &gt; 1. Swapping 1 and 3 makes the BST valid.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/28/recover2.jpg"
        style={{ width: 581, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,1,4,null,null,2]
        <br />
        <strong>Output:</strong> [2,1,4,null,null,3]
        <br />
        <strong>Explanation:</strong> 2 cannot be in the right subtree of 3
        because 2 &lt; 3. Swapping 2 and 3 makes the BST valid.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[2, 1000]</code>
          .
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> A solution using <code>O(n)</code> space is
      pretty straight-forward. Could you devise a constant <code>O(1)</code>{" "}
      space solution?
    </div>
  ),
  108: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> where the elements are sorted
        in <strong>ascending order</strong>, convert <em>it to a </em>
        <span
          data-keyword="height-balanced"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r7i:"
              >
                <div>
                  <strong>
                    <em>height-balanced</em>
                  </strong>
                </div>
              </div>
            </div>
          </div>
        </span>{" "}
        <em>binary search tree</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg"
        style={{ width: 302, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> nums = [-10,-3,0,5,9] <br />
        <strong>Output:</strong> [0,-3,9,-10,null,5] <br />
        <strong>Explanation:</strong> [0,-10,5,null,-3,null,9] is also accepted:{" "}
        <br />
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg"
          style={{ width: 302, height: 222 }}
        />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/18/btree.jpg"
        style={{ width: 342, height: 142 }}
      />
      <pre>
        <strong>Input:</strong> nums = [1,3] <br />
        <strong>Output:</strong> [3,1] <br />
        <strong>Explanation:</strong> [1,null,3] and [3,1] are both
        height-balanced BSTs.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>nums</code> is sorted in a <strong>strictly increasing</strong>{" "}
          order.
        </li>
      </ul>
    </div>
  ),
  109: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a singly linked list where elements are
        sorted in <strong>ascending order</strong>, convert <em>it to a </em>
        <span
          data-keyword="height-balanced"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r87:"
              >
                <div>
                  <strong>
                    <em>height-balanced</em>
                  </strong>
                </div>
              </div>
            </div>
          </div>
        </span>{" "}
        <em>binary search tree</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/17/linked.jpg"
        style={{ width: 500, height: 388 }}
      />
      <pre>
        <strong>Input:</strong> head = [-10,-3,0,5,9] <br />
        <strong>Output:</strong> [0,-3,9,-10,null,5] <br />
        <strong>Explanation:</strong> One possible answer is
        [0,-3,9,-10,null,5], which represents the shown height balanced BST.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in <code>head</code> is in the range{" "}
          <code>
            [0, 2 * 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  230: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary search tree, and an integer{" "}
        <code>k</code>, return <em>the</em>{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        <em>
          smallest value (<strong>1-indexed</strong>) of all the values of the
          nodes in the tree
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg"
        style={{ width: 212, height: 301 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> root = [3,1,4,null,2], k = 1<br />
        <strong>Output:</strong> 1
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg"
        style={{ width: 382, height: 302 }}
      />
      <br />
      <pre>
        <strong>Input:</strong> root = [5,3,6,2,4,null,null,1], k = 3<br />
        <strong>Output:</strong> 3
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the tree is <code>n</code>.
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= Node.val &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> If the BST is modified often (i.e., we can
        do insert and delete operations) and you need to find the kth smallest
        frequently, how would you optimize?
      </p>
    </div>
  ),
  235: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a binary search tree (BST), find the lowest common ancestor (LCA)
        node of two given nodes in the BST.
      </p>

      <p>
        According to the{" "}
        <a
          href="https://en.wikipedia.org/wiki/Lowest_common_ancestor"
          target="_blank"
          rel="noreferrer"
        >
          definition of LCA on Wikipedia
        </a>
        : “The lowest common ancestor is defined between two nodes{" "}
        <code>p</code> and <code>q</code> as the lowest node in <code>T</code>{" "}
        that has both <code>p</code> and <code>q</code> as descendants (where we
        allow <strong>a node to be a descendant of itself</strong>).”
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png"
        style={{ width: 200, height: 190 }}
      />
      <pre>
        <strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q =
        8 <br />
        <strong>Output:</strong> 6<br />
        <strong>Explanation:</strong> The LCA of nodes 2 and 8 is 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png"
        style={{ width: 200, height: 190 }}
      />
      <pre>
        <strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q =
        4<br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> The LCA of nodes 2 and 4 is 2, since a
        node can be a descendant of itself according to the LCA definition.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [2,1], p = 2, q = 1<br />
        <strong>Output:</strong> 2
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [2, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          All <code>Node.val</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>p != q</code>
        </li>
        <li>
          <code>p</code> and <code>q</code> will exist in the BST.
        </li>
      </ul>
    </div>
  ),
  255: (
    <div class="markdown-body div-width">
      <p>
        Given an array of numbers, verify whether it is the correct preorder
        traversal sequence of a binary search tree.
      </p>

      <p>You may assume each number in the sequence is unique.</p>

      <p>Consider the following&nbsp;binary search tree:&nbsp;</p>
      <br />
      <br />

      <img
        alt=""
        src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0200-0299/0255.Verify%20Preorder%20Sequence%20in%20Binary%20Search%20Tree/images/preorder-tree.jpg"
        style={{ width: 292, height: 302 }}
      />
      <br />
      <br />

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> [5,2,6,1,3] <br />
        <strong>Output:</strong> false
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> [5,2,1,3,6] <br />
        <strong>Output:</strong> true
      </pre>
    </div>
  ),
  270: (
    <div class="markdown-body div-width">
      <p>
        Given a non-empty binary search tree and a target value, find the value
        in the BST that is closest to the target.
      </p>

      <p>
        <b>Note:</b>
      </p>

      <ul>
        <li>Given target value is a floating point.</li>
        <li>
          You are guaranteed to have only one unique value in the BST that is
          closest to the target.
        </li>
      </ul>
      <br />
      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [4,2,5,1,3], target = 3.714286 <br />{" "}
        <br />
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0200-0299/0270.Closest%20Binary%20Search%20Tree%20Value/images/closest1-1-tree.jpg"
          style={{ width: 292, height: 302 }}
        />{" "}
        <br /> <br />
        <strong>Output:</strong> 4
      </pre>
    </div>
  ),
  272: (
    <div class="markdown-body div-width">
      <p>
        Given a non-empty binary search tree and a target value, find <i>k</i>{" "}
        values in the BST that are closest to the target.
      </p>

      <p>
        <b>Note:</b>
      </p>

      <ul>
        <li>Given target value is a floating point.</li>
        <li>
          You may assume <i>k</i> is always valid, that is: <i>k</i> ≤ total
          nodes.
        </li>
        <li>
          You are guaranteed to have only one unique set of <i>k</i> values in
          the BST that are closest to the target.
        </li>
      </ul>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [4,2,5,1,3], target = 3.714286, and{" "}
        <em>k</em> = 2 <br />
        <br />
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0200-0299/0272.Closest%20Binary%20Search%20Tree%20Value%20II/images/closest1-1-tree.jpg"
          style={{ width: 292, height: 302 }}
        />
        <br />
        <br />
        <strong>Output:</strong> [4,3]
      </pre>

      <p>
        <b>Follow up:</b>
        <br />
        Assume that the BST is balanced, could you solve it in less than{" "}
        <i>O</i>(<i>n</i>) runtime (where <i>n</i> = total nodes)?
      </p>
    </div>
  ),
  285: (
    <div class="markdown-body div-width">
      <p>
        Given a binary search tree and a node in it, find the in-order successor
        of that node in the BST.
      </p>

      <p>
        The successor of a node&nbsp;<code>p</code>&nbsp;is the node with the
        smallest key greater than&nbsp;<code>p.val</code>.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/01/23/285_example_1.PNG"
        style={{ width: 122, height: 117 }}
      />
      <pre>
        <strong>Input: </strong>root ={" "}
        <span id="example-input-1-1">[2,1,3]</span>, p ={" "}
        <span id="example-input-1-2">1</span> <br />
        <strong>Output: </strong>
        <span id="example-output-1">2</span>
        <br />
        <strong>Explanation: </strong>1's in-order successor node is 2. Note
        that both p and the return value is of TreeNode type.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/01/23/285_example_2.PNG"
        style={{ width: 246, height: 229 }}
      />
      <pre>
        <strong>Input: </strong>root ={" "}
        <span id="example-input-2-1">[5,3,6,2,4,null,null,1]</span>, p ={" "}
        <span id="example-input-2-2">6</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-2">null</span>
        <br />
        <strong>Explanation: </strong>There is no in-order successor of the
        current node, so the answer is <code>null</code>.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          If the given node has no in-order successor in the tree, return{" "}
          <code>null</code>.
        </li>
        <li>It's guaranteed that the values of the tree are unique.</li>
      </ul>
    </div>
  ),
  333: (
    <div class="markdown-body div-width">
      <p>
        Given a binary tree, find the largest subtree which is a Binary Search
        Tree (BST), where largest means subtree with largest number of nodes in
        it.
      </p>

      <p>
        <b>Note:</b>
        <br />A subtree must include all of its descendants.
      </p>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input: </strong>[10,5,15,1,8,null,7] <br /> <br />
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0333.Largest%20BST%20Subtree/images/tmp.jpg"
          style={{ width: 571, height: 302 }}
        />{" "}
        <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation: </strong>The Largest BST Subtree in this case is
        the highlighted one. The return value is the subtree's size, which is 3.
      </pre>

      <p>
        <b>Follow up:</b>
        <br />
        Can you figure out ways to solve it with O(n) time complexity?
      </p>
    </div>
  ),
  449: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Serialization is converting a data structure or object into a sequence
        of bits so that it can be stored in a file or memory buffer, or
        transmitted across a network connection link to be reconstructed later
        in the same or another computer environment.
      </p>

      <p>
        Design an algorithm to serialize and deserialize a{" "}
        <b>binary search tree</b>. There is no restriction on how your
        serialization/deserialization algorithm should work. You need to ensure
        that a binary search tree can be serialized to a string, and this string
        can be deserialized to the original tree structure.
      </p>

      <p>
        <b>The encoded string should be as compact as possible.</b>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> root = [2,1,3] <br />
        <strong>Output:</strong> [2,1,3]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> root = []
        <br />
        <strong>Output:</strong> []
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            0 &lt;= Node.val &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          The input tree is <strong>guaranteed</strong> to be a binary search
          tree.
        </li>
      </ul>
    </div>
  ),
  450: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a root node reference of a BST and a key, delete the node with the
        given key in the BST. Return{" "}
        <em>
          the <strong>root node reference</strong> (possibly updated) of the BST
        </em>
        .
      </p>

      <p>Basically, the deletion can be divided into two stages:</p>

      <ul>
        <li>Search for a node to remove.</li>
        <li>If the node is found, delete the node.</li>
      </ul>

      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg"
        style={{ width: "80%" }}
      />
      <pre>
        <strong>Input:</strong> root = [5,3,6,2,4,null,7], key = 3 <br />
        <strong>Output:</strong> [5,4,6,2,null,null,7] <br />
        <strong>Explanation:</strong> Given key to delete is 3. So we find the
        node with value 3 and delete it.
        <br />
        One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
        <br />
        Please notice that another valid answer is [5,2,6,null,4,null,7] and
        it's also accepted.
        <br />
        <br />
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg"
          style={{ width: 350, height: 255 }}
        />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [5,3,6,2,4,null,7], key = 0<br />
        <strong>Output:</strong> [5,3,6,2,4,null,7]
        <br />
        <strong>Explanation:</strong> The tree does not contain a node with
        value = 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [], key = 0<br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          Each node has a <strong>unique</strong> value.
        </li>
        <li>
          <code>root</code> is a valid binary search tree.
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= key &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you solve it with time complexity{" "}
        <code>O(height of tree)</code>?
      </p>
    </div>
  ),
  501: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary search tree (BST) with
        duplicates, return{" "}
        <em>
          all the{" "}
          <a
            href="https://en.wikipedia.org/wiki/Mode_(statistics)"
            target="_blank"
            rel="noreferrer"
          >
            mode(s)
          </a>{" "}
          (i.e., the most frequently occurred element) in it
        </em>
        .
      </p>
      <p>
        If the tree has more than one mode, return them in{" "}
        <strong>any order</strong>.
      </p>
      <p>Assume a BST is defined as follows:</p>
      <ul>
        <li>
          The left subtree of a node contains only nodes with keys{" "}
          <strong>less than or equal to</strong> the node's key.
        </li>
        <li>
          The right subtree of a node contains only nodes with keys{" "}
          <strong>greater than or equal to</strong> the node's key.
        </li>
        <li>
          Both the left and right subtrees must also be binary search trees.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/11/mode-tree.jpg"
        style={{ width: 142, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,null,2,2]
        <br />
        <strong>Output:</strong> [2]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> root = [0] <br />
        <strong>Output:</strong> [0]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you do that without using any extra
      space? (Assume that the implicit stack space incurred due to recursion
      does not count).
    </div>
  ),
  530: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a Binary Search Tree (BST), return{" "}
        <em>
          the minimum absolute difference between the values of any two
          different nodes in the tree
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg"
        style={{ width: 292, height: 301 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,2,6,1,3] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg"
        style={{ width: 282, height: 301 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,0,48,null,null,12,49] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [2, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            0 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Note:</strong> This question is the same as 783:{" "}
        <a
          href="https://leetcode.com/problems/minimum-distance-between-bst-nodes/"
          target="_blank"
          rel="noreferrer"
        >
          https://leetcode.com/problems/minimum-distance-between-bst-nodes/
        </a>
      </p>
    </div>
  ),
  700: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>root</code> of a binary search tree (BST) and an
        integer <code>val</code>.
      </p>

      <p>
        Find the node in the BST that the node's value equals <code>val</code>{" "}
        and return the subtree rooted with that node. If such a node does not
        exist, return <code>null</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg"
        style={{ width: 422, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,2,7,1,3], val = 2 <br />
        <strong>Output:</strong> [2,1,3]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/12/tree2.jpg"
        style={{ width: 422, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,2,7,1,3], val = 5 <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 5000]</code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>7</sup>
          </code>
        </li>
        <li>
          <code>root</code> is a binary search tree.
        </li>
        <li>
          <code>
            1 &lt;= val &lt;= 10<sup>7</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  701: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>root</code> node of a binary search tree (BST)
        and a <code>value</code> to insert into the tree. Return{" "}
        <em>the root node of the BST after the insertion</em>. It is{" "}
        <strong>guaranteed</strong> that the new value does not exist in the
        original BST.
      </p>

      <p>
        <strong>Notice</strong>&nbsp;that there may exist&nbsp;multiple valid
        ways for the&nbsp;insertion, as long as the tree remains a BST after
        insertion. You can return <strong>any of them</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/05/insertbst.jpg"
        style={{ width: 752, height: 221 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,2,7,1,3], val = 5 <br />
        <strong>Output:</strong> [4,2,7,1,3,5]
        <br />
        <strong>Explanation:</strong> Another accepted tree is:
        <br />
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/10/05/bst.jpg"
          style={{ width: 352, height: 301 }}
        />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [40,20,60,10,30,50,70], val = 25
        <br />
        <strong>Output:</strong> [40,20,60,10,30,50,70,null,null,25]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root =
        [4,2,7,1,3,null,null,null,null,null,null], val = 5<br />
        <strong>Output:</strong> [4,2,7,1,3,5]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in&nbsp;the tree will be in the range{" "}
          <code>
            [0,&nbsp;10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>8</sup> &lt;= Node.val &lt;= 10<sup>8</sup>
          </code>
        </li>
        <li>
          All the values <code>Node.val</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>
            -10<sup>8</sup> &lt;= val &lt;= 10<sup>8</sup>
          </code>
        </li>
        <li>
          It's <strong>guaranteed</strong> that <code>val</code> does not exist
          in the original BST.
        </li>
      </ul>
    </div>
  ),
  703: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design a class to find the{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        largest element in a stream. Note that it is the{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        largest element in the sorted order, not the{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        distinct element.
      </p>

      <p>
        Implement <code>KthLargest</code> class:
      </p>

      <ul>
        <li>
          <code>KthLargest(int k, int[] nums)</code> Initializes the object with
          the integer <code>k</code> and the stream of integers{" "}
          <code>nums</code>.
        </li>
        <li>
          <code>int add(int val)</code> Appends the integer <code>val</code> to
          the stream and returns the element representing the{" "}
          <code>
            k<sup>th</sup>
          </code>{" "}
          largest element in the stream.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        ["KthLargest", "add", "add", "add", "add", "add"] <br />
        [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
        <br />
        <strong>Output</strong>
        <br />
        [null, 4, 5, 5, 8, 8] <br />
        <strong>Explanation</strong>
        <br />
        KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
        <br />
        kthLargest.add(3); // return 4<br />
        kthLargest.add(5); // return 5<br />
        kthLargest.add(10); // return 5<br />
        kthLargest.add(9); // return 8<br />
        kthLargest.add(4); // return 8
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= val &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>add</code>.
        </li>
        <li>
          It is guaranteed that there will be at least <code>k</code> elements
          in the array when you search for the{" "}
          <code>
            k<sup>th</sup>
          </code>{" "}
          element.
        </li>
      </ul>
    </div>
  ),
  776: (
    <article role="main" class="blog-post">
      <p>
        Given the <code>root</code> of a binary search tree (BST) and an integer{" "}
        <code>target</code>, split the tree into two subtrees where one subtree
        has nodes that are all smaller or equal to the target value, while the
        other subtree has all nodes that are greater than the target value. It
        Is not necessarily the case that the tree contains a node with the value{" "}
        <code>target</code>.
      </p>

      <p>
        Additionally, most of the structure of the original tree should remain.
        Formally, for any child <code>c</code> with parent <code>p</code> in the
        original tree, if they are both in the same subtree after the split,
        then node <code>c</code> should still have the parent <code>p</code>.
      </p>

      <p>
        Return <em>an array of the two roots of the two subtrees</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0776.Split%20BST/images/split-tree.jpg"
          style={{ width: 600, height: 193 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> root = [4,2,6,1,3,5,7], target = 2 <br />
        <strong>Output:</strong> [[2,1],[4,3,6,null,null,5,7]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1], target = 1<br />
        <strong>Output:</strong> [[1],[]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 50]</code>.
        </li>
        <li>
          <code>0 &lt;= Node.val, target &lt;= 1000</code>
        </li>
      </ul>
    </article>
  ),
  783: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a Binary Search Tree (BST), return{" "}
        <em>
          the minimum difference between the values of any two different nodes
          in the tree
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg"
        style={{ width: 292, height: 301 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,2,6,1,3] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg"
        style={{ width: 282, height: 301 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,0,48,null,null,12,49] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[2, 100]</code>.
        </li>
        <li>
          <code>
            0 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Note:</strong> This question is the same as 530:{" "}
        <a
          href="https://leetcode.com/problems/minimum-absolute-difference-in-bst/"
          target="_blank"
          rel="noreferrer"
        >
          https://leetcode.com/problems/minimum-absolute-difference-in-bst/
        </a>
      </p>
    </div>
  ),
  897: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary search tree, rearrange the tree
        in <strong>in-order</strong> so that the leftmost node in the tree is
        now the root of the tree, and every node has no left child and only one
        right child.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg"
        style={{ width: 600, height: 350 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,3,6,2,4,null,8,1,null,null,null,7,9]{" "}
        <br />
        <strong>Output:</strong>{" "}
        [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg"
        style={{ width: 300, height: 114 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,1,7] <br />
        <strong>Output:</strong> [1,null,5,null,7]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the given tree will be in the range{" "}
          <code>[1, 100]</code>.
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1008: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers preorder, which represents the{" "}
        <strong>preorder traversal</strong> of a BST (i.e.,{" "}
        <strong>binary search tree</strong>), construct the tree and return{" "}
        <em>its root</em>.
      </p>

      <p>
        It is <strong>guaranteed</strong> that there is always possible to find
        a binary search tree with the given requirements for the given test
        cases.
      </p>

      <p>
        A <strong>binary search tree</strong> is a binary tree where for every
        node, any descendant of <code>Node.left</code> has a value{" "}
        <strong>strictly less than</strong> <code>Node.val</code>, and any
        descendant of <code>Node.right</code> has a value{" "}
        <strong>strictly greater than</strong> <code>Node.val</code>.
      </p>

      <p>
        A <strong>preorder traversal</strong> of a binary tree displays the
        value of the node first, then traverses <code>Node.left</code>, then
        traverses <code>Node.right</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/03/06/1266.png"
        style={{ height: 386, width: 590 }}
      />
      <pre>
        <strong>Input:</strong> preorder = [8,5,1,7,10,12] <br />
        <strong>Output:</strong> [8,5,10,1,7,null,12]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> preorder = [1,3] <br />
        <strong>Output:</strong> [1,null,3]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= preorder.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= preorder[i] &lt;= 1000</code>
        </li>
        <li>
          All the values of <code>preorder</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  1373: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <strong>binary tree</strong> <code>root</code>, return{" "}
        <em>
          the maximum sum of all keys of <strong>any</strong> sub-tree which is
          also a Binary Search Tree (BST)
        </em>
        .
      </p>

      <p>Assume a BST is defined as follows:</p>

      <ul>
        <li>
          The left subtree of a node contains only nodes with keys{" "}
          <strong>less than</strong> the node's key.
        </li>
        <li>
          The right subtree of a node contains only nodes with keys{" "}
          <strong>greater than</strong> the node's key.
        </li>
        <li>
          Both the left and right subtrees must also be binary search trees.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/01/30/sample_1_1709.png"
          style={{ width: 320, height: 250 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root =
        [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6] <br />
        <strong>Output:</strong> 20
        <br />
        <strong>Explanation:</strong> Maximum sum in a valid Binary search tree
        is obtained in root node with key equal to 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/01/30/sample_2_1709.png"
          style={{ width: 134, height: 180 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root = [4,3,null,1,2]
        <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> Maximum sum in a valid Binary search tree
        is obtained in a single root node with key equal to 2.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [-4,-2,-5]
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> All values are negatives. Return an empty
        BST.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 4 * 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -4 * 10<sup>4</sup> &lt;= Node.val &lt;= 4 * 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1382: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary search tree, return{" "}
        <em>
          a <strong>balanced</strong> binary search tree with the same node
          values
        </em>
        . If there is more than one answer, return <strong>any of them</strong>.
      </p>

      <p>
        A binary search tree is <strong>balanced</strong> if the depth of the
        two subtrees of every node never differs by more than <code>1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/10/balance1-tree.jpg"
        style={{ width: 500, height: 319 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,null,2,null,3,null,4,null,null] <br />
        <strong>Output:</strong> [2,1,3,null,null,null,4] <br />
        <b>Explanation:</b> This is not the only correct answer, [3,1,4,null,2]
        is also correct.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/10/balanced2-tree.jpg"
        style={{ width: 224, height: 145 }}
      />
      <pre>
        <strong>Input:</strong> root = [2,1,3] <br />
        <strong>Output:</strong> [2,1,3]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2476: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>root</code> of a{" "}
        <strong>binary search tree </strong>and an array <code>queries</code> of
        size <code>n</code> consisting of positive integers.
      </p>

      <p>
        Find a <strong>2D</strong> array <code>answer</code> of size{" "}
        <code>n</code> where{" "}
        <code>
          answer[i] = [min<sub>i</sub>, max<sub>i</sub>]
        </code>
        :
      </p>

      <ul>
        <li>
          <code>
            min<sub>i</sub>
          </code>{" "}
          is the <strong>largest</strong> value in the tree that is smaller than
          or equal to <code>queries[i]</code>. If a such value does not exist,
          add <code>-1</code> instead.
        </li>
        <li>
          <code>
            max<sub>i</sub>
          </code>{" "}
          is the <strong>smallest</strong> value in the tree that is greater
          than or equal to <code>queries[i]</code>. If a such value does not
          exist, add <code>-1</code> instead.
        </li>
      </ul>

      <p>
        Return <em>the array</em> <code>answer</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/09/28/bstreeedrawioo.png"
        style={{ width: 261, height: 281 }}
      />
      <pre>
        <strong>Input:</strong> root =
        [6,2,13,1,4,9,15,null,null,null,null,null,null,14], queries = [2,5,16]{" "}
        <br />
        <strong>Output:</strong> [[2,2],[4,6],[15,-1]] <br />
        <strong>Explanation:</strong> We answer the queries in the following
        way: <br />
        - The largest number that is smaller or equal than 2 in the tree is 2,
        and the smallest number that is greater or equal than 2 is still 2. So
        the answer for the first query is [2,2]. <br />
        - The largest number that is smaller or equal than 5 in the tree is 4,
        and the smallest number that is greater or equal than 5 is 6. So the
        answer for the second query is [4,6]. <br />- The largest number that is
        smaller or equal than 16 in the tree is 15, and the smallest number that
        is greater or equal than 16 does not exist. So the answer for the third
        query is [15,-1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/09/28/bstttreee.png"
        style={{ width: 101, height: 121 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,null,9], queries = [3] <br />
        <strong>Output:</strong> [[-1,4]] <br />
        <strong>Explanation:</strong> The largest number that is smaller or
        equal to 3 in the tree does not exist, and the smallest number that is
        greater or equal to 3 is 4. So the answer for the query is [-1,4].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [2, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>n == queries.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= queries[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1902: (
    <article role="main" class="blog-post">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code class="language-plaintext highlighter-rouge">order</code> of
        length <code class="language-plaintext highlighter-rouge">n</code>, a{" "}
        <strong>permutation</strong> of integers from{" "}
        <code class="language-plaintext highlighter-rouge">1</code> to{" "}
        <code class="language-plaintext highlighter-rouge">n</code> representing
        the <strong>order</strong> of insertion into a{" "}
        <strong>binary search tree</strong>.
      </p>

      <p>A binary search tree is defined as follows:</p>

      <ul>
        <li>
          The left subtree of a node contains only nodes with keys{" "}
          <strong>less than</strong> the node’s key.
        </li>
        <li>
          The right subtree of a node contains only nodes with keys{" "}
          <strong>greater than</strong> the node’s key.
        </li>
        <li>
          Both the left and right subtrees must also be binary search trees.
        </li>
      </ul>

      <p>The binary search tree is constructed as follows:</p>

      <ul>
        <li>
          <code class="language-plaintext highlighter-rouge">order[0]</code>{" "}
          will be the <strong>root</strong> of the binary search tree.
        </li>
        <li>
          All subsequent elements are inserted as the <strong>child</strong> of{" "}
          <strong>any</strong> existing node such that the binary search tree
          properties hold.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>depth</strong> of the binary search tree
        </em>
        .
      </p>

      <p>
        A binary tree’s <strong>depth is the number of nodes</strong> along the{" "}
        <strong>longest path</strong> from the root node down to the farthest
        leaf node.
      </p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <img
        src="https://assets.leetcode.com/uploads/2021/06/15/1.png"
        alt="Ima text"
      />

      <pre>
        <strong>Input:</strong> order = [2,1,4,3] <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The binary search tree has a depth of 3
        with path 2-&gt;3-&gt;4.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <img
        src="https://assets.leetcode.com/uploads/2021/06/15/2.png"
        alt=" text"
      />

      <pre>
        <strong>Input:</strong> order = [2,1,3,4]
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The binary search tree has a depth of 3
        with path 2-&gt;3-&gt;4.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <p>
        <img
          src="https://assets.leetcode.com/uploads/2021/06/15/3.png"
          alt="Imge text"
        />
      </p>

      <pre>
        <strong>Input:</strong> order = [1,2,3,4]
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> The binary search tree has a depth of 4
        with path 1-&gt;2-&gt;3-&gt;4.
      </pre>

      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code class="language-plaintext highlighter-rouge">
            n == order.length
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= n &lt;= 10^5
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">order</code> is a
          permutation of integers between{" "}
          <code class="language-plaintext highlighter-rouge">1</code> and{" "}
          <code class="language-plaintext highlighter-rouge">n</code>.
        </li>
      </ul>
    </article>
  ),
  225: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Implement a last-in-first-out (LIFO) stack using only two queues. The
        implemented stack should support all the functions of a normal stack (
        <code>push</code>, <code>top</code>, <code>pop</code>, and{" "}
        <code>empty</code>).
      </p>

      <p>
        Implement the <code>MyStack</code> class:
      </p>

      <ul>
        <li>
          <code>void push(int x)</code> Pushes element x to the top of the
          stack.
        </li>
        <li>
          <code>int pop()</code> Removes the element on the top of the stack and
          returns it.
        </li>
        <li>
          <code>int top()</code> Returns the element on the top of the stack.
        </li>
        <li>
          <code>boolean empty()</code> Returns <code>true</code> if the stack is
          empty, <code>false</code> otherwise.
        </li>
      </ul>

      <p>
        <b>Notes:</b>
      </p>

      <ul>
        <li>
          You must use <strong>only</strong> standard operations of a queue,
          which means that only <code>push to back</code>,{" "}
          <code>peek/pop from front</code>, <code>size</code> and{" "}
          <code>is empty</code> operations are valid.
        </li>
        <li>
          Depending on your language, the queue may not be supported natively.
          You may simulate a queue using a list or deque (double-ended queue) as
          long as you use only a queue's standard operations.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["MyStack", "push", "push", "top", "pop", "empty"] <br />
        [[], [1], [2], [], [], []] <br />
        <strong>Output</strong> <br />
        [null, null, null, 2, 2, false] <br />
        <strong>Explanation</strong> <br />
        MyStack myStack = new MyStack(); <br />
        myStack.push(1); <br />
        myStack.push(2); <br />
        myStack.top(); // return 2 <br />
        myStack.pop(); // return 2 <br />
        myStack.empty(); // return False
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= x &lt;= 9</code>
        </li>
        <li>
          At most <code>100</code> calls will be made to <code>push</code>,{" "}
          <code>pop</code>, <code>top</code>, and <code>empty</code>.
        </li>
        <li>
          All the calls to <code>pop</code> and <code>top</code> are valid.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow-up:</strong> Can you implement the stack using only one
        queue?
      </p>
    </div>
  ),
  232: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Implement a first in first out (FIFO) queue using only two stacks. The
        implemented queue should support all the functions of a normal queue (
        <code>push</code>, <code>peek</code>, <code>pop</code>, and{" "}
        <code>empty</code>).
      </p>

      <p>
        Implement the <code>MyQueue</code> class:
      </p>

      <ul>
        <li>
          <code>void push(int x)</code> Pushes element x to the back of the
          queue.
        </li>
        <li>
          <code>int pop()</code> Removes the element from the front of the queue
          and returns it.
        </li>
        <li>
          <code>int peek()</code> Returns the element at the front of the queue.
        </li>
        <li>
          <code>boolean empty()</code> Returns <code>true</code> if the queue is
          empty, <code>false</code> otherwise.
        </li>
      </ul>

      <p>
        <strong>Notes:</strong>
      </p>

      <ul>
        <li>
          You must use <strong>only</strong> standard operations of a stack,
          which means only <code>push to top</code>,{" "}
          <code>peek/pop from top</code>, <code>size</code>, and{" "}
          <code>is empty</code> operations are valid.
        </li>
        <li>
          Depending on your language, the stack may not be supported natively.
          You may simulate a stack using a list or deque (double-ended queue) as
          long as you use only a stack's standard operations.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        ["MyQueue", "push", "push", "peek", "pop", "empty"] <br />
        [[], [1], [2], [], [], []] <br />
        <strong>Output</strong> <br />
        [null, null, null, 1, 1, false] <br />
        <strong>Explanation</strong>
        MyQueue myQueue = new MyQueue(); <br />
        myQueue.push(1); // queue is: [1] <br />
        myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue){" "}
        <br />
        myQueue.peek(); // return 1 <br />
        myQueue.pop(); // return 1, queue is [2] <br />
        myQueue.empty(); // return false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= x &lt;= 9</code>
        </li>
        <li>
          At most <code>100</code>&nbsp;calls will be made to <code>push</code>,{" "}
          <code>pop</code>, <code>peek</code>, and <code>empty</code>.
        </li>
        <li>
          All the calls to <code>pop</code> and <code>peek</code> are valid.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow-up:</strong> Can you implement the queue such that each
        operation is{" "}
        <strong>
          <a
            href="https://en.wikipedia.org/wiki/Amortized_analysis"
            target="_blank"
            rel="noreferrer"
          >
            amortized
          </a>
        </strong>{" "}
        <code>O(1)</code> time complexity? In other words, performing{" "}
        <code>n</code> operations will take overall <code>O(n)</code> time even
        if one of those operations may take longer.
      </p>
    </div>
  ),
  387: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>,{" "}
        <em>
          find the first non-repeating character in it and return its index
        </em>
        . If it does not exist, return <code>-1</code>.
      </p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <pre>
        <strong>Input:</strong> s = "leetcode"
        <br />
        <strong>Output:</strong> 0
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = "loveleetcode"
        <br />
        <strong>Output:</strong> 2
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = "aabb"
        <br />
        <strong>Output:</strong> -1
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of only lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  1352: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design an algorithm that accepts a stream of integers and retrieves the
        product of the last <code>k</code> integers of the stream.
      </p>

      <p>
        Implement the <code>ProductOfNumbers</code> class:
      </p>

      <ul>
        <li>
          <code>ProductOfNumbers()</code> Initializes the object with an empty
          stream.
        </li>
        <li>
          <code>void add(int num)</code> Appends the integer <code>num</code> to
          the stream.
        </li>
        <li>
          <code>int getProduct(int k)</code> Returns the product of the last{" "}
          <code>k</code> numbers in the current list. You can assume that always
          the current list has at least <code>k</code> numbers.
        </li>
      </ul>

      <p>
        The test cases are generated so that, at any time, the product of any
        contiguous sequence of numbers will fit into a single 32-bit integer
        without overflowing.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["ProductOfNumbers","add","add","add","add","add",
        <br />
        "getProduct","getProduct","getProduct","add","getProduct"]
        <br />
        [[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]
        <br />
        <strong>Output</strong>
        <br />
        [null,null,null,null,null,null,20,40,0,null,32] <br />
        <strong>Explanation</strong>
        <br />
        ProductOfNumbers productOfNumbers = new ProductOfNumbers();
        <br />
        productOfNumbers.add(3); // [3]
        <br />
        productOfNumbers.add(0); // [3,0]
        <br />
        productOfNumbers.add(2); // [3,0,2]
        <br />
        productOfNumbers.add(5); // [3,0,2,5]
        <br />
        productOfNumbers.add(4); // [3,0,2,5,4]
        <br />
        productOfNumbers.getProduct(2); // return 20. The product of the last 2
        numbers is 5 * 4 = 20
        <br />
        productOfNumbers.getProduct(3); // return 40. The product of the last 3
        numbers is 2 * 5 * 4 = 40
        <br />
        productOfNumbers.getProduct(4); // return 0. The product of the last 4
        numbers is 0 * 2 * 5 * 4 = 0<br />
        productOfNumbers.add(8); // [3,0,2,5,4,8]
        <br />
        productOfNumbers.getProduct(2); // return 32. The product of the last 2
        numbers is 4 * 8 = 32
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= num &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 4 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            4 * 10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>add</code> and <code>getProduct</code>.
        </li>
        <li>
          The product of the stream at any point in time will fit in a{" "}
          <strong>32-bit</strong> integer.
        </li>
      </ul>
    </div>
  ),
  1823: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> friends that are playing a game. The friends
        are sitting in a circle and are numbered from <code>1</code> to{" "}
        <code>n</code> in <strong>clockwise order</strong>. More formally,
        moving clockwise from the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        friend brings you to the{" "}
        <code>
          (i+1)<sup>th</sup>
        </code>{" "}
        friend for <code>1 &lt;= i &lt; n</code>, and moving clockwise from the{" "}
        <code>
          n<sup>th</sup>
        </code>{" "}
        friend brings you to the{" "}
        <code>
          1<sup>st</sup>
        </code>{" "}
        friend.
      </p>

      <p>The rules of the game are as follows:</p>

      <ul>
        <li>
          <strong>Start</strong> at the{" "}
          <code>
            1<sup>st</sup>
          </code>{" "}
          friend.
        </li>
        <li>
          Count the next <code>k</code> friends in the clockwise direction{" "}
          <strong>including</strong> the friend you started at. The counting
          wraps around the circle and may count some friends more than once.
        </li>
        <li>
          The last friend you counted leaves the circle and loses the game.
        </li>
        <li>
          If there is still more than one friend in the circle, go back to step{" "}
          <code>2</code> <strong>starting</strong> from the friend{" "}
          <strong>immediately clockwise</strong> of the friend who just lost and
          repeat.
        </li>
        <li>Else, the last friend in the circle wins the game.</li>
      </ul>

      <p>
        Given the number of friends, <code>n</code>, and an integer{" "}
        <code>k</code>, return <em>the winner of the game</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/25/ic234-q2-ex11.png"
        style={{ width: 500, height: 345 }}
      />
      <pre>
        <strong>Input:</strong> n = 5, k = 2 <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong>
        <br /> Here are the steps of the game: <br />1{")"} Start at friend 1.{" "}
        <br />2{")"} Count 2 friends clockwise, which are friends 1 and 2.{" "}
        <br />3{")"} Friend 2 leaves the circle. Next start is friend 3. <br />4
        {")"} Count 2 friends clockwise, which are friends 3 and 4. <br />5{")"}{" "}
        Friend 4 leaves the circle. Next start is friend 5. <br />6{")"} Count 2
        friends clockwise, which are friends 5 and 1. <br />7{")"} Friend 1
        leaves the circle. Next start is friend 3. <br />8{")"} Count 2 friends
        clockwise, which are friends 3 and 5. <br />9{")"} Friend 5 leaves the
        circle. Only friend 3 is left, so they are the winner.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 6, k = 5 <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> The friends leave in this order: 5, 4, 6,
        2, 3. The winner is friend 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= n &lt;= 500</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <p>Could you solve this problem in linear time with constant space?</p>
    </div>
  ),
  1429: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            You have a queue of integers, you need to retrieve the first unique
            integer in the queue.
          </p>

          <p>
            Implement the <code>FirstUnique</code>&nbsp;class:
          </p>

          <ul>
            <li>
              <code>FirstUnique(int[] nums)</code> Initializes the object with
              the numbers in the queue.
            </li>
            <li>
              <code>int showFirstUnique()</code>&nbsp;returns the value of{" "}
              <strong>the&nbsp;first unique</strong> integer of the queue, and
              returns <strong>-1</strong> if there is no such integer.
            </li>
            <li>
              <code>void add(int value)</code>&nbsp;insert
              value&nbsp;to&nbsp;the queue.
            </li>
          </ul>

          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>

          <pre>
            <b>Input: </b> <br />
            ["FirstUnique","showFirstUnique","add","showFirstUnique","add",
            <br />
            "showFirstUnique","add","showFirstUnique"] <br />
            [[[2,3,5]],[],[5],[],[2],[],[3],[]] <br />
            <b>Output: </b> <br />
            [null,2,null,2,null,3,null,-1] <br />
            <b>Explanation: </b> <br />
            FirstUnique firstUnique = new FirstUnique([2,3,5]); <br />
            firstUnique.showFirstUnique(); // return 2 <br />
            firstUnique.add(5); // the queue is now [2,3,5,5] <br />
            firstUnique.showFirstUnique(); // return 2 <br />
            firstUnique.add(2);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the
            queue is now [2,3,5,5,2] <br />
            firstUnique.showFirstUnique(); // return 3 <br />
            firstUnique.add(3);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the
            queue is now [2,3,5,5,2,3] <br />
            firstUnique.showFirstUnique(); // return -1
          </pre>

          <p>
            <strong>Example 2:</strong>
          </p>

          <pre>
            <b>Input: </b>
            ["FirstUnique","showFirstUnique","add","add","add",
            <br />
            "add","add","showFirstUnique"] <br />
            [[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]] <br />
            <b>Output: </b> <br />
            [null,-1,null,null,null,null,null,17] <br />
            <b>Explanation: </b> <br />
            FirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]); <br />
            firstUnique.showFirstUnique(); // return -1 <br />
            firstUnique.add(7); // the queue is now [7,7,7,7,7,7,7] <br />
            firstUnique.add(3);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the
            queue is now [7,7,7,7,7,7,7,3] <br />
            firstUnique.add(3);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the
            queue is now [7,7,7,7,7,7,7,3,3] <br />
            firstUnique.add(7);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the
            queue is now [7,7,7,7,7,7,7,3,3,7] <br />
            firstUnique.add(17);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// the
            queue is now [7,7,7,7,7,7,7,3,3,7,17] <br />
            firstUnique.showFirstUnique(); // return 17
          </pre>

          <p>
            <strong>Example 3:</strong>
          </p>

          <pre>
            <b>Input: </b>
            ["FirstUnique","showFirstUnique","add","showFirstUnique"] <br />
            [[[809]],[],[809],[]] <br />
            <b>Output: </b> <br />
            [null,809,null,-1] <br />
            <b>Explanation: </b> <br />
            FirstUnique firstUnique = new FirstUnique([809]); <br />
            firstUnique.showFirstUnique(); // return 809 <br />
            firstUnique.add(809); // the queue is now [809,809] <br />
            firstUnique.showFirstUnique(); // return -1
          </pre>

          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              <code>1 &lt;= nums.length &lt;= 10^5</code>
            </li>
            <li>
              <code>1 &lt;= nums[i] &lt;= 10^8</code>
            </li>
            <li>
              <code>1 &lt;= value &lt;= 10^8</code>
            </li>
            <li>
              At most <code>50000</code>&nbsp;calls will be made to
              <code>showFirstUnique</code>&nbsp;and <code>add</code>.
            </li>
          </ul>
        </div>
      </div>
    </div>
  ),
  2745: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given three integers <code>x</code>, <code>y</code>, and{" "}
        <code>z</code>.
      </p>

      <p>
        You have <code>x</code> strings equal to <code>"AA"</code>,{" "}
        <code>y</code> strings equal to <code>"BB"</code>, and <code>z</code>{" "}
        strings equal to <code>"AB"</code>. You want to choose some (possibly
        all or none) of these strings and concatenate them in some order to form
        a new string. This new string must not contain <code>"AAA"</code> or{" "}
        <code>"BBB"</code> as a substring.
      </p>

      <p>
        Return <em>the maximum possible length of the new string</em>.
      </p>

      <p>
        A <b>substring</b> is a contiguous <strong>non-empty</strong> sequence
        of characters within a string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 2, y = 5, z = 1 <br />
        <strong>Output:</strong> 12
        <br />
        <strong>Explanation: </strong>We can concactenate the strings "BB",
        "AA", "BB", "AA", "BB", and "AB" in that order. Then, our new string is
        "BBAABBAABBAB". <br />
        That string has length 12, and we can show that it is impossible to
        construct a string of longer length.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 3, y = 2, z = 2<br />
        <strong>Output:</strong> 14
        <br />
        <strong>Explanation:</strong> We can concactenate the strings "AB",
        "AB", "AA", "BB", "AA", "BB", and "AA" in that order. Then, our new
        string is "ABABAABBAABBAA". <br />
        That string has length 14, and we can show that it is impossible to
        construct a string of longer length.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= x, y, z &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  292: (
    <div class="elfjS" data-track-load="description_content">
      <p>You are playing the following Nim Game with your friend:</p>

      <ul>
        <li>Initially, there is a heap of stones on the table.</li>
        <li>
          You and your friend will alternate taking turns, and{" "}
          <strong>you go first</strong>.
        </li>
        <li>
          On each turn, the person whose turn it is will remove 1 to 3 stones
          from the heap.
        </li>
        <li>The one who removes the last stone is the winner.</li>
      </ul>

      <p>
        Given <code>n</code>, the number of stones in the heap, return{" "}
        <code>true</code>
        <em>
          {" "}
          if you can win the game assuming both you and your friend play
          optimally, otherwise return{" "}
        </em>
        <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> These are the possible outcomes: <br />
        1. You remove 1 stone. Your friend removes 3 stones, including the last
        stone. Your friend wins. <br />
        2. You remove 2 stones. Your friend removes 2 stones, including the last
        stone. Your friend wins. <br />
        3. You remove 3 stones. Your friend removes the last stone. Your friend
        wins. <br />
        In all outcomes, your friend wins.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  319: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> bulbs that are initially off. You first turn on
        all the bulbs, then&nbsp;you turn off every second bulb.
      </p>

      <p>
        On the third round, you toggle every third bulb (turning on if it's off
        or turning off if it's on). For the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        round, you toggle every <code>i</code> bulb. For the{" "}
        <code>
          n<sup>th</sup>
        </code>{" "}
        round, you only toggle the last bulb.
      </p>

      <p>
        Return{" "}
        <em>
          the number of bulbs that are on after <code>n</code> rounds
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/05/bulb.jpg"
        style={{ width: 421, height: 321 }}
      />
      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> At first, the three bulbs are [off, off,
        off].
        <br />
        After the first round, the three bulbs are [on, on, on].
        <br />
        After the second round, the three bulbs are [on, off, on].
        <br />
        After the third round, the three bulbs are [on, off, off]. <br />
        So you should return 1 because there is only one bulb is on.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 0<br />
        <strong>Output:</strong> 0
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1<br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2419: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> of size <code>n</code>.
      </p>

      <p>
        Consider a <strong>non-empty</strong> subarray from <code>nums</code>{" "}
        that has the <strong>maximum</strong> possible{" "}
        <strong>bitwise AND</strong>.
      </p>

      <ul>
        <li>
          In other words, let <code>k</code> be the maximum value of the bitwise
          AND of <strong>any</strong> subarray of <code>nums</code>. Then, only
          subarrays with a bitwise AND equal to <code>k</code> should be
          considered.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the length of the <strong>longest</strong> such subarray
        </em>
        .
      </p>

      <p>
        The bitwise AND of an array is the bitwise AND of all the numbers in it.
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous sequence of elements within
        an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,3,2,2] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        The maximum possible bitwise AND of a subarray is 3. <br />
        The longest subarray with that value is [3,3], so we return 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> <br />
        The maximum possible bitwise AND of a subarray is 4. <br />
        The longest subarray with that value is [4], so we return 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2568: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong>&nbsp;integer array{" "}
        <code>nums</code>.
      </p>

      <p>
        We say that an integer x is <strong>expressible</strong> from{" "}
        <code>nums</code> if there exist some integers{" "}
        <code>
          0 &lt;= index<sub>1</sub> &lt; index<sub>2</sub> &lt; ... &lt; index
          <sub>k</sub> &lt; nums.length
        </code>{" "}
        for which{" "}
        <code>
          nums[index<sub>1</sub>] | nums[index<sub>2</sub>] | ... | nums[index
          <sub>k</sub>] = x
        </code>
        . In other words, an integer is expressible if it can be written as the
        bitwise OR of some subsequence of <code>nums</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum <strong>positive non-zero integer</strong>&nbsp;that is
          not{" "}
        </em>
        <em>expressible from </em>
        <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1] <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> 1 and 2 are already present in the array.
        We know that 3 is expressible, since nums[0] | nums[1] = 2 | 1 = 3.
        Since 4 is not expressible, we return 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,3,2]
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> We can show that 1 is the smallest number
        that is not expressible.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1908: (
    <article role="main" class="blog-post">
      <p>
        Alice and Bob take turns playing a game with{" "}
        <strong>Alice starting first</strong>.
      </p>
      <p>
        In this game, there are n piles of stones. On each player’s turn, the
        player should remove any <strong>positive</strong> number of stones from
        a non-empty pile <strong>of his or her choice</strong>. The first player
        who cannot make a move loses, and the other player wins.
      </p>
      <p>
        Given an integer array{" "}
        <code class="language-plaintext highlighter-rouge">piles</code>, where{" "}
        <code class="language-plaintext highlighter-rouge">piles[i]</code> is
        the number of stones in the{" "}
        <code class="language-plaintext highlighter-rouge">i-th</code> pile,
        return{" "}
        <em>
          <code class="language-plaintext highlighter-rouge">true</code> if
          Alice wins, or{" "}
          <code class="language-plaintext highlighter-rouge">false</code> if Bob
          wins
        </em>
        .
      </p>
      <p>
        Both Alice and Bob play <strong>optimally</strong>.
      </p>
      <p>
        <strong>Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> piles = [1]
        <br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong> There is only one possible scenario:
        <ul>
          <li>
            On the first turn, Alice removes one stone from the first pile.
            piles = [0].
          </li>
          <li>
            On the second turn, there are no stones left for Bob to remove.
            Alice wins.
          </li>
        </ul>
      </pre>
      <p>
        <strong>Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> piles = [1,1]
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> It can be proven that Bob will always win.
        One possible scenario is:
        <ul>
          <li>
            On the first turn, Alice removes one stone from the first pile.
            piles = [0,1].
          </li>
          <li>
            On the second turn, Bob removes one stone from the second pile.
            piles = [0,0].
          </li>
          <li>
            On the third turn, there are no stones left for Alice to remove. Bob
            wins.
          </li>
        </ul>
      </pre>
      <p>
        <strong>Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> piles = [1,2,3]
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> It can be proven that Bob will always win.
        One possible scenario is:
        <ul>
          <li>
            On the first turn, Alice removes three stones from the third pile.
            piles = [1,2,0].
          </li>
          <li>
            On the second turn, Bob removes one stone from the second pile.
            piles = [1,1,0].
          </li>
          <li>
            On the third turn, Alice removes one stone from the first pile.
            piles = [0,1,0].
          </li>
          <li>
            On the fourth turn, Bob removes one stone from the second pile.
            piles = [0,0,0].
          </li>
          <li>
            On the fifth turn, there are no stones left for Alice to remove. Bob
            wins.
          </li>
        </ul>
      </pre>

      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code class="language-plaintext highlighter-rouge">
            n == piles.length
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= n &lt;= 7
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= piles[i] &lt;= 7
          </code>
        </li>
      </ul>
    </article>
  ),
  378: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>n x n</code> <code>matrix</code> where each of the rows
        and columns is sorted in ascending order, return <em>the</em>{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        <em>smallest element in the matrix</em>.
      </p>

      <p>
        Note that it is the{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        smallest element <strong>in the sorted order</strong>, not the{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        <strong>distinct</strong> element.
      </p>

      <p>
        You must find a solution with a memory complexity better than{" "}
        <code>
          O(n<sup>2</sup>)
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8{" "}
        <br />
        <strong>Output:</strong> 13
        <br />
        <strong>Explanation:</strong> The elements in the matrix are
        [1,5,9,10,11,12,13,
        <u>
          <strong>13</strong>
        </u>
        ,15], and the 8<sup>th</sup> smallest number is 13
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [[-5]], k = 1<br />
        <strong>Output:</strong> -5
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == matrix.length == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 300</code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          All the rows and columns of <code>matrix</code> are{" "}
          <strong>guaranteed</strong> to be sorted in{" "}
          <strong>non-decreasing order</strong>.
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= n<sup>2</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <ul>
        <li>
          Could you solve the problem with a constant memory (i.e.,{" "}
          <code>O(1)</code> memory complexity)?
        </li>
        <li>
          Could you solve the problem in <code>O(n)</code> time complexity? The
          solution may be too advanced for an interview but you may find reading{" "}
          <a
            href="http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf"
            target="_blank"
            rel="noreferrer"
          >
            this paper
          </a>{" "}
          fun.
        </li>
      </ul>
    </div>
  ),
  485: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a binary array <code>nums</code>, return{" "}
        <em>the maximum number of consecutive </em>
        <code>1</code>
        <em>'s in the array</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,0,1,1,1] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The first two digits or the last three
        digits are consecutive 1s. The maximum number of consecutive 1s is 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,0,1,1,0,1] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>nums[i]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  1337: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>m x n</code> binary matrix <code>mat</code> of{" "}
        <code>1</code>'s (representing soldiers) and <code>0</code>'s
        (representing civilians). The soldiers are positioned{" "}
        <strong>in front</strong> of the civilians. That is, all the{" "}
        <code>1</code>'s will appear to the <strong>left</strong> of all the{" "}
        <code>0</code>'s in each row.
      </p>

      <p>
        A row <code>i</code> is <strong>weaker</strong> than a row{" "}
        <code>j</code> if one of the following is true:
      </p>

      <ul>
        <li>
          The number of soldiers in row <code>i</code> is less than the number
          of soldiers in row <code>j</code>.
        </li>
        <li>
          Both rows have the same number of soldiers and <code>i &lt; j</code>.
        </li>
      </ul>

      <p>
        Return <em>the indices of the </em>
        <code>k</code>
        <em>
          {" "}
          <strong>weakest</strong> rows in the matrix ordered from weakest to
          strongest
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = <br />
        [[1,1,0,0,0], <br />
        [1,1,1,1,0], <br />
        [1,0,0,0,0], <br />
        [1,1,0,0,0], <br />
        [1,1,1,1,1]], k = 3 <br />
        <strong>Output:</strong> [2,0,3] <br />
        <strong>Explanation:</strong> <br />
        The number of soldiers in each row is: <br />
        - Row 0: 2 <br />
        - Row 1: 4 <br />
        - Row 2: 1 <br />
        - Row 3: 2 <br />
        - Row 4: 5 <br />
        The rows ordered from weakest to strongest are [2,0,3,1,4].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = <br />
        [[1,0,0,0], <br />
        [1,1,1,1], <br />
        [1,0,0,0], <br />
        [1,0,0,0]], k = 2 <br />
        <strong>Output:</strong> [0,2] <br />
        <strong>Explanation:</strong> <br />
        The number of soldiers in each row is: <br />
        - Row 0: 1 <br />
        - Row 1: 4 <br />
        - Row 2: 1 <br />
        - Row 3: 1 <br />
        The rows ordered from weakest to strongest are [0,2,3,1].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == mat.length</code>
        </li>
        <li>
          <code>n == mat[i].length</code>
        </li>
        <li>
          <code>2 &lt;= n, m &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= m</code>
        </li>
        <li>
          <code>matrix[i][j]</code> is either 0 or 1.
        </li>
      </ul>
    </div>
  ),
  1439: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>m x n</code> matrix <code>mat</code> that has its
        rows sorted in non-decreasing order and an integer <code>k</code>.
      </p>

      <p>
        You are allowed to choose <strong>exactly one element</strong> from each
        row to form an array.
      </p>

      <p>
        Return <em>the </em>
        <code>
          k<sup>th</sup>
        </code>
        <em> smallest array sum among all possible arrays</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = [[1,3,11],[2,4,6]], k = 5 <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> Choosing one element from each row, the
        first k smallest sum are: <br />
        [1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = [[1,3,11],[2,4,6]], k = 9 <br />
        <strong>Output:</strong> 17
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7 <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> Choosing one element from each row, the
        first k smallest sum are: <br />
        [1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the
        7th sum is 9.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == mat.length</code>
        </li>
        <li>
          <code>n == mat.length[i]</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 40</code>
        </li>
        <li>
          <code>1 &lt;= mat[i][j] &lt;= 5000</code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= min(200, n<sup>m</sup>)
          </code>
        </li>
        <li>
          <code>mat[i]</code> is a non-decreasing array.
        </li>
      </ul>
    </div>
  ),
  2231: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a positive integer <code>num</code>. You may swap any two
        digits of <code>num</code> that have the same <strong>parity</strong>{" "}
        (i.e. both odd digits or both even digits).
      </p>

      <p>
        Return
        <em>
          {" "}
          the <strong>largest</strong> possible value of{" "}
        </em>
        <code>num</code>
        <em>
          {" "}
          after <strong>any</strong> number of swaps.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 1234 <br />
        <strong>Output:</strong> 3412 <br />
        <strong>Explanation:</strong> Swap the digit 3 with the digit 1, this
        results in the number 3214.
        <br />
        Swap the digit 2 with the digit 4, this results in the number 3412.
        <br />
        Note that there may be other sequences of swaps but it can be shown that
        3412 is the largest possible number.
        <br />
        Also note that we may not swap the digit 4 with the digit 1 since they
        are of different parities.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 65875
        <br />
        <strong>Output:</strong> 87655
        <br />
        <strong>Explanation:</strong> Swap the digit 8 with the digit 6, this
        results in the number 85675.
        <br />
        Swap the first digit 5 with the digit 7, this results in the number
        87655.
        <br />
        Note that there may be other sequences of swaps but it can be shown that
        87655 is the largest possible number.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= num &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2233: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of non-negative integers <code>nums</code> and an
        integer <code>k</code>. In one operation, you may choose{" "}
        <strong>any</strong> element from <code>nums</code> and{" "}
        <strong>increment</strong> it by <code>1</code>.
      </p>

      <p>
        Return
        <em>
          {" "}
          the <strong>maximum</strong> <strong>product</strong> of{" "}
        </em>
        <code>nums</code>
        <em>
          {" "}
          after <strong>at most</strong>{" "}
        </em>
        <code>k</code>
        <em> operations. </em>Since the answer may be very large, return it{" "}
        <b>modulo</b>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        . Note that you should maximize the product before taking the
        modulo.&nbsp;
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,4], k = 5 <br />
        <strong>Output:</strong> 20 <br />
        <strong>Explanation:</strong> Increment the first number 5 times. <br />
        Now nums = [5, 4], with a product of 5 * 4 = 20. <br />
        It can be shown that 20 is maximum product possible, so we return 20.{" "}
        <br />
        Note that there may be other ways to increment nums to have the maximum
        product.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [6,3,3,2], k = 2 <br />
        <strong>Output:</strong> 216 <br />
        <strong>Explanation:</strong> Increment the second number 1 time and
        increment the fourth number 1 time. <br />
        Now nums = [6, 4, 3, 3], with a product of 6 * 4 * 3 * 3 = 216. <br />
        It can be shown that 216 is maximum product possible, so we return 216.{" "}
        <br />
        Note that there may be other ways to increment nums to have the maximum
        product.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length, k &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2333: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two positive <strong>0-indexed</strong> integer arrays{" "}
        <code>nums1</code> and <code>nums2</code>, both of length <code>n</code>
        .
      </p>

      <p>
        The <strong>sum of squared difference</strong> of arrays{" "}
        <code>nums1</code> and <code>nums2</code> is defined as the{" "}
        <strong>sum</strong> of{" "}
        <code>
          (nums1[i] - nums2[i])<sup>2</sup>
        </code>{" "}
        for each <code>0 &lt;= i &lt; n</code>.
      </p>

      <p>
        You are also given two positive integers <code>k1</code> and{" "}
        <code>k2</code>. You can modify any of the elements of{" "}
        <code>nums1</code> by <code>+1</code> or <code>-1</code> at most{" "}
        <code>k1</code> times. Similarly, you can modify any of the elements of{" "}
        <code>nums2</code> by <code>+1</code> or <code>-1</code> at most{" "}
        <code>k2</code> times.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum <strong>sum of squared difference</strong> after modifying
          array{" "}
        </em>
        <code>nums1</code>
        <em> at most </em>
        <code>k1</code>
        <em> times and modifying array </em>
        <code>nums2</code>
        <em> at most </em>
        <code>k2</code>
        <em> times</em>.
      </p>

      <p>
        <strong>Note</strong>: You are allowed to modify the array elements to
        become <strong>negative</strong> integers.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,2,3,4], nums2 = [2,10,20,19], k1 = 0,
        k2 = 0 <br />
        <strong>Output:</strong> 579
        <br />
        <strong>Explanation:</strong> The elements in nums1 and nums2 cannot be
        modified because k1 = 0 and k2 = 0. <br />
        The sum of square difference will be: (1 - 2)<sup>2 </sup>+ (2 - 10)
        <sup>2 </sup>+ (3 - 20)<sup>2 </sup>+ (4 - 19)<sup>2</sup>&nbsp;= 579.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,4,10,12], nums2 = [5,8,6,9], k1 = 1,
        k2 = 1<br />
        <strong>Output:</strong> 43
        <br />
        <strong>Explanation:</strong> One way to obtain the minimum sum of
        square difference is: <br />
        - Increase nums1[0] once.
        <br />
        - Increase nums2[2] once.
        <br />
        The minimum of the sum of square difference will be: <br />
        (2 - 5)<sup>2 </sup>+ (4 - 8)<sup>2 </sup>+ (10 - 7)<sup>2 </sup>+ (12 -
        9)<sup>2</sup>&nbsp;= 43.
        <br />
        Note that, there are other ways to obtain the minimum of the sum of
        square difference, but there is no way to obtain a sum smaller than 43.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums1.length == nums2.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums1[i], nums2[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= k1, k2 &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  499: (
    <article role="main" class="blog-post">
      <p>
        There is a ball in a <code>maze</code> with empty spaces (represented as{" "}
        <code>0</code>) and walls (represented as <code>1</code>). The ball can
        go through the empty spaces by rolling{" "}
        <strong>up, down, left or right</strong>, but it won't stop rolling
        until hitting a wall. When the ball stops, it could choose the next
        direction. There is also a hole in this maze. The ball will drop into
        the hole if it rolls onto the hole.
      </p>

      <p>
        Given the <code>m x n</code> <code>maze</code>, the ball's position{" "}
        <code>ball</code> and the hole's position <code>hole</code>, where{" "}
        <code>
          ball = [ball<sub>row</sub>, ball<sub>col</sub>]
        </code>{" "}
        and{" "}
        <code>
          hole = [hole<sub>row</sub>, hole<sub>col</sub>]
        </code>
        , return <em>a string </em>
        <code>instructions</code>
        <em>
          {" "}
          of all the instructions that the ball should follow to drop in the
          hole with the <strong>shortest distance</strong> possible
        </em>
        . If there are multiple valid instructions, return the{" "}
        <strong>lexicographically minimum</strong> one. If the ball can't drop
        in the hole, return <code>"impossible"</code>.
      </p>

      <p>
        If there is a way for the ball to drop in the hole, the answer{" "}
        <code>instructions</code> should contain the characters <code>'u'</code>{" "}
        (i.e., up), <code>'d'</code> (i.e., down), <code>'l'</code> (i.e.,
        left), and <code>'r'</code> (i.e., right).
      </p>

      <p>
        The <strong>distance</strong> is the number of{" "}
        <strong>empty spaces</strong> traveled by the ball from the start
        position (excluded) to the destination (included).
      </p>

      <p>
        You may assume that{" "}
        <strong>the borders of the maze are all walls</strong> (see examples).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0499.The%20Maze%20III/images/maze3-1-grid.jpg"
          style={{ width: 573, height: 573 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> maze = [[0,0,0,0,0],[1,1,0,0,1],
        <br />
        [0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]],
        <br /> ball = [4,3], hole = [0,1] <br />
        <strong>Output:</strong> "lul"
        <br />
        <strong>Explanation:</strong> There are two shortest ways for the ball
        to drop into the hole.
        <br />
        The first way is left -&gt; up -&gt; left, represented by "lul".
        <br />
        The second way is up -&gt; left, represented by 'ul'.
        <br />
        Both ways have shortest distance 6, but the first way is
        lexicographically smaller because 'l' &lt; 'u'. So the output is "lul".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0499.The%20Maze%20III/images/maze3-2-grid.jpg"
          style={{ width: 573, height: 573 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],
        <br />
        [0,1,0,0,1],[0,1,0,0,0]],
        <br /> ball = [4,3], hole = [3,0]
        <br />
        <strong>Output:</strong> "impossible"
        <br />
        <strong>Explanation:</strong> The ball cannot reach the hole.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> maze = [[0,0,0,0,0,0,0],[0,0,1,0,0,1,0],
        <br />
        [0,0,0,0,1,0,0],[0,0,0,0,0,0,1]], <br />
        ball = [0,4], hole = [3,5]
        <br />
        <strong>Output:</strong> "dldr"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == maze.length</code>
        </li>
        <li>
          <code>n == maze[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
        <li>
          <code>maze[i][j]</code> is <code>0</code> or <code>1</code>.
        </li>
        <li>
          <code>ball.length == 2</code>
        </li>
        <li>
          <code>hole.length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= ball<sub>row</sub>, hole<sub>row</sub> &lt;= m
          </code>
        </li>
        <li>
          <code>
            0 &lt;= ball<sub>col</sub>, hole<sub>col</sub> &lt;= n
          </code>
        </li>
        <li>
          Both the ball and the hole exist in an empty space, and they will not
          be in the same position initially.
        </li>
        <li>
          The maze contains <strong>at least 2 empty spaces</strong>.
        </li>
      </ul>
    </article>
  ),
  505: (
    <article role="main" class="blog-post">
      <p>
        There is a ball in a <code>maze</code> with empty spaces (represented as{" "}
        <code>0</code>) and walls (represented as <code>1</code>). The ball can
        go through the empty spaces by rolling{" "}
        <strong>up, down, left or right</strong>, but it won't stop rolling
        until hitting a wall. When the ball stops, it could choose the next
        direction.
      </p>

      <p>
        Given the <code>m x n</code> <code>maze</code>, the ball's{" "}
        <code>start</code> position and the <code>destination</code>, where{" "}
        <code>
          start = [start<sub>row</sub>, start<sub>col</sub>]
        </code>{" "}
        and{" "}
        <code>
          destination = [destination<sub>row</sub>, destination<sub>col</sub>]
        </code>
        , return{" "}
        <em>
          the shortest <strong>distance</strong> for the ball to stop at the
          destination
        </em>
        . If the ball cannot stop at <code>destination</code>, return{" "}
        <code>-1</code>.
      </p>

      <p>
        The <strong>distance</strong> is the number of{" "}
        <strong>empty spaces</strong> traveled by the ball from the start
        position (excluded) to the destination (included).
      </p>

      <p>
        You may assume that{" "}
        <strong>the borders of the maze are all walls</strong> (see examples).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0505.The%20Maze%20II/images/maze1-1-grid.jpg"
          style={{ width: 573, height: 573 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> maze = [[0,0,1,0,0],[0,0,0,0,0], <br />
        [0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], <br /> start = [0,4], destination
        = [4,4] <br />
        <strong>Output:</strong> 12 <br />
        <strong>Explanation:</strong> One possible way is : left -&gt; down
        -&gt; left -&gt; down -&gt; right -&gt; down -&gt; right. <br />
        The length of the path is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0505.The%20Maze%20II/images/maze1-2-grid.jpg"
          style={{ width: 573, height: 573 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> maze = [[0,0,1,0,0],[0,0,0,0,0], <br />
        [0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], <br /> start = [0,4], destination
        = [3,2] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> There is no way for the ball to stop at
        the destination. Notice that you can pass through the destination but
        you cannot stop there.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> maze = [[0,0,0,0,0],[1,1,0,0,1], <br />
        [0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], <br /> start = [4,3], destination
        = [0,1] <br />
        <strong>Output:</strong> -1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == maze.length</code>
        </li>
        <li>
          <code>n == maze[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
        <li>
          <code>maze[i][j]</code> is <code>0</code> or <code>1</code>.
        </li>
        <li>
          <code>start.length == 2</code>
        </li>
        <li>
          <code>destination.length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= start<sub>row</sub>, destination<sub>row</sub> &lt; m
          </code>
        </li>
        <li>
          <code>
            0 &lt;= start<sub>col</sub>, destination<sub>col</sub> &lt; n
          </code>
        </li>
        <li>
          Both the ball and the destination exist in an empty space, and they
          will not be in the same position initially.
        </li>
        <li>
          The maze contains <strong>at least 2 empty spaces</strong>.
        </li>
      </ul>
    </article>
  ),
  316: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, remove duplicate letters so that every
        letter appears once and only once. You must make sure your result is{" "}
        <span
          data-keyword="lexicographically-smaller-string"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rt:"
              >
                <div>
                  <strong>the smallest in lexicographical order</strong>
                </div>
              </div>
            </div>
          </div>
        </span>{" "}
        among all possible results.
      </p>

      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "bcabc" <br />
        <strong>Output:</strong> "abc"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "cbacdcbc"
        <br />
        <strong>Output:</strong> "acdb"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Note:</strong> This question is the same as 1081:{" "}
        <a
          href="https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/"
          target="_blank"
          rel="noreferrer"
        >
          https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/
        </a>
      </p>
    </div>
  ),
  321: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two integer arrays <code>nums1</code> and{" "}
        <code>nums2</code> of lengths <code>m</code> and <code>n</code>{" "}
        respectively. <code>nums1</code> and <code>nums2</code> represent the
        digits of two numbers. You are also given an integer <code>k</code>.
      </p>

      <p>
        Create the maximum number of length <code>k &lt;= m + n</code> from
        digits of the two numbers. The relative order of the digits from the
        same array must be preserved.
      </p>

      <p>
        Return an array of the <code>k</code> digits representing the answer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5{" "}
        <br />
        <strong>Output:</strong> [9,8,6,5,3]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [6,7], nums2 = [6,0,4], k = 5<br />
        <strong>Output:</strong> [6,7,6,0,4]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [3,9], nums2 = [8,9], k = 3<br />
        <strong>Output:</strong> [9,8,9]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == nums1.length</code>
        </li>
        <li>
          <code>n == nums2.length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 500</code>
        </li>
        <li>
          <code>0 &lt;= nums1[i], nums2[i] &lt;= 9</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= m + n</code>
        </li>
      </ul>
    </div>
  ),
  402: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given string num representing a non-negative integer <code>num</code>,
        and an integer <code>k</code>, return{" "}
        <em>the smallest possible integer after removing</em> <code>k</code>{" "}
        <em>digits from</em> <code>num</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = "1432219", k = 3 <br />
        <strong>Output:</strong> "1219" <br />
        <strong>Explanation:</strong> Remove the three digits 4, 3, and 2 to
        form the new number 1219 which is the smallest.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = "10200", k = 1 <br />
        <strong>Output:</strong> "200" <br />
        <strong>Explanation:</strong> Remove the leading 1 and the number is
        200. Note that the output must not contain leading zeroes.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = "10", k = 2 <br />
        <strong>Output:</strong> "0" <br />
        <strong>Explanation:</strong> Remove all the digits from the number and
        it is left with nothing which is 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= k &lt;= num.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>num</code> consists of only digits.
        </li>
        <li>
          <code>num</code> does not have any leading zeros except for the zero
          itself.
        </li>
      </ul>
    </div>
  ),
  456: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of <code>n</code> integers <code>nums</code>, a{" "}
        <strong>132 pattern</strong> is a subsequence of three integers{" "}
        <code>nums[i]</code>, <code>nums[j]</code> and <code>nums[k]</code> such
        that <code>i &lt; j &lt; k</code> and{" "}
        <code>nums[i] &lt; nums[k] &lt; nums[j]</code>.
      </p>

      <p>
        Return <code>true</code>
        <em>
          {" "}
          if there is a <strong>132 pattern</strong> in{" "}
        </em>
        <code>nums</code>
        <em>, otherwise, return </em>
        <code>false</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4] <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> There is no 132 pattern in the sequence.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,1,4,2]
        <br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong> There is a 132 pattern in the sequence:
        [1, 4, 2].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-1,3,2,0]
        <br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong> There are three 132 patterns in the
        sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 2 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  496: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>next greater element</strong> of some element <code>x</code>{" "}
        in an array is the <strong>first greater</strong> element that is{" "}
        <strong>to the right</strong> of <code>x</code> in the same array.
      </p>
      <p>
        You are given two <strong>distinct 0-indexed</strong> integer arrays{" "}
        <code>nums1</code> and <code>nums2</code>, where <code>nums1</code> is a
        subset of <code>nums2</code>.
      </p>
      <p>
        For each <code>0 &lt;= i &lt; nums1.length</code>, find the index{" "}
        <code>j</code> such that <code>nums1[i] == nums2[j]</code> and determine
        the <strong>next greater element</strong> of <code>nums2[j]</code> in{" "}
        <code>nums2</code>. If there is no next greater element, then the answer
        for this query is <code>-1</code>.
      </p>
      <p>
        Return <em>an array </em>
        <code>ans</code>
        <em> of length </em>
        <code>nums1.length</code>
        <em> such that </em>
        <code>ans[i]</code>
        <em>
          {" "}
          is the <strong>next greater element</strong> as described above.
        </em>
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums1 = [4,1,2], nums2 = [1,3,4,2] <br />
        <strong>Output:</strong> [-1,3,-1] <br />
        <strong>Explanation:</strong> The next greater element for each value of
        nums1 is as follows: <br />- 4 is underlined in nums2 = [1,3,<u>4</u>
        ,2]. There is no next greater element, so the answer is -1. <br />- 1 is
        underlined in nums2 = [<u>1</u>,3,4,2]. The next greater element is 3.{" "}
        <br />- 2 is underlined in nums2 = [1,3,4,<u>2</u>]. There is no next
        greater element, so the answer is -1.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums1 = [2,4], nums2 = [1,2,3,4] <br />
        <strong>Output:</strong> [3,-1] <br />
        <strong>Explanation:</strong> The next greater element for each value of
        nums1 is as follows: <br />- 2 is underlined in nums2 = [1,<u>2</u>
        ,3,4]. The next greater element is 3. <br />- 4 is underlined in nums2 =
        [1,2,3,<u>4</u>]. There is no next greater element, so the answer is -1.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            0 &lt;= nums1[i], nums2[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          All integers in <code>nums1</code> and <code>nums2</code> are{" "}
          <strong>unique</strong>.
        </li>
        <li>
          All the integers of <code>nums1</code> also appear in{" "}
          <code>nums2</code>.
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you find an{" "}
      <code>O(nums1.length + nums2.length)</code> solution?
    </div>
  ),
  503: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a circular integer array <code>nums</code> (i.e., the next element
        of <code>nums[nums.length - 1]</code> is <code>nums[0]</code>), return{" "}
        <em>
          the <strong>next greater number</strong> for every element in
        </em>{" "}
        <code>nums</code>.
      </p>

      <p>
        The <strong>next greater number</strong> of a number <code>x</code> is
        the first greater number to its traversing-order next in the array,
        which means you could search circularly to find its next greater number.
        If it doesn't exist, return <code>-1</code> for this number.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,1] <br />
        <strong>Output:</strong> [2,-1,2] <br />
        Explanation: The first 1's next greater number is 2; <br />
        The number 2 can't find next greater number. <br />
        The second 1's next greater number needs to search circularly, which is
        also 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,3]
        <br />
        <strong>Output:</strong> [2,3,4,-1,4]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  768: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>arr</code>.
      </p>

      <p>
        We split <code>arr</code> into some number of <strong>chunks</strong>{" "}
        (i.e., partitions), and individually sort each chunk. After
        concatenating them, the result should equal the sorted array.
      </p>

      <p>
        Return{" "}
        <em>the largest number of chunks we can make to sort the array</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [5,4,3,2,1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> <br />
        Splitting into two or more chunks will not return the required result.{" "}
        <br />
        For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1,
        2, 3], which isn't sorted.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [2,1,3,4,4] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> <br />
        We can split into two chunks, such as [2, 1], [3, 4, 4]. <br />
        However, splitting into [2, 1], [3], [4], [4] is the highest number of
        chunks possible.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= arr.length &lt;= 2000</code>
        </li>
        <li>
          <code>
            0 &lt;= arr[i] &lt;= 10<sup>8</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  769: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>arr</code> of length <code>n</code>{" "}
        that represents a permutation of the integers in the range{" "}
        <code>[0, n - 1]</code>.
      </p>

      <p>
        We split <code>arr</code> into some number of <strong>chunks</strong>{" "}
        (i.e., partitions), and individually sort each chunk. After
        concatenating them, the result should equal the sorted array.
      </p>

      <p>
        Return{" "}
        <em>the largest number of chunks we can make to sort the array</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [4,3,2,1,0] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> <br />
        Splitting into two or more chunks will not return the required result.{" "}
        <br />
        For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0,
        1, 2], which isn't sorted.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,0,2,3,4] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> <br />
        We can split into two chunks, such as [1, 0], [2, 3, 4]. <br />
        However, splitting into [1, 0], [2], [3], [4] is the highest number of
        chunks possible.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == arr.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 10</code>
        </li>
        <li>
          <code>0 &lt;= arr[i] &lt; n</code>
        </li>
        <li>
          All the elements of <code>arr</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  901: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design an algorithm that collects daily price quotes for some stock and
        returns <strong>the span</strong> of that stock's price for the current
        day.
      </p>

      <p>
        The <strong>span</strong> of the stock's price in one day is the maximum
        number of consecutive days (starting from that day and going backward)
        for which the stock price was less than or equal to the price of that
        day.
      </p>

      <ul>
        <li>
          For example, if the prices of the stock in the last four days is{" "}
          <code>[7,2,1,2]</code> and the price of the stock today is{" "}
          <code>2</code>, then the span of today is <code>4</code> because
          starting from today, the price of the stock was less than or equal{" "}
          <code>2</code> for <code>4</code> consecutive days.
        </li>
        <li>
          Also, if the prices of the stock in the last four days is{" "}
          <code>[7,34,1,2]</code> and the price of the stock today is{" "}
          <code>8</code>, then the span of today is <code>3</code> because
          starting from today, the price of the stock was less than or equal{" "}
          <code>8</code> for <code>3</code> consecutive days.
        </li>
      </ul>

      <p>
        Implement the <code>StockSpanner</code> class:
      </p>

      <ul>
        <li>
          <code>StockSpanner()</code> Initializes the object of the class.
        </li>
        <li>
          <code>int next(int price)</code> Returns the <strong>span</strong> of
          the stock's price given that today's price is <code>price</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["StockSpanner", "next", "next", "next", "next", "next", "next", "next"]{" "}
        <br />
        <br />
        [[], [100], [80], [60], [70], [60], [75], [85]] <br />
        <strong>Output</strong> <br />
        [null, 1, 1, 1, 2, 1, 4, 6] <br />
        <strong>Explanation</strong> <br />
        StockSpanner stockSpanner = new StockSpanner(); <br />
        stockSpanner.next(100); // return 1 <br />
        stockSpanner.next(80); // return 1 <br />
        stockSpanner.next(60); // return 1 <br />
        stockSpanner.next(70); // return 2 <br />
        stockSpanner.next(60); // return 1 <br />
        stockSpanner.next(75); // return 4, because the last 4 prices (including
        today's price of 75) were less than or equal to today's price. <br />
        stockSpanner.next(85); // return 6
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= price &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>next</code>.
        </li>
      </ul>
    </div>
  ),
  907: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers arr, find the sum of <code>min(b)</code>,
        where <code>b</code> ranges over every (contiguous) subarray of{" "}
        <code>arr</code>. Since the answer may be large, return the answer{" "}
        <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [3,1,2,4] <br />
        <strong>Output:</strong> 17
        <br />
        <strong>Explanation:</strong> <br />
        Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4],
        [3,1,2,4]. <br />
        Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1. Sum is 17.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [11,81,94,43,3]
        <br />
        <strong>Output:</strong> 444
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= arr.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= arr[i] &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1063: (
    <div class="markdown-body div-width">
      <p>
        Given an array <code>A</code> of integers, return the number of{" "}
        <strong>non-empty continuous subarrays</strong> that satisfy the
        following condition:
      </p>

      <p>
        The leftmost element of the subarray is not larger than other elements
        in the subarray.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-1-1">[1,4,2,5,3]</span> <br />
        <strong>Output: </strong>
        <span id="example-output-1">11</span>
        <br />
        <strong>Explanation: </strong>There are 11 valid subarrays:
        [1],[4],[2],[5],[3],[1,4],[2,5],[1,4,2],[2,5,3],[1,4,2,5],[1,4,2,5,3].
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-2-1">[3,2,1]</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-2">3</span>
        <br />
        <strong>Explanation: </strong>The 3 valid subarrays are: [3],[2],[1].
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input: </strong>
        <span id="example-input-3-1">[2,2,2]</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-3">6</span>
        <br />
        <strong>Explanation: </strong>There are 6 valid subarrays:
        [2],[2],[2],[2,2],[2,2],[2,2,2].
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= A.length &lt;= 50000</code>
        </li>
        <li>
          <code>0 &lt;= A[i] &lt;= 100000</code>
        </li>
      </ul>
    </div>
  ),
  1019: (
    <div class="markdown-body div-width">
      <p>
        We are given a linked list with&nbsp;<code>head</code>&nbsp;as the first
        node.&nbsp; Let's number the&nbsp;nodes in the list:{" "}
        <code>node_1, node_2, node_3, ...</code> etc.
      </p>

      <p>
        Each node may have a <em>next larger</em> <strong>value</strong>: for{" "}
        <code>node_i</code>,&nbsp;<code>next_larger(node_i)</code>&nbsp;is the{" "}
        <code>node_j.val</code> such that <code>j &gt; i</code>,{" "}
        <code>node_j.val &gt; node_i.val</code>, and <code>j</code> is the
        smallest possible choice.&nbsp; If such a<code>j</code>&nbsp;does not
        exist, the next larger value is <code>0</code>.
      </p>

      <p>
        Return an array of integers&nbsp;<code>answer</code>, where{" "}
        <code>{`answer[i] = next_larger(node_{i + 1})`}</code>.
      </p>

      <p>
        Note that in the example <strong>inputs</strong>&nbsp;(not outputs)
        below, arrays such as
        <code>[2,1,5]</code>&nbsp;represent the serialization of a linked list
        with a head node value of 2, second node value of 1, and third node
        value of 5.
      </p>

      <p>&nbsp;</p>

      <div>
        <p>
          <strong>Example 1:</strong>
        </p>

        <pre>
          <strong>Input: </strong>
          <span id="example-input-1-1">[2,1,5]</span> <br />
          <strong>Output: </strong>
          <span id="example-output-1">[5,5,0]</span>
        </pre>

        <div>
          <p>
            <strong>Example 2:</strong>
          </p>

          <pre>
            <strong>Input: </strong>
            <span id="example-input-2-1">[2,7,4,3,5]</span> <br />
            <strong>Output: </strong>
            <span id="example-output-2">[7,0,5,5,0]</span>
          </pre>

          <div>
            <p>
              <strong>Example 3:</strong>
            </p>

            <pre>
              <strong>Input: </strong>
              <span id="example-input-3-1">[1,7,5,1,9,2,5,1]</span> <br />
              <strong>Output: </strong>
              <span id="example-output-3">[7,9,9,9,0,5,0,0]</span>
            </pre>

            <p>&nbsp;</p>

            <p>
              <strong>
                <span>Note:</span>
              </strong>
            </p>

            <ul>
              <li>
                <code>
                  <span>1 &lt;= node.val&nbsp;&lt;= 10^9</span>
                </code>
                <span>&nbsp;for each node in the linked list.</span>
              </li>
              <li>
                The given list has length in the range <code>[0, 10000]</code>.
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  ),
  1130: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>arr</code> of positive integers, consider all
        binary trees such that:
      </p>

      <ul>
        <li>
          Each node has either <code>0</code> or <code>2</code> children;
        </li>
        <li>
          The values of <code>arr</code> correspond to the values of each{" "}
          <strong>leaf</strong> in an in-order traversal of the tree.
        </li>
        <li>
          The value of each non-leaf node is equal to the product of the largest
          leaf value in its left and right subtree, respectively.
        </li>
      </ul>

      <p>
        Among all possible binary trees considered, return{" "}
        <em>the smallest possible sum of the values of each non-leaf node</em>.
        It is guaranteed this sum fits into a <strong>32-bit</strong> integer.
      </p>

      <p>
        A node is a <strong>leaf</strong> if and only if it has zero children.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/10/tree1.jpg"
        style={{ width: 500, height: 169 }}
      />
      <pre>
        <strong>Input:</strong> arr = [6,2,4] <br />
        <strong>Output:</strong> 32
        <br />
        <strong>Explanation:</strong> There are two possible trees shown. The
        first has a non-leaf node sum 36, and the second has non-leaf node sum
        32.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/10/tree2.jpg"
        style={{ width: 224, height: 145 }}
      />
      <pre>
        <strong>Input:</strong> arr = [4,11]
        <br />
        <strong>Output:</strong> 44
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= arr.length &lt;= 40</code>
        </li>
        <li>
          <code>1 &lt;= arr[i] &lt;= 15</code>
        </li>
        <li>
          It is guaranteed that the answer fits into a <strong>32-bit</strong>{" "}
          signed integer (i.e., it is less than 2<sup>31</sup>).
        </li>
      </ul>
    </div>
  ),
  1504: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> binary matrix <code>mat</code>,{" "}
        <em>
          return the number of <strong>submatrices</strong> that have all ones
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/10/27/ones1-grid.jpg"
        style={{ width: 244, height: 245 }}
      />
      <pre>
        <strong>Input:</strong> mat = [[1,0,1],[1,1,0],[1,1,0]] <br />
        <strong>Output:</strong> 13
        <br />
        <strong>Explanation:</strong> <br />
        There are 6 rectangles of side 1x1.
        <br />
        There are 2 rectangles of side 1x2.
        <br />
        There are 3 rectangles of side 2x1.
        <br />
        There is 1 rectangle of side 2x2. <br />
        There is 1 rectangle of side 3x1.
        <br />
        Total number of rectangles = 6 + 2 + 3 + 1 + 1 = 13.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/10/27/ones2-grid.jpg"
        style={{ width: 324, height: 245 }}
      />
      <pre>
        <strong>Input:</strong> mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]]
        <br />
        <strong>Output:</strong> 24
        <br />
        <strong>Explanation:</strong> <br />
        There are 8 rectangles of side 1x1.
        <br />
        There are 5 rectangles of side 1x2.
        <br />
        There are 2 rectangles of side 1x3. <br />
        There are 4 rectangles of side 2x1.
        <br />
        There are 2 rectangles of side 2x2. <br />
        There are 2 rectangles of side 3x1. <br />
        There is 1 rectangle of side 3x2. <br />
        Total number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= m, n &lt;= 150</code>
        </li>
        <li>
          <code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  1574: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>arr</code>, remove a subarray (can be
        empty) from <code>arr</code> such that the remaining elements in{" "}
        <code>arr</code> are <strong>non-decreasing</strong>.
      </p>

      <p>
        Return <em>the length of the shortest subarray to remove</em>.
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous subsequence of the array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,2,3,10,4,2,3,5]
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The shortest subarray we can remove is
        [10,4,2] of length 3. The remaining elements after that will be
        [1,2,3,3,5] which are sorted. Another correct solution is to remove the
        subarray [3,10,4].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [5,4,3,2,1] <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> Since the array is strictly decreasing, we
        can only keep a single element. Therefore we need to remove a subarray
        of length 4, either [5,4,3,2] or [4,3,2,1].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,2,3]
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> The array is already non-decreasing. We do
        not need to remove any elements.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= arr.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= arr[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1793: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of integers <code>nums</code>{" "}
        <strong>(0-indexed)</strong> and an integer <code>k</code>.
      </p>

      <p>
        The <strong>score</strong> of a subarray <code>(i, j)</code> is defined
        as <code>min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)</code>. A{" "}
        <strong>good</strong> subarray is a subarray where{" "}
        <code>i &lt;= k &lt;= j</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the maximum possible <strong>score</strong> of a <strong>good</strong>{" "}
          subarray.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,4,3,7,4,5], k = 3 <br />
        <strong>Output:</strong> 15
        <br />
        <strong>Explanation:</strong> The optimal subarray is (1, 5) with a
        score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,5,4,5,4,1,1,1], k = 0<br />
        <strong>Output:</strong> 20
        <br />
        <strong>Explanation:</strong> The optimal subarray is (0, 4) with a
        score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= k &lt; nums.length</code>
        </li>
      </ul>
    </div>
  ),
  1856: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>min-product</strong> of an array is equal to the{" "}
        <strong>minimum value</strong> in the array{" "}
        <strong>multiplied by</strong> the array's <strong>sum</strong>.
      </p>

      <ul>
        <li>
          For example, the array <code>[3,2,5]</code> (minimum value is{" "}
          <code>2</code>) has a min-product of{" "}
          <code>2 * (3+2+5) = 2 * 10 = 20</code>.
        </li>
      </ul>

      <p>
        Given an array of integers <code>nums</code>, return{" "}
        <em>
          the <strong>maximum min-product</strong> of any{" "}
          <strong>non-empty subarray</strong> of{" "}
        </em>
        <code>nums</code>. Since the answer may be large, return it{" "}
        <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>
        Note that the min-product should be maximized <strong>before</strong>{" "}
        performing the modulo operation. Testcases are generated such that the
        maximum min-product <strong>without</strong> modulo will fit in a{" "}
        <strong>64-bit signed integer</strong>.
      </p>

      <p>
        A <strong>subarray</strong> is a <strong>contiguous</strong> part of an
        array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,<u>2,3,2</u>] <br />
        <strong>Output:</strong> 14 <br />
        <strong>Explanation:</strong> The maximum min-product is achieved with
        the subarray [2,3,2] (minimum value is 2). <br />2 * (2+3+2) = 2 * 7 =
        14.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,<u>3,3</u>,1,2] <br />
        <strong>Output:</strong> 18 <br />
        <strong>Explanation:</strong> The maximum min-product is achieved with
        the subarray [3,3] (minimum value is 3). <br />3 * (3+3) = 3 * 6 = 18.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,1,<u>5,6,4</u>,2] <br />
        <strong>Output:</strong> 60 <br />
        <strong>Explanation:</strong> The maximum min-product is achieved with
        the subarray [5,6,4] (minimum value is 4). <br />4 * (5+6+4) = 4 * 15 =
        60.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>7</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1944: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> people standing in a queue, and they numbered
        from <code>0</code> to <code>n - 1</code> in{" "}
        <strong>left to right</strong> order. You are given an array{" "}
        <code>heights</code> of <strong>distinct</strong> integers where{" "}
        <code>heights[i]</code> represents the height of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        person.
      </p>
      <p>
        A person can <strong>see</strong> another person to their right in the
        queue if everybody in between is <strong>shorter</strong> than both of
        them. More formally, the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        person can see the{" "}
        <code>
          j<sup>th</sup>
        </code>{" "}
        person if <code>i &lt; j</code> and{" "}
        <code>
          min(heights[i], heights[j]) &gt; max(heights[i+1], heights[i+2], ...,
          heights[j-1])
        </code>
        .
      </p>
      <p>
        Return <em>an array </em>
        <code>answer</code>
        <em> of length </em>
        <code>n</code>
        <em> where </em>
        <code>answer[i]</code>
        <em>
          {" "}
          is the <strong>number of people</strong> the{" "}
        </em>
        <code>
          i<sup>th</sup>
        </code>
        <em>
          {" "}
          person can <strong>see</strong> to their right in the queue
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/05/29/queue-plane.jpg"
          style={{ width: 600, height: 247 }}
        />
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> heights = [10,6,8,5,11,9]
        <br />
        <strong>Output:</strong> [3,1,2,1,1,0]
        <br />
        <strong>Explanation:</strong>
        <br />
        Person 0 can see person 1, 2, and 4.
        <br />
        Person 1 can see person 2.
        <br />
        Person 2 can see person 3 and 4.
        <br />
        Person 3 can see person 4.
        <br />
        Person 4 can see person 5.
        <br />
        Person 5 can see no one since nobody is to the right of them.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> heights = [5,1,2,3,10]
        <br />
        <strong>Output:</strong> [4,1,1,1,0]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>n == heights.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= heights[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          All the values of <code>heights</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  2104: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>. The{" "}
        <strong>range</strong> of a subarray of <code>nums</code> is the
        difference between the largest and smallest element in the subarray.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>sum of all</strong> subarray ranges of{" "}
        </em>
        <code>nums</code>
        <em>.</em>
      </p>

      <p>
        A subarray is a contiguous <strong>non-empty</strong> sequence of
        elements within an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The 6 subarrays of nums are the following:{" "}
        <br />
        [1], range = largest - smallest = 1 - 1 = 0 <br />
        [2], range = 2 - 2 = 0 <br />
        [3], range = 3 - 3 = 0 <br />
        [1,2], range = 2 - 1 = 1 <br />
        [2,3], range = 3 - 2 = 1 <br />
        [1,2,3], range = 3 - 1 = 2 <br />
        So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,3] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The 6 subarrays of nums are the following:{" "}
        <br />
        [1], range = largest - smallest = 1 - 1 = 0 <br />
        [3], range = 3 - 3 = 0 <br />
        [3], range = 3 - 3 = 0 <br />
        [1,3], range = 3 - 1 = 2 <br />
        [3,3], range = 3 - 3 = 0 <br />
        [1,3,3], range = 3 - 1 = 2 <br />
        So the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,-2,-3,4,1] <br />
        <strong>Output:</strong> 59 <br />
        <strong>Explanation:</strong> The sum of all subarray ranges of nums is
        59.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow-up:</strong> Could you find a solution with{" "}
        <code>O(n)</code> time complexity?
      </p>
    </div>
  ),
  2454: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array of non-negative
        integers <code>nums</code>. For each integer in <code>nums</code>, you
        must find its respective <strong>second greater</strong> integer.
      </p>

      <p>
        The <strong>second greater</strong> integer of <code>nums[i]</code> is{" "}
        <code>nums[j]</code> such that:
      </p>

      <ul>
        <li>
          <code>j &gt; i</code>
        </li>
        <li>
          <code>nums[j] &gt; nums[i]</code>
        </li>
        <li>
          There exists <strong>exactly one</strong> index <code>k</code> such
          that <code>nums[k] &gt; nums[i]</code> and{" "}
          <code>i &lt; k &lt; j</code>.
        </li>
      </ul>

      <p>
        If there is no such <code>nums[j]</code>, the second greater integer is
        considered to be <code>-1</code>.
      </p>

      <ul>
        <li>
          For example, in the array <code>[1, 2, 4, 3]</code>, the second
          greater integer of <code>1</code> is <code>4</code>, <code>2</code> is{" "}
          <code>3</code>,&nbsp;and that of <code>3</code> and <code>4</code> is{" "}
          <code>-1</code>.
        </li>
      </ul>

      <p>
        Return<em> an integer array </em>
        <code>answer</code>
        <em>, where </em>
        <code>answer[i]</code>
        <em> is the second greater integer of </em>
        <code>nums[i]</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,4,0,9,6] <br />
        <strong>Output:</strong> [9,6,6,-1,-1]
        <br />
        <strong>Explanation:</strong>
        <br />
        0th index: 4 is the first integer greater than 2, and 9 is the second
        integer greater than 2, to the right of 2.
        <br />
        1st index: 9 is the first, and 6 is the second integer greater than 4,
        to the right of 4.
        <br />
        2nd index: 9 is the first, and 6 is the second integer greater than 0,
        to the right of 0.
        <br />
        3rd index: There is no integer greater than 9 to its right, so the
        second greater integer is considered to be -1.
        <br />
        4th index: There is no integer greater than 6 to its right, so the
        second greater integer is considered to be -1.
        <br />
        Thus, we return [9,6,6,-1,-1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,3]
        <br />
        <strong>Output:</strong> [-1,-1]
        <br />
        <strong>Explanation:</strong>
        <br />
        We return [-1,-1] since neither integer has any integer greater than it.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3113: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of <strong>positive</strong> integers{" "}
        <code>nums</code>.
      </p>

      <p>
        Return the number of{" "}
        <span
          data-keyword="subarray-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rgc:"
              >
                <div>subarrays</div>
              </div>
            </div>
          </div>
        </span>{" "}
        of <code>nums</code>, where the <strong>first</strong> and the{" "}
        <strong>last</strong> elements of the subarray are <em>equal</em> to the{" "}
        <strong>largest</strong> element in the subarray.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">nums = [1,4,3,3,2]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">6</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        There are 6 subarrays which have the first and the last elements equal
        to the largest element of the subarray:
        <br />
        <ul>
          <li>
            subarray{" "}
            <code>
              [
              <strong>
                <u>1</u>
              </strong>
              ,4,3,3,2]
            </code>
            , with its largest element 1. The first element is 1 and the last
            element is also 1.
          </li>
          <br />
          <li>
            subarray{" "}
            <code>
              [1,
              <u>
                <strong>4</strong>
              </u>
              ,3,3,2]
            </code>
            , with its largest element 4. The first element is 4 and the last
            element is also 4.
          </li>
          <br />
          <li>
            subarray{" "}
            <code>
              [1,4,
              <u>
                <strong>3</strong>
              </u>
              ,3,2]
            </code>
            , with its largest element 3. The first element is 3 and the last
            element is also 3.
          </li>
          <br />
          <li>
            subarray{" "}
            <code>
              [1,4,3,
              <u>
                <strong>3</strong>
              </u>
              ,2]
            </code>
            , with its largest element 3. The first element is 3 and the last
            element is also 3.
          </li>
          <br />
          <li>
            subarray{" "}
            <code>
              [1,4,3,3,
              <u>
                <strong>2</strong>
              </u>
              ]
            </code>
            , with its largest element 2. The first element is 2 and the last
            element is also 2.
          </li>
          <br />
          <li>
            subarray{" "}
            <code>
              [1,4,
              <u>
                <strong>3,3</strong>
              </u>
              ,2]
            </code>
            , with its largest element 3. The first element is 3 and the last
            element is also 3.
          </li>
        </ul>
        <p>Hence, we return 6.</p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong> <span class="example-io">nums = [3,3,3]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">6</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <p>
          There are 6 subarrays which have the first and the last elements equal
          to the largest element of the subarray:
        </p>
        <br />
        <ul>
          <li>
            subarray{" "}
            <code>
              [
              <u>
                <strong>3</strong>
              </u>
              ,3,3]
            </code>
            , with its largest element 3. The first element is 3 and the last
            element is also 3.
          </li>
          <br />
          <li>
            subarray{" "}
            <code>
              [3,
              <strong>
                <u>3</u>
              </strong>
              ,3]
            </code>
            , with its largest element 3. The first element is 3 and the last
            element is also 3.
          </li>
          <br />
          <li>
            subarray{" "}
            <code>
              [3,3,
              <u>
                <strong>3</strong>
              </u>
              ]
            </code>
            , with its largest element 3. The first element is 3 and the last
            element is also 3.
          </li>
          <br />
          <li>
            subarray{" "}
            <code>
              [
              <strong>
                <u>3,3</u>
              </strong>
              ,3]
            </code>
            , with its largest element 3. The first element is 3 and the last
            element is also 3.
          </li>
          <br />
          <li>
            subarray{" "}
            <code>
              [3,
              <u>
                <strong>3,3</strong>
              </u>
              ]
            </code>
            , with its largest element 3. The first element is 3 and the last
            element is also 3.
          </li>
          <br />
          <li>
            subarray{" "}
            <code>
              [
              <u>
                <strong>3,3,3</strong>
              </u>
              ]
            </code>
            , with its largest element 3. The first element is 3 and the last
            element is also 3.
          </li>
        </ul>
        <p>Hence, we return 6.</p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong> <span class="example-io">nums = [1]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">1</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <p>
          There is a single subarray of <code>nums</code> which is{" "}
          <code>
            [
            <strong>
              <u>1</u>
            </strong>
            ]
          </code>
          , with its largest element 1. The first element is 1 and the last
          element is also 1.
        </p>
        <br />
        <p>Hence, we return 1.</p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2865: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>heights</code> of <code>n</code> integers
        representing the number of bricks in <code>n</code> consecutive towers.
        Your task is to remove some bricks to form a{" "}
        <strong>mountain-shaped</strong> tower arrangement. In this arrangement,
        the tower heights are non-decreasing, reaching a maximum peak value with
        one or multiple consecutive towers and then non-increasing.
      </p>

      <p>
        Return the <strong>maximum possible sum</strong> of heights of a
        mountain-shaped tower arrangement.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">heights = [5,3,4,1,1]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">13</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        We remove some bricks to make <code>heights =&nbsp;[5,3,3,1,1]</code>,
        the peak is at index 0.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">heights = [6,5,3,9,2,7]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">22</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <p>
          We remove some bricks to make{" "}
          <code>heights =&nbsp;[3,3,3,9,2,2]</code>, the peak is at index 3.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">heights = [3,2,5,5,2,3]</span>
        <br />
        <strong>Output:</strong> <span class="example-io">18</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        We remove some bricks to make <code>heights = [2,2,5,5,2,2]</code>, the
        peak is at index 2 or 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n == heights &lt;= 10<sup>3</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= heights[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2390: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code>, which contains stars{" "}
        <code>*</code>.
      </p>

      <p>In one operation, you can:</p>

      <ul>
        <li>
          Choose a star in <code>s</code>.
        </li>
        <li>
          Remove the closest <strong>non-star</strong> character to its{" "}
          <strong>left</strong>, as well as remove the star itself.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the string after <strong>all</strong> stars have been removed
        </em>
        .
      </p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          The input will be generated such that the operation is always
          possible.
        </li>
        <li>
          It can be shown that the resulting string will always be unique.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "leet**cod*e" <br />
        <strong>Output:</strong> "lecoe"
        <br />
        <strong>Explanation:</strong> Performing the removals from left to
        right:
        <br />- The closest character to the 1<sup>st</sup> star is 't' in "lee
        <strong>
          <u>t</u>
        </strong>
        **cod*e". s becomes "lee*cod*e".
        <br />- The closest character to the 2<sup>nd</sup> star is 'e' in "le
        <strong>
          <u>e</u>
        </strong>
        *cod*e". s becomes "lecod*e".
        <br />- The closest character to the 3<sup>rd</sup> star is 'd' in "leco
        <strong>
          <u>d</u>
        </strong>
        *e". s becomes "lecoe".
        <br />
        There are no more stars, so we return "lecoe".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "erase*****"
        <br />
        <strong>Output:</strong> ""
        <br />
        <strong>Explanation:</strong> The entire string is removed, so we return
        an empty string.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters and stars{" "}
          <code>*</code>.
        </li>
        <li>
          The operation above can be performed on <code>s</code>.
        </li>
      </ul>
    </div>
  ),
  20: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> containing just the characters{" "}
        <code>'('</code>, <code>')'</code>, <code>'{"</code>, <code>"}'</code>,{" "}
        <code>'['</code> and <code>']'</code>, determine if the input string is
        valid.
      </p>

      <p>An input string is valid if:</p>

      <ul>
        <li>Open brackets must be closed by the same type of brackets.</li>
        <li>Open brackets must be closed in the correct order.</li>
        <li>
          Every close bracket has a corresponding open bracket of the same type.
        </li>
      </ul>

      <br />
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "()" <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "()[]{}"<br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "{`(]`}"<br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of parentheses only <code>'()[]{}'</code>.
        </li>
      </ul>
    </div>
  ),
  32: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string containing just the characters <code>'('</code> and{" "}
        <code>')'</code>, return{" "}
        <em>the length of the longest valid (well-formed) parentheses </em>
        <span
          data-keyword="substring-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rdm:"
              >
                <div>
                  <em>substring</em>
                </div>
              </div>
            </div>
          </div>
        </span>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "{"(()"}" <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> The longest valid parentheses substring is
        "()".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "{")()())"}"<br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> The longest valid parentheses substring is
        "()()".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = ""
        <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= s.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s[i]</code> is <code>'('</code>, or <code>')'</code>.
        </li>
      </ul>
    </div>
  ),
  71: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an absolute path for a Unix-style file system, which begins with a
        slash <code>'/'</code>, transform this path into its{" "}
        <strong>simplified canonical path</strong>.
      </p>

      <p>
        In Unix-style file system context, a single period <code>'.'</code>{" "}
        signifies the current directory, a double period <code>".."</code>{" "}
        denotes moving up one directory level, and multiple slashes such as{" "}
        <code>"//"</code> are interpreted as a single slash. In this problem,
        treat sequences of periods not covered by the previous rules (like{" "}
        <code>"..."</code>) as valid names for files or directories.
      </p>

      <p>The simplified canonical path should adhere to the following rules:</p>

      <ul>
        <li>
          It must start with a single slash <code>'/'</code>.
        </li>
        <li>
          Directories within the path should be separated by only one slash{" "}
          <code>'/'</code>.
        </li>
        <li>
          It should not end with a slash <code>'/'</code>, unless it's the root
          directory.
        </li>
        <li>
          It should exclude any single or double periods used to denote current
          or parent directories.
        </li>
      </ul>

      <p>Return the new path.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong> <span class="example-io">path = "/home/"</span>
        <br />
        <strong>Output:</strong> <span class="example-io">"/home"</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <p>The trailing slash should be removed.</p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">path = "/home//foo/"</span>
        <br />
        <strong>Output:</strong> <span class="example-io">"/home/foo"</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <p>Multiple consecutive slashes are replaced by a single one.</p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">
          path = "/home/user/Documents/../Pictures"
        </span>
        <br />
        <strong>Output:</strong>{" "}
        <span class="example-io">"/home/user/Pictures"</span>
        <br />
        <strong>Explanation:</strong>
        <br />A double period <code>".."</code> refers to the directory up a
        level.
      </pre>

      <p>
        <strong class="example">Example 4:</strong>
      </p>
      <pre class="example-block">
        <strong>Input:</strong> <span class="example-io">path = "/../"</span>
        <br />
        <strong>Output:</strong> <span class="example-io">"/"</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <p>Going one level up from the root directory is not possible.</p>
      </pre>

      <p>
        <strong class="example">Example 5:</strong>
      </p>

      <pre class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">path = "/.../a/../b/c/../d/./"</span>
        <br />
        <strong>Output:</strong> <span class="example-io">"/.../b/d"</span>
        <br />
        <strong>Explanation:</strong>
        <br />
        <p>
          <code>"..."</code> is a valid name for a directory in this problem.
        </p>
      </pre>

      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= path.length &lt;= 3000</code>
        </li>
        <li>
          <code>path</code> consists of English letters, digits, period{" "}
          <code>'.'</code>, slash <code>'/'</code> or <code>'_'</code>.
        </li>
        <li>
          <code>path</code> is a valid absolute Unix path.
        </li>
      </ul>
    </div>
  ),
  84: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>heights</code> representing the
        histogram's bar height where the width of each bar is <code>1</code>,
        return <em>the area of the largest rectangle in the histogram</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg"
        style={{ width: 522, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> heights = [2,1,5,6,2,3] <br />
        <strong>Output:</strong> 10
        <br />
        <strong>Explanation:</strong> The above is a histogram where width of
        each bar is 1.
        <br />
        The largest rectangle is shown in the red area, which has an area = 10
        units.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg"
        style={{ width: 202, height: 362 }}
      />
      <pre>
        <strong>Input:</strong> heights = [2,4]
        <br />
        <strong>Output:</strong> 4
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= heights.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= heights[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  155: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design a stack that supports push, pop, top, and retrieving the minimum
        element in constant time.
      </p>

      <p>
        Implement the <code>MinStack</code> class:
      </p>

      <ul>
        <li>
          <code>MinStack()</code> initializes the stack object.
        </li>
        <li>
          <code>void push(int val)</code> pushes the element <code>val</code>{" "}
          onto the stack.
        </li>
        <li>
          <code>void pop()</code> removes the element on the top of the stack.
        </li>
        <li>
          <code>int top()</code> gets the top element of the stack.
        </li>
        <li>
          <code>int getMin()</code> retrieves the minimum element in the stack.
        </li>
      </ul>

      <p>
        You must implement a solution with <code>O(1)</code> time complexity for
        each function.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        ["MinStack","push","push","push","getMin","pop","top","getMin"] <br />
        [[],[-2],[0],[-3],[],[],[],[]] <br />
        <strong>Output</strong> <br />
        [null,null,null,null,-3,null,0,-2]
        <br />
        <strong>Explanation</strong> <br />
        MinStack minStack = new MinStack(); <br />
        minStack.push(-2); <br />
        minStack.push(0); <br />
        minStack.push(-3); <br />
        minStack.getMin(); // return -3 <br />
        minStack.pop(); <br />
        minStack.top(); // return 0 <br />
        minStack.getMin(); // return -2
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            -2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          Methods <code>pop</code>, <code>top</code> and <code>getMin</code>{" "}
          operations will always be called on <strong>non-empty</strong> stacks.
        </li>
        <li>
          At most{" "}
          <code>
            3 * 10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>push</code>, <code>pop</code>,{" "}
          <code>top</code>, and <code>getMin</code>.
        </li>
      </ul>
    </div>
  ),
  224: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> representing a valid expression, implement
        a basic calculator to evaluate it, and return{" "}
        <em>the result of the evaluation</em>.
      </p>

      <p>
        <strong>Note:</strong> You are <strong>not</strong> allowed to use any
        built-in function which evaluates strings as mathematical expressions,
        such as <code>eval()</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "1 + 1" <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = " 2-1 + 2 " <br />
        <strong>Output:</strong> 3
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "(1+(4+5+2)-3)+(6+8)" <br />
        <strong>Output:</strong> 23
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 3 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of digits, <code>'+'</code>, <code>'-'</code>,{" "}
          <code>'('</code>, <code>')'</code>, and <code>' '</code>.
        </li>
        <li>
          <code>s</code> represents a valid expression.
        </li>
        <li>
          <code>'+'</code> is <strong>not</strong> used as a unary operation
          (i.e., <code>"+1"</code> and <code>"+(2 + 3)"</code> is invalid).
        </li>
        <li>
          <code>'-'</code> could be used as a unary operation (i.e.,{" "}
          <code>"-1"</code> and <code>"-(2 + 3)"</code> is valid).
        </li>
        <li>There will be no two consecutive operators in the input.</li>
        <li>
          Every number and running calculation will fit in a signed 32-bit
          integer.
        </li>
      </ul>
    </div>
  ),
  388: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Suppose we have a file system that stores both files and directories. An
        example of one system is represented in the following picture:
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/08/28/mdir.jpg"
          style={{ width: 681, height: 322 }}
        />
      </p>

      <p>
        Here, we have <code>dir</code> as the only directory in the root.{" "}
        <code>dir</code> contains two subdirectories, <code>subdir1</code> and{" "}
        <code>subdir2</code>. <code>subdir1</code> contains a file{" "}
        <code>file1.ext</code> and subdirectory <code>subsubdir1</code>.{" "}
        <code>subdir2</code> contains a subdirectory <code>subsubdir2</code>,
        which contains a file <code>file2.ext</code>.
      </p>

      <p>
        In text form, it looks like this (with ⟶ representing the tab
        character):
      </p>

      <pre>
        dir ⟶ subdir1 ⟶ ⟶ file1.ext ⟶ ⟶ subsubdir1 ⟶ subdir2 ⟶ ⟶ subsubdir2 ⟶ ⟶
        ⟶ file2.ext
      </pre>

      <p>
        If we were to write this representation in code, it will look like this:{" "}
        <code>
          "dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext"
        </code>
        . Note that the <code>'\n'</code> and <code>'\t'</code> are the new-line
        and tab characters.
      </p>

      <p>
        Every file and directory has a unique <strong>absolute path</strong> in
        the file system, which is the order of directories that must be opened
        to reach the file/directory itself, all concatenated by{" "}
        <code>'/'s</code>. Using the above example, the{" "}
        <strong>absolute path</strong> to <code>file2.ext</code> is{" "}
        <code>"dir/subdir2/subsubdir2/file2.ext"</code>. Each directory name
        consists of letters, digits, and/or spaces. Each file name is of the
        form <code>name.extension</code>, where <code>name</code> and{" "}
        <code>extension</code> consist of letters, digits, and/or spaces.
      </p>

      <p>
        Given a string <code>input</code> representing the file system in the
        explained format, return{" "}
        <em>
          the length of the <strong>longest absolute path</strong> to a{" "}
          <strong>file</strong> in the abstracted file system
        </em>
        . If there is no file in the system, return <code>0</code>.
      </p>

      <p>
        <strong>Note</strong> that the testcases are generated such that the
        file system is valid and no file or directory name has length 0.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/28/dir1.jpg"
        style={{ width: 401, height: 202 }}
      />
      <pre>
        <strong>Input:</strong> input =
        "dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext" <br />
        <strong>Output:</strong> 20 <br />
        <strong>Explanation:</strong> We have only one file, and the absolute
        path is "dir/subdir2/file.ext" of length 20.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/28/dir2.jpg"
        style={{ width: 641, height: 322 }}
      />
      <pre>
        <strong>Input:</strong> input =
        "dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext"
        <br />
        <strong>Output:</strong> 32
        <br />
        <strong>Explanation:</strong> We have two files:
        <br />
        "dir/subdir1/file1.ext" of length 21
        <br />
        "dir/subdir2/subsubdir2/file2.ext" of length 32.
        <br />
        We return 32 since it is the longest absolute path to a file.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> input = "a"
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> We do not have any files, just a single
        directory named "a".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= input.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>input</code> may contain lowercase or uppercase English letters,
          a new line character <code>'\n'</code>, a tab character{" "}
          <code>'\t'</code>, a dot <code>'.'</code>, a space <code>' '</code>,
          and digits.
        </li>
        <li>
          All file and directory names have <strong>positive</strong> length.
        </li>
      </ul>
    </div>
  ),
  445: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two <strong>non-empty</strong> linked lists representing
        two non-negative integers. The most significant digit comes first and
        each of their nodes contains a single digit. Add the two numbers and
        return the sum as a linked list.
      </p>

      <p>
        You may assume the two numbers do not contain any leading zero, except
        the number 0 itself.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/09/sumii-linked-list.jpg"
        style={{ width: 523, height: 342 }}
      />
      <pre>
        <strong>Input:</strong> l1 = [7,2,4,3], l2 = [5,6,4] <br />
        <strong>Output:</strong> [7,8,0,7]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4] <br />
        <strong>Output:</strong> [8,0,7]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> l1 = [0], l2 = [0] <br />
        <strong>Output:</strong> [0]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in each linked list is in the range{" "}
          <code>[1, 100]</code>.
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 9</code>
        </li>
        <li>
          It is guaranteed that the list represents a number that does not have
          leading zeros.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>&nbsp;Could you solve it without reversing
        the input lists?
      </p>
    </div>
  ),
  589: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of an n-ary tree, return{" "}
        <em>the preorder traversal of its nodes' values</em>.
      </p>

      <p>
        Nary-Tree input serialization is represented in their level order
        traversal. Each group of children is separated by the null value (See
        examples)
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png"
          style={{ width: "100%", maxWidth: 300 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root = [1,null,3,2,4,null,5,6] <br />
        <strong>Output:</strong> [1,3,5,6,2,4]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png"
          style={{ width: 296, height: 241 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root =
        [1,null,2,3,4,5,null,null,6,7,null,8,null,
        <br />
        9,10,null,null,11,null,12,null,13,null,null,14]
        <br />
        <strong>Output:</strong> [1,2,3,6,7,11,14,4,8,12,5,9,13,10]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            0 &lt;= Node.val &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          The height of the n-ary tree is less than or equal to{" "}
          <code>1000</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Recursive solution is trivial, could you do
        it iteratively?
      </p>
    </div>
  ),
  590: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of an n-ary tree, return{" "}
        <em>the postorder traversal of its nodes' values</em>.
      </p>

      <p>
        Nary-Tree input serialization is represented in their level order
        traversal. Each group of children is separated by the null value (See
        examples)
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png"
        style={{ width: "100%", maxWidth: 300 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,null,3,2,4,null,5,6] <br />
        <strong>Output:</strong> [5,6,3,2,4,1]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png"
        style={{ width: 296, height: 241 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,{" "}
        <br />
        8,null,9,10,null,null,11,null,12,null,13,null,null,14] <br />
        <strong>Output:</strong> [2,6,14,11,7,3,12,8,4,13,9,10,5,1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            0 &lt;= Node.val &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          The height of the n-ary tree is less than or equal to{" "}
          <code>1000</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Recursive solution is trivial, could you do
        it iteratively?
      </p>
    </div>
  ),
  726: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>formula</code> representing a chemical formula,
        return <em>the count of each atom</em>.
      </p>

      <p>
        The atomic element always starts with an uppercase character, then zero
        or more lowercase letters, representing the name.
      </p>

      <p>
        One or more digits representing that element's count may follow if the
        count is greater than <code>1</code>. If the count is <code>1</code>, no
        digits will follow.
      </p>

      <ul>
        <li>
          For example, <code>"H2O"</code> and <code>"H2O2"</code> are possible,
          but <code>"H1O2"</code> is impossible.
        </li>
      </ul>

      <p>Two formulas are concatenated together to produce another formula.</p>

      <ul>
        <li>
          For example, <code>"H2O2He3Mg4"</code> is also a formula.
        </li>
      </ul>

      <p>
        A formula placed in parentheses, and a count (optionally added) is also
        a formula.
      </p>

      <ul>
        <li>
          For example, <code>"(H2O2)"</code> and <code>"(H2O2)3"</code> are
          formulas.
        </li>
      </ul>

      <p>
        Return the count of all elements as a string in the following form: the
        first name (in sorted order), followed by its count (if that count is
        more than <code>1</code>), followed by the second name (in sorted
        order), followed by its count (if that count is more than <code>1</code>
        ), and so on.
      </p>

      <p>
        The test cases are generated so that all the values in the output fit in
        a <strong>32-bit</strong> integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> formula = "H2O" <br />
        <strong>Output:</strong> "H2O"
        <br />
        <strong>Explanation:</strong> The count of elements are{" "}
        {`{'H': 2, 'O': 1}`}.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> formula = "Mg(OH)2"
        <br />
        <strong>Output:</strong> "H2MgO2"
        <br />
        <strong>Explanation:</strong> The count of elements are{" "}
        {`{'H': 2, 'Mg': 1, 'O': 2}`}.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> formula = "K4(ON(SO3)2)2"
        <br />
        <strong>Output:</strong> "K4N2O14S4"
        <br />
        <strong>Explanation:</strong> The count of elements are{" "}
        {`{'K': 4, 'N': 2, 'O': 14, 'S': 4}`}.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= formula.length &lt;= 1000</code>
        </li>
        <li>
          <code>formula</code> consists of English letters, digits,{" "}
          <code>'('</code>, and <code>')'</code>.
        </li>
        <li>
          <code>formula</code> is always valid.
        </li>
      </ul>
    </div>
  ),
  735: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        We are given an array <code>asteroids</code> of integers representing
        asteroids in a row.
      </p>

      <p>
        For each asteroid, the absolute value represents its size, and the sign
        represents its direction (positive meaning right, negative meaning
        left). Each asteroid moves at the same speed.
      </p>

      <p>
        Find out the state of the asteroids after all collisions. If two
        asteroids meet, the smaller one will explode. If both are the same size,
        both will explode. Two asteroids moving in the same direction will never
        meet.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> asteroids = [5,10,-5] <br />
        <strong>Output:</strong> [5,10]
        <br />
        <strong>Explanation:</strong> The 10 and -5 collide resulting in 10. The
        5 and 10 never collide.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> asteroids = [8,-8]
        <br />
        <strong>Output:</strong> []
        <br />
        <strong>Explanation:</strong> The 8 and -8 collide exploding each other.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> asteroids = [10,2,-5]
        <br />
        <strong>Output:</strong> [10]
        <br />
        <strong>Explanation:</strong> The 2 and -5 collide resulting in -5. The
        10 and -5 collide resulting in 10.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= asteroids.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>-1000 &lt;= asteroids[i] &lt;= 1000</code>
        </li>
        <li>
          <code>asteroids[i] != 0</code>
        </li>
      </ul>
    </div>
  ),
  895: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design a stack-like data structure to push elements to the stack and pop
        the most frequent element from the stack.
      </p>

      <p>
        Implement the <code>FreqStack</code> class:
      </p>

      <ul>
        <li>
          <code>FreqStack()</code> constructs an empty frequency stack.
        </li>
        <li>
          <code>void push(int val)</code> pushes an integer <code>val</code>{" "}
          onto the top of the stack.
        </li>
        <li>
          <code>int pop()</code> removes and returns the most frequent element
          in the stack.
          <ul>
            <li>
              If there is a tie for the most frequent element, the element
              closest to the stack's top is removed and returned.
            </li>
          </ul>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["FreqStack", "push", "push", "push", "push", "push", "push", "pop",
        "pop", "pop", "pop"]
        <br />
        [[], [5], [7], [5], [7], [4], [5], [], [], [], []]
        <br />
        <strong>Output</strong>
        <br />
        [null, null, null, null, null, null, null, 5, 7, 5, 4]
        <br />
        <strong>Explanation</strong>
        <br />
        FreqStack freqStack = new FreqStack();
        <br />
        freqStack.push(5); // The stack is [5]
        <br />
        freqStack.push(7); // The stack is [5,7]
        <br />
        freqStack.push(5); // The stack is [5,7,5]
        <br />
        freqStack.push(7); // The stack is [5,7,5,7]
        <br />
        freqStack.push(4); // The stack is [5,7,5,7,4]
        <br />
        freqStack.push(5); // The stack is [5,7,5,7,4,5]
        <br />
        freqStack.pop(); // return 5, as 5 is the most frequent. The stack
        becomes [5,7,5,7,4].
        <br />
        freqStack.pop(); // return 7, as 5 and 7 is the most frequent, but 7 is
        closest to the top. The stack becomes [5,7,5,4].
        <br />
        freqStack.pop(); // return 5, as 5 is the most frequent. The stack
        becomes [5,7,4].
        <br />
        freqStack.pop(); // return 4, as 4, 5 and 7 is the most frequent, but 4
        is closest to the top. The stack becomes [5,7].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= val &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            2 * 10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>push</code> and <code>pop</code>.
        </li>
        <li>
          It is guaranteed that there will be at least one element in the stack
          before calling <code>pop</code>.
        </li>
      </ul>
    </div>
  ),
  1190: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> that consists of lower case
        English letters and brackets.
      </p>

      <p>
        Reverse the strings in each pair of matching parentheses, starting from
        the innermost one.
      </p>

      <p>
        Your result should <strong>not</strong> contain any brackets.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "(abcd)" <br />
        <strong>Output:</strong> "dcba"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "(u(love)i)"
        <br />
        <strong>Output:</strong> "iloveu"
        <br />
        <strong>Explanation:</strong> The substring "love" is reversed first,
        then the whole string is reversed.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "(ed(et(oc))el)"
        <br />
        <strong>Output:</strong> "leetcode"
        <br />
        <strong>Explanation:</strong> First, we reverse the substring "oc", then
        "etco", and finally, the whole string.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 2000</code>
        </li>
        <li>
          <code>s</code> only contains lower case English characters and
          parentheses.
        </li>
        <li>It is guaranteed that all parentheses are balanced.</li>
      </ul>
    </div>
  ),
  2751: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> <strong>1-indexed</strong> robots, each having
        a position on a line, health, and movement direction.
      </p>

      <p>
        You are given <strong>0-indexed</strong> integer arrays{" "}
        <code>positions</code>, <code>healths</code>, and a string{" "}
        <code>directions</code> (<code>directions[i]</code> is either{" "}
        <strong>'L'</strong> for <strong>left</strong> or <strong>'R'</strong>{" "}
        for <strong>right</strong>). All integers in <code>positions</code> are{" "}
        <strong>unique</strong>.
      </p>

      <p>
        All robots start moving on the line<strong> simultaneously</strong> at
        the <strong>same speed </strong>in their given directions. If two robots
        ever share the same position while moving, they will{" "}
        <strong>collide</strong>.
      </p>

      <p>
        If two robots collide, the robot with <strong>lower health</strong> is{" "}
        <strong>removed</strong> from the line, and the health of the other
        robot <strong>decreases</strong> <strong>by one</strong>. The surviving
        robot continues in the <strong>same</strong> direction it was going. If
        both robots have the <strong>same</strong> health, they are both
        <strong> </strong>removed from the line.
      </p>

      <p>
        Your task is to determine the <strong>health</strong> of the robots that
        survive the collisions, in the same <strong>order </strong>that the
        robots were given,<strong> </strong>i.e. final heath of robot 1 (if
        survived), final health of robot 2 (if survived), and so on. If there
        are no survivors, return an empty array.
      </p>

      <p>
        Return{" "}
        <em>
          an array containing the health of the remaining robots (in the order
          they were given in the input), after no further collisions can occur.
        </em>
      </p>

      <p>
        <strong>Note:</strong> The positions may be unsorted.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          height="169"
          src="https://assets.leetcode.com/uploads/2023/05/15/image-20230516011718-12.png"
          width="808"
        />
      </p>

      <pre>
        <strong>Input:</strong> positions = [5,4,3,2,1], healths =
        [2,17,9,15,10], directions = "RRRRR" <br />
        <strong>Output:</strong> [2,17,9,15,10]
        <br />
        <strong>Explanation:</strong> No collision occurs in this example, since
        all robots are moving in the same direction. So, the health of the
        robots in order from the first robot is returned, [2, 17, 9, 15, 10].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          height="176"
          src="https://assets.leetcode.com/uploads/2023/05/15/image-20230516004433-7.png"
          width="717"
        />
      </p>

      <pre>
        <strong>Input:</strong> positions = [3,5,2,6], healths = [10,10,15,12],
        directions = "RLRL"
        <br />
        <strong>Output:</strong> [14]
        <br />
        <strong>Explanation:</strong> There are 2 collisions in this example.
        Firstly, robot 1 and robot 2 will collide, and since both have the same
        health, they will be removed from the line. Next, robot 3 and robot 4
        will collide and since robot 4's health is smaller, it gets removed, and
        robot 3's health becomes 15 - 1 = 14. Only robot 3 remains, so we return
        [14].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <p>
        <img
          alt=""
          height="172"
          src="https://assets.leetcode.com/uploads/2023/05/15/image-20230516005114-9.png"
          width="732"
        />
      </p>

      <pre>
        <strong>Input:</strong> positions = [1,2,5,6], healths = [10,10,11,11],
        directions = "RLRL"
        <br />
        <strong>Output:</strong> []
        <br />
        <strong>Explanation:</strong> Robot 1 and robot 2 will collide and since
        both have the same health, they are both removed. Robot 3 and 4 will
        collide and since both have the same health, they are both removed. So,
        we return an empty array, [].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= positions.length == healths.length == directions.length == n
            &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= positions[i], healths[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>directions[i] == 'L'</code> or <code>directions[i] == 'R'</code>
        </li>
        <li>
          All values in <code>positions</code> are distinct
        </li>
      </ul>
    </div>
  ),
  1209: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> and an integer <code>k</code>, a{" "}
        <code>k</code> <strong>duplicate removal</strong> consists of choosing{" "}
        <code>k</code> adjacent and equal letters from <code>s</code> and
        removing them, causing the left and the right side of the deleted
        substring to concatenate together.
      </p>

      <p>
        We repeatedly make <code>k</code> <strong>duplicate removals</strong> on{" "}
        <code>s</code> until we no longer can.
      </p>

      <p>
        Return{" "}
        <em>
          the final string after all such duplicate removals have been made
        </em>
        . It is guaranteed that the answer is <strong>unique</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcd", k = 2 <br />
        <strong>Output:</strong> "abcd"
        <br />
        <strong>Explanation: </strong>There's nothing to delete.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "deeedbbcccbdaa", k = 3<br />
        <strong>Output:</strong> "aa"
        <br />
        <strong>
          Explanation: <br />
        </strong>
        First delete "eee" and "ccc", get "ddbbbdaa"
        <br />
        Then delete "bbb", get "dddaa"
        <br />
        Finally delete "ddd", get "aa"
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "pbbcggttciiippooaais", k = 2<br />
        <strong>Output:</strong> "ps"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            2 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> only contains lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  1249: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <font face="monospace">s</font> of <code>'('</code> ,{" "}
        <code>')'</code> and lowercase English characters.
      </p>

      <p>
        Your task is to remove the minimum number of parentheses ({" "}
        <code>'('</code> or <code>')'</code>, in any positions ) so that the
        resulting <em>parentheses string</em> is valid and return{" "}
        <strong>any</strong> valid string.
      </p>

      <p>
        Formally, a <em>parentheses string</em> is valid if and only if:
      </p>

      <ul>
        <li>It is the empty string, contains only lowercase characters, or</li>
        <li>
          It can be written as <code>AB</code> (<code>A</code> concatenated with{" "}
          <code>B</code>), where <code>A</code> and <code>B</code> are valid
          strings, or
        </li>
        <li>
          It can be written as <code>(A)</code>, where <code>A</code> is a valid
          string.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "lee(t(c)o)de{")"}" <br />
        <strong>Output:</strong> "lee(t(c)o)de"
        <br />
        <strong>Explanation:</strong> "lee(t(co)de)" , "lee(t(c)ode)" would also
        be accepted.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "a{")"}b(c)d"
        <br />
        <strong>Output:</strong> "ab(c)d"
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "{"))(("}"<br />
        <strong>Output:</strong> ""
        <br />
        <strong>Explanation:</strong> An empty string is also valid.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s[i]</code> is either&nbsp;<code>'('</code> , <code>')'</code>,
          or lowercase English letter.
        </li>
      </ul>
    </div>
  ),
  733: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an image represented by an <code>m x n</code> grid of
        integers <code>image</code>, where <code>image[i][j]</code> represents
        the pixel value of the image. You are also given three integers{" "}
        <code>sr</code>, <code>sc</code>, and <code>color</code>. Your task is
        to perform a <strong>flood fill</strong> on the image starting from the
        pixel <code>image[sr][sc]</code>.
      </p>
      <p>
        To perform a <strong>flood fill</strong>:
      </p>
      <ul>
        <li>
          Begin with the starting pixel and change its color to{" "}
          <code>color</code>.
        </li>
        <li>
          Perform the same process for each pixel that is{" "}
          <strong>directly adjacent</strong> (pixels that share a side with the
          original pixel, either horizontally or vertically) and shares the{" "}
          <strong>same color</strong> as the starting pixel.
        </li>
        <li>
          Keep <strong>repeating</strong> this process by checking neighboring
          pixels of the <em>updated</em> pixels&nbsp;and modifying their color
          if it matches the original color of the starting pixel.
        </li>
        <li>
          The process <strong>stops</strong> when there are{" "}
          <strong>no more</strong> adjacent pixels of the original color to
          update.
        </li>
      </ul>
      <p>
        Return the <strong>modified</strong> image after performing the flood
        fill.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <p class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">
          image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2
        </span>
        <br /> <br />
        <strong>Output:</strong>{" "}
        <span class="example-io">[[2,2,2],[2,2,0],[2,0,1]]</span>
        <br />
        <br />
        <strong>Explanation:</strong>
        <br />
        <br />
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/06/01/flood1-grid.jpg"
          style={{ width: 613, height: 253 }}
        />
        <br />
        From the center of the image with position{" "}
        <code>(sr, sc) = (1, 1)</code> (i.e., the red pixel), all pixels
        connected by a path of the same color as the starting pixel (i.e., the
        blue pixels) are colored with the new color.
        <br />
        Note the bottom corner is <strong>not</strong> colored 2, because it is
        not horizontally or vertically connected to the starting pixel.
      </p>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <p class="example-block">
        <strong>Input:</strong>{" "}
        <span class="example-io">
          image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0
        </span>{" "}
        <br /> <br />
        <strong>Output:</strong>{" "}
        <span class="example-io">[[0,0,0],[0,0,0]]</span>
        <br /> <br />
        <strong>Explanation:</strong>
        <br />
        The starting pixel is already colored with 0, which is the same as the
        target color. Therefore, no changes are made to the image.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>m == image.length</code>
        </li>
        <li>
          <code>n == image[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 50</code>
        </li>
        <li>
          <code>
            0 &lt;= image[i][j], color &lt; 2<sup>16</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= sr &lt; m</code>
        </li>
        <li>
          <code>0 &lt;= sc &lt; n</code>
        </li>
      </ul>
    </div>
  ),
  200: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> 2D binary grid <code>grid</code> which
        represents a map of <code>'1'</code>s (land) and <code>'0'</code>s
        (water), return <em>the number of islands</em>.
      </p>

      <p>
        An <strong>island</strong> is surrounded by water and is formed by
        connecting adjacent lands horizontally or vertically. You may assume all
        four edges of the grid are all surrounded by water.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong>
        <br /> grid = [
        <br /> ["1","1","1","1","0"],
        <br /> ["1","1","0","1","0"],
        <br /> ["1","1","0","0","0"],
        <br /> ["0","0","0","0","0"]
        <br /> ]
        <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        grid = [
        <br /> ["1","1","0","0","0"],
        <br /> ["1","1","0","0","0"],
        <br /> ["0","0","1","0","0"],
        <br /> ["0","0","0","1","1"]
        <br /> ]
        <br />
        <strong>Output:</strong> 3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 300</code>
        </li>
        <li>
          <code>grid[i][j]</code> is <code>'0'</code> or <code>'1'</code>.
        </li>
      </ul>
    </div>
  ),
  73: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> integer matrix <code>matrix</code>, if an
        element is <code>0</code>, set its entire row and column to{" "}
        <code>0</code>'s.
      </p>

      <p>
        You must do it{" "}
        <a
          href="https://en.wikipedia.org/wiki/In-place_algorithm"
          target="_blank"
          rel="noreferrer"
        >
          in place
        </a>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg"
        style={{ width: 450, height: 169 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[1,1,1],[1,0,1],[1,1,1]] <br />
        <strong>Output:</strong> [[1,0,1],[0,0,0],[1,0,1]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg"
        style={{ width: 450, height: 137 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]] <br />
        <strong>Output:</strong> [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == matrix.length</code>
        </li>
        <li>
          <code>n == matrix[0].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 200</code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <ul>
        <li>
          A straightforward solution using <code>O(mn)</code> space is probably
          a bad idea.
        </li>
        <li>
          A simple improvement uses <code>O(m + n)</code> space, but still not
          the best solution.
        </li>
        <li>Could you devise a constant space solution?</li>
      </ul>
    </div>
  ),
  74: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>m x n</code> integer matrix <code>matrix</code>{" "}
        with the following two properties:
      </p>

      <ul>
        <li>Each row is sorted in non-decreasing order.</li>
        <li>
          The first integer of each row is greater than the last integer of the
          previous row.
        </li>
      </ul>

      <p>
        Given an integer <code>target</code>, return <code>true</code>{" "}
        <em>if</em> <code>target</code> <em>is in</em> <code>matrix</code>{" "}
        <em>or</em> <code>false</code> <em>otherwise</em>.
      </p>

      <p>
        You must write a solution in <code>O(log(m * n))</code> time complexity.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/05/mat.jpg"
        style={{ width: 322, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> matrix =
        [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3 <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg"
        style={{ width: 322, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> matrix =
        [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13 <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == matrix.length</code>
        </li>
        <li>
          <code>n == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  79: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> grid of characters <code>board</code> and a
        string <code>word</code>, return <code>true</code> <em>if</em>{" "}
        <code>word</code> <em>exists in the grid</em>.
      </p>

      <p>
        The word can be constructed from letters of sequentially adjacent cells,
        where adjacent cells are horizontally or vertically neighboring. The
        same letter cell may not be used more than once.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg"
        style={{ width: 322, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> board =
        [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]],
        <br /> word = "ABCCED"
        <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg"
        style={{ width: 322, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> board =
        [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]],
        <br /> word = "SEE"
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/15/word3.jpg"
        style={{ width: 322, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> board =
        [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]],
        <br /> word = "ABCB"
        <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == board.length</code>
        </li>
        <li>
          <code>n = board[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 6</code>
        </li>
        <li>
          <code>1 &lt;= word.length &lt;= 15</code>
        </li>
        <li>
          <code>board</code> and <code>word</code> consists of only lowercase
          and uppercase English letters.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you use search pruning to make your
        solution faster with a larger <code>board</code>?
      </p>
    </div>
  ),
  85: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <code>rows x cols</code>&nbsp;binary <code>matrix</code> filled
        with <code>0</code>'s and <code>1</code>'s, find the largest rectangle
        containing only <code>1</code>'s and return <em>its area</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg"
        style={{ width: 402, height: 322 }}
      />
      <pre>
        <strong>Input:</strong> matrix =
        [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]{" "}
        <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The maximal rectangle is shown in the
        above picture.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [["0"]] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [["1"]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>rows == matrix.length</code>
        </li>
        <li>
          <code>cols == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= row, cols &lt;= 200</code>
        </li>
        <li>
          <code>matrix[i][j]</code> is <code>'0'</code> or <code>'1'</code>.
        </li>
      </ul>
    </div>
  ),
  130: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>m x n</code> matrix <code>board</code> containing{" "}
        <strong>letters</strong> <code>'X'</code> and <code>'O'</code>,{" "}
        <strong>capture regions</strong> that are <strong>surrounded</strong>:
      </p>

      <ul>
        <li>
          <strong>Connect</strong>: A cell is connected to adjacent cells
          horizontally or vertically.
        </li>
        <li>
          <strong>Region</strong>: To form a region{" "}
          <strong>connect every</strong> <code>'O'</code> cell.
        </li>
        <li>
          <strong>Surround</strong>: The region is surrounded with{" "}
          <code>'X'</code> cells if you can <strong>connect the region </strong>
          with <code>'X'</code> cells and none of the region cells are on the
          edge of the <code>board</code>.
        </li>
      </ul>

      <p>
        A <strong>surrounded region is captured</strong> by replacing all{" "}
        <code>'O'</code>s with <code>'X'</code>s in the input matrix{" "}
        <code>board</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            board =
            [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
          </span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">
            [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
          </span>
        </p>
        <p>
          <strong>Explanation:</strong>
        </p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg"
          style={{ width: 367, height: 158 }}
        />{" "}
        <br />
        <p>
          In the above diagram, the bottom region is not captured because it is
          on the edge of the board and cannot be surrounded.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">board = [["X"]]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">[["X"]]</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == board.length</code>
        </li>
        <li>
          <code>n == board[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 200</code>
        </li>
        <li>
          <code>board[i][j]</code> is <code>'X'</code> or <code>'O'</code>.
        </li>
      </ul>
    </div>
  ),
  212: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> <code>board</code>&nbsp;of characters and a
        list of strings <code>words</code>, return{" "}
        <em>all words on the board</em>.
      </p>

      <p>
        Each word must be constructed from letters of sequentially adjacent
        cells, where <strong>adjacent cells</strong> are horizontally or
        vertically neighboring. The same letter cell may not be used more than
        once in a word.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/07/search1.jpg"
        style={{ width: 322, height: 322 }}
      />
      <pre>
        <strong>Input:</strong> board =
        [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]],
        words = ["oath","pea","eat","rain"] <br />
        <strong>Output:</strong> ["eat","oath"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/07/search2.jpg"
        style={{ width: 322, height: 322 }}
      />
      <pre>
        <strong>Input:</strong> board = [["a","b"],["c","d"]], words = ["abcb"]{" "}
        <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == board.length</code>
        </li>
        <li>
          <code>n == board[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 12</code>
        </li>
        <li>
          <code>board[i][j]</code> is a lowercase English letter.
        </li>
        <li>
          <code>
            1 &lt;= words.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 10</code>
        </li>
        <li>
          <code>words[i]</code> consists of lowercase English letters.
        </li>
        <li>
          All the strings of <code>words</code> are unique.
        </li>
      </ul>
    </div>
  ),
  240: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Write an efficient algorithm that searches for a value{" "}
        <code>target</code> in an <code>m x n</code> integer matrix{" "}
        <code>matrix</code>. This matrix has the following properties:
      </p>

      <ul>
        <li>
          Integers in each row are sorted in ascending from left to right.
        </li>
        <li>
          Integers in each column are sorted in ascending from top to bottom.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/24/searchgrid2.jpg"
        style={{ width: 300, height: 300 }}
      />
      <pre>
        <strong>Input:</strong> matrix =
        [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]],
        target = 5 <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/24/searchgrid.jpg"
        style={{ width: 300, height: 300 }}
      />
      <pre>
        <strong>Input:</strong> matrix =
        [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]],
        target = 20
        <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == matrix.length</code>
        </li>
        <li>
          <code>n == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= n, m &lt;= 300</code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          All the integers in each row are <strong>sorted</strong> in ascending
          order.
        </li>
        <li>
          All the integers in each column are <strong>sorted</strong> in
          ascending order.
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  174: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The demons had captured the princess and imprisoned her in{" "}
        <strong>the bottom-right corner</strong> of a <code>dungeon</code>. The{" "}
        <code>dungeon</code> consists of <code>m x n</code> rooms laid out in a
        2D grid. Our valiant knight was initially positioned in{" "}
        <strong>the top-left room</strong> and must fight his way through{" "}
        <code>dungeon</code> to rescue the princess.
      </p>

      <p>
        The knight has an initial health point represented by a positive
        integer. If at any point his health point drops to <code>0</code> or
        below, he dies immediately.
      </p>

      <p>
        Some of the rooms are guarded by demons (represented by negative
        integers), so the knight loses health upon entering these rooms; other
        rooms are either empty (represented as 0) or contain magic orbs that
        increase the knight's health (represented by positive integers).
      </p>

      <p>
        To reach the princess as quickly as possible, the knight decides to move
        only <strong>rightward</strong> or <strong>downward</strong> in each
        step.
      </p>

      <p>
        Return{" "}
        <em>
          the knight's minimum initial health so that he can rescue the princess
        </em>
        .
      </p>

      <p>
        <strong>Note</strong> that any room can contain threats or power-ups,
        even the first room the knight enters and the bottom-right room where
        the princess is imprisoned.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/13/dungeon-grid-1.jpg"
        style={{ width: 253, height: 253 }}
      />
      <pre>
        <strong>Input:</strong> dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]{" "}
        <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> The initial health of the knight must be
        at least 7 if he follows the optimal path: RIGHT-&gt; RIGHT -&gt; DOWN
        -&gt; DOWN.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> dungeon = [[0]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == dungeon.length</code>
        </li>
        <li>
          <code>n == dungeon[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 200</code>
        </li>
        <li>
          <code>-1000 &lt;= dungeon[i][j] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  329: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> integers <code>matrix</code>, return{" "}
        <em>the length of the longest increasing path in </em>
        <code>matrix</code>.
      </p>
      <p>
        From each cell, you can either move in four directions: left, right, up,
        or down. You <strong>may not</strong> move <strong>diagonally</strong>{" "}
        or move <strong>outside the boundary</strong> (i.e., wrap-around is not
        allowed).
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg"
        style={{ width: 242, height: 242 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> matrix = [[9,9,4],[6,6,8],[2,1,1]] <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> The longest increasing path is{" "}
        <code>[1, 2, 6, 9]</code>.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg"
        style={{ width: 253, height: 253 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> matrix = [[3,4,5],[3,2,6],[2,2,1]] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation: </strong>The longest increasing path is{" "}
        <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed.
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> matrix = [[1]]
        <br />
        <strong>Output:</strong> 1
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>m == matrix.length</code>
        </li>
        <li>
          <code>n == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 200</code>
        </li>
        <li>
          <code>
            0 &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  289: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        According to&nbsp;
        <a
          href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"
          target="_blank"
          rel="noreferrer"
        >
          Wikipedia's article
        </a>
        : "The <b>Game of Life</b>, also known simply as <b>Life</b>, is a
        cellular automaton devised by the British mathematician John Horton
        Conway in 1970."
      </p>

      <p>
        The board is made up of an <code>m x n</code> grid of cells, where each
        cell has an initial state: <b>live</b> (represented by a <code>1</code>)
        or <b>dead</b> (represented by a <code>0</code>). Each cell interacts
        with its{" "}
        <a
          href="https://en.wikipedia.org/wiki/Moore_neighborhood"
          target="_blank"
          rel="noreferrer"
        >
          eight neighbors
        </a>{" "}
        (horizontal, vertical, diagonal) using the following four rules (taken
        from the above Wikipedia article):
      </p>

      <ul>
        <li>
          Any live cell with fewer than two live neighbors dies as if caused by
          under-population.
        </li>
        <li>
          Any live cell with two or three live neighbors lives on to the next
          generation.
        </li>
        <li>
          Any live cell with more than three live neighbors dies, as if by
          over-population.
        </li>
        <li>
          Any dead cell with exactly three live neighbors becomes a live cell,
          as if by reproduction.
        </li>
      </ul>

      <p>
        <span>
          The next state is created by applying the above rules simultaneously
          to every cell in the current state, where births and deaths occur
          simultaneously. Given the current state of the <code>m x n</code> grid{" "}
          <code>board</code>, return <em>the next state</em>.
        </span>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/26/grid1.jpg"
        style={{ width: 562, height: 322 }}
      />
      <pre>
        <strong>Input:</strong> board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]] <br />
        <strong>Output:</strong> [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/26/grid2.jpg"
        style={{ width: 402, height: 162 }}
      />
      <pre>
        <strong>Input:</strong> board = [[1,1],[1,0]] <br />
        <strong>Output:</strong> [[1,1],[1,1]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == board.length</code>
        </li>
        <li>
          <code>n == board[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 25</code>
        </li>
        <li>
          <code>board[i][j]</code> is <code>0</code> or <code>1</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <ul>
        <li>
          Could you solve it in-place? Remember that the board needs to be
          updated simultaneously: You cannot update some cells first and then
          use their updated values to update other cells.
        </li>
        <li>
          In this question, we represent the board using a 2D array. In
          principle, the board is infinite, which would cause problems when the
          active area encroaches upon the border of the array (i.e., live cells
          reach the border). How would you address these problems?
        </li>
      </ul>
    </div>
  ),
  296: (
    <div class="markdown-body div-width">
      <p>
        A group of two or more people wants to meet and minimize the total
        travel distance. You are given a 2D grid of values 0 or 1, where each 1
        marks the home of someone in the group. The distance is calculated using{" "}
        <a
          href="http://en.wikipedia.org/wiki/Taxicab_geometry"
          target="_blank"
          rel="noreferrer"
        >
          Manhattan Distance
        </a>
        , where distance(p1, p2) = <code>|p2.x - p1.x| + |p2.y - p1.y|</code>.
      </p>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <br />
        <br />
        {`1 - 0 - 0 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0
`}
        <br />
        <br />
        <strong>
          Output: 6 <br />
          <br />
          Explanation:{" "}
        </strong>
        Given three people living at <code>(0,0)</code>, <code>(0,4)</code>, and{" "}
        <code>(2,2)</code>: &nbsp; The point <code>(0,2)</code> is an ideal
        meeting point, as the total travel distance &nbsp; of 2+2+2=6 is
        minimal. So return 6.
      </pre>
    </div>
  ),
  311: (
    <article role="main" class="blog-post">
      <p>
        Given two{" "}
        <a
          href="https://en.wikipedia.org/wiki/Sparse_matrix"
          target="_blank"
          rel="noreferrer"
        >
          sparse matrices
        </a>{" "}
        <code>mat1</code> of size <code>m x k</code> and <code>mat2</code> of
        size <code>k x n</code>, return the result of <code>mat1 x mat2</code>.
        You may assume that multiplication is always possible.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0311.Sparse%20Matrix%20Multiplication/images/mult-grid.jpg"
          style={{ width: 500, height: 142 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> mat1 = [[1,0,0],[-1,0,3]], mat2 =
        [[7,0,0],[0,0,0],[0,0,1]] <br />
        <strong>Output:</strong> [[7,0,0],[-7,0,3]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> mat1 = [[0]], mat2 = [[0]] <br />
        <strong>Output:</strong> [[0]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == mat1.length</code>
        </li>
        <li>
          <code>k == mat1[i].length == mat2.length</code>
        </li>
        <li>
          <code>n == mat2[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n, k &lt;= 100</code>
        </li>
        <li>
          <code>-100 &lt;= mat1[i][j], mat2[i][j] &lt;= 100</code>
        </li>
      </ul>
    </article>
  ),
  463: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given <code>row x col</code> <code>grid</code> representing a
        map where <code>grid[i][j] = 1</code> represents&nbsp;land and{" "}
        <code>grid[i][j] = 0</code> represents water.
      </p>

      <p>
        Grid cells are connected <strong>horizontally/vertically</strong> (not
        diagonally). The <code>grid</code> is completely surrounded by water,
        and there is exactly one island (i.e., one or more connected land
        cells).
      </p>

      <p>
        The island doesn't have "lakes", meaning the water inside isn't
        connected to the water around the island. One cell is a square with side
        length 1. The grid is rectangular, width and height don't exceed 100.
        Determine the perimeter of the island.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/10/12/island.png"
        style={{ width: 221, height: 213 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]{" "}
        <br />
        <strong>Output:</strong> 16
        <br />
        <strong>Explanation:</strong> The perimeter is the 16 yellow stripes in
        the image above.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[1]]
        <br />
        <strong>Output:</strong> 4
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[1,0]]
        <br />
        <strong>Output:</strong> 4
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>row == grid.length</code>
        </li>
        <li>
          <code>col == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= row, col &lt;= 100</code>
        </li>
        <li>
          <code>grid[i][j]</code> is <code>0</code> or <code>1</code>.
        </li>
        <li>
          There is exactly one island in <code>grid</code>.
        </li>
      </ul>
    </div>
  ),
  498: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> matrix <code>mat</code>, return{" "}
        <em>an array of all the elements of the array in a diagonal order</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/10/diag1-grid.jpg"
        style={{ width: 334, height: 334 }}
      />
      <pre>
        <strong>Input:</strong> mat = [[1,2,3],[4,5,6],[7,8,9]] <br />
        <strong>Output:</strong> [1,2,4,7,5,3,6,8,9]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = [[1,2],[3,4]] <br />
        <strong>Output:</strong> [1,2,3,4]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == mat.length</code>
        </li>
        <li>
          <code>n == mat[i].length</code>
        </li>
        <li>
          <code>
            1 &lt;= m, n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= m * n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= mat[i][j] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  562: (
    <div class="markdown-body div-width">
      Given a 01 matrix <b>M</b>, find the longest line of consecutive one in
      the matrix. The line could be horizontal, vertical, diagonal or
      anti-diagonal.
      <br /> <br />
      <p>
        <b>Example:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b>
        <br />
        {`[[0,1,1,0],
 [0,1,1,0],
 [0,0,0,1]]`}
        <br />
        <b>Output:</b> 3
      </pre>
    </div>
  ),
  695: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>m x n</code> binary matrix <code>grid</code>. An
        island is a group of <code>1</code>'s (representing land) connected{" "}
        <strong>4-directionally</strong> (horizontal or vertical.) You may
        assume all four edges of the grid are surrounded by water.
      </p>

      <p>
        The <strong>area</strong> of an island is the number of cells with a
        value <code>1</code> in the island.
      </p>

      <p>
        Return{" "}
        <em>
          the maximum <strong>area</strong> of an island in{" "}
        </em>
        <code>grid</code>. If there is no island, return <code>0</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg"
        style={{ width: 500, height: 310 }}
      />
      <pre>
        <strong>Input:</strong> grid =
        [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],
        <br />
        [0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],
        <br />
        [0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
        <br />
        <strong>Output:</strong> 6<br />
        <strong>Explanation:</strong> The answer is not 11, because the island
        must be connected 4-directionally.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[0,0,0,0,0,0,0,0]]
        <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 50</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  542: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> binary matrix <code>mat</code>, return{" "}
        <em>the distance of the nearest </em>
        <code>0</code>
        <em> for each cell</em>.
      </p>

      <p>
        The distance between two adjacent cells is <code>1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/24/01-1-grid.jpg"
        style={{ width: 253, height: 253 }}
      />
      <pre>
        <strong>Input:</strong> mat = [[0,0,0],[0,1,0],[0,0,0]] <br />
        <strong>Output:</strong> [[0,0,0],[0,1,0],[0,0,0]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/24/01-2-grid.jpg"
        style={{ width: 253, height: 253 }}
      />
      <pre>
        <strong>Input:</strong> mat = [[0,0,0],[0,1,0],[1,1,1]] <br />
        <strong>Output:</strong> [[0,0,0],[0,1,0],[1,2,1]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == mat.length</code>
        </li>
        <li>
          <code>n == mat[i].length</code>
        </li>
        <li>
          <code>
            1 &lt;= m, n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= m * n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
        <li>
          There is at least one <code>0</code> in <code>mat</code>.
        </li>
      </ul>
    </div>
  ),
  885: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You start at the cell <code>(rStart, cStart)</code> of an{" "}
        <code>rows x cols</code> grid facing east. The northwest corner is at
        the first row and column in the grid, and the southeast corner is at the
        last row and column.
      </p>

      <p>
        You will walk in a clockwise spiral shape to visit every position in
        this grid. Whenever you move outside the grid's boundary, we continue
        our walk outside the grid (but may return to the grid boundary later.).
        Eventually, we reach all <code>rows * cols</code> spaces of the grid.
      </p>

      <p>
        Return{" "}
        <em>
          an array of coordinates representing the positions of the grid in the
          order you visited them
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_1.png"
        style={{ width: 174, height: 99 }}
      />
      <pre>
        <strong>Input:</strong> rows = 1, cols = 4, rStart = 0, cStart = 0{" "}
        <br />
        <strong>Output:</strong> [[0,0],[0,1],[0,2],[0,3]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_2.png"
        style={{ width: 202, height: 142 }}
      />
      <pre>
        <strong>Input:</strong> rows = 5, cols = 6, rStart = 1, cStart = 4{" "}
        <br />
        <strong>Output:</strong>{" "}
        [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5], <br />
        [3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4], <br />
        [4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= rows, cols &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= rStart &lt; rows</code>
        </li>
        <li>
          <code>0 &lt;= cStart &lt; cols</code>
        </li>
      </ul>
    </div>
  ),
  867: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a 2D integer array <code>matrix</code>, return{" "}
        <em>
          the <strong>transpose</strong> of
        </em>{" "}
        <code>matrix</code>.
      </p>

      <p>
        The <strong>transpose</strong> of a matrix is the matrix flipped over
        its main diagonal, switching the matrix's row and column indices.
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/02/10/hint_transpose.png"
          style={{ width: 600, height: 197 }}
        />
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]] <br />
        <strong>Output:</strong> [[1,4,7],[2,5,8],[3,6,9]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [[1,2,3],[4,5,6]]
        <br />
        <strong>Output:</strong> [[1,4],[2,5],[3,6]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == matrix.length</code>
        </li>
        <li>
          <code>n == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= m * n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1254: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a 2D&nbsp;<code>grid</code> consists of <code>0s</code>{" "}
        (land)&nbsp;and <code>1s</code> (water).&nbsp; An <em>island</em> is a
        maximal 4-directionally connected group of{" "}
        <code>
          <font face="monospace">0</font>s
        </code>{" "}
        and a <em>closed island</em>&nbsp;is an island <strong>totally</strong>
        &nbsp;(all left, top, right, bottom) surrounded by <code>1s.</code>
      </p>

      <p>
        Return the number of <em>closed islands</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/10/31/sample_3_1610.png"
          style={{ width: 240, height: 120 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> grid =
        [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],
        <br />
        [1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
        <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        Islands in gray are closed because they are completely surrounded by
        water (group of 1s).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/10/31/sample_4_1610.png"
          style={{ width: 160, height: 80 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
        <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[1,1,1,1,1,1,1],
        <br />
        &nbsp; [1,0,0,0,0,0,1],
        <br />
        &nbsp; [1,0,1,1,1,0,1],
        <br />
        &nbsp; [1,0,1,0,1,0,1],
        <br />
        &nbsp; [1,0,1,1,1,0,1],
        <br />
        &nbsp; [1,0,0,0,0,0,1],
        <br />
        [1,1,1,1,1,1,1]]
        <br />
        <strong>Output:</strong> 2
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= grid.length, grid[0].length &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= grid[i][j] &lt;=1</code>
        </li>
      </ul>
    </div>
  ),
  1905: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two <code>m x n</code> binary matrices <code>grid1</code>{" "}
        and <code>grid2</code> containing only <code>0</code>'s (representing
        water) and <code>1</code>'s (representing land). An{" "}
        <strong>island</strong> is a group of <code>1</code>'s connected{" "}
        <strong>4-directionally</strong> (horizontal or vertical). Any cells
        outside of the grid are considered water cells.
      </p>

      <p>
        An island in <code>grid2</code> is considered a{" "}
        <strong>sub-island </strong>if there is an island in <code>grid1</code>{" "}
        that contains <strong>all</strong> the cells that make up{" "}
        <strong>this</strong> island in <code>grid2</code>.
      </p>

      <p>
        Return the{" "}
        <em>
          <strong>number</strong> of islands in{" "}
        </em>
        <code>grid2</code>{" "}
        <em>
          that are considered <strong>sub-islands</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/06/10/test1.png"
        style={{ width: 493, height: 205 }}
      />
      <pre>
        <strong>Input:</strong> grid1 =
        [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 =
        [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]
        <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation: </strong>In the picture above, the grid on the left
        is grid1 and the grid on the right is grid2.
        <br />
        The 1s colored red in grid2 are those considered to be part of a
        sub-island. There are three sub-islands.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/06/03/testcasex2.png"
        style={{ width: 491, height: 201 }}
      />
      <pre>
        <strong>Input:</strong> grid1 =
        [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 =
        [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]
        <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation: </strong>In the picture above, the grid on the left
        is grid1 and the grid on the right is grid2.
        <br />
        The 1s colored red in grid2 are those considered to be part of a
        sub-island. There are two sub-islands.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid1.length == grid2.length</code>
        </li>
        <li>
          <code>n == grid1[i].length == grid2[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 500</code>
        </li>
        <li>
          <code>grid1[i][j]</code> and <code>grid2[i][j]</code> are either{" "}
          <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  2679: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> 2D integer array{" "}
        <code>nums</code>. Initially, your score is <code>0</code>. Perform the
        following operations until the matrix becomes empty:
      </p>

      <ol>
        <li>
          From each row in the matrix, select the largest number and remove it.
          In the case of a tie, it does not matter which number is chosen.
        </li>
        <li>
          Identify the highest number amongst all those removed in step 1. Add
          that number to your <strong>score</strong>.
        </li>
      </ol>

      <p>
        Return{" "}
        <em>
          the final <strong>score</strong>.
        </em>
      </p>
      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]] <br />
        <strong>Output:</strong> 15 <br />
        <strong>Explanation:</strong> In the first operation, we remove 7, 6, 6,
        and 3. We then add 7 to our score. Next, we remove 2, 4, 5, and 2. We
        add 5 to our score. Lastly, we remove 1, 2, 3, and 1. We add 3 to our
        score. Thus, our final score is 7 + 5 + 3 = 15.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [[1]] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> We remove 1 and add it to the answer. We
        return 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 300</code>
        </li>
        <li>
          <code>1 &lt;= nums[i].length &lt;= 500</code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i][j] &lt;= 10<sup>3</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2326: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two integers <code>m</code> and <code>n</code>, which
        represent the dimensions of a matrix.
      </p>

      <p>
        You are also given the <code>head</code> of a linked list of integers.
      </p>

      <p>
        Generate an <code>m x n</code> matrix that contains the integers in the
        linked list presented in <strong>spiral</strong> order{" "}
        <strong>(clockwise)</strong>, starting from the{" "}
        <strong>top-left</strong> of the matrix. If there are remaining empty
        spaces, fill them with <code>-1</code>.
      </p>

      <p>
        Return <em>the generated matrix</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/05/09/ex1new.jpg"
        style={{ width: 240, height: 150 }}
      />
      <pre>
        <strong>Input:</strong> m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]{" "}
        <br />
        <strong>Output:</strong> [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]] <br />
        <strong>Explanation:</strong> The diagram above shows how the values are
        printed in the matrix. <br />
        Note that the remaining spaces in the matrix are filled with -1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/05/11/ex2.jpg"
        style={{ width: 221, height: 60 }}
      />
      <pre>
        <strong>Input:</strong> m = 1, n = 4, head = [0,1,2] <br />
        <strong>Output:</strong> [[0,1,2,-1]] <br />
        <strong>Explanation:</strong> The diagram above shows how the values are
        printed from left to right in the matrix. <br />
        The last space in the matrix is set to -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= m, n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= m * n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          The number of nodes in the list is in the range{" "}
          <code>[1, m * n]</code>.
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1428: (
    <div class="markdown-body div-width">
      <div>
        <p>
          <em>
            (This problem is an&nbsp;<strong>interactive problem</strong>.)
          </em>
        </p>

        <p>
          A binary matrix means that all elements are&nbsp;<code>0</code>
          &nbsp;or&nbsp;<code>1</code>. For each&nbsp;
          <strong>individual</strong>
          row of the matrix, this row&nbsp;is sorted in non-decreasing order.
        </p>

        <p>
          Given a row-sorted binary matrix binaryMatrix, return leftmost column
          index(0-indexed) with at least a&nbsp;<code>1</code>&nbsp;in it. If
          such&nbsp;index&nbsp;doesn't exist, return <code>-1</code>.
        </p>

        <p>
          <strong>You can't access the Binary Matrix directly.</strong>&nbsp;
          You may only access the matrix using a&nbsp;<code>BinaryMatrix</code>
          &nbsp;interface:
        </p>

        <ul>
          <li>
            <code>BinaryMatrix.get(row, col)</code> returns the element of the
            matrix&nbsp;at index <code>(row, col)</code>&nbsp;(0-indexed).
          </li>
          <li>
            <code>BinaryMatrix.dimensions()</code>&nbsp;returns a list of 2
            elements&nbsp;<code>[rows, cols]</code>, which means the matrix is{" "}
            <code>rows * cols</code>.
          </li>
        </ul>

        <p>
          Submissions making more than <code>1000</code>&nbsp;calls to&nbsp;
          <code>BinaryMatrix.get</code>&nbsp;will be judged{" "}
          <em>Wrong Answer</em>.&nbsp; Also, any solutions that attempt to
          circumvent the judge&nbsp;will result in disqualification.
        </p>

        <p>
          For custom testing purposes you're given the binary matrix{" "}
          <code>mat</code>&nbsp;as input&nbsp;in the following four examples.
          You will not have&nbsp;access the binary matrix directly.
        </p>

        <p>&nbsp;</p>

        <p>&nbsp;</p>

        <p>&nbsp;</p>
        <p>
          <strong>Example 1:</strong>
        </p>

        <p>
          <strong>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2019/10/25/untitled-diagram-5.jpg"
              style={{ width: 81, height: 81 }}
            />
          </strong>
        </p>

        <pre>
          <strong>Input:</strong> mat = [[0,0],[1,1]] <br />
          <strong>Output:</strong> 0
        </pre>

        <p>
          <strong>Example 2:</strong>
        </p>

        <p>
          <strong>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2019/10/25/untitled-diagram-4.jpg"
              style={{ width: 81, height: 81 }}
            />
          </strong>
        </p>

        <pre>
          <strong>Input:</strong> mat = [[0,0],[0,1]] <br />
          <strong>Output:</strong> 1
        </pre>

        <p>
          <strong>Example 3:</strong>
        </p>

        <p>
          <strong>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2019/10/25/untitled-diagram-3.jpg"
              style={{ width: 81, height: 81 }}
            />
          </strong>
        </p>

        <pre>
          <strong>Input:</strong> mat = [[0,0],[0,0]] <br />
          <strong>Output:</strong> -1
        </pre>

        <p>
          <strong>Example 4:</strong>
        </p>

        <p>
          <strong>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2019/10/25/untitled-diagram-6.jpg"
              style={{ width: 161, height: 121 }}
            />
          </strong>
        </p>

        <pre>
          <strong>Input:</strong> mat = [[0,0,0,1],[0,0,1,1],[0,1,1,1]] <br />
          <strong>Output:</strong> 1
        </pre>

        <p>&nbsp;</p>
        <p>
          <strong>Constraints:</strong>
        </p>

        <ul>
          <li>
            <code>rows == mat.length</code>
          </li>
          <li>
            <code>cols == mat[i].length</code>
          </li>
          <li>
            <code>1 &lt;= rows, cols&nbsp;&lt;= 100</code>
          </li>
          <li>
            <code>mat[i][j]</code> is either <code>0</code>&nbsp;or&nbsp;
            <code>1</code>.
          </li>
          <li>
            <code>mat[i]</code>&nbsp;is sorted in a&nbsp;non-decreasing way.
          </li>
        </ul>
      </div>
    </div>
  ),
  363: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> matrix <code>matrix</code> and an integer{" "}
        <code>k</code>, return{" "}
        <em>
          the max sum of a rectangle in the matrix such that its sum is no
          larger than
        </em>{" "}
        <code>k</code>.
      </p>

      <p>
        It is <strong>guaranteed</strong> that there will be a rectangle with a
        sum no larger than <code>k</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/18/sum-grid.jpg"
        style={{ width: 255, height: 176 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[1,0,1],[0,-2,3]], k = 2<br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> Because the sum of the blue rectangle [[0,
        1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [[2,2,-1]], k = 3 <br />
        <strong>Output:</strong> 3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == matrix.length</code>
        </li>
        <li>
          <code>n == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
        <li>
          <code>-100 &lt;= matrix[i][j] &lt;= 100</code>
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= k &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> What if the number of rows is much larger
        than the number of columns?
      </p>
    </div>
  ),
  422: (
    <div class="markdown-body div-width">
      <p>
        Given a sequence of words, check whether it forms a valid word square.
      </p>

      <p>
        A sequence of words forms a valid word square if the <i>k</i>
        <sup>th</sup> row and column read the exact same string, where 0 ≤{" "}
        <i>k</i> &lt; max(numRows, numColumns).
      </p>

      <p>
        <b>Note:</b>
        <br />
      </p>
      <ul>
        <li>
          The number of words given is at least 1 and does not exceed 500.
        </li>
        <li>Word length will be at least 1 and does not exceed 500.</li>
        <li>
          Each word contains only lowercase English alphabet <code>a-z</code>.
        </li>
      </ul>
      <p></p>

      <p>
        <b>Example 1:</b>
      </p>
      <pre>
        <p>Input:</p>
        {`[
  "abcd",
  "bnrt",
  "crmy",
  "dtye"
]`}
        <br /> <br />
        <p>Output:</p>
        true
        <br /> <br />
        <p>Explanation:</p>
        <br />
        The first row and first column both read "abcd".
        <br />
        The second row and second column both read "bnrt".
        <br />
        The third row and third column both read "crmy".
        <br />
        The fourth row and fourth column both read "dtye".
        <br />
        Therefore, it is a valid word square.
      </pre>
      <p></p>

      <p>
        <b>Example 2:</b>
      </p>
      <pre>
        <p>Input:</p>
        <br /> <br />
        {`[
  "abcd",
  "bnrt",
  "crm",
  "dt"
]`}
        <br /> <br />
        <p>Output:</p>
        true
        <br /> <br />
        <p>Explanation:</p>
        <br />
        The first row and first column both read "abcd".
        <br />
        The second row and second column both read "bnrt".
        <br />
        The third row and third column both read "crm".
        <br />
        The fourth row and fourth column both read "dt".
        <br />
        <br />
        Therefore, it is a valid word square.
      </pre>
      <p></p>

      <p>
        <b>Example 3:</b>
      </p>
      <pre>
        <p>Input:</p>
        [ "ball", "area", "read", "lady" ]
        <br /> <br />
        <p>Output:</p>
        false
        <br /> <br />
        <p>Explanation:</p>
        <br />
        The third row reads "read" while the third column reads "lead".
        <br />
        Therefore, it is <b>NOT</b> a valid word square.
      </pre>
    </div>
  ),
  490: (
    <article role="main" class="blog-post">
      <p>
        There is a ball in a <code>maze</code> with empty spaces (represented as{" "}
        <code>0</code>) and walls (represented as <code>1</code>). The ball can
        go through the empty spaces by rolling{" "}
        <strong>up, down, left or right</strong>, but it won't stop rolling
        until hitting a wall. When the ball stops, it could choose the next
        direction.
      </p>

      <p>
        Given the <code>m x n</code> <code>maze</code>, the ball's{" "}
        <code>start</code> position and the <code>destination</code>, where{" "}
        <code>
          start = [start<sub>row</sub>, start<sub>col</sub>]
        </code>{" "}
        and{" "}
        <code>
          destination = [destination<sub>row</sub>, destination<sub>col</sub>]
        </code>
        , return <code>true</code> if the ball can stop at the destination,
        otherwise return <code>false</code>.
      </p>

      <p>
        You may assume that{" "}
        <strong>the borders of the maze are all walls</strong> (see examples).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0490.The%20Maze/images/maze1-1-grid.jpg"
          style={{ width: 573, height: 573 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> maze =
        [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start =
        [0,4], destination = [4,4] <br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong> One possible way is : left -&gt; down
        -&gt; left -&gt; down -&gt; right -&gt; down -&gt; right.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0490.The%20Maze/images/maze1-2-grid.jpg"
          style={{ width: 573, height: 573 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> maze =
        [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], <br />
        start = [0,4], destination = [3,2] <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> There is no way for the ball to stop at
        the destination. Notice that you can pass through the destination but
        you cannot stop there.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> maze =
        [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], <br />
        start = [4,3], destination = [0,1]
        <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == maze.length</code>
        </li>
        <li>
          <code>n == maze[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
        <li>
          <code>maze[i][j]</code> is <code>0</code> or <code>1</code>.
        </li>
        <li>
          <code>start.length == 2</code>
        </li>
        <li>
          <code>destination.length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= start<sub>row</sub>, destination<sub>row</sub> &lt;= m
          </code>
        </li>
        <li>
          <code>
            0 &lt;= start<sub>col</sub>, destination<sub>col</sub> &lt;= n
          </code>
        </li>
        <li>
          Both the ball and the destination exist in an empty space, and they
          will not be in the same position initially.
        </li>
        <li>
          The maze contains <strong>at least 2 empty spaces</strong>.
        </li>
      </ul>
    </article>
  ),
  529: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Let's play the minesweeper game (
        <a
          href="https://en.wikipedia.org/wiki/Minesweeper_(video_game)"
          target="_blank"
          rel="noreferrer"
        >
          Wikipedia
        </a>
        ,{" "}
        <a href="http://minesweeperonline.com" target="_blank" rel="noreferrer">
          online game
        </a>
        )!
      </p>

      <p>
        You are given an <code>m x n</code> char matrix <code>board</code>{" "}
        representing the game board where:
      </p>

      <ul>
        <li>
          <code>'M'</code> represents an unrevealed mine,
        </li>
        <li>
          <code>'E'</code> represents an unrevealed empty square,
        </li>
        <li>
          <code>'B'</code> represents a revealed blank square that has no
          adjacent mines (i.e., above, below, left, right, and all 4 diagonals),
        </li>
        <li>
          digit (<code>'1'</code> to <code>'8'</code>) represents how many mines
          are adjacent to this revealed square, and
        </li>
        <li>
          <code>'X'</code> represents a revealed mine.
        </li>
      </ul>

      <p>
        You are also given an integer array <code>click</code> where{" "}
        <code>
          click = [click<sub>r</sub>, click<sub>c</sub>]
        </code>{" "}
        represents the next click position among all the unrevealed squares (
        <code>'M'</code> or <code>'E'</code>).
      </p>

      <p>
        Return{" "}
        <em>
          the board after revealing this position according to the following
          rules
        </em>
        :
      </p>

      <ul>
        <li>
          If a mine <code>'M'</code> is revealed, then the game is over. You
          should change it to <code>'X'</code>.
        </li>
        <li>
          If an empty square <code>'E'</code> with no adjacent mines is
          revealed, then change it to a revealed blank <code>'B'</code> and all
          of its adjacent unrevealed squares should be revealed recursively.
        </li>
        <li>
          If an empty square <code>'E'</code> with at least one adjacent mine is
          revealed, then change it to a digit (<code>'1'</code> to{" "}
          <code>'8'</code>) representing the number of adjacent mines.
        </li>
        <li>Return the board when no more squares will be revealed.</li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/08/09/untitled.jpeg"
        style={{ width: 489, maxWidth: 400, height: 269 }}
      />
      <pre>
        <strong>Input:</strong> board =
        [["E","E","E","E","E"],["E","E","M","E","E"],
        <br />
        ["E","E","E","E","E"],["E","E","E","E","E"]], click = [3,0] <br />
        <strong>Output:</strong>{" "}
        [["B","1","E","1","B"],["B","1","M","1","B"],["B","1","1","1","B"],["B","B","B","B","B"]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/08/09/untitled-2.jpeg"
        style={{ width: 489, maxWidth: 400, height: 269 }}
      />
      <pre>
        <strong>Input:</strong> board =
        [["B","1","E","1","B"],["B","1","M","1","B"],
        <br />
        ["B","1","1","1","B"],["B","B","B","B","B"]], click = [1,2]
        <br />
        <strong>Output:</strong>{" "}
        [["B","1","E","1","B"],["B","1","X","1","B"],["B","1","1","1","B"],["B","B","B","B","B"]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == board.length</code>
        </li>
        <li>
          <code>n == board[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 50</code>
        </li>
        <li>
          <code>board[i][j]</code> is either <code>'M'</code>, <code>'E'</code>,{" "}
          <code>'B'</code>, or a digit from <code>'1'</code> to <code>'8'</code>
          .
        </li>
        <li>
          <code>click.length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= click<sub>r</sub> &lt; m
          </code>
        </li>
        <li>
          <code>
            0 &lt;= click<sub>c</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            board[click<sub>r</sub>][click<sub>c</sub>]
          </code>{" "}
          is either <code>'M'</code> or <code>'E'</code>.
        </li>
      </ul>
    </div>
  ),
  566: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        In MATLAB, there is a handy function called <code>reshape</code> which
        can reshape an <code>m x n</code> matrix into a new one with a different
        size <code>r x c</code> keeping its original data.
      </p>

      <p>
        You are given an <code>m x n</code> matrix <code>mat</code> and two
        integers <code>r</code> and <code>c</code> representing the number of
        rows and the number of columns of the wanted reshaped matrix.
      </p>

      <p>
        The reshaped matrix should be filled with all the elements of the
        original matrix in the same row-traversing order as they were.
      </p>

      <p>
        If the <code>reshape</code> operation with given parameters is possible
        and legal, output the new reshaped matrix; Otherwise, output the
        original matrix.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/24/reshape1-grid.jpg"
        style={{ width: 613, height: 173 }}
      />
      <pre>
        <strong>Input:</strong> mat = [[1,2],[3,4]], r = 1, c = 4 <br />
        <strong>Output:</strong> [[1,2,3,4]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/24/reshape2-grid.jpg"
        style={{ width: 453, height: 173 }}
      />
      <pre>
        <strong>Input:</strong> mat = [[1,2],[3,4]], r = 2, c = 4<br />
        <strong>Output:</strong> [[1,2],[3,4]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == mat.length</code>
        </li>
        <li>
          <code>n == mat[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
        <li>
          <code>-1000 &lt;= mat[i][j] &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= r, c &lt;= 300</code>
        </li>
      </ul>
    </div>
  ),
  741: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>n x n</code> <code>grid</code> representing a
        field of cherries, each cell is one of three possible integers.
      </p>

      <ul>
        <li>
          <code>0</code> means the cell is empty, so you can pass through,
        </li>
        <li>
          <code>1</code> means the cell contains a cherry that you can pick up
          and pass through, or
        </li>
        <li>
          <code>-1</code> means the cell contains a thorn that blocks your way.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the maximum number of cherries you can collect by following the rules
          below
        </em>
        :
      </p>

      <ul>
        <li>
          Starting at the position <code>(0, 0)</code> and reaching{" "}
          <code>(n - 1, n - 1)</code> by moving right or down through valid path
          cells (cells with value <code>0</code> or <code>1</code>).
        </li>
        <li>
          After reaching <code>(n - 1, n - 1)</code>, returning to{" "}
          <code>(0, 0)</code> by moving left or up through valid path cells.
        </li>
        <li>
          When passing through a path cell containing a cherry, you pick it up,
          and the cell becomes an empty cell <code>0</code>.
        </li>
        <li>
          If there is no valid path between <code>(0, 0)</code> and{" "}
          <code>(n - 1, n - 1)</code>, then no cherries can be collected.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/14/grid.jpg"
        style={{ width: 242, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[0,1,-1],[1,0,-1],[1,1,1]] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The player started at (0, 0) and went
        down, down, right right to reach (2, 2). <br />
        4 cherries were picked up during this single trip, and the matrix
        becomes [[0,1,-1],[0,0,-1],[0,0,0]]. <br />
        Then, the player went left, up, up, left to return home, picking up one
        more cherry. <br />
        The total number of cherries picked up is 5, and this is the maximum
        possible.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[1,1,-1],[1,-1,1],[-1,1,1]] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 50</code>
        </li>
        <li>
          <code>grid[i][j]</code> is <code>-1</code>, <code>0</code>, or{" "}
          <code>1</code>.
        </li>
        <li>
          <code>grid[0][0] != -1</code>
        </li>
        <li>
          <code>grid[n - 1][n - 1] != -1</code>
        </li>
      </ul>
    </div>
  ),
  766: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> <code>matrix</code>, return&nbsp;
        <em>
          <code>true</code>&nbsp;if the matrix is Toeplitz. Otherwise, return{" "}
          <code>false</code>.
        </em>
      </p>

      <p>
        A matrix is <strong>Toeplitz</strong> if every diagonal from top-left to
        bottom-right has the same elements.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/04/ex1.jpg"
        style={{ width: 322, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> <br />
        In the above grid, the&nbsp;diagonals are: <br />
        "[9]", "[5, 5]", "[1, 1, 1]", "[2, 2, 2]", "[3, 3]", "[4]". <br />
        In each diagonal all elements are the same, so the answer is True.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/04/ex2.jpg"
        style={{ width: 162, height: 162 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[1,2],[2,2]] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> <br />
        The diagonal "[1, 2]" has different elements.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == matrix.length</code>
        </li>
        <li>
          <code>n == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 20</code>
        </li>
        <li>
          <code>0 &lt;= matrix[i][j] &lt;= 99</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <ul>
        <li>
          What if the <code>matrix</code> is stored on disk, and the memory is
          limited such that you can only load at most one row of the matrix into
          the memory at once?
        </li>
        <li>
          What if the <code>matrix</code> is so large that you can only load up
          a partial row into the memory at once?
        </li>
      </ul>
    </div>
  ),
  782: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>n x n</code> binary grid <code>board</code>. In
        each move, you can swap any two rows with each other, or any two columns
        with each other.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum number of moves to transform the board into a{" "}
          <strong>chessboard board</strong>
        </em>
        . If the task is impossible, return <code>-1</code>.
      </p>

      <p>
        A <strong>chessboard board</strong> is a board where no <code>0</code>'s
        and no <code>1</code>'s are 4-directionally adjacent.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/06/29/chessboard1-grid.jpg"
        style={{ width: 164, height: 165 }}
      />
      <pre>
        <strong>Input:</strong> board =
        [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]
        <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> One potential sequence of moves is shown.
        <br />
        The first move swaps the first and second column.
        <br />
        The second move swaps the second and third row.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/06/29/chessboard2-grid.jpg"
        style={{ width: 164, height: 165 }}
      />
      <pre>
        <strong>Input:</strong> board = [[0,1],[1,0]]
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> Also note that the board with 0 in the top
        left corner, is also a valid chessboard.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/06/29/chessboard3-grid.jpg"
        style={{ width: 164, height: 165 }}
      />
      <pre>
        <strong>Input:</strong> board = [[1,0],[1,0]]
        <br />
        <strong>Output:</strong> -1
        <br />
        <strong>Explanation:</strong> No matter what sequence of moves you make,
        you cannot end with a valid chessboard.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == board.length</code>
        </li>
        <li>
          <code>n == board[i].length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 30</code>
        </li>
        <li>
          <code>board[i][j]</code> is either&nbsp;<code>0</code> or{" "}
          <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  794: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a Tic-Tac-Toe board as a string array <code>board</code>, return{" "}
        <code>true</code> if and only if it is possible to reach this board
        position during the course of a valid tic-tac-toe game.
      </p>

      <p>
        The board is a <code>3 x 3</code> array that consists of characters{" "}
        <code>' '</code>, <code>'X'</code>, and <code>'O'</code>. The{" "}
        <code>' '</code> character represents an empty square.
      </p>

      <p>Here are the rules of Tic-Tac-Toe:</p>

      <ul>
        <li>
          Players take turns placing characters into empty squares{" "}
          <code>' '</code>.
        </li>
        <li>
          The first player always places <code>'X'</code> characters, while the
          second player always places <code>'O'</code> characters.
        </li>
        <li>
          <code>'X'</code> and <code>'O'</code> characters are always placed
          into empty squares, never filled ones.
        </li>
        <li>
          The game ends when there are three of the same (non-empty) character
          filling any row, column, or diagonal.
        </li>
        <li>The game also ends if all squares are non-empty.</li>
        <li>No more moves can be played if the game is over.</li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/15/tictactoe1-grid.jpg"
        style={{ width: 253, height: 253 }}
      />
      <pre>
        <strong>Input:</strong> board = ["O "," "," "] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The first player always plays "X".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/15/tictactoe2-grid.jpg"
        style={{ width: 253, height: 253 }}
      />
      <pre>
        <strong>Input:</strong> board = ["XOX"," X "," "] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Players take turns making moves.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/15/tictactoe4-grid.jpg"
        style={{ width: 253, height: 253 }}
      />
      <pre>
        <strong>Input:</strong> board = ["XOX","O O","XOX"]
        <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>board.length == 3</code>
        </li>
        <li>
          <code>board[i].length == 3</code>
        </li>
        <li>
          <code>board[i][j]</code> is either <code>'X'</code>, <code>'O'</code>,
          or <code>' '</code>.
        </li>
      </ul>
    </div>
  ),
  827: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>n x n</code> binary matrix <code>grid</code>. You
        are allowed to change <strong>at most one</strong> <code>0</code> to be{" "}
        <code>1</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the size of the largest <strong>island</strong> in
        </em>{" "}
        <code>grid</code> <em>after applying this operation</em>.
      </p>

      <p>
        An <strong>island</strong> is a 4-directionally connected group of{" "}
        <code>1</code>s.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[1,0],[0,1]] <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> Change one 0 to 1 and connect two 1s, then
        we get an island with area = 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[1,1],[1,0]]
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation: </strong>Change the 0 to 1 and make the island
        bigger, only one island with area = 4.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[1,1],[1,1]]
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> Can't change any 0 to 1, only one island
        with area = 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 500</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  832: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>n x n</code> binary matrix <code>image</code>, flip the
        image <strong>horizontally</strong>, then invert it, and return{" "}
        <em>the resulting image</em>.
      </p>

      <p>
        To flip an image horizontally means that each row of the image is
        reversed.
      </p>

      <ul>
        <li>
          For example, flipping <code>[1,1,0]</code> horizontally results in{" "}
          <code>[0,1,1]</code>.
        </li>
      </ul>

      <p>
        To invert an image means that each <code>0</code> is replaced by{" "}
        <code>1</code>, and each <code>1</code> is replaced by <code>0</code>.
      </p>

      <ul>
        <li>
          For example, inverting <code>[0,1,1]</code> results in{" "}
          <code>[1,0,0]</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> image = [[1,1,0],[1,0,1],[0,0,0]] <br />
        <strong>Output:</strong> [[1,0,0],[0,1,0],[1,1,1]]
        <br />
        <strong>Explanation:</strong> First reverse each row:
        [[0,1,1],[1,0,1],[0,0,0]].
        <br />
        Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> image =
        [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
        <br />
        <strong>Output:</strong> [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
        <br />
        <strong>Explanation:</strong> First reverse each row:
        [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].
        <br />
        Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == image.length</code>
        </li>
        <li>
          <code>n == image[i].length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 20</code>
        </li>
        <li>
          <code>images[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  840: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <code>3 x 3</code> <strong>magic square</strong> is a{" "}
        <code>3 x 3</code> grid filled with distinct numbers{" "}
        <strong>from </strong>1<strong> to </strong>9 such that each row,
        column, and both diagonals all have the same sum.
      </p>

      <p>
        Given a <code>row x col</code> <code>grid</code> of integers, how many{" "}
        <code>3 x 3</code> magic square subgrids are there?
      </p>

      <p>
        Note: while a magic square can only contain numbers from 1 to 9,{" "}
        <code>grid</code> may contain numbers up to 15.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/11/magic_main.jpg"
        style={{ width: 322, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]] <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation: </strong>
        <br />
        The following subgrid is a 3 x 3 magic square:
        <br />
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/09/11/magic_valid.jpg"
          style={{ width: 242, height: 242 }}
        />
        while this one is not:
        <br />
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/09/11/magic_invalid.jpg"
          style={{ width: 242, height: 242 }}
        />
        In total, there is only one magic square inside the given grid.
        <br />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[8]]
        <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>row == grid.length</code>
        </li>
        <li>
          <code>col == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= row, col &lt;= 10</code>
        </li>
        <li>
          <code>0 &lt;= grid[i][j] &lt;= 15</code>
        </li>
      </ul>
    </div>
  ),
  835: (
    <div class="elfjS">
      <p>
        You are given two images, <code>img1</code> and <code>img2</code>,
        represented as binary, square matrices of size <code>n x n</code>. A
        binary matrix has only <code>0</code>s and <code>1</code>s as values.
      </p>

      <p>
        We <strong>translate</strong> one image however we choose by sliding all
        the <code>1</code> bits left, right, up, and/or down any number of
        units. We then place it on top of the other image. We can then calculate
        the <strong>overlap</strong> by counting the number of positions that
        have a <code>1</code> in <strong>both</strong> images.
      </p>

      <p>
        Note also that a translation does <strong>not</strong> include any kind
        of rotation. Any <code>1</code> bits that are translated outside of the
        matrix borders are erased.
      </p>

      <p>
        Return <em>the largest possible overlap</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/09/overlap1.jpg"
        style={{ width: 450, height: 231 }}
      />
      <pre>
        <strong>Input:</strong> img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 =
        [[0,0,0],[0,1,1],[0,0,1]] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> We translate img1 to right by 1 unit and
        down by 1 unit. <br />
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/09/09/overlap_step1.jpg"
          style={{ width: 450, height: 105 }}
        />
        The number of positions that have a 1 in both images is 3 (shown in
        red). <br />
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/09/09/overlap_step2.jpg"
          style={{ width: 450, height: 231 }}
        />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> img1 = [[1]], img2 = [[1]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> img1 = [[0]], img2 = [[0]] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == img1.length == img1[i].length</code>
        </li>
        <li>
          <code>n == img2.length == img2[i].length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 30</code>
        </li>
        <li>
          <code>img1[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
        <li>
          <code>img2[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  909: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>n x n</code> integer matrix <code>board</code>{" "}
        where the cells are labeled from <code>1</code> to{" "}
        <code>
          n<sup>2</sup>
        </code>{" "}
        in a{" "}
        <a
          href="https://en.wikipedia.org/wiki/Boustrophedon"
          target="_blank"
          rel="noreferrer"
        >
          <strong>Boustrophedon style</strong>
        </a>{" "}
        starting from the bottom left of the board (i.e.{" "}
        <code>board[n - 1][0]</code>) and alternating direction each row.
      </p>

      <p>
        You start on square <code>1</code> of the board. In each move, starting
        from square <code>curr</code>, do the following:
      </p>

      <ul>
        <li>
          Choose a destination square <code>next</code> with a label in the
          range{" "}
          <code>
            [curr + 1, min(curr + 6, n<sup>2</sup>)]
          </code>
          .
          <ul>
            <li>
              This choice simulates the result of a standard{" "}
              <strong>6-sided die roll</strong>: i.e., there are always at most
              6 destinations, regardless of the size of the board.
            </li>
          </ul>
        </li>
        <li>
          If <code>next</code> has a snake or ladder, you <strong>must</strong>{" "}
          move to the destination of that snake or ladder. Otherwise, you move
          to <code>next</code>.
        </li>
        <li>
          The game ends when you reach the square{" "}
          <code>
            n<sup>2</sup>
          </code>
          .
        </li>
      </ul>

      <p>
        A board square on row <code>r</code> and column <code>c</code> has a
        snake or ladder if <code>board[r][c] != -1</code>. The destination of
        that snake or ladder is <code>board[r][c]</code>. Squares <code>1</code>{" "}
        and{" "}
        <code>
          n<sup>2</sup>
        </code>{" "}
        are not the starting points of any snake or ladder.
      </p>

      <p>
        Note that you only take a snake or ladder at most once per dice roll. If
        the destination to a snake or ladder is the start of another snake or
        ladder, you do <strong>not</strong> follow the subsequent&nbsp;snake or
        ladder.
      </p>

      <ul>
        <li>
          For example, suppose the board is <code>[[-1,4],[-1,3]]</code>, and on
          the first move, your destination square is <code>2</code>. You follow
          the ladder to square <code>3</code>, but do <strong>not</strong>{" "}
          follow the subsequent ladder to <code>4</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>the least number of dice rolls required to reach the square </em>
        <code>
          n<sup>2</sup>
        </code>
        <em>. If it is not possible to reach the square, return </em>
        <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/09/23/snakes.png"
        style={{ width: 500, height: 394 }}
      />
      <pre>
        <strong>Input:</strong> board =
        [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1], <br />{" "}
        [-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> <br />
        In the beginning, you start at square 1 (at row 5, column 0). <br />
        You decide to move to square 2 and must take the ladder to square 15.{" "}
        <br />
        You then decide to move to square 17 and must take the snake to square
        13. <br />
        You then decide to move to square 14 and must take the ladder to square
        35. <br />
        You then decide to move to square 36, ending the game. <br />
        This is the lowest possible number of moves to reach the last square, so
        return 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> board = [[-1,-1],[-1,3]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == board.length == board[i].length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 20</code>
        </li>
        <li>
          <code>board[i][j]</code> is either <code>-1</code> or in the range{" "}
          <code>
            [1, n<sup>2</sup>]
          </code>
          .
        </li>
        <li>
          The squares labeled <code>1</code> and{" "}
          <code>
            n<sup>2</sup>
          </code>{" "}
          are not the starting points of any snake or ladder.
        </li>
      </ul>
    </div>
  ),
  980: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>m x n</code> integer array <code>grid</code>{" "}
        where <code>grid[i][j]</code> could be:
      </p>

      <ul>
        <li>
          <code>1</code> representing the starting square. There is exactly one
          starting square.
        </li>
        <li>
          <code>2</code> representing the ending square. There is exactly one
          ending square.
        </li>
        <li>
          <code>0</code> representing empty squares we can walk over.
        </li>
        <li>
          <code>-1</code> representing obstacles that we cannot walk over.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the number of 4-directional walks from the starting square to the
          ending square, that walk over every non-obstacle square exactly once
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/02/lc-unique1.jpg"
        style={{ width: 324, height: 245 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> We have the following two paths: <br />
        1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2){" "}
        <br />
        2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/02/lc-unique2.jpg"
        style={{ width: 324, height: 245 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> We have the following four paths: <br />
        1.
        (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3){" "}
        <br />
        2.
        (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3){" "}
        <br />
        3.
        (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3){" "}
        <br />
        4.
        (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/02/lc-unique3-.jpg"
        style={{ width: 164, height: 165 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[0,1],[2,0]] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There is no path that walks over every
        empty square exactly once. <br />
        Note that the starting and ending square can be anywhere in the grid.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 20</code>
        </li>
        <li>
          <code>1 &lt;= m * n &lt;= 20</code>
        </li>
        <li>
          <code>-1 &lt;= grid[i][j] &lt;= 2</code>
        </li>
        <li>There is exactly one starting cell and one ending cell.</li>
      </ul>
    </div>
  ),
  1074: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <code>matrix</code>&nbsp;and a <code>target</code>, return the
        number of non-empty submatrices that sum to{" "}
        <font face="monospace">target</font>.
      </p>

      <p>
        A submatrix <code>x1, y1, x2, y2</code> is the set of all cells{" "}
        <code>matrix[x][y]</code> with <code>x1 &lt;= x &lt;= x2</code> and{" "}
        <code>y1 &lt;= y &lt;= y2</code>.
      </p>

      <p>
        Two submatrices <code>(x1, y1, x2, y2)</code> and{" "}
        <code>(x1', y1', x2', y2')</code> are different if they have some
        coordinate&nbsp;that is different: for example, if{" "}
        <code>x1 != x1'</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/02/mate1.jpg"
        style={{ width: 242, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0{" "}
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> The four 1x1 submatrices that only contain
        0.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [[1,-1],[-1,1]], target = 0<br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation:</strong> The two 1x2 submatrices, plus the two 2x1
        submatrices, plus the 2x2 submatrix.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [[904]], target = 0<br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= matrix.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= matrix[0].length &lt;= 100</code>
        </li>
        <li>
          <code>-1000 &lt;= matrix[i][j] &lt;= 1000</code>
        </li>
        <li>
          <code>-10^8 &lt;= target &lt;= 10^8</code>
        </li>
      </ul>
    </div>
  ),
  1091: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>n x n</code> binary matrix <code>grid</code>, return{" "}
        <em>
          the length of the shortest <strong>clear path</strong> in the matrix
        </em>
        . If there is no clear path, return <code>-1</code>.
      </p>

      <p>
        A <strong>clear path</strong> in a binary matrix is a path from the{" "}
        <strong>top-left</strong> cell (i.e., <code>(0, 0)</code>) to the{" "}
        <strong>bottom-right</strong> cell (i.e., <code>(n - 1, n - 1)</code>)
        such that:
      </p>

      <ul>
        <li>
          All the visited cells of the path are <code>0</code>.
        </li>
        <li>
          All the adjacent cells of the path are{" "}
          <strong>8-directionally</strong> connected (i.e., they are different
          and they share an edge or a corner).
        </li>
      </ul>

      <p>
        The <strong>length of a clear path</strong> is the number of visited
        cells of this path.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/18/example1_1.png"
        style={{ width: 500, height: 234 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[0,1],[1,0]] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/18/example2_1.png"
        style={{ height: 216, width: 500 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[0,0,0],[1,1,0],[1,1,0]]
        <br />
        <strong>Output:</strong> 4
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[1,0,0],[1,1,0],[1,1,0]]
        <br />
        <strong>Output:</strong> -1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>grid[i][j] is 0 or 1</code>
        </li>
      </ul>
    </div>
  ),
  1139: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a 2D <code>grid</code> of <code>0</code>s and <code>1</code>s,
        return the number of elements in&nbsp;the largest{" "}
        <strong>square</strong>&nbsp;subgrid that has all <code>1</code>s on its{" "}
        <strong>border</strong>, or <code>0</code> if such a
        subgrid&nbsp;doesn't exist in the <code>grid</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[1,1,1],[1,0,1],[1,1,1]] <br />
        <strong>Output:</strong> 9
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[1,1,0,0]]
        <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= grid.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= grid[0].length &lt;= 100</code>
        </li>
        <li>
          <code>grid[i][j]</code> is <code>0</code> or <code>1</code>
        </li>
      </ul>
    </div>
  ),
  1275: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        <strong>Tic-tac-toe</strong> is played by two players <code>A</code> and{" "}
        <code>B</code> on a <code>3 x 3</code> grid. The rules of Tic-Tac-Toe
        are:
      </p>

      <ul>
        <li>
          Players take turns placing characters into empty squares{" "}
          <code>' '</code>.
        </li>
        <li>
          The first player <code>A</code> always places <code>'X'</code>{" "}
          characters, while the second player <code>B</code> always places{" "}
          <code>'O'</code> characters.
        </li>
        <li>
          <code>'X'</code> and <code>'O'</code> characters are always placed
          into empty squares, never on filled ones.
        </li>
        <li>
          The game ends when there are <strong>three</strong> of the same
          (non-empty) character filling any row, column, or diagonal.
        </li>
        <li>The game also ends if all squares are non-empty.</li>
        <li>No more moves can be played if the game is over.</li>
      </ul>

      <p>
        Given a 2D integer array <code>moves</code> where{" "}
        <code>
          moves[i] = [row<sub>i</sub>, col<sub>i</sub>]
        </code>{" "}
        indicates that the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        move will be played on{" "}
        <code>
          grid[row<sub>i</sub>][col<sub>i</sub>]
        </code>
        . return <em>the winner of the game if it exists</em> (<code>A</code> or{" "}
        <code>B</code>). In case the game ends in a draw return{" "}
        <code>"Draw"</code>. If there are still movements to play return{" "}
        <code>"Pending"</code>.
      </p>

      <p>
        You can assume that <code>moves</code> is valid (i.e., it follows the
        rules of <strong>Tic-Tac-Toe</strong>), the grid is initially empty, and{" "}
        <code>A</code> will play first.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/09/22/xo1-grid.jpg"
        style={{ width: 244, height: 245 }}
      />
      <pre>
        <strong>Input:</strong> moves = [[0,0],[2,0],[1,1],[2,1],[2,2]] <br />
        <strong>Output:</strong> "A"
        <br />
        <strong>Explanation:</strong> A wins, they always play first.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/09/22/xo2-grid.jpg"
        style={{ width: 244, height: 245 }}
      />
      <pre>
        <strong>Input:</strong> moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
        <br />
        <strong>Output:</strong> "B"
        <br />
        <strong>Explanation:</strong> B wins.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/09/22/xo3-grid.jpg"
        style={{ width: 244, height: 245 }}
      />
      <pre>
        <strong>Input:</strong> moves =
        [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
        <br />
        <strong>Output:</strong> "Draw"
        <br />
        <strong>Explanation:</strong> The game ends in a draw since there are no
        moves to make.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= moves.length &lt;= 9</code>
        </li>
        <li>
          <code>moves[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= row<sub>i</sub>, col<sub>i</sub> &lt;= 2
          </code>
        </li>
        <li>
          There are no repeated elements on <code>moves</code>.
        </li>
        <li>
          <code>moves</code> follow the rules of tic tac toe.
        </li>
      </ul>
    </div>
  ),
  1277: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <code>m * n</code> matrix of ones and zeros, return how many{" "}
        <strong>square</strong> submatrices have all ones.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix = [ &nbsp; [0,1,1,1], &nbsp; [1,1,1,1],
        &nbsp; [0,1,1,1] ] <br />
        <strong>Output:</strong> 15 <br />
        <strong>Explanation:</strong> <br />
        There are <strong>10</strong> squares of side 1. <br />
        There are <strong>4</strong> squares of side 2. <br />
        There is <strong>1</strong> square of side 3. <br />
        Total number of squares = 10 + 4 + 1 = <strong>15</strong>.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matrix =
        {`[
      [1,0,1],
      [1,1,0],
      [1,1,0]
    ]`}{" "}
        <br />
        <strong>Output:</strong> 7
        <strong>
          {" "}
          <br />
          Explanation:
        </strong>
        There are <b>6</b> squares of side 1. <br />
        There is <strong>1</strong> square of side 2. <br />
        Total number of squares = 6 + 1 = <b>7</b>.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= arr.length&nbsp;&lt;= 300</code>
        </li>
        <li>
          <code>1 &lt;= arr[0].length&nbsp;&lt;= 300</code>
        </li>
        <li>
          <code>0 &lt;= arr[i][j] &lt;= 1</code>
        </li>
      </ul>
    </div>
  ),
  1293: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>m x n</code> integer matrix <code>grid</code>{" "}
        where each cell is either <code>0</code> (empty) or <code>1</code>{" "}
        (obstacle). You can move up, down, left, or right from and to an empty
        cell in <strong>one step</strong>.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum number of <strong>steps</strong> to walk from the upper
          left corner{" "}
        </em>
        <code>(0, 0)</code>
        <em> to the lower right corner </em>
        <code>(m - 1, n - 1)</code>
        <em>
          {" "}
          given that you can eliminate <strong>at most</strong>{" "}
        </em>
        <code>k</code>
        <em> obstacles</em>. If it is not possible to find such walk return{" "}
        <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/09/30/short1-grid.jpg"
        style={{ width: 244, height: 405 }}
      />
      <pre>
        <strong>Input:</strong> grid =
        [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1 <br />
        <strong>Output:</strong> 6<br />
        <strong>Explanation:</strong> <br />
        The shortest path without eliminating any obstacle is 10.
        <br />
        The shortest path with one obstacle elimination at position (3,2) is 6.
        Such path is (0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2)
        <br /> -&gt; (2,2) -&gt; <strong>(3,2)</strong> -&gt; (4,2).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/09/30/short2-grid.jpg"
        style={{ width: 244, height: 245 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1<br />
        <strong>Output:</strong> -1
        <br />
        <strong>Explanation:</strong> We need to eliminate at least two
        obstacles to find such a walk.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 40</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= m * n</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>0</code> <strong>or</strong>{" "}
          <code>1</code>.
        </li>
        <li>
          <code>grid[0][0] == grid[m - 1][n - 1] == 0</code>
        </li>
      </ul>
    </div>
  ),
  1292: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <code>m x n</code> matrix <code>mat</code> and an integer{" "}
        <code>threshold</code>, return{" "}
        <em>
          the maximum side-length of a square with a sum less than or equal to{" "}
        </em>
        <code>threshold</code>
        <em> or return </em>
        <code>0</code>
        <em> if there is no such square</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/12/05/e1.png"
        style={{ width: 335, height: 186 }}
      />
      <pre>
        <strong>Input:</strong> mat =
        [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], <br />
        threshold = 4 <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> The maximum side length of square with sum
        less than 4 is 2 as shown.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> mat =
        [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]],
        <br /> threshold = 1<br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == mat.length</code>
        </li>
        <li>
          <code>n == mat[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 300</code>
        </li>
        <li>
          <code>
            0 &lt;= mat[i][j] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= threshold &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1301: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a square <code>board</code>&nbsp;of characters. You can
        move on the board starting at the bottom right square marked with the
        character&nbsp;<code>'S'</code>.
      </p>
      <p>
        You need&nbsp;to reach the top left square marked with the character{" "}
        <code>'E'</code>. The rest of the squares are labeled either with a
        numeric character&nbsp;<code>1, 2, ..., 9</code> or with an obstacle{" "}
        <code>'X'</code>. In one move you can go up, left or up-left
        (diagonally) only if there is no obstacle there.
      </p>
      <p>
        Return a list of two integers: the first integer is the maximum sum of
        numeric characters you can collect, and the second is the number of such
        paths that you can take to get that maximum sum,{" "}
        <strong>
          taken modulo <code>10^9 + 7</code>
        </strong>
        .
      </p>
      <p>
        In case there is no path, return&nbsp;<code>[0, 0]</code>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <pre>
        <strong>Input:</strong> board = ["E23","2X2","12S"]
        <br />
        <strong>Output:</strong> [7,1]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> board = ["E12","1X1","21S"]
        <br />
        <strong>Output:</strong> [4,2]
        <br />
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> board = ["E11","XXX","11S"]
        <br />
        <strong>Output:</strong> [0,0]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>2 &lt;= board.length == board[i].length &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1351: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <code>m x n</code> matrix <code>grid</code> which is sorted in
        non-increasing order both row-wise and column-wise, return{" "}
        <em>
          the number of <strong>negative</strong> numbers in
        </em>{" "}
        <code>grid</code>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> grid =
        [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]] <br />
        <strong>Output:</strong> 8 <br />
        <strong>Explanation:</strong> There are 8 negatives number in the
        matrix.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> grid = [[3,2],[1,0]] <br />
        <strong>Output:</strong> 0
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
        <li>
          <code>-100 &lt;= grid[i][j] &lt;= 100</code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you find an <code>O(n + m)</code>{" "}
      solution?
    </div>
  ),
  1368: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> grid. Each cell of the grid has a sign
        pointing to the next cell you should visit if you are currently in this
        cell. The sign of <code>grid[i][j]</code> can be:
      </p>

      <ul>
        <li>
          <code>1</code> which means go to the cell to the right. (i.e go from{" "}
          <code>grid[i][j]</code> to <code>grid[i][j + 1]</code>)
        </li>
        <li>
          <code>2</code> which means go to the cell to the left. (i.e go from{" "}
          <code>grid[i][j]</code> to <code>grid[i][j - 1]</code>)
        </li>
        <li>
          <code>3</code> which means go to the lower cell. (i.e go from{" "}
          <code>grid[i][j]</code> to <code>grid[i + 1][j]</code>)
        </li>
        <li>
          <code>4</code> which means go to the upper cell. (i.e go from{" "}
          <code>grid[i][j]</code> to <code>grid[i - 1][j]</code>)
        </li>
      </ul>

      <p>
        Notice that there could be some signs on the cells of the grid that
        point outside the grid.
      </p>

      <p>
        You will initially start at the upper left cell <code>(0, 0)</code>. A
        valid path in the grid is a path that starts from the upper left cell{" "}
        <code>(0, 0)</code> and ends at the bottom-right cell{" "}
        <code>(m - 1, n - 1)</code> following the signs on the grid. The valid
        path does not have to be the shortest.
      </p>

      <p>
        You can modify the sign on a cell with <code>cost = 1</code>. You can
        modify the sign on a cell <strong>one time only</strong>.
      </p>

      <p>
        Return{" "}
        <em>the minimum cost to make the grid have at least one valid path</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/02/13/grid1.png"
        style={{ width: 400, height: 390 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]{" "}
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> You will start at point (0, 0).
        <br />
        The path to (3, 3) is as follows. (0, 0) --&gt; (0, 1) --&gt; (0, 2)
        --&gt; (0, 3) change the arrow to down with <br />
        cost = 1 --&gt; (1, 3) --&gt; (1, 2) --&gt; (1, 1) --&gt; (1, 0) change
        the arrow to down with cost = 1 --&gt; (2, 0) --&gt; (2, 1) --&gt; (2,
        2) --&gt; (2, 3) <br />
        change the arrow to down with cost = 1 --&gt; (3, 3)
        <br />
        The total cost = 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/02/13/grid2.png"
        style={{ width: 350, height: 341 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[1,1,3],[3,2,2],[1,1,4]]
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> You can follow the path from (0, 0) to (2,
        2).
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/02/13/grid3.png"
        style={{ width: 200, height: 192 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[1,2],[4,3]]
        <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= grid[i][j] &lt;= 4</code>
        </li>
      </ul>
    </div>
  ),
  1463: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <code>rows x cols</code> matrix <code>grid</code>{" "}
        representing a field of cherries where <code>grid[i][j]</code>{" "}
        represents the number of cherries that you can collect from the{" "}
        <code>(i, j)</code> cell.
      </p>

      <p>You have two robots that can collect cherries for you:</p>

      <ul>
        <li>
          <strong>Robot #1</strong> is located at the{" "}
          <strong>top-left corner</strong> <code>(0, 0)</code>, and
        </li>
        <li>
          <strong>Robot #2</strong> is located at the{" "}
          <strong>top-right corner</strong> <code>(0, cols - 1)</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the maximum number of cherries collection using both robots by
          following the rules below
        </em>
        :
      </p>

      <ul>
        <li>
          From a cell <code>(i, j)</code>, robots can move to cell{" "}
          <code>(i + 1, j - 1)</code>, <code>(i + 1, j)</code>, or{" "}
          <code>(i + 1, j + 1)</code>.
        </li>
        <li>
          When any robot passes through a cell, It picks up all cherries, and
          the cell becomes an empty cell.
        </li>
        <li>
          When both robots stay in the same cell, only one takes the cherries.
        </li>
        <li>Both robots cannot move outside of the grid at any moment.</li>
        <li>
          Both robots should reach the bottom row in <code>grid</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/04/29/sample_1_1802.png"
        style={{ width: 374, height: 501 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]] <br />
        <strong>Output:</strong> 24 <br />
        <strong>Explanation:</strong> Path of robot #1 and #2 are described in
        color green and blue respectively. <br />
        Cherries taken by Robot #1, (3 + 2 + 5 + 2) = 12. <br />
        Cherries taken by Robot #2, (1 + 5 + 5 + 1) = 12. <br />
        Total of cherries: 12 + 12 = 24.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/04/23/sample_2_1802.png"
        style={{ width: 500, height: 452 }}
      />
      <pre>
        <strong>Input:</strong> grid =
        [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]{" "}
        <br />
        <strong>Output:</strong> 28 <br />
        <strong>Explanation:</strong> Path of robot #1 and #2 are described in
        color green and blue respectively. <br />
        Cherries taken by Robot #1, (1 + 9 + 5 + 2) = 17. <br />
        Cherries taken by Robot #2, (1 + 3 + 4 + 3) = 11. <br />
        Total of cherries: 17 + 11 = 28.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>rows == grid.length</code>
        </li>
        <li>
          <code>cols == grid[i].length</code>
        </li>
        <li>
          <code>2 &lt;= rows, cols &lt;= 70</code>
        </li>
        <li>
          <code>0 &lt;= grid[i][j] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1391: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>m x n</code> <code>grid</code>. Each cell of{" "}
        <code>grid</code> represents a street. The street of{" "}
        <code>grid[i][j]</code> can be:
      </p>

      <ul>
        <li>
          <code>1</code> which means a street connecting the left cell and the
          right cell.
        </li>
        <li>
          <code>2</code> which means a street connecting the upper cell and the
          lower cell.
        </li>
        <li>
          <code>3</code> which means a street connecting the left cell and the
          lower cell.
        </li>
        <li>
          <code>4</code> which means a street connecting the right cell and the
          lower cell.
        </li>
        <li>
          <code>5</code> which means a street connecting the left cell and the
          upper cell.
        </li>
        <li>
          <code>6</code> which means a street connecting the right cell and the
          upper cell.
        </li>
      </ul>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/03/05/main.png"
        style={{ width: 450, height: 708 }}
      />
      <p>
        You will initially start at the street of the upper-left cell{" "}
        <code>(0, 0)</code>. A valid path in the grid is a path that starts from
        the upper left cell <code>(0, 0)</code> and ends at the bottom-right
        cell <code>(m - 1, n - 1)</code>.{" "}
        <strong>The path should only follow the streets</strong>.
      </p>

      <p>
        <strong>Notice</strong> that you are <strong>not allowed</strong> to
        change any street.
      </p>

      <p>
        Return <code>true</code>
        <em> if there is a valid path in the grid or </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/03/05/e1.png"
        style={{ width: 455, height: 311 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[2,4,3],[6,5,2]] <br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong> As shown you can start at cell (0, 0) and
        visit all the cells of the grid to reach (m - 1, n - 1).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/03/05/e2.png"
        style={{ width: 455, height: 293 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[1,2,1],[1,2,1]]
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> As shown you the street at cell (0, 0) is
        not connected with any street of any other cell and you will get stuck
        at cell (0, 0)
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[1,1,2]]
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> You will get stuck at cell (0, 1) and you
        cannot reach cell (0, 2).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 300</code>
        </li>
        <li>
          <code>1 &lt;= grid[i][j] &lt;= 6</code>
        </li>
      </ul>
    </div>
  ),
  1605: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two arrays <code>rowSum</code> and <code>colSum</code> of
        non-negative integers where <code>rowSum[i]</code> is the sum of the
        elements in the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        row and <code>colSum[j]</code> is the sum of the elements of the{" "}
        <code>
          j<sup>th</sup>
        </code>{" "}
        column of a 2D matrix. In other words, you do not know the elements of
        the matrix, but you do know the sums of each row and column.
      </p>

      <p>
        Find any matrix of <strong>non-negative</strong> integers of size{" "}
        <code>rowSum.length x colSum.length</code> that satisfies the{" "}
        <code>rowSum</code> and <code>colSum</code> requirements.
      </p>

      <p>
        Return{" "}
        <em>
          a 2D array representing <strong>any</strong> matrix that fulfills the
          requirements
        </em>
        . It's guaranteed that <strong>at least one </strong>matrix that
        fulfills the requirements exists.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> rowSum = [3,8], colSum = [4,7] <br />
        <strong>Output:</strong> [[3,0], <br />
        [1,7]] <br />
        <strong>Explanation:</strong> <br />0<sup>th</sup> row: 3 + 0 = 3 ==
        rowSum[0] <br />1<sup>st</sup> row: 1 + 7 = 8 == rowSum[1] <br />0
        <sup>th</sup> column: 3 + 1 = 4 == colSum[0] <br />1<sup>st</sup>{" "}
        column: 0 + 7 = 7 == colSum[1] <br />
        The row and column sums match, and all matrix elements are non-negative.{" "}
        <br />
        Another possible matrix is: [[1,2], [3,5]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> rowSum = [5,7,10], colSum = [8,6,8] <br />
        <strong>Output:</strong> [[0,5,0], <br />
        [6,1,0], <br />
        [2,0,8]] <br />
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= rowSum.length, colSum.length &lt;= 500</code>
        </li>
        <li>
          <code>
            0 &lt;= rowSum[i], colSum[i] &lt;= 10<sup>8</sup>
          </code>
        </li>
        <li>
          <code>sum(rowSum) == sum(colSum)</code>
        </li>
      </ul>
    </div>
  ),
  1632: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an <code>m x n</code> <code>matrix</code>, return{" "}
        <em>a new matrix </em>
        <code>answer</code>
        <em> where </em>
        <code>answer[row][col]</code>
        <em> is the </em>
        <em>
          <strong>rank</strong> of{" "}
        </em>
        <code>matrix[row][col]</code>.
      </p>
      <p>
        The <strong>rank</strong> is an <strong>integer</strong> that represents
        how large an element is compared to other elements. It is calculated
        using the following rules:
      </p>
      <ul>
        <li>
          The rank is an integer starting from <code>1</code>.
        </li>
        <li>
          If two elements <code>p</code> and <code>q</code> are in the{" "}
          <strong>same row or column</strong>, then:
          <ul>
            <li>
              If <code>p &lt; q</code> then <code>rank(p) &lt; rank(q)</code>
            </li>
            <li>
              If <code>p == q</code> then <code>rank(p) == rank(q)</code>
            </li>
            <li>
              If <code>p &gt; q</code> then <code>rank(p) &gt; rank(q)</code>
            </li>
          </ul>
        </li>
        <li>
          The <strong>rank</strong> should be as <strong>small</strong> as
          possible.
        </li>
      </ul>
      <p>
        The test cases are generated so that <code>answer</code> is unique under
        the given rules.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/18/rank1.jpg"
        style={{ width: 442, height: 162 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> matrix = [[1,2],[3,4]]
        <br />
        <strong>Output:</strong> [[1,2],[2,3]]
        <br />
        <strong>Explanation:</strong>
        <br />
        The rank of matrix[0][0] is 1 because it is the smallest integer in its
        row and column.
        <br />
        The rank of matrix[0][1] is 2 because matrix[0][1] &gt; matrix[0][0] and
        matrix[0][0] is rank 1.
        <br />
        The rank of matrix[1][0] is 2 because matrix[1][0] &gt; matrix[0][0] and
        matrix[0][0] is rank 1.
        <br />
        The rank of matrix[1][1] is 3 because matrix[1][1] &gt; matrix[0][1],
        matrix[1][1] &gt; matrix[1][0], and both matrix[0][1] and matrix[1][0]
        are rank 2.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/18/rank2.jpg"
        style={{ width: 442, height: 162 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> matrix = [[7,7],[7,7]]
        <strong>Output:</strong> [[1,1],[1,1]]
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/18/rank3.jpg"
        style={{ width: 442, height: 162 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> matrix =
        [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]
        <br />
        <strong>Output:</strong> [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>m == matrix.length</code>
        </li>
        <li>
          <code>n == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 500</code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= matrix[row][col] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1728: (
    <div class="elfjS" data-track-load="description_content">
      <p>A game is played by a cat and a mouse named Cat and Mouse.</p>
      <p>
        The environment is represented by a <code>grid</code> of size{" "}
        <code>rows x cols</code>, where each element is a wall, floor, player
        (Cat, Mouse), or food.
      </p>
      <ul>
        <li>
          Players are represented by the characters <code>'C'</code>(Cat)
          <code>,'M'</code>(Mouse).
        </li>
        <li>
          Floors are represented by the character <code>'.'</code> and can be
          walked on.
        </li>
        <li>
          Walls are represented by the character <code>'#'</code> and cannot be
          walked on.
        </li>
        <li>
          Food is represented by the character <code>'F'</code> and can be
          walked on.
        </li>
        <li>
          There is only one of each character <code>'C'</code>, <code>'M'</code>
          , and <code>'F'</code> in <code>grid</code>.
        </li>
      </ul>
      <p>Mouse and Cat play according to the following rules:</p>
      <ul>
        <li>
          Mouse <strong>moves first</strong>, then they take turns to move.
        </li>
        <li>
          During each turn, Cat and Mouse can jump in one of the four directions
          (left, right, up, down). They cannot jump over the wall nor outside of
          the <code>grid</code>.
        </li>
        <li>
          <code>catJump, mouseJump</code> are the maximum lengths Cat and Mouse
          can jump at a time, respectively. Cat and Mouse can jump less than the
          maximum length.
        </li>
        <li>Staying in the same position is allowed.</li>
        <li>Mouse can jump over Cat.</li>
      </ul>
      <p>The game can end in 4 ways:</p>
      <ul>
        <li>If Cat occupies the same position as Mouse, Cat wins.</li>
        <li>If Cat reaches the food first, Cat wins.</li>
        <li>If Mouse reaches the food first, Mouse wins.</li>
        <li>If Mouse cannot get to the food within 1000 turns, Cat wins.</li>
      </ul>
      <p>
        Given a <code>rows x cols</code> matrix <code>grid</code> and two
        integers <code>catJump</code> and <code>mouseJump</code>, return{" "}
        <code>true</code>
        <em>
          {" "}
          if Mouse can win the game if both Cat and Mouse play optimally,
          otherwise return{" "}
        </em>
        <code>false</code>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/12/sample_111_1955.png"
        style={{ width: 580, height: 239 }}
      />
      <pre>
        <strong>Input:</strong> grid = ["####F","#C...","M...."], catJump = 1,
        mouseJump = 2 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Cat cannot catch Mouse on its turn nor can
        it get the food before Mouse.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/12/sample_2_1955.png"
        style={{ width: 580, height: 239 }}
      />
      <pre>
        <strong>Input:</strong> grid = ["M.C...F"], catJump = 1, mouseJump = 4{" "}
        <br />
        <strong>Output:</strong> true
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> grid = ["M.C...F"], catJump = 1, mouseJump = 3{" "}
        <br />
        <strong>Output:</strong> false
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>rows == grid.length</code>
        </li>
        <li>
          <code>cols = grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= rows, cols &lt;= 8</code>
        </li>
        <li>
          <code>grid[i][j]</code> consist only of characters <code>'C'</code>,{" "}
          <code>'M'</code>, <code>'F'</code>, <code>'.'</code>, and{" "}
          <code>'#'</code>.
        </li>
        <li>
          There is only one of each character <code>'C'</code>, <code>'M'</code>
          , and <code>'F'</code> in <code>grid</code>.
        </li>
        <li>
          <code>1 &lt;= catJump, mouseJump &lt;= 8</code>
        </li>
      </ul>
    </div>
  ),
  1861: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>m x n</code> matrix of characters{" "}
        <code>box</code> representing a side-view of a box. Each cell of the box
        is one of the following:
      </p>

      <ul>
        <li>
          A stone <code>'#'</code>
        </li>
        <li>
          A stationary obstacle <code>'*'</code>
        </li>
        <li>
          Empty <code>'.'</code>
        </li>
      </ul>

      <p>
        The box is rotated <strong>90 degrees clockwise</strong>, causing some
        of the stones to fall due to gravity. Each stone falls down until it
        lands on an obstacle, another stone, or the bottom of the box. Gravity{" "}
        <strong>does not</strong> affect the obstacles' positions, and the
        inertia from the box's rotation <strong>does not </strong>affect the
        stones' horizontal positions.
      </p>

      <p>
        It is <strong>guaranteed</strong> that each stone in <code>box</code>{" "}
        rests on an obstacle, another stone, or the bottom of the box.
      </p>

      <p>
        Return <em>an </em>
        <code>n x m</code>
        <em> matrix representing the box after the rotation described above</em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcodewithstones.png"
          style={{ width: 300, height: 150 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> box = [["#",".","#"]],
        <br />
        <strong>Output:</strong> [["."],,
        <br />
        &nbsp; ["#"],,
        <br />
        &nbsp; ["#"]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcode2withstones.png"
          style={{ width: 375, height: 195 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> box = [["#",".","*","."],
        <br />
        &nbsp; ["#","#","*","."]]
        <br />
        <strong>Output:</strong> [["#","."],
        <br />
        &nbsp; ["#","#"],
        <br />
        &nbsp; ["*","*"],
        <br />
        &nbsp; [".","."]]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcode3withstone.png"
          style={{ width: 400, height: 218 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> box = [["#","#","*",".","*","."], <br />
        &nbsp; ["#","#","#","*",".","."],
        <br />
        &nbsp; ["#","#","#",".","#","."]]
        <br />
        <strong>Output:</strong> [[".","#","#"],
        <br />
        &nbsp; [".","#","#"],
        <br />
        &nbsp; ["#","#","*"],
        <br />
        &nbsp; ["#","*","."],
        <br />
        &nbsp; ["#",".","*"],
        <br />
        &nbsp; ["#",".","."]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == box.length</code>
        </li>
        <li>
          <code>n == box[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 500</code>
        </li>
        <li>
          <code>box[i][j]</code> is either <code>'#'</code>, <code>'*'</code>,
          or <code>'.'</code>.
        </li>
      </ul>
    </div>
  ),
  1975: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>n x n</code> integer <code>matrix</code>. You can
        do the following operation <strong>any</strong> number of times:
      </p>

      <ul>
        <li>
          Choose any two <strong>adjacent</strong> elements of{" "}
          <code>matrix</code> and <strong>multiply</strong> each of them by{" "}
          <code>-1</code>.
        </li>
      </ul>

      <p>
        Two elements are considered <strong>adjacent</strong> if and only if
        they share a <strong>border</strong>.
      </p>

      <p>
        Your goal is to <strong>maximize</strong> the summation of the matrix's
        elements. Return{" "}
        <em>
          the <strong>maximum</strong> sum of the matrix's elements using the
          operation mentioned above.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/16/pc79-q2ex1.png"
        style={{ width: 401, height: 81 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[1,-1],[-1,1]] <br />
        <strong>Output:</strong> 4 <br />
        <b>Explanation:</b> We can follow the following steps to reach sum
        equals 4: <br />
        - Multiply the 2 elements in the first row by -1. <br />- Multiply the 2
        elements in the first column by -1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/16/pc79-q2ex2.png"
        style={{ width: 321, height: 121 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[1,2,3],[-1,-2,-3],[1,2,3]] <br />
        <strong>Output:</strong> 16 <br />
        <b>Explanation:</b> We can follow the following step to reach sum equals
        16: <br />- Multiply the 2 last elements in the second row by -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == matrix.length == matrix[i].length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 250</code>
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= matrix[i][j] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1981: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>m x n</code> integer matrix <code>mat</code> and
        an integer <code>target</code>.
      </p>

      <p>
        Choose one integer from <strong>each row</strong> in the matrix such
        that the <strong>absolute difference</strong> between{" "}
        <code>target</code> and the <strong>sum</strong> of the chosen elements
        is <strong>minimized</strong>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum absolute difference</strong>
        </em>
        .
      </p>

      <p>
        The <strong>absolute difference</strong> between two numbers{" "}
        <code>a</code> and <code>b</code> is the absolute value of{" "}
        <code>a - b</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/03/matrix1.png"
        style={{ width: 181, height: 181 }}
      />
      <pre>
        <strong>Input:</strong> mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13{" "}
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> One possible choice is to:
        <br />
        - Choose 1 from the first row.
        <br />
        - Choose 5 from the second row.
        <br />
        - Choose 7 from the third row.
        <br />
        The sum of the chosen elements is 13, which equals the target, so the
        absolute difference is 0.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/03/matrix1-1.png"
        style={{ width: 61, height: 181 }}
      />
      <pre>
        <strong>Input:</strong> mat = [[1],[2],[3]], target = 100
        <br />
        <strong>Output:</strong> 94
        <br />
        <strong>Explanation:</strong> The best possible choice is to:
        <br />
        - Choose 1 from the first row.
        <br />
        - Choose 2 from the second row.
        <br />
        - Choose 3 from the third row.
        <br />
        The sum of the chosen elements is 6, and the absolute difference is 94.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/03/matrix1-3.png"
        style={{ width: 301, height: 61 }}
      />
      <pre>
        <strong>Input:</strong> mat = [[1,2,9,8,7]], target = 6<br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> The best choice is to choose 7 from the
        first row.
        <br />
        The absolute difference is 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == mat.length</code>
        </li>
        <li>
          <code>n == mat[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 70</code>
        </li>
        <li>
          <code>1 &lt;= mat[i][j] &lt;= 70</code>
        </li>
        <li>
          <code>1 &lt;= target &lt;= 800</code>
        </li>
      </ul>
    </div>
  ),
  1992: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> <code>m x n</code> binary
        matrix <code>land</code> where a <code>0</code> represents a hectare of
        forested land and a <code>1</code> represents a hectare of farmland.
      </p>

      <p>
        To keep the land organized, there are designated rectangular areas of
        hectares that consist <strong>entirely</strong> of farmland. These
        rectangular areas are called <strong>groups</strong>. No two groups are
        adjacent, meaning farmland in one group is <strong>not</strong>{" "}
        four-directionally adjacent to another farmland in a different group.
      </p>

      <p>
        <code>land</code> can be represented by a coordinate system where the
        top left corner of <code>land</code> is <code>(0, 0)</code> and the
        bottom right corner of <code>land</code> is <code>(m-1, n-1)</code>.
        Find the coordinates of the top left and bottom right corner of each{" "}
        <strong>group</strong> of farmland. A <strong>group</strong> of farmland
        with a top left corner at{" "}
        <code>
          (r<sub>1</sub>, c<sub>1</sub>)
        </code>{" "}
        and a bottom right corner at{" "}
        <code>
          (r<sub>2</sub>, c<sub>2</sub>)
        </code>{" "}
        is represented by the 4-length array{" "}
        <code>
          [r<sub>1</sub>, c<sub>1</sub>, r<sub>2</sub>, c<sub>2</sub>].
        </code>
      </p>

      <p>
        Return{" "}
        <em>
          a 2D array containing the 4-length arrays described above for each{" "}
          <strong>group</strong> of farmland in{" "}
        </em>
        <code>land</code>
        <em>
          . If there are no groups of farmland, return an empty array. You may
          return the answer in <strong>any order</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/27/screenshot-2021-07-27-at-12-23-15-copy-of-diagram-drawio-diagrams-net.png"
        style={{ width: 300, height: 300 }}
      />
      <pre>
        <strong>Input:</strong> land = [[1,0,0],[0,1,1],[0,1,1]] <br />
        <strong>Output:</strong> [[0,0,0,0],[1,1,2,2]]
        <br />
        <strong>Explanation:</strong>
        <br />
        The first group has a top left corner at land[0][0] and a bottom right
        corner at land[0][0].
        <br />
        The second group has a top left corner at land[1][1] and a bottom right
        corner at land[2][2].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/27/screenshot-2021-07-27-at-12-30-26-copy-of-diagram-drawio-diagrams-net.png"
        style={{ width: 200, height: 200 }}
      />
      <pre>
        <strong>Input:</strong> land = [[1,1],[1,1]]
        <br />
        <strong>Output:</strong> [[0,0,1,1]]
        <br />
        <strong>Explanation:</strong>
        <br />
        The first group has a top left corner at land[0][0] and a bottom right
        corner at land[1][1].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/27/screenshot-2021-07-27-at-12-32-24-copy-of-diagram-drawio-diagrams-net.png"
        style={{ width: 100, height: 100 }}
      />
      <pre>
        <strong>Input:</strong> land = [[0]]
        <br />
        <strong>Output:</strong> []
        <br />
        <strong>Explanation:</strong>
        <br />
        There are no groups of farmland.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == land.length</code>
        </li>
        <li>
          <code>n == land[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 300</code>
        </li>
        <li>
          <code>land</code> consists of only <code>0</code>'s and <code>1</code>
          's.
        </li>
        <li>
          Groups of farmland are <strong>rectangular</strong> in shape.
        </li>
      </ul>
    </div>
  ),
  2022: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> 1-dimensional (1D) integer
        array <code>original</code>, and two integers, <code>m</code> and{" "}
        <code>n</code>. You are tasked with creating a 2-dimensional (2D) array
        with <code> m</code> rows and <code>n</code> columns using{" "}
        <strong>all</strong> the elements from <code>original</code>.
      </p>

      <p>
        The elements from indices <code>0</code> to <code>n - 1</code> (
        <strong>inclusive</strong>) of <code>original</code> should form the
        first row of the constructed 2D array, the elements from indices{" "}
        <code>n</code> to <code>2 * n - 1</code> (<strong>inclusive</strong>)
        should form the second row of the constructed 2D array, and so on.
      </p>

      <p>
        Return <em>an </em>
        <code>m x n</code>
        <em>
          {" "}
          2D array constructed according to the above procedure, or an empty 2D
          array if it is impossible
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/26/image-20210826114243-1.png"
        style={{ width: 500, height: 174 }}
      />
      <pre>
        <strong>Input:</strong> original = [1,2,3,4], m = 2, n = 2<br />
        <strong>Output:</strong> [[1,2],[3,4]]
        <br />
        <strong>Explanation:</strong> The constructed 2D array should contain 2
        rows and 2 columns.
        <br />
        The first group of n=2 elements in original, [1,2], becomes the first
        row in the constructed 2D array.
        <br />
        The second group of n=2 elements in original, [3,4], becomes the second
        row in the constructed 2D array.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> original = [1,2,3], m = 1, n = 3 <br />
        <strong>Output:</strong> [[1,2,3]]
        <br />
        <strong>Explanation:</strong> The constructed 2D array should contain 1
        row and 3 columns.
        <br />
        Put all three elements in original into the first row of the constructed
        2D array.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> original = [1,2], m = 1, n = 1<br />
        <strong>Output:</strong> []
        <br />
        <strong>Explanation:</strong> There are 2 elements in original.
        <br />
        It is impossible to fit 2 elements in a 1x1 2D array, so return an empty
        2D array.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= original.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= original[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= m, n &lt;= 4 * 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2128: (
    <article role="main" class="blog-post">
      <p>
        You are given an <code>m x n</code> binary matrix <code>grid</code>.
      </p>

      <p>
        In one operation, you can choose <strong>any</strong> row or column and
        flip each value in that row or column (i.e., changing all <code>0</code>
        's to <code>1</code>'s, and all <code>1</code>'s to <code>0</code>'s).
      </p>

      <p>
        Return <code>true</code>
        <em> if it is possible to remove all </em>
        <code>1</code>
        <em>'s from </em>
        <code>grid</code> using <strong>any</strong> number of operations or{" "}
        <code>false</code> otherwise.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>
      <p>
        <img
          src="https://assets.leetcode.com/uploads/2022/01/03/image-20220103191300-1.png"
          style={{ width: 756, height: 225 }}
          alt=""
        />
      </p>
      <pre>
        <strong>Input:</strong> grid = [[0,1,0],[1,0,1],[0,1,0]] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> One possible way to remove all 1's from
        grid is to: <br />
        - Flip the middle row <br />- Flip the middle column
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>
      <p>
        <img
          src="https://assets.leetcode.com/uploads/2022/01/03/image-20220103181204-7.png"
          style={{ width: 237, height: 225 }}
          alt=""
        />
      </p>
      <pre>
        <strong>Input:</strong> grid = [[1,1,0],[0,0,0],[0,0,0]] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> It is impossible to remove all 1's from
        grid. <br />
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>
      <p>
        <img
          src="https://assets.leetcode.com/uploads/2022/01/03/image-20220103181224-8.png"
          style={{ width: 114, height: 100 }}
          alt=""
        />
      </p>
      <pre>
        <strong>Input:</strong> grid = [[0]] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> There are no 1's in grid.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 300</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>

      <p>
        <strong>Companies</strong>:<br />
        <a href="https://leetcode.com/company/google">Google</a>
      </p>
    </article>
  ),
  2133: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        An <code>n x n</code> matrix is <strong>valid</strong> if every row and
        every column contains <strong>all</strong> the integers from{" "}
        <code>1</code> to <code>n</code> (<strong>inclusive</strong>).
      </p>

      <p>
        Given an <code>n x n</code> integer matrix <code>matrix</code>, return{" "}
        <code>true</code>{" "}
        <em>
          if the matrix is <strong>valid</strong>.
        </em>{" "}
        Otherwise, return <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/12/21/example1drawio.png"
        style={{ width: 250, height: 251 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[1,2,3],[3,1,2],[2,3,1]] <br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong> In this case, n = 3, and every row and
        column contains the numbers 1, 2, and 3.
        <br />
        Hence, we return true.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/12/21/example2drawio.png"
        style={{ width: 250, height: 251 }}
      />
      <pre>
        <strong>Input:</strong> matrix = [[1,1,1],[1,2,3],[1,2,3]]
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> In this case, n = 3, but the first row and
        the first column do not contain the numbers 2 or 3.
        <br />
        Hence, we return false.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == matrix.length == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= matrix[i][j] &lt;= n</code>
        </li>
      </ul>
    </div>
  ),
  2174: (
    <>
      <p>
        You are given a <strong>0-indexed</strong> <code>m x n</code>{" "}
        <strong>binary</strong> matrix <code>grid</code>.
      </p>

      <p>
        In one operation, you can choose any <code>i</code> and <code>j</code>{" "}
        that meet the following conditions:
      </p>

      <ul>
        <li>
          <code>0 &lt;= i &lt; m</code>
        </li>
        <li>
          <code>0 &lt;= j &lt; n</code>
        </li>
        <li>
          <code>grid[i][j] == 1</code>
        </li>
      </ul>

      <p>
        and change the values of <strong>all</strong> cells in row{" "}
        <code>i</code> and column <code>j</code> to zero.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of operations needed to remove all{" "}
        </em>
        <code>1</code>
        <em>&#39;s from </em>
        <code>grid</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2174.Remove%20All%20Ones%20With%20Row%20and%20Column%20Flips%20II/images/image-20220213162716-1.png"
        style={{ width: 709, height: 200 }}
        alt=""
      />
      <pre>
        <strong>Input:</strong> grid = [[1,1,1],[1,1,1],[0,1,0]] <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong>
        <br />
        In the first operation, change all cell values of row 1 and column 1 to
        zero.
        <br />
        In the second operation, change all cell values of row 0 and column 0 to
        zero.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2174.Remove%20All%20Ones%20With%20Row%20and%20Column%20Flips%20II/images/image-20220213162737-2.png"
        style={{ width: 734, height: 200 }}
        alt=""
      />
      <pre>
        <strong>Input:</strong> grid = [[0,1,0],[1,0,1],[0,1,0]]
        <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong>
        <br />
        In the first operation, change all cell values of row 1 and column 0 to
        zero.
        <br />
        In the second operation, change all cell values of row 2 and column 1 to
        zero.
        <br />
        Note that we cannot perform an operation using row 1 and column 1
        because grid[1][1] != 1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2174.Remove%20All%20Ones%20With%20Row%20and%20Column%20Flips%20II/images/image-20220213162752-3.png"
        style={{ width: 156, height: 150 }}
        alt=""
      />
      <pre>
        <strong>Input:</strong> grid = [[0,0],[0,0]]
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong>
        <br />
        There are no 1&#39;s to remove so return 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 15</code>
        </li>
        <li>
          <code>1 &lt;= m * n &lt;= 15</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </>
  ),
  2352: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <strong>0-indexed</strong> <code>n x n</code> integer matrix{" "}
        <code>grid</code>, <em>return the number of pairs </em>
        <code>
          (r<sub>i</sub>, c<sub>j</sub>)
        </code>
        <em> such that row </em>
        <code>
          r<sub>i</sub>
        </code>
        <em> and column </em>
        <code>
          c<sub>j</sub>
        </code>
        <em> are equal</em>.
      </p>

      <p>
        A row and column pair is considered equal if they contain the same
        elements in the same order (i.e., an equal array).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/06/01/ex1.jpg"
        style={{ width: 150, height: 153 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[3,2,1],[1,7,6],[2,7,7]]
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> There is 1 equal row and column pair:
        <br />- (Row 2, Column 1): [2,7,7]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/06/01/ex2.jpg"
        style={{ width: 200, height: 209 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]{" "}
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> There are 3 equal row and column pairs:
        <br />
        - (Row 0, Column 0): [3,1,2,2]
        <br />
        - (Row 2, Column 2): [2,4,2,2]
        <br />- (Row 3, Column 2): [2,4,2,2]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == grid.length == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 200</code>
        </li>
        <li>
          <code>
            1 &lt;= grid[i][j] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2371: (
    <article role="main" class="blog-post">
      <p>
        You are given an <code>m x n</code> integer matrix <code>grid</code>{" "}
        containing <strong>distinct</strong> positive integers.
      </p>

      <p>
        You have to replace each integer in the matrix with a positive integer
        satisfying the following conditions:
      </p>

      <ul>
        <li>
          The <strong>relative</strong> order of every two elements that are in
          the same row or column should stay the <strong>same</strong> after the
          replacements.
        </li>
        <li>
          The <strong>maximum</strong> number in the matrix after the
          replacements should be as <strong>small</strong> as possible.
        </li>
      </ul>

      <p>
        The relative order stays the same if for all pairs of elements in the
        original matrix such that{" "}
        <code>
          grid[r<sub>1</sub>][c<sub>1</sub>] &gt; grid[r<sub>2</sub>][c
          <sub>2</sub>]
        </code>{" "}
        where either{" "}
        <code>
          r<sub>1</sub> == r<sub>2</sub>
        </code>{" "}
        or{" "}
        <code>
          c<sub>1</sub> == c<sub>2</sub>
        </code>
        , then it must be true that{" "}
        <code>
          grid[r<sub>1</sub>][c<sub>1</sub>] &gt; grid[r<sub>2</sub>][c
          <sub>2</sub>]
        </code>{" "}
        after the replacements.
      </p>

      <p>
        For example, if <code>grid = [[2, 4, 5], [7, 3, 9]]</code> then a good
        replacement could be either <code>grid = [[1, 2, 3], [2, 1, 4]]</code>{" "}
        or <code>grid = [[1, 2, 3], [3, 1, 4]]</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>resulting</strong> matrix.
        </em>{" "}
        If there are multiple answers, return <strong>any</strong> of them.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2371.Minimize%20Maximum%20Value%20in%20a%20Grid/images/grid2drawio.png"
          style={{ width: 371, height: 121 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> grid = [[3,1],[2,5]] <br />
        <strong>Output:</strong> [[2,1],[1,2]]
        <br />
        <strong>Explanation:</strong> The above diagram shows a valid
        replacement.
        <br />
        The maximum number in the matrix is 2. It can be shown that no smaller
        value can be obtained.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[10]]
        <br />
        <strong>Output:</strong> [[1]]
        <br />
        <strong>Explanation:</strong> We replace the only number in the matrix
        with 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= m * n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= grid[i][j] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>grid</code> consists of distinct integers.
        </li>
      </ul>
    </article>
  ),
  2482: (
    <article role="main" class="blog-post">
      <p>
        You are given a <strong>0-indexed</strong>{" "}
        <code class="language-plaintext highlighter-rouge">m x n</code> binary
        matrix <code class="language-plaintext highlighter-rouge">grid</code>.
      </p>

      <p>
        A <strong>0-indexed</strong>{" "}
        <code class="language-plaintext highlighter-rouge">m x n</code>{" "}
        difference matrix{" "}
        <code class="language-plaintext highlighter-rouge">diff</code> is
        created with the following procedure:
      </p>

      <ul>
        <li>
          <p>
            Let the number of ones in the{" "}
            <code class="language-plaintext highlighter-rouge">ith</code> row be{" "}
            <code class="language-plaintext highlighter-rouge">onesRowi</code>.
          </p>
        </li>
        <li>
          <p>
            Let the number of ones in the{" "}
            <code class="language-plaintext highlighter-rouge">jth</code> column
            be{" "}
            <code class="language-plaintext highlighter-rouge">onesColj</code>.
          </p>
        </li>
        <li>
          <p>
            Let the number of zeros in the{" "}
            <code class="language-plaintext highlighter-rouge">ith</code> row be{" "}
            <code class="language-plaintext highlighter-rouge">zerosRowi</code>.
          </p>
        </li>
        <li>
          <p>
            Let the number of zeros in the{" "}
            <code class="language-plaintext highlighter-rouge">jth</code> column
            be{" "}
            <code class="language-plaintext highlighter-rouge">zerosColj</code>.
          </p>
        </li>
        <li>
          <p>
            <code class="language-plaintext highlighter-rouge">
              diff[i][j] = onesRowi + onesColj - zerosRowi - zerosColj
            </code>
          </p>
        </li>
      </ul>

      <p>
        Return <strong>the difference matrix</strong>{" "}
        <code class="language-plaintext highlighter-rouge">diff</code>.
      </p>

      <p>
        &nbsp;
        <strong>Example 1:</strong>
      </p>

      <p>
        <img
          src="https://assets.leetcode.com/uploads/2022/11/06/image-20221106171729-5.png"
          alt=""
        />
      </p>

      <div class="language-plaintext highlighter-rouge">
        <div class="highlight">
          <pre class="highlight">
            <code>
              Input: grid = [[0,1,1],[1,0,1],[0,0,1]] Output:
              [[0,0,4],[0,0,4],[-2,-2,2]] <br />
              Explanation: <br />
              - diff[0][0] = onesRow0 + onesCol0 - zerosRow0 - zerosCol0 = 2 + 1
              - 1 - 2 = 0 <br />
              - diff[0][1] = onesRow0 + onesCol1 - zerosRow0 - zerosCol1 = 2 + 1
              - 1 - 2 = 0 <br />
              - diff[0][2] = onesRow0 + onesCol2 - zerosRow0 - zerosCol2 = 2 + 3
              - 1 - 0 = 4 <br />
              - diff[1][0] = onesRow1 + onesCol0 - zerosRow1 - zerosCol0 = 2 + 1
              - 1 - 2 = 0 <br />
              - diff[1][1] = onesRow1 + onesCol1 - zerosRow1 - zerosCol1 = 2 + 1
              - 1 - 2 = 0 <br />
              - diff[1][2] = onesRow1 + onesCol2 - zerosRow1 - zerosCol2 = 2 + 3
              - 1 - 0 = 4 <br />
              - diff[2][0] = onesRow2 + onesCol0 - zerosRow2 - zerosCol0 = 1 + 1
              - 2 - 2 = -2 <br />
              - diff[2][1] = onesRow2 + onesCol1 - zerosRow2 - zerosCol1 = 1 + 1
              - 2 - 2 = -2 <br />- diff[2][2] = onesRow2 + onesCol2 - zerosRow2
              - zerosCol2 = 1 + 3 - 2 - 0 = 2
            </code>
          </pre>
        </div>
      </div>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <img
          src="https://assets.leetcode.com/uploads/2022/11/06/image-20221106171747-6.png"
          alt=""
        />
      </p>

      <div class="language-plaintext highlighter-rouge">
        <div class="highlight">
          <pre class="highlight">
            <code>
              Input: grid = [[1,1,1],[1,1,1]] <br />
              Output: [[5,5,5],[5,5,5]] <br />
              Explanation: <br />
              - diff[0][0] = onesRow0 + onesCol0 - zerosRow0 - zerosCol0 = 3 + 2
              - 0 - 0 = 5 <br />
              - diff[0][1] = onesRow0 + onesCol1 - zerosRow0 - zerosCol1 = 3 + 2
              - 0 - 0 = 5 <br />
              - diff[0][2] = onesRow0 + onesCol2 - zerosRow0 - zerosCol2 = 3 + 2
              - 0 - 0 = 5 <br />
              - diff[1][0] = onesRow1 + onesCol0 - zerosRow1 - zerosCol0 = 3 + 2
              - 0 - 0 = 5 <br />
              - diff[1][1] = onesRow1 + onesCol1 - zerosRow1 - zerosCol1 = 3 + 2
              - 0 - 0 = 5 <br />- diff[1][2] = onesRow1 + onesCol2 - zerosRow1 -
              zerosCol2 = 3 + 2 - 0 - 0 = 5
            </code>
          </pre>
        </div>
      </div>

      <p>
        &nbsp;
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <p>
            <code class="language-plaintext highlighter-rouge">
              m == grid.length
            </code>
          </p>
        </li>
        <li>
          <p>
            <code class="language-plaintext highlighter-rouge">
              n == grid[i].length
            </code>
          </p>
        </li>
        <li>
          <p>
            <code class="language-plaintext highlighter-rouge">
              1 &lt;= m, n &lt;= 105
            </code>
          </p>
        </li>
        <li>
          <p>
            <code class="language-plaintext highlighter-rouge">
              1 &lt;= m * n &lt;= 105
            </code>
          </p>
        </li>
        <li>
          <p>
            <code class="language-plaintext highlighter-rouge">grid[i][j]</code>{" "}
            is either{" "}
            <code class="language-plaintext highlighter-rouge">0</code> or{" "}
            <code class="language-plaintext highlighter-rouge">1</code>.
          </p>
        </li>
      </ul>

      <p>
        <strong>Complexity:</strong>
      </p>

      <ul>
        <li>Time complexity : O(n).</li>
        <li>Space complexity : O(1).</li>
      </ul>
    </article>
  ),
  2556: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> <code>m x n</code>{" "}
        <strong>binary</strong> matrix <code>grid</code>. You can move from a
        cell <code>(row, col)</code> to any of the cells{" "}
        <code>(row + 1, col)</code> or <code>(row, col + 1)</code> that has the
        value <code>1</code>.&nbsp;The matrix is <strong>disconnected</strong>{" "}
        if there is no path from <code>(0, 0)</code> to{" "}
        <code>(m - 1, n - 1)</code>.
      </p>

      <p>
        You can flip the value of <strong>at most one</strong> (possibly none)
        cell. You <strong>cannot flip</strong> the cells <code>(0, 0)</code> and{" "}
        <code>(m - 1, n - 1)</code>.
      </p>

      <p>
        Return <code>true</code>{" "}
        <em>if it is possible to make the matrix disconnect or </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>
        <strong>Note</strong> that flipping a cell changes its value from{" "}
        <code>0</code> to <code>1</code> or from <code>1</code> to{" "}
        <code>0</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/12/07/yetgrid2drawio.png"
        style={{ width: 441, height: 151 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[1,1,1],[1,0,0],[1,1,1]] <br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong> We can change the cell shown in the
        diagram above. There is no path from (0, 0) to (2, 2) in the resulting
        grid.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/12/07/yetgrid3drawio.png"
      />
      <pre>
        <strong>Input:</strong> grid = [[1,1,1],[1,0,1],[1,1,1]]
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> It is not possible to change at most one
        cell such that there is not path from (0, 0) to (2, 2).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= m * n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
        <li>
          <code>grid[0][0] == grid[m - 1][n - 1] == 1</code>
        </li>
      </ul>
    </div>
  ),
  2643: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <code>m x n</code> binary matrix <code>mat</code>, find the{" "}
        <strong>0-indexed</strong> position of the row that contains the{" "}
        <strong>maximum</strong> count of <strong>ones,</strong> and the number
        of ones in that row.
      </p>

      <p>
        In case there are multiple rows that have the maximum count of ones, the
        row with the <strong>smallest row number</strong> should be selected.
      </p>

      <p>
        Return
        <em>
          {" "}
          an array containing the index of the row, and the number of ones in
          it.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = [[0,1],[1,0]]
        <br />
        <strong>Output:</strong> [0,1]
        <br />
        <strong>Explanation:</strong> Both rows have the same number of 1's. So
        we return the index of the smaller row, 0, and the maximum count of ones
        (1<code>)</code>. So, the answer is [0,1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = [[0,0,0],[0,1,1]] <br />
        <strong>Output:</strong> [1,2]
        <br />
        <strong>Explanation:</strong> The row indexed 1 has the maximum count of
        ones <code>(2)</code>. So we return its index, <code>1</code>, and the
        count. So, the answer is [1,2].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = [[0,0],[1,1],[0,0]]
        <br />
        <strong>Output:</strong> [1,2]
        <br />
        <strong>Explanation:</strong> The row indexed 1 has the maximum count of
        ones (2). So the answer is [1,2].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == mat.length</code>&nbsp;
        </li>
        <li>
          <code>n == mat[i].length</code>&nbsp;
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>&nbsp;
        </li>
        <li>
          <code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  2923: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> teams numbered from <code>0</code> to{" "}
        <code>n - 1</code> in a tournament.
      </p>

      <p>
        Given a <strong>0-indexed</strong> 2D boolean matrix <code>grid</code>{" "}
        of size <code>n * n</code>. For all <code>i, j</code> that{" "}
        <code>0 &lt;= i, j &lt;= n - 1</code> and <code>i != j</code> team{" "}
        <code>i</code> is <strong>stronger</strong> than team <code>j</code> if{" "}
        <code>grid[i][j] == 1</code>, otherwise, team <code>j</code> is{" "}
        <strong>stronger</strong> than team <code>i</code>.
      </p>

      <p>
        Team <code>a</code> will be the <strong>champion</strong> of the
        tournament if there is no team <code>b</code> that is stronger than team{" "}
        <code>a</code>.
      </p>

      <p>
        Return <em>the team that will be the champion of the tournament.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[0,1],[0,0]] <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> There are two teams in this tournament.
        <br />
        grid[0][1] == 1 means that team 0 is stronger than team 1. So team 0
        will be the champion.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[0,0,1],[1,0,1],[0,0,0]]
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> There are three teams in this tournament.
        <br />
        grid[1][0] == 1 means that team 1 is stronger than team 0.
        <br />
        grid[1][2] == 1 means that team 1 is stronger than team 2.
        <br />
        So team 1 will be the champion.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
        <li>
          For all <code>i grid[i][i]</code> is <code>0.</code>
        </li>
        <li>
          For all <code>i, j</code> that <code>i != j</code>,{" "}
          <code>grid[i][j] != grid[j][i]</code>.
        </li>
        <li>
          The input is generated such that if team <code>a</code> is stronger
          than team <code>b</code> and team <code>b</code> is stronger than team{" "}
          <code>c</code>, then team <code>a</code> is stronger than team{" "}
          <code>c</code>.
        </li>
      </ul>
    </div>
  ),
  2965: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> 2D integer matrix{" "}
        <code>
          <font face="monospace">grid</font>
        </code>{" "}
        of size <code>n * n</code> with values in the range{" "}
        <code>
          [1, n<sup>2</sup>]
        </code>
        . Each integer appears <strong>exactly once</strong> except{" "}
        <code>a</code> which appears <strong>twice</strong> and <code>b</code>{" "}
        which is <strong>missing</strong>. The task is to find the repeating and
        missing numbers <code>a</code> and <code>b</code>.
      </p>

      <p>
        Return{" "}
        <em>
          a <strong>0-indexed </strong>integer array{" "}
        </em>
        <code>ans</code>
        <em> of size </em>
        <code>2</code>
        <em> where </em>
        <code>ans[0]</code>
        <em> equals to </em>
        <code>a</code>
        <em> and </em>
        <code>ans[1]</code>
        <em> equals to </em>
        <code>b</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[1,3],[2,2]] <br />
        <strong>Output:</strong> [2,4]
        <br />
        <strong>Explanation:</strong> Number 2 is repeated and number 4 is
        missing so the answer is [2,4].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[9,1,7],[8,9,2],[3,4,6]]
        <br />
        <strong>Output:</strong> [9,5]
        <br />
        <strong>Explanation:</strong> Number 9 is repeated and number 5 is
        missing so the answer is [9,5].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n == grid.length == grid[i].length &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= grid[i][j] &lt;= n * n</code>
        </li>
        <li>
          For all <code>x</code> that <code>1 &lt;= x &lt;= n * n</code> there
          is exactly one <code>x</code> that is not equal to any of the grid
          members.
        </li>
        <li>
          For all <code>x</code> that <code>1 &lt;= x &lt;= n * n</code> there
          is exactly one <code>x</code> that is equal to exactly two of the grid
          members.
        </li>
        <li>
          For all <code>x</code> that <code>1 &lt;= x &lt;= n * n</code> except
          two of them there is exatly one pair of <code>i, j</code> that{" "}
          <code>0 &lt;= i, j &lt;= n - 1</code> and <code>grid[i][j] == x</code>
          .
        </li>
      </ul>
    </div>
  ),
  2435: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> <code>m x n</code> integer
        matrix <code>grid</code> and an integer <code>k</code>. You are
        currently at position <code>(0, 0)</code> and you want to reach position{" "}
        <code>(m - 1, n - 1)</code> moving only <strong>down</strong> or{" "}
        <strong>right</strong>.
      </p>

      <p>
        Return
        <em>
          {" "}
          the number of paths where the sum of the elements on the path is
          divisible by{" "}
        </em>
        <code>k</code>. Since the answer may be very large, return it{" "}
        <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/08/13/image-20220813183124-1.png"
        style={{ width: 437, height: 200 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3 <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> There are two paths where the sum of the
        elements on the path is divisible by k.
        <br />
        The first path highlighted in red has a sum of 5 + 2 + 4 + 5 + 2 = 18
        which is divisible by 3.
        <br />
        The second path highlighted in blue has a sum of 5 + 3 + 0 + 5 + 2 = 15
        which is divisible by 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/08/17/image-20220817112930-3.png"
        style={{ height: 85, width: 132 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[0,0]], k = 5<br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> The path highlighted in red has a sum of 0
        + 0 = 0 which is divisible by 5.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/08/12/image-20220812224605-3.png"
        style={{ width: 257, height: 200 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1
        <br />
        <strong>Output:</strong> 10
        <br />
        <strong>Explanation:</strong> Every integer is divisible by 1 so the sum
        of the elements on every possible path is divisible by k.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>
            1 &lt;= m, n &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= m * n &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= grid[i][j] &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  2510: (
    <article role="main" class="blog-post">
      <p>
        You are given a <strong>0-indexed</strong> <code>m x n</code>{" "}
        <strong>binary</strong> matrix <code>grid</code>. You can move from a
        cell <code>(row, col)</code> to any of the cells{" "}
        <code>(row + 1, col)</code> or <code>(row, col + 1)</code>.
      </p>

      <p>
        Return <code>true</code>
        <em> if there is a path from </em>
        <code>(0, 0)</code>
        <em> to </em>
        <code>(m - 1, n - 1)</code>
        <em>
          {" "}
          that visits an <strong>equal</strong> number of{" "}
        </em>
        <code>0</code>
        <em>'s and </em>
        <code>1</code>
        <em>'s</em>. Otherwise return <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2510.Check%20if%20There%20is%20a%20Path%20With%20Equal%20Number%20of%200%27s%20And%201%27s/images/yetgriddrawio-4.png"
        />
      </p>
      <pre>
        <strong>Input:</strong> grid = [[0,1,0,0],[0,1,0,0],[1,0,1,0]] <br />
        <strong>Output:</strong> true
        <br />
        <strong>Explanation:</strong> The path colored in blue in the above
        diagram is a valid path because we have 3 cells with a value of 1 and 3
        with a value of 0. Since there is a valid path, we return true.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2510.Check%20if%20There%20is%20a%20Path%20With%20Equal%20Number%20of%200%27s%20And%201%27s/images/yetgrid2drawio-1.png"
          style={{ width: 151, height: 151 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> grid = [[1,1,0],[0,0,1],[1,0,0]]
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> There is no path in this grid with an
        equal number of 0's and 1's.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>2 &lt;= m, n &lt;= 100</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </article>
  ),
  3212: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a 2D character matrix <code>grid</code>, where{" "}
        <code>grid[i][j]</code> is either <code>'X'</code>, <code>'Y'</code>, or{" "}
        <code>'.'</code>, return the number of{" "}
        <span
          data-keyword="submatrix"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r1i:"
              >
                <div>submatrices</div>
              </div>
            </div>
          </div>
        </span>{" "}
        that contain:
      </p>

      <ul>
        <li>
          <code>grid[0][0]</code>
        </li>
        <li>
          an <strong>equal</strong> frequency of <code>'X'</code> and{" "}
          <code>'Y'</code>.
        </li>
        <li>
          <strong>at least</strong> one <code>'X'</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <br />
          <span class="example-io">grid = [["X","Y","."],["Y",".","."]]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          <strong>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2024/06/07/examplems.png"
              style={{
                padding: 10,
                background: "rgb(255, 255, 255)",
                borderRadius: "0.5",
                width: 17,
                height: 35,
              }}
            />
          </strong>
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">grid = [["X","X"],["X","Y"]]</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          No submatrix has an equal frequency of <code>'X'</code> and{" "}
          <code>'Y'</code>.
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">grid = [[".","."],[".","."]]</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          No submatrix has at least one <code>'X'</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= grid.length, grid[i].length &lt;= 1000</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>'X'</code>, <code>'Y'</code>,
          or <code>'.'</code>.
        </li>
      </ul>
    </div>
  ),
  3127: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a 2D matrix <code>grid</code> of size <code>3 x 3</code>{" "}
        consisting only of characters <code>'B'</code> and <code>'W'</code>.
        Character <code>'W'</code> represents the white color, and character{" "}
        <code>'B'</code> represents the black color.
      </p>

      <p>
        Your task is to change the color of <strong>at most one</strong> cell so
        that the matrix has a <code>2 x 2</code> square where all cells are of
        the same color.
      </p>

      <p>
        Return <code>true</code> if it is possible to create a{" "}
        <code>2 x 2</code> square of the same color, otherwise, return{" "}
        <code>false</code>.
      </p>

      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            grid = [["B","W","B"],["B","W","W"],["B","W","B"]]
          </span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">true</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          It can be done by changing the color of the <code>grid[0][2]</code>.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            grid = [["B","W","B"],["W","B","W"],["B","W","B"]]
          </span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">false</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>It cannot be done by changing at most one cell.</p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            grid = [["B","W","B"],["B","W","W"],["B","W","W"]]
          </span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">true</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          The <code>grid</code> already contains a <code>2 x 2</code> square of
          the same color.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>grid.length == 3</code>
        </li>
        <li>
          <code>grid[i].length == 3</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>'W'</code> or <code>'B'</code>
          .
        </li>
      </ul>
    </div>
  ),
  3195: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a 2D <strong>binary</strong> array <code>grid</code>. Find
        a rectangle with horizontal and vertical sides with the
        <strong> smallest</strong> area, such that all the 1's in{" "}
        <code>grid</code> lie inside this rectangle.
      </p>

      <p>
        Return the <strong>minimum</strong> possible area of the rectangle.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">grid = [[0,1,0],[1,0,1]]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">6</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/05/08/examplerect0.png"
            style={{
              padding: 10,
              background: "rgb(255, 255, 255)",
              borderRadius: "0.5rem",
              width: 279,
              height: 198,
            }}
          />
        </p>
        <p>
          The smallest rectangle has a height of 2 and a width of 3, so it has
          an area of <code>2 * 3 = 6</code>.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">grid = [[1,0],[0,0]]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/05/08/examplerect1.png"
            style={{
              padding: 10,
              background: "rgb(255, 255, 255)",
              borderRadius: "0.5rem",
              width: 204,
              height: 201,
            }}
          />
        </p>
        <p>
          The smallest rectangle has both height and width 1, so its area is{" "}
          <code>1 * 1 = 1</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= grid.length, grid[i].length &lt;= 1000</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either 0 or 1.
        </li>
        <li>
          The input is generated such that there is at least one 1 in{" "}
          <code>grid</code>.
        </li>
      </ul>
    </div>
  ),
  3197: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a 2D <strong>binary</strong> array <code>grid</code>. You
        need to find 3 <strong>non-overlapping</strong> rectangles having{" "}
        <strong>non-zero</strong> areas with horizontal and vertical sides such
        that all the 1's in <code>grid</code> lie inside these rectangles.
      </p>

      <p>
        Return the <strong>minimum</strong> possible sum of the area of these
        rectangles.
      </p>

      <p>
        <strong>Note</strong> that the rectangles are allowed to touch.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">grid = [[1,0,1],[1,1,1]]</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">5</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/05/14/example0rect21.png"
            style={{
              padding: 10,
              background: "rgb(255, 255, 255)",
              borderRadius: "0.5rem",
              width: 280,
              height: 198,
            }}
          />
        </p>

        <ul>
          <li>
            The 1's at <code>(0, 0)</code> and <code>(1, 0)</code> are covered
            by a rectangle of area 2.
          </li>
          <li>
            The 1's at <code>(0, 2)</code> and <code>(1, 2)</code> are covered
            by a rectangle of area 2.
          </li>
          <li>
            The 1 at <code>(1, 1)</code> is covered by a rectangle of area 1.
          </li>
        </ul>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">grid = [[1,0,1,0],[0,1,0,1]]</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">5</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/05/14/example1rect2.png"
            style={{
              padding: 10,
              background: "rgb(255, 255, 255)",
              borderRadius: "0.5rem",
              width: 356,
              height: 198,
            }}
          />
        </p>

        <ul>
          <li>
            The 1's at <code>(0, 0)</code> and <code>(0, 2)</code> are covered
            by a rectangle of area 3.
          </li>
          <li>
            The 1 at <code>(1, 1)</code> is covered by a rectangle of area 1.
          </li>
          <li>
            The 1 at <code>(1, 3)</code> is covered by a rectangle of area 1.
          </li>
        </ul>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= grid.length, grid[i].length &lt;= 30</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either 0 or 1.
        </li>
        <li>
          The input is generated such that there are at least three 1's in{" "}
          <code>grid</code>.
        </li>
      </ul>
    </div>
  ),
  238: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return <em>an array</em>{" "}
        <code>answer</code> <em>such that</em> <code>answer[i]</code>{" "}
        <em>is equal to the product of all the elements of</em>{" "}
        <code>nums</code> <em>except</em> <code>nums[i]</code>.
      </p>
      <p>
        The product of any prefix or suffix of <code>nums</code> is{" "}
        <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.
      </p>
      <p>
        You must write an algorithm that runs in&nbsp;<code>O(n)</code>
        &nbsp;time and without using the division operation.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [1,2,3,4] <br />
        <strong>Output:</strong> [24,12,8,6]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [-1,1,0,-3,3] <br />
        <strong>Output:</strong> [0,0,9,0,0]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            2 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>-30 &lt;= nums[i] &lt;= 30</code>
        </li>
        <li>
          The product of any prefix or suffix of <code>nums</code> is{" "}
          <strong>guaranteed</strong> to fit in a <strong>32-bit</strong>{" "}
          integer.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>&nbsp;Can you solve the problem in{" "}
        <code>O(1)</code>&nbsp;extra&nbsp;space complexity? (The output array{" "}
        <strong>does not</strong> count as extra space for space complexity
        analysis.)
      </p>
    </div>
  ),
  303: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, handle multiple queries of the
        following type:
      </p>

      <ol>
        <li>
          Calculate the <strong>sum</strong> of the elements of{" "}
          <code>nums</code> between indices <code>left</code> and{" "}
          <code>right</code> <strong>inclusive</strong> where{" "}
          <code>left &lt;= right</code>.
        </li>
      </ol>

      <p>
        Implement the <code>NumArray</code> class:
      </p>

      <ul>
        <li>
          <code>NumArray(int[] nums)</code> Initializes the object with the
          integer array <code>nums</code>.
        </li>
        <li>
          <code>int sumRange(int left, int right)</code> Returns the{" "}
          <strong>sum</strong> of the elements of <code>nums</code> between
          indices <code>left</code> and <code>right</code>{" "}
          <strong>inclusive</strong> (i.e.{" "}
          <code>nums[left] + nums[left + 1] + ... + nums[right]</code>).
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        ["NumArray", "sumRange", "sumRange", "sumRange"] <br />
        [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]] <br />
        <strong>Output</strong> <br />
        [null, 1, -1, -3]
        <strong>Explanation</strong>
        NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]); <br />
        numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1 <br />
        numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
        <br />
        numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= left &lt;= right &lt; nums.length</code>
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>sumRange</code>.
        </li>
      </ul>
    </div>
  ),
  304: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a 2D matrix <code>matrix</code>, handle multiple queries of the
        following type:
      </p>

      <ul>
        <li>
          Calculate the <strong>sum</strong> of the elements of{" "}
          <code>matrix</code> inside the rectangle defined by its{" "}
          <strong>upper left corner</strong> <code>(row1, col1)</code> and{" "}
          <strong>lower right corner</strong> <code>(row2, col2)</code>.
        </li>
      </ul>

      <p>
        Implement the <code>NumMatrix</code> class:
      </p>

      <ul>
        <li>
          <code>NumMatrix(int[][] matrix)</code> Initializes the object with the
          integer matrix <code>matrix</code>.
        </li>
        <li>
          <code>int sumRegion(int row1, int col1, int row2, int col2)</code>{" "}
          Returns the <strong>sum</strong> of the elements of{" "}
          <code>matrix</code> inside the rectangle defined by its{" "}
          <strong>upper left corner</strong> <code>(row1, col1)</code> and{" "}
          <strong>lower right corner</strong> <code>(row2, col2)</code>.
        </li>
      </ul>

      <p>
        You must design an algorithm where <code>sumRegion</code> works on{" "}
        <code>O(1)</code> time complexity.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/14/sum-grid.jpg"
        style={{ width: 415, height: 415 }}
      />
      <pre>
        <strong>Input</strong> <br />
        ["NumMatrix", "sumRegion", "sumRegion", "sumRegion"] <br />
        [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7],
        [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]] <br />
        <strong>Output</strong> <br />
        [null, 8, 11, 12]
        <strong>Explanation</strong>
        NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1],
        [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]); <br />
        numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red
        rectangle) <br />
        numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green
        rectangle) <br />
        numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue
        rectangle)
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == matrix.length</code>
        </li>
        <li>
          <code>n == matrix[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 200</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= matrix[i][j] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= row1 &lt;= row2 &lt; m</code>
        </li>
        <li>
          <code>0 &lt;= col1 &lt;= col2 &lt; n</code>
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>sumRegion</code>.
        </li>
      </ul>
    </div>
  ),
  523: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array nums and an integer k, return <code>true</code>{" "}
        <em>if </em>
        <code>nums</code>
        <em>
          {" "}
          has a <strong>good subarray</strong> or{" "}
        </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>
        A <strong>good subarray</strong> is a subarray where:
      </p>

      <ul>
        <li>
          its length is <strong>at least two</strong>, and
        </li>
        <li>
          the sum of the elements of the subarray is a multiple of{" "}
          <code>k</code>.
        </li>
      </ul>

      <p>
        <strong>Note</strong> that:
      </p>

      <ul>
        <li>
          A <strong>subarray</strong> is a contiguous part of the array.
        </li>
        <li>
          An integer <code>x</code> is a multiple of <code>k</code> if there
          exists an integer <code>n</code> such that <code>x = n * k</code>.{" "}
          <code>0</code> is <strong>always</strong> a multiple of <code>k</code>
          .
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [23,<u>2,4</u>,6,7], k = 6 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> [2, 4] is a continuous subarray of size 2
        whose elements sum up to 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [<u>23,2,6,4,7</u>], k = 6 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> [23, 2, 6, 4, 7] is an continuous subarray
        of size 5 whose elements sum up to 42. <br />
        42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [23,2,6,4,7], k = 13 <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= sum(nums[i]) &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  525: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a binary array <code>nums</code>, return{" "}
        <em>
          the maximum length of a contiguous subarray with an equal number of{" "}
        </em>
        <code>0</code>
        <em> and </em>
        <code>1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1] <br />
        <strong>Output:</strong> 2<strong>Explanation:</strong> [0, 1] is the
        longest contiguous subarray with an equal number of 0 and 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1,0] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> [0, 1] (or [1, 0]) is a longest contiguous
        subarray with equal number of 0 and 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>nums[i]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  548: (
    <div class="markdown-body div-width">
      <p>
        Given an array with n integers, you need to find if there are triplets
        (i, j, k) which satisfies following conditions:
      </p>
      <ul>
        <li> 0 &lt; i, i + 1 &lt; j, j + 1 &lt; k &lt; n - 1</li>
        <li>
          {" "}
          Sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k +
          1, n - 1) should be equal.
        </li>
      </ul>
      where we define that subarray (L, R) represents a slice of the original
      array starting from the element indexed L to the element indexed R.
      <p></p>
      <p>
        <b>Example:</b>
        <br /> <br />
      </p>
      <pre>
        <strong>Input:</strong> [1,2,1,2,1,2,1]
        <br />
        <strong>Output:</strong> True <br />
        <strong>Explanation:</strong>
        <br />
        i = 1, j = 3, k = 5.
        <br />
        sum(0, i - 1) = sum(0, 0) = 1<br />
        sum(i + 1, j - 1) = sum(2, 2) = 1<br />
        sum(j + 1, k - 1) = sum(4, 4) = 1<br />
        sum(k + 1, n - 1) = sum(6, 6) = 1
      </pre>
      <p></p>
      <b>Note:</b>
      <ul>
        <li> 1 &lt;= n &lt;= 2000.</li>
        <li>
          {" "}
          Elements in the given array will be in range [-1,000,000, 1,000,000].
        </li>
      </ul>
    </div>
  ),
  560: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code> and an integer{" "}
        <code>k</code>, return{" "}
        <em>the total number of subarrays whose sum equals to</em>{" "}
        <code>k</code>.
      </p>
      <p>
        A subarray is a contiguous <strong>non-empty</strong> sequence of
        elements within an array.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [1,1,1], k = 2<br />
        <strong>Output:</strong> 2
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,2,3], k = 3<br />
        <strong>Output:</strong> 2
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>-1000 &lt;= nums[i] &lt;= 1000</code>
        </li>
        <li>
          <code>
            -10<sup>7</sup> &lt;= k &lt;= 10<sup>7</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  724: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code>, calculate the{" "}
        <strong>pivot index</strong> of this array.
      </p>

      <p>
        The <strong>pivot index</strong> is the index where the sum of all the
        numbers <strong>strictly</strong> to the left of the index is equal to
        the sum of all the numbers <strong>strictly</strong> to the index's
        right.
      </p>

      <p>
        If the index is on the left edge of the array, then the left sum is{" "}
        <code>0</code> because there are no elements to the left. This also
        applies to the right edge of the array.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>leftmost pivot index</strong>
        </em>
        . If no such index exists, return <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,7,3,6,5,6]
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong>
        <br />
        The pivot index is 3.
        <br />
        Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
        <br />
        Right sum = nums[4] + nums[5] = 5 + 6 = 11
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3]
        <br />
        <strong>Output:</strong> -1
        <br />
        <strong>Explanation:</strong>
        <br />
        There is no index that satisfies the conditions in the problem
        statement.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1,-1] <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong>
        <br />
        The pivot index is 0.
        <br />
        Left sum = 0 (no elements to the left of index 0)
        <br />
        Right sum = nums[1] + nums[2] = 1 + -1 = 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>-1000 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Note:</strong> This question is the same as&nbsp;1991:&nbsp;
        <a
          href="https://leetcode.com/problems/find-the-middle-index-in-array/"
          target="_blank"
          rel="noreferrer"
        >
          https://leetcode.com/problems/find-the-middle-index-in-array/
        </a>
      </p>
    </div>
  ),
  974: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and an integer <code>k</code>,
        return{" "}
        <em>
          the number of non-empty <strong>subarrays</strong> that have a sum
          divisible by{" "}
        </em>
        <code>k</code>.
      </p>

      <p>
        A <strong>subarray</strong> is a <strong>contiguous</strong> part of an
        array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,5,0,-2,-3,1], k = 5 <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> There are 7 subarrays with a sum divisible
        by k = 5: <br />
        [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3],
        [-2, -3]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5], k = 9 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            2 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1314: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <code>m x n</code> matrix <code>mat</code> and an integer{" "}
        <code>k</code>, return <em>a matrix</em> <code>answer</code>{" "}
        <em>where each</em> <code>answer[i][j]</code>{" "}
        <em>is the sum of all elements</em> <code>mat[r][c]</code> <em>for</em>:
      </p>

      <ul>
        <li>
          <code>i - k &lt;= r &lt;= i + k,</code>
        </li>
        <li>
          <code>j - k &lt;= c &lt;= j + k</code>, and
        </li>
        <li>
          <code>(r, c)</code> is a valid position in the matrix.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1 <br />
        <strong>Output:</strong> [[12,21,16],[27,45,33],[24,39,28]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2 <br />
        <strong>Output:</strong> [[45,45,45],[45,45,45],[45,45,45]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m ==&nbsp;mat.length</code>
        </li>
        <li>
          <code>n ==&nbsp;mat[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n, k &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= mat[i][j] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1413: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers&nbsp;<code>nums</code>, you start with an
        initial <strong>positive</strong> value <em>startValue</em>
        <em>.</em>
      </p>

      <p>
        In each iteration, you calculate the step by step sum of{" "}
        <em>startValue</em>&nbsp;plus&nbsp;elements in <code>nums</code>
        &nbsp;(from left to right).
      </p>

      <p>
        Return the minimum <strong>positive</strong> value of&nbsp;
        <em>startValue</em> such that the step by step sum is never less than 1.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-3,2,-3,4,2]
        <br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation: </strong>If you choose startValue = 4, in the third
        iteration your step by step sum is less than 1.
        <br />
        <strong>step by step sum</strong>
        <br />
        <strong>startValue = 4 | startValue = 5 | nums</strong>
        <br />
        (4 <strong>-3</strong> ) = 1 | (5 <strong>-3</strong> ) = 2 | -3 (1{" "}
        <strong>+2</strong> ) = 3 | (2 <strong>+2</strong> ) = 4 | 2 (3{" "}
        <strong>-3</strong> ) = 0 | (4 <strong>-3</strong> ) = 1 | -3 (0{" "}
        <strong>+4</strong> ) = 4 | (1 <strong>+4</strong> ) = 5 | 4<br />
        (4 <strong>+2</strong> ) = 6 | (5 <strong>+2</strong> ) = 7 | 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2]
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> Minimum start value should be positive.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,-2,-3] <br />
        <strong>Output:</strong> 5
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>-100 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1422: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a&nbsp;string <code>s</code>&nbsp;of zeros and ones,{" "}
        <em>
          return the maximum score after splitting the string into two{" "}
          <strong>non-empty</strong> substrings
        </em>{" "}
        (i.e. <strong>left</strong> substring and <strong>right</strong>{" "}
        substring).
      </p>

      <p>
        The score after splitting a string is the number of{" "}
        <strong>zeros</strong> in the <strong>left</strong> substring plus the
        number of <strong>ones</strong> in the <strong>right</strong> substring.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "011101" <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> <br />
        All possible ways of splitting s into two non-empty substrings are:{" "}
        <br />
        left = "0" and right = "11101", score = 1 + 4 = 5 <br />
        left = "01" and right = "1101", score = 1 + 3 = 4 <br />
        left = "011" and right = "101", score = 1 + 2 = 3 <br />
        left = "0111" and right = "01", score = 1 + 1 = 2 <br />
        left = "01110" and right = "1", score = 2 + 1 = 3
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "00111" <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> When left = "00" and right = "111", we get
        the maximum score = 2 + 3 = 5
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "1111" <br />
        <strong>Output:</strong> 3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= s.length &lt;= 500</code>
        </li>
        <li>
          The string <code>s</code> consists of characters <code>'0'</code> and{" "}
          <code>'1'</code> only.
        </li>
      </ul>
    </div>
  ),
  1442: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>arr</code>.
      </p>

      <p>
        We want to select three indices <code>i</code>, <code>j</code> and{" "}
        <code>k</code> where{" "}
        <code>(0 &lt;= i &lt; j &lt;= k &lt; arr.length)</code>.
      </p>

      <p>
        Let's define <code>a</code> and <code>b</code> as follows:
      </p>

      <ul>
        <li>
          <code>a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]</code>
        </li>
        <li>
          <code>b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]</code>
        </li>
      </ul>

      <p>
        Note that <strong>^</strong> denotes the <strong>bitwise-xor</strong>{" "}
        operation.
      </p>

      <p>
        Return <em>the number of triplets</em> (<code>i</code>, <code>j</code>{" "}
        and <code>k</code>) Where <code>a == b</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [2,3,1,6,7] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The triplets are (0,1,2), (0,2,2), (2,3,4)
        and (2,4,4)
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,1,1,1,1] <br />
        <strong>Output:</strong> 10
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= arr.length &lt;= 300</code>
        </li>
        <li>
          <code>
            1 &lt;= arr[i] &lt;= 10<sup>8</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1480: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code>. We define a running sum of an array
        as&nbsp;<code>runningSum[i] = sum(nums[0]…nums[i])</code>.
      </p>

      <p>
        Return the running sum of <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4] <br />
        <strong>Output:</strong> [1,3,6,10] <br />
        <strong>Explanation:</strong> Running sum is obtained as follows: [1,
        1+2, 1+2+3, 1+2+3+4].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1,1] <br />
        <strong>Output:</strong> [1,2,3,4,5] <br />
        <strong>Explanation:</strong> Running sum is obtained as follows: [1,
        1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,1,2,10,1] <br />
        <strong>Output:</strong> [3,4,6,16,17]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>-10^6&nbsp;&lt;= nums[i] &lt;=&nbsp;10^6</code>
        </li>
      </ul>
    </div>
  ),
  1588: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of positive integers <code>arr</code>, return{" "}
        <em>
          the sum of all possible <strong>odd-length subarrays</strong> of{" "}
        </em>
        <code>arr</code>.
      </p>

      <p>
        A <strong>subarray</strong> is a contiguous subsequence of the array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,4,2,5,3] <br />
        <strong>Output:</strong> 58 <br />
        <strong>Explanation: </strong>The odd-length subarrays of arr and their
        sums are: <br />
        [1] = 1 <br />
        [4] = 4 <br />
        [2] = 2 <br />
        [5] = 5 <br />
        [3] = 3 <br />
        [1,4,2] = 7 <br />
        [4,2,5] = 11 <br />
        [2,5,3] = 10 <br />
        [1,4,2,5,3] = 15 <br />
        If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15
        = 58
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,2] <br />
        <strong>Output:</strong> 3 <br />
        <b>Explanation: </b>There are only 2 subarrays of odd length, [1] and
        [2]. Their sum is 3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [10,11,12] <br />
        <strong>Output:</strong> 66
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= arr.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= arr[i] &lt;= 1000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <p>Could you solve this problem in O(n) time complexity?</p>
    </div>
  ),
  1732: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a biker going on a road trip. The road trip consists of{" "}
        <code>n + 1</code> points at different altitudes. The biker starts his
        trip on point <code>0</code> with altitude equal <code>0</code>.
      </p>

      <p>
        You are given an integer array <code>gain</code> of length{" "}
        <code>n</code> where <code>gain[i]</code> is the{" "}
        <strong>net gain in altitude</strong> between points <code>i</code>
        ​​​​​​ and <code>i + 1</code> for all (<code>0 &lt;= i &lt; n)</code>.
        Return{" "}
        <em>
          the <strong>highest altitude</strong> of a point.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> gain = [-5,1,5,0,-7]
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> The altitudes are [0,-5,-4,1,1,-6]. The
        highest is 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> gain = [-4,-3,-2,-1,4,3,2] <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> The altitudes are
        [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == gain.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>-100 &lt;= gain[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1895: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <code>k x k</code> <strong>magic square</strong> is a{" "}
        <code>k x k</code> grid filled with integers such that every row sum,
        every column sum, and both diagonal sums are <strong>all equal</strong>.
        The integers in the magic square{" "}
        <strong>do not have to be distinct</strong>. Every <code>1 x 1</code>{" "}
        grid is trivially a <strong>magic square</strong>.
      </p>
      <p>
        Given an <code>m x n</code> integer <code>grid</code>, return{" "}
        <em>
          the <strong>size</strong> (i.e., the side length{" "}
        </em>
        <code>k</code>
        <em>
          ) of the <strong>largest magic square</strong> that can be found
          within this grid
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/29/magicsquare-grid.jpg"
        style={{ width: 413, height: 335 }}
      />
      <pre>
        <strong>Input:</strong> grid =
        [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The largest magic square has a size of 3.{" "}
        <br />
        Every row sum, column sum, and diagonal sum of this magic square is
        equal to 12. <br />
        - Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12 <br />
        - Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12 <br />- Diagonal sums: 5+4+3 =
        6+4+2 = 12
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/29/magicsquare2-grid.jpg"
        style={{ width: 333, height: 255 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]] <br />
        <strong>Output:</strong> 2
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 50</code>
        </li>
        <li>
          <code>
            1 &lt;= grid[i][j] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  644: (
    <div class="markdown-body div-width">
      <p>
        Given an array consisting of <code>n</code> integers, find the
        contiguous subarray whose <b>length is greater than or equal to</b>{" "}
        <code>k</code> that has the maximum average value. And you need to
        output the maximum average value.
      </p>

      <p>
        <b>Example 1:</b>
        <br />
      </p>
      <pre>
        <b>Input:</b> [1,12,-5,-6,50,3], k = 4<br />
        <b>Output:</b> 12.75
        <br />
        <b>Explanation:</b>
        <br />
        when length is 5, maximum average value is 10.8,
        <br />
        when length is 6, maximum average value is 9.16667.
        <br />
        Thus return 12.75.
      </pre>

      <p>
        <b>Note:</b>
        <br />
      </p>
      <ul>
        <li>
          1 &lt;= <code>k</code> &lt;= <code>n</code> &lt;= 10,000.
        </li>
        <li>Elements of the given array will be in range [-10,000, 10,000].</li>
        <li>
          The answer with the calculation error less than 10<sup>-5</sup> will
          be accepted.
        </li>
      </ul>
    </div>
  ),
  1991: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <strong>0-indexed</strong> integer array <code>nums</code>, find
        the <strong>leftmost</strong> <code>middleIndex</code> (i.e., the
        smallest amongst all the possible ones).
      </p>

      <p>
        A <code>middleIndex</code> is an index where{" "}
        <code>
          nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] +
          nums[middleIndex+2] + ... + nums[nums.length-1]
        </code>
        .
      </p>

      <p>
        If <code>middleIndex == 0</code>, the left side sum is considered to be{" "}
        <code>0</code>. Similarly, if{" "}
        <code>middleIndex == nums.length - 1</code>, the right side sum is
        considered to be <code>0</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>leftmost</strong>{" "}
        </em>
        <code>middleIndex</code>
        <em> that satisfies the condition, or </em>
        <code>-1</code>
        <em> if there is no such index</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,-1,<u>8</u>,4]
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> The sum of the numbers before index 3 is:
        2 + 3 + -1 = 4<br />
        The sum of the numbers after index 3 is: 4 = 4
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,-1,<u>4</u>]<br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> The sum of the numbers before index 2 is:
        1 + -1 = 0<br />
        The sum of the numbers after index 2 is: 0
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,5] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> There is no valid middleIndex.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>-1000 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Note:</strong> This question is the same as&nbsp;724:&nbsp;
        <a
          href="https://leetcode.com/problems/find-pivot-index/"
          target="_blank"
          rel="noreferrer"
        >
          https://leetcode.com/problems/find-pivot-index/
        </a>
      </p>
    </div>
  ),
  2256: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> of length <code>n</code>.
      </p>
      <p>
        The <strong>average difference</strong> of the index <code>i</code> is
        the <strong>absolute</strong> <strong>difference</strong> between the
        average of the <strong>first</strong> <code>i + 1</code> elements of{" "}
        <code>nums</code> and the average of the <strong>last</strong>{" "}
        <code>n - i - 1</code> elements. Both averages should be{" "}
        <strong>rounded down</strong> to the nearest integer.
      </p>{" "}
      <br />
      <p>
        Return
        <em>
          {" "}
          the index with the <strong>minimum average difference</strong>
        </em>
        . If there are multiple such indices, return the{" "}
        <strong>smallest</strong> one.
      </p>
      <p>
        <strong>Note:</strong>
      </p>
      <ul>
        <li>
          The <strong>absolute difference</strong> of two numbers is the
          absolute value of their difference.
        </li>
        <li>
          The <strong>average</strong> of <code>n</code> elements is the{" "}
          <strong>sum</strong> of the <code>n</code> elements divided (
          <strong>integer division</strong>) by <code>n</code>.
        </li>
        <li>
          The average of <code>0</code> elements is considered to be{" "}
          <code>0</code>.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [2,5,3,9,5,3]
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong>
        <br />
        - The average difference of index 0 is: |2 / 1 - (5 + 3 + 9 + 5 + 3) /
        5| = |2 / 1 - 25 / 5| = |2 - 5| = 3.
        <br />
        - The average difference of index 1 is: |(2 + 5) / 2 - (3 + 9 + 5 + 3) /
        4| = |7 / 2 - 20 / 4| = |3 - 5| = 2.
        <br />
        - The average difference of index 2 is: |(2 + 5 + 3) / 3 - (9 + 5 + 3) /
        3| = |10 / 3 - 17 / 3| = |3 - 5| = 2.
        <br />
        - The average difference of index 3 is: |(2 + 5 + 3 + 9) / 4 - (5 + 3) /
        2| = |19 / 4 - 8 / 2| = |4 - 4| = 0.
        <br />
        - The average difference of index 4 is: |(2 + 5 + 3 + 9 + 5) / 5 - 3 /
        1| = |24 / 5 - 3 / 1| = |4 - 3| = 1.
        <br />
        - The average difference of index 5 is: |(2 + 5 + 3 + 9 + 5 + 3) / 6 -
        0| = |27 / 6 - 0| = |4 - 0| = 4.
        <br />
        The average difference of index 3 is the minimum average difference so
        return 3.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [0]
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong>
        <br />
        The only index is 0 so return 0.
        <br />
        The average difference of index 0 is: |0 / 1 - 0| = |0 - 0| = 0.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2485: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a positive integer <code>n</code>, find the{" "}
        <strong>pivot integer</strong> <code>x</code> such that:
      </p>

      <ul>
        <li>
          The sum of all elements between <code>1</code> and <code>x</code>{" "}
          inclusively equals the sum of all elements between <code>x</code> and{" "}
          <code>n</code> inclusively.
        </li>
      </ul>

      <p>
        Return <em>the pivot integer </em>
        <code>x</code>. If no such integer exists, return <code>-1</code>. It is
        guaranteed that there will be at most one pivot index for the given
        input.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 8 <br />
        <strong>Output:</strong> 6<br />
        <strong>Explanation:</strong> 6 is the pivot integer since: 1 + 2 + 3 +
        4 + 5 + 6 = 6 + 7 + 8 = 21.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1<br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> 1 is the pivot integer since: 1 = 1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4<br />
        <strong>Output:</strong> -1
        <br />
        <strong>Explanation:</strong> It can be proved that no such integer
        exist.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  33: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an integer array <code>nums</code> sorted in ascending order
        (with <strong>distinct</strong> values).
      </p>
      <p>
        Prior to being passed to your function, <code>nums</code> is{" "}
        <strong>possibly rotated</strong> at an unknown pivot index{" "}
        <code>k</code> (<code>1 &lt;= k &lt; nums.length</code>) such that the
        resulting array is{" "}
        <code>
          [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]
        </code>{" "}
        (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,5,6,7]</code>{" "}
        might be rotated at pivot index <code>3</code> and become{" "}
        <code>[4,5,6,7,0,1,2]</code>.
      </p>
      <p>
        Given the array <code>nums</code> <strong>after</strong> the possible
        rotation and an integer <code>target</code>, return{" "}
        <em>the index of </em>
        <code>target</code>
        <em> if it is in </em>
        <code>nums</code>
        <em>, or </em>
        <code>-1</code>
        <em> if it is not in </em>
        <code>nums</code>.
      </p>
      <p>
        You must write an algorithm with <code>O(log n)</code> runtime
        complexity.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 0 <br />
        <strong>Output:</strong> 4
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 3 <br />
        <strong>Output:</strong> -1
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <br />
      <pre>
        <strong>Input:</strong> nums = [1], target = 0
        <strong>
          {" "}
          <br />
          Output:
        </strong>{" "}
        -1
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 5000</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          All values of <code>nums</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>nums</code> is an ascending array that is possibly rotated.
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  4: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two sorted arrays <code>nums1</code> and <code>nums2</code> of
        size <code>m</code> and <code>n</code> respectively, return{" "}
        <strong>the median</strong> of the two sorted arrays.
      </p>

      <p>
        The overall run time complexity should be <code>O(log (m+n))</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,3], nums2 = [2] <br />
        <strong>Output:</strong> 2.00000 <br />
        <strong>Explanation:</strong> merged array = [1,2,3] and median is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,2], nums2 = [3,4]
        <br />
        <strong>Output:</strong> 2.50000
        <br />
        <strong>Explanation:</strong> merged array = [1,2,3,4] and median is (2
        + 3) / 2 = 2.5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>nums1.length == m</code>
        </li>
        <li>
          <code>nums2.length == n</code>
        </li>
        <li>
          <code>0 &lt;= m &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= m + n &lt;= 2000</code>
        </li>
        <li>
          <code>
            -10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  34: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code> sorted in non-decreasing
        order, find the starting and ending position of a given{" "}
        <code>target</code> value.
      </p>

      <p>
        If <code>target</code> is not found in the array, return{" "}
        <code>[-1, -1]</code>.
      </p>

      <p>
        You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime
        complexity.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [5,7,7,8,8,10], target = 8 <br />
        <strong>Output:</strong> [3,4]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [5,7,7,8,8,10], target = 6<br />
        <strong>Output:</strong> [-1,-1]
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [], target = 0<br />
        <strong>Output:</strong> [-1,-1]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup>&nbsp;&lt;= nums[i]&nbsp;&lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>nums</code> is a non-decreasing array.
        </li>
        <li>
          <code>
            -10<sup>9</sup>&nbsp;&lt;= target&nbsp;&lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  35: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a sorted array of distinct integers and a target value, return the
        index if the target is found. If not, return the index where it would be
        if it were inserted in order.
      </p>

      <p>
        You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime
        complexity.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,5,6], target = 5 <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,5,6], target = 2 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,5,6], target = 7 <br />
        <strong>Output:</strong> 4
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>nums</code> contains <strong>distinct</strong> values sorted in{" "}
          <strong>ascending</strong> order.
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  69: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a non-negative integer <code>x</code>, return{" "}
        <em>the square root of </em>
        <code>x</code>
        <em> rounded down to the nearest integer</em>. The returned integer
        should be <strong>non-negative</strong> as well.
      </p>

      <p>
        You <strong>must not use</strong> any built-in exponent function or
        operator.
      </p>

      <ul>
        <li>
          For example, do not use <code>pow(x, 0.5)</code> in c++ or{" "}
          <code>x ** 0.5</code> in python.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 4 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The square root of 4 is 2, so we return 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 8 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The square root of 8 is 2.82842..., and
        since we round it down to the nearest integer, 2 is returned.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= x &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  81: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an integer array <code>nums</code> sorted in non-decreasing
        order (not necessarily with <strong>distinct</strong> values).
      </p>
      <p>
        Before being passed to your function, <code>nums</code> is{" "}
        <strong>rotated</strong> at an unknown pivot index <code>k</code> (
        <code>0 &lt;= k &lt; nums.length</code>) such that the resulting array
        is{" "}
        <code>
          [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]
        </code>{" "}
        (<strong>0-indexed</strong>). For example,{" "}
        <code>[0,1,2,4,4,4,5,6,6,7]</code> might be rotated at pivot index{" "}
        <code>5</code> and become <code>[4,5,6,6,7,0,1,2,4,4]</code>.
      </p>
      <p>
        Given the array <code>nums</code> <strong>after</strong> the rotation
        and an integer <code>target</code>, return <code>true</code>
        <em> if </em>
        <code>target</code>
        <em> is in </em>
        <code>nums</code>
        <em>, or </em>
        <code>false</code>
        <em> if it is not in </em>
        <code>nums</code>
        <em>.</em>
      </p>
      <p>You must decrease the overall operation steps as much as possible.</p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [2,5,6,0,0,1,2], target = 0 <br />
        <strong>Output:</strong> true
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> nums = [2,5,6,0,0,1,2], target = 3 <br />
        <strong>Output:</strong> false
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 5000</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>nums</code> is guaranteed to be rotated at some pivot.
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> This problem is similar to&nbsp;
        <a
          href="/problems/search-in-rotated-sorted-array/description/"
          target="_blank"
        >
          Search in Rotated Sorted Array
        </a>
        , but&nbsp;<code>nums</code> may contain <strong>duplicates</strong>.
        Would this affect the runtime complexity? How and why?
      </p>
    </div>
  ),
  153: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Suppose an array of length <code>n</code> sorted in ascending order is{" "}
        <strong>rotated</strong> between <code>1</code> and <code>n</code>{" "}
        times. For example, the array <code>nums = [0,1,2,4,5,6,7]</code> might
        become:
      </p>

      <ul>
        <li>
          <code>[4,5,6,7,0,1,2]</code> if it was rotated <code>4</code> times.
        </li>
        <li>
          <code>[0,1,2,4,5,6,7]</code> if it was rotated <code>7</code> times.
        </li>
      </ul>

      <p>
        Notice that <strong>rotating</strong> an array{" "}
        <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array{" "}
        <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.
      </p>

      <p>
        Given the sorted rotated array <code>nums</code> of{" "}
        <strong>unique</strong> elements, return{" "}
        <em>the minimum element of this array</em>.
      </p>

      <p>
        You must write an algorithm that runs in&nbsp;<code>O(log n) time</code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,4,5,1,2] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The original array was [1,2,3,4,5] rotated
        3 times.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,5,6,7,0,1,2] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The original array was [0,1,2,4,5,6,7] and
        it was rotated 4 times.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [11,13,15,17] <br />
        <strong>Output:</strong> 11 <br />
        <strong>Explanation:</strong> The original array was [11,13,15,17] and
        it was rotated 4 times.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 5000</code>
        </li>
        <li>
          <code>-5000 &lt;= nums[i] &lt;= 5000</code>
        </li>
        <li>
          All the integers of <code>nums</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>nums</code> is sorted and rotated between <code>1</code> and{" "}
          <code>n</code> times.
        </li>
      </ul>
    </div>
  ),
  162: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A peak element is an element that is strictly greater than its
        neighbors.
      </p>

      <p>
        Given a <strong>0-indexed</strong> integer array <code>nums</code>, find
        a peak element, and return its index. If the array contains multiple
        peaks, return the index to <strong>any of the peaks</strong>.
      </p>

      <p>
        You may imagine that <code>nums[-1] = nums[n] = -∞</code>. In other
        words, an element is always considered to be strictly greater than a
        neighbor that is outside the array.
      </p>

      <p>
        You must write an algorithm that runs in <code>O(log n)</code> time.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,1] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> 3 is a peak element and your function
        should return the index number 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,1,3,5,6,4] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> Your function can return either index
        number 1 where the peak element is 2, or index number 5 where the peak
        element is 6.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          <code>nums[i] != nums[i + 1]</code> for all valid <code>i</code>.
        </li>
      </ul>
    </div>
  ),
  259: (
    <div class="markdown-body div-width">
      <p>
        Given an array of <i>n</i> integers <i>nums</i> and a <i>target</i>,
        find the number of index triplets <code>i, j, k</code> with{" "}
        <code>0 &lt;= i &lt; j &lt; k &lt; n</code> that satisfy the condition{" "}
        <code>nums[i] + nums[j] + nums[k] &lt; target</code>.
      </p>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <i>nums</i> = <code>[-2,0,1,3]</code>, and{" "}
        <i>target</i> = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong>&nbsp;Because there are two triplets which
        sums are less than 2: &nbsp; [-2,0,1] [-2,0,3]
      </pre>
    </div>
  ),
  400: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return the{" "}
        <code>
          n<sup>th</sup>
        </code>{" "}
        digit of the infinite integer sequence{" "}
        <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> 3
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 11
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> The 11<sup>th</sup> digit of the sequence
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the
        number 10.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
    </div>
  ),
  704: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code> which is sorted in
        ascending order, and an integer <code>target</code>, write a function to
        search <code>target</code> in <code>nums</code>. If <code>target</code>{" "}
        exists, then return its index. Otherwise, return <code>-1</code>.
      </p>

      <p>
        You must write an algorithm with <code>O(log n)</code> runtime
        complexity.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-1,0,3,5,9,12], target = 9 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> 9 exists in nums and its index is 4
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-1,0,3,5,9,12], target = 2 <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> 2 does not exist in nums so return -1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt; nums[i], target &lt; 10<sup>4</sup>
          </code>
        </li>
        <li>
          All the integers in <code>nums</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>nums</code> is sorted in ascending order.
        </li>
      </ul>
    </div>
  ),
  852: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <strong>mountain</strong> array{" "}
        <code>arr</code> of length <code>n</code> where the values increase to a{" "}
        <strong>peak element</strong> and then decrease.
      </p>

      <p>Return the index of the peak element.</p>

      <p>
        Your task is to solve it in <code>O(log(n))</code> time complexity.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">arr = [0,1,0]</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">arr = [0,2,1,0]</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">arr = [0,10,5,2]</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= arr.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= arr[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>arr</code> is <strong>guaranteed</strong> to be a mountain
          array.
        </li>
      </ul>
    </div>
  ),
  1201: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        An <strong>ugly number</strong> is a positive integer that is divisible
        by <code>a</code>, <code>b</code>, or <code>c</code>.
      </p>

      <p>
        Given four integers <code>n</code>, <code>a</code>, <code>b</code>, and{" "}
        <code>c</code>, return the{" "}
        <code>
          n<sup>th</sup>
        </code>{" "}
        <strong>ugly number</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, a = 2, b = 3, c = 5 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The ugly numbers are 2, 3, 4, 5, 6, 8, 9,
        10... The 3<sup>rd</sup> is 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4, a = 2, b = 3, c = 4 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The ugly numbers are 2, 3, 4, 6, 8, 9, 10,
        12... The 4<sup>th</sup> is 6.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 5, a = 2, b = 11, c = 13 <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation:</strong> The ugly numbers are 2, 4, 6, 8, 10, 11,
        12, 13... The 5<sup>th</sup> is 10.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n, a, b, c &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= a * b * c &lt;= 10<sup>18</sup>
          </code>
        </li>
        <li>
          It is guaranteed that the result will be in range{" "}
          <code>
            [1, 2 * 10<sup>9</sup>]
          </code>
          .
        </li>
      </ul>
    </div>
  ),
  1539: (
    <div>
      <div class="elfjS" data-track-load="description_content">
        <p>
          Given an array <code>arr</code> of positive integers sorted in a{" "}
          <strong>strictly increasing order</strong>, and an integer{" "}
          <code>k</code>.
        </p>

        <p>
          Return <em>the</em>{" "}
          <code>
            k<sup>th</sup>
          </code>{" "}
          <em>
            <strong>positive</strong> integer that is <strong>missing</strong>{" "}
            from this array.
          </em>
        </p>

        <p>&nbsp;</p>
        <p>
          <strong class="example">Example 1:</strong>
        </p>

        <pre>
          <strong>Input:</strong> arr = [2,3,4,7,11], k = 5 <br />
          <strong>Output:</strong> 9 <br />
          <strong>Explanation: </strong>The missing positive integers are
          [1,5,6,8,9,10,12,13,...]. The 5<sup>th</sup>&nbsp;missing positive
          integer is 9.
        </pre>

        <p>
          <strong class="example">Example 2:</strong>
        </p>

        <pre>
          <strong>Input:</strong> arr = [1,2,3,4], k = 2 <br />
          <strong>Output:</strong> 6 <br />
          <strong>Explanation: </strong>The missing positive integers are
          [5,6,7,...]. The 2<sup>nd</sup> missing positive integer is 6.
        </pre>

        <p>&nbsp;</p>
        <p>
          <strong>Constraints:</strong>
        </p>

        <ul>
          <li>
            <code>1 &lt;= arr.length &lt;= 1000</code>
          </li>
          <li>
            <code>1 &lt;= arr[i] &lt;= 1000</code>
          </li>
          <li>
            <code>1 &lt;= k &lt;= 1000</code>
          </li>
          <li>
            <code>arr[i] &lt; arr[j]</code> for{" "}
            <code>1 &lt;= i &lt; j &lt;= arr.length</code>
          </li>
        </ul>

        <p>&nbsp;</p>
        <p>
          <strong>Follow up:</strong>
        </p>

        <p>Could you solve this problem in less than O(n) complexity?</p>
      </div>
    </div>
  ),
  1901: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>peak</strong> element in a 2D grid is an element that is{" "}
        <strong>strictly greater</strong> than all of its{" "}
        <strong>adjacent </strong>neighbors to the left, right, top, and bottom.
      </p>

      <p>
        Given a <strong>0-indexed</strong> <code>m x n</code> matrix{" "}
        <code>mat</code> where <strong>no two adjacent cells are equal</strong>,
        find <strong>any</strong> peak element <code>mat[i][j]</code> and return{" "}
        <em>the length 2 array </em>
        <code>[i,j]</code>.
      </p>

      <p>
        You may assume that the entire matrix is surrounded by an{" "}
        <strong>outer perimeter</strong> with the value <code>-1</code> in each
        cell.
      </p>

      <p>
        You must write an algorithm that runs in <code>O(m log(n))</code> or{" "}
        <code>O(n log(m))</code> time.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/06/08/1.png"
          style={{ width: 206, height: 209 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> mat = [[1,4],[3,2]] <br />
        <strong>Output:</strong> [0,1] <br />
        <strong>Explanation:</strong>&nbsp;Both 3 and 4 are peak elements so
        [1,0] and [0,1] are both acceptable answers.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2021/06/07/3.png"
            style={{ width: 254, height: 257 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = [[10,20,15],[21,30,14],[7,16,32]] <br />
        <strong>Output:</strong> [1,1]
        <br />
        <strong>Explanation:</strong>&nbsp;Both 30 and 32 are peak elements so
        [1,1] and [2,2] are both acceptable answers.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == mat.length</code>
        </li>
        <li>
          <code>n == mat[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 500</code>
        </li>
        <li>
          <code>
            1 &lt;= mat[i][j] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>No two adjacent cells are equal.</li>
      </ul>
    </div>
  ),
  2089: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> and a target element <code>target</code>.
      </p>

      <p>
        A <strong>target index</strong> is an index <code>i</code> such that{" "}
        <code>nums[i] == target</code>.
      </p>

      <p>
        Return <em>a list of the target indices of</em> <code>nums</code> after
        <em> sorting </em>
        <code>nums</code>
        <em>
          {" "}
          in <strong>non-decreasing</strong> order
        </em>
        . If there are no target indices, return{" "}
        <em>
          an <strong>empty</strong> list
        </em>
        . The returned list must be sorted in <strong>increasing</strong> order.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,5,2,3], target = 2 <br />
        <strong>Output:</strong> [1,2]
        <br />
        <strong>Explanation:</strong> After sorting, nums is [1,
        <u>
          <strong>2</strong>
        </u>
        ,
        <u>
          <strong>2</strong>
        </u>
        ,3,5]. The indices where nums[i] == 2 are 1 and 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,5,2,3], target = 3<br />
        <strong>Output:</strong> [3]
        <br />
        <strong>Explanation:</strong> After sorting, nums is [1,2,2,
        <u>
          <strong>3</strong>
        </u>
        ,5]. The index where nums[i] == 3 is 3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,5,2,3], target = 5<br />
        <strong>Output:</strong> [4]
        <br />
        <strong>Explanation:</strong> After sorting, nums is [1,2,2,3,
        <u>
          <strong>5</strong>
        </u>
        ]. The index where nums[i] == 5 is 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= nums[i], target &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  2187: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>time</code> where <code>time[i]</code>{" "}
        denotes the time taken by the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        bus to complete <strong>one trip</strong>.
      </p>

      <p>
        Each bus can make multiple trips <strong>successively</strong>; that is,
        the next trip can start <strong>immediately after</strong> completing
        the current trip. Also, each bus operates <strong>independently</strong>
        ; that is, the trips of one bus do not influence the trips of any other
        bus.
      </p>

      <p>
        You are also given an integer <code>totalTrips</code>, which denotes the
        number of trips all buses should make <strong>in total</strong>. Return{" "}
        <em>
          the <strong>minimum time</strong> required for all buses to complete{" "}
          <strong>at least</strong>{" "}
        </em>
        <code>totalTrips</code>
        <em> trips</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> time = [1,2,3], totalTrips = 5 <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> <br />- At time t = 1, the number of trips
        completed by each bus are [1,0,0]. <br />
        The total number of trips completed is 1 + 0 + 0 = 1. <br />- At time t
        = 2, the number of trips completed by each bus are [2,1,0]. <br />
        The total number of trips completed is 2 + 1 + 0 = 3. <br />- At time t
        = 3, the number of trips completed by each bus are [3,1,1]. <br />
        The total number of trips completed is 3 + 1 + 1 = 5. <br />
        So the minimum time needed for all buses to complete at least 5 trips is
        3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> time = [2], totalTrips = 1 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        There is only one bus, and it will complete its first trip at t = 2.{" "}
        <br />
        So the minimum time needed to complete 1 trip is 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= time.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= time[i], totalTrips &lt;= 10<sup>7</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2389: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> of length{" "}
        <code>n</code>, and an integer array <code>queries</code> of length{" "}
        <code>m</code>.
      </p>

      <p>
        Return <em>an array </em>
        <code>answer</code>
        <em> of length </em>
        <code>m</code>
        <em> where </em>
        <code>answer[i]</code>
        <em>
          {" "}
          is the <strong>maximum</strong> size of a <strong>subsequence</strong>{" "}
          that you can take from{" "}
        </em>
        <code>nums</code>
        <em>
          {" "}
          such that the <strong>sum</strong> of its elements is less than or
          equal to{" "}
        </em>
        <code>queries[i]</code>.
      </p>

      <p>
        A <strong>subsequence</strong> is an array that can be derived from
        another array by deleting some or no elements without changing the order
        of the remaining elements.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,5,2,1], queries = [3,10,21] <br />
        <strong>Output:</strong> [2,3,4]
        <br />
        <strong>Explanation:</strong> We answer the queries as follows:
        <br />
        - The subsequence [2,1] has a sum less than or equal to 3. It can be
        proven that 2 is the maximum size of such a subsequence, so answer[0] =
        2. <br />
        - The subsequence [4,5,1] has a sum less than or equal to 10. It can be
        proven that 3 is the maximum size of such a subsequence, so answer[1] =
        3. <br />
        - The subsequence [4,5,2,1] has a sum less than or equal to 21. It can
        be proven that 4 is the maximum size of such a subsequence, so answer[2]
        = 4. <br />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,4,5], queries = [1] <br />
        <strong>Output:</strong> [0] <br />
        <strong>Explanation:</strong> The empty subsequence is the only
        subsequence that has a sum less than or equal to 1, so answer[0] = 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>m == queries.length</code>
        </li>
        <li>
          <code>1 &lt;= n, m &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i], queries[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2498: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>stones</code> sorted in <strong>strictly increasing order</strong>{" "}
        representing the positions of stones in a river.
      </p>

      <p>
        A frog, initially on the first stone, wants to travel to the last stone
        and then return to the first stone. However, it can jump to any stone{" "}
        <strong>at most once</strong>.
      </p>

      <p>
        The <strong>length</strong> of a jump is the absolute difference between
        the position of the stone the frog is currently on and the position of
        the stone to which the frog jumps.
      </p>

      <ul>
        <li>
          More formally, if the frog is at <code>stones[i]</code> and is jumping
          to <code>stones[j]</code>, the length of the jump is{" "}
          <code>|stones[i] - stones[j]|</code>.
        </li>
      </ul>

      <p>
        The <strong>cost</strong> of a path is the{" "}
        <strong>maximum length of a jump</strong> among all jumps in the path.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> cost of a path for the frog
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/11/14/example-1.png"
        style={{ width: 600, height: 219 }}
      />
      <pre>
        <strong>Input:</strong> stones = [0,2,5,6,7] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The above figure represents one of the
        optimal paths the frog can take. <br />
        The cost of this path is 5, which is the maximum length of a jump.{" "}
        <br />
        Since it is not possible to achieve a cost of less than 5, we return it.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/11/14/example-2.png"
        style={{ width: 500, height: 171 }}
      />
      <pre>
        <strong>Input:</strong> stones = [0,3,9] <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> <br />
        The frog can jump directly to the last stone and come back to the first
        stone. <br />
        In this case, the length of each jump will be 9. The cost for the path
        will be max(9, 9) = 9. <br />
        It can be shown that this is the minimum achievable cost.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= stones.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= stones[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>stones[0] == 0</code>
        </li>
        <li>
          <code>stones</code> is sorted in a strictly increasing order.
        </li>
      </ul>
    </div>
  ),
  2529: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> sorted in{" "}
        <strong>non-decreasing</strong> order, return{" "}
        <em>
          the maximum between the number of positive integers and the number of
          negative integers.
        </em>
      </p>

      <ul>
        <li>
          In other words, if the number of positive integers in{" "}
          <code>nums</code> is <code>pos</code> and the number of negative
          integers is <code>neg</code>, then return the maximum of{" "}
          <code>pos</code> and <code>neg</code>.
        </li>
      </ul>

      <p>
        <strong>Note</strong> that <code>0</code> is neither positive nor
        negative.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-2,-1,-1,1,2,3] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> There are 3 positive integers and 3
        negative integers. The maximum count among them is 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-3,-2,-1,0,0,1,2] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> There are 2 positive integers and 3
        negative integers. The maximum count among them is 3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,20,66,1314] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> There are 4 positive integers and 0
        negative integers. The maximum count among them is 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 2000</code>
        </li>
        <li>
          <code>-2000 &lt;= nums[i] &lt;= 2000</code>
        </li>
        <li>
          <code>nums</code> is sorted in a <strong>non-decreasing order</strong>
          .
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Can you solve the problem in{" "}
        <code>O(log(n))</code> time complexity?
      </p>
    </div>
  ),
  2540: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integer arrays <code>nums1</code> and <code>nums2</code>,
        sorted in non-decreasing order, return{" "}
        <em>
          the <strong>minimum integer common</strong> to both arrays
        </em>
        . If there is no common integer amongst <code>nums1</code> and{" "}
        <code>nums2</code>, return <code>-1</code>.
      </p>

      <p>
        Note that an integer is said to be <strong>common</strong> to{" "}
        <code>nums1</code> and <code>nums2</code> if both arrays have{" "}
        <strong>at least one</strong> occurrence of that integer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,2,3], nums2 = [2,4] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The smallest element common to both arrays
        is 2, so we return 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums1 = [1,2,3,6], nums2 = [2,3,4,5] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> There are two common elements in the array
        2 and 3 out of which 2 is the smallest, so 2 is returned.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          Both <code>nums1</code> and <code>nums2</code> are sorted in{" "}
          <strong>non-decreasing</strong> order.
        </li>
      </ul>
    </div>
  ),
  2560: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are several consecutive houses along a street, each of which has
        some money inside. There is also a robber, who wants to steal money from
        the homes, but he <strong>refuses to steal from adjacent homes</strong>.
      </p>

      <p>
        The <strong>capability</strong> of the robber is the maximum amount of
        money he steals from one house of all the houses he robbed.
      </p>

      <p>
        You are given an integer array <code>nums</code> representing how much
        money is stashed in each house. More formally, the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        house from the left has <code>nums[i]</code> dollars.
      </p>

      <p>
        You are also given an integer <code>k</code>, representing the{" "}
        <strong>minimum</strong> number of houses the robber will steal from. It
        is always possible to steal at least <code>k</code> houses.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> capability of the robber out of all the
          possible ways to steal at least{" "}
        </em>
        <code>k</code>
        <em> houses</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,5,9], k = 2<br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation:</strong> <br />
        There are three ways to rob at least 2 houses:
        <br />
        - Rob the houses at indices 0 and 2. Capability is max(nums[0], nums[2])
        = 5.
        <br />
        - Rob the houses at indices 0 and 3. Capability is max(nums[0], nums[3])
        = 9.
        <br />
        - Rob the houses at indices 1 and 3. Capability is max(nums[1], nums[3])
        = 9.
        <br />
        Therefore, we return min(5, 9, 9) = 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,7,9,3,1], k = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> There are 7 ways to rob the houses. The
        way which leads to minimum capability is to rob the house at index 0 and
        4. Return max(nums[0], nums[4]) = 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= (nums.length + 1)/2</code>
        </li>
      </ul>
    </div>
  ),
  2861: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are the owner of a company that creates alloys using various types
        of metals. There are <code>n</code> different types of metals available,
        and you have access to <code>k</code> machines that can be used to
        create alloys. Each machine requires a specific amount of each metal
        type to create an alloy.
      </p>

      <p>
        For the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        machine to create an alloy, it needs <code>composition[i][j]</code>{" "}
        units of metal of type <code>j</code>. Initially, you have{" "}
        <code>stock[i]</code> units of metal type <code>i</code>, and purchasing
        one unit of metal type <code>i</code> costs <code>cost[i]</code> coins.
      </p>

      <p>
        Given integers <code>n</code>, <code>k</code>, <code>budget</code>, a{" "}
        <strong>1-indexed</strong> 2D array <code>composition</code>, and{" "}
        <strong>1-indexed</strong> arrays <code>stock</code> and{" "}
        <code>cost</code>, your goal is to <strong>maximize</strong> the number
        of alloys the company can create while staying within the budget of{" "}
        <code>budget</code> coins.
      </p>

      <p>
        <strong>All alloys must be created with the same machine.</strong>
      </p>

      <p>
        Return <em>the maximum number of alloys that the company can create</em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, k = 2, budget = 15, composition =
        [[1,1,1],[1,1,10]], stock = [0,0,0], cost = [1,2,3] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> It is optimal to use the 1<sup>st</sup>{" "}
        machine to create alloys. <br />
        To create 2 alloys we need to buy the: <br />- 2 units of metal of the 1
        <sup>st</sup> type. <br />- 2 units of metal of the 2<sup>nd</sup> type.{" "}
        <br />- 2 units of metal of the 3<sup>rd</sup> type. <br />
        In total, we need 2 * 1 + 2 * 2 + 2 * 3 = 12 coins, which is smaller
        than or equal to budget = 15. <br />
        Notice that we have 0 units of metal of each type and we have to buy all
        the required units of metal. <br />
        It can be proven that we can create at most 2 alloys.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, k = 2, budget = 15, composition =
        [[1,1,1],[1,1,10]], stock = [0,0,100], cost = [1,2,3] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> It is optimal to use the 2<sup>nd</sup>{" "}
        machine to create alloys. <br />
        To create 5 alloys we need to buy: <br />- 5 units of metal of the 1
        <sup>st</sup> type. <br />- 5 units of metal of the 2<sup>nd</sup> type.{" "}
        <br />- 0 units of metal of the 3<sup>rd</sup> type. <br />
        In total, we need 5 * 1 + 5 * 2 + 0 * 3 = 15 coins, which is smaller
        than or equal to budget = 15. <br />
        It can be proven that we can create at most 5 alloys.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, k = 3, budget = 10, composition =
        [[2,1],[1,2],[1,1]], stock = [1,1], cost = [5,5] <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> It is optimal to use the 3<sup>rd</sup>{" "}
        machine to create alloys. <br />
        To create 2 alloys we need to buy the: <br />- 1 unit of metal of the 1
        <sup>st</sup> type. <br />- 1 unit of metal of the 2<sup>nd</sup> type.{" "}
        <br />
        In total, we need 1 * 5 + 1 * 5 = 10 coins, which is smaller than or
        equal to budget = 10. <br />
        It can be proven that we can create at most 2 alloys.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n, k &lt;= 100</code>
        </li>
        <li>
          <code>
            0 &lt;= budget &lt;= 10<sup>8</sup>
          </code>
        </li>
        <li>
          <code>composition.length == k</code>
        </li>
        <li>
          <code>composition[i].length == n</code>
        </li>
        <li>
          <code>1 &lt;= composition[i][j] &lt;= 100</code>
        </li>
        <li>
          <code>stock.length == cost.length == n</code>
        </li>
        <li>
          <code>
            0 &lt;= stock[i] &lt;= 10<sup>8</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= cost[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  307: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, handle multiple queries of the
        following types:
      </p>

      <ol>
        <li>
          <strong>Update</strong> the value of an element in <code>nums</code>.
        </li>
        <li>
          Calculate the <strong>sum</strong> of the elements of{" "}
          <code>nums</code> between indices <code>left</code> and{" "}
          <code>right</code> <strong>inclusive</strong> where{" "}
          <code>left &lt;= right</code>.
        </li>
      </ol>

      <p>
        Implement the <code>NumArray</code> class:
      </p>

      <ul>
        <li>
          <code>NumArray(int[] nums)</code> Initializes the object with the
          integer array <code>nums</code>.
        </li>
        <li>
          <code>void update(int index, int val)</code> <strong>Updates</strong>{" "}
          the value of <code>nums[index]</code> to be <code>val</code>.
        </li>
        <li>
          <code>int sumRange(int left, int right)</code> Returns the{" "}
          <strong>sum</strong> of the elements of <code>nums</code> between
          indices <code>left</code> and <code>right</code>{" "}
          <strong>inclusive</strong> (i.e.{" "}
          <code>nums[left] + nums[left + 1] + ... + nums[right]</code>).
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        ["NumArray", "sumRange", "update", "sumRange"] <br />
        [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]] <br />
        <strong>Output</strong>
        <br />
        [null, 9, null, 8] <br />
        <strong>Explanation</strong>
        <br />
        NumArray numArray = new NumArray([1, 3, 5]);
        <br />
        numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9<br />
        numArray.update(1, 2); // nums = [1, 2, 5]
        <br />
        numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>-100 &lt;= nums[i] &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= index &lt; nums.length</code>
        </li>
        <li>
          <code>-100 &lt;= val &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= left &lt;= right &lt; nums.length</code>
        </li>
        <li>
          At most{" "}
          <code>
            3 * 10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>update</code> and <code>sumRange</code>.
        </li>
      </ul>
    </div>
  ),
  715: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A Range Module is a module that tracks ranges of numbers. Design a data
        structure to track the ranges represented as{" "}
        <strong>half-open intervals</strong> and query about them.
      </p>

      <p>
        A <strong>half-open interval</strong>{" "}
        <code>
          {"["}left, right{")"}
        </code>{" "}
        denotes all the real numbers <code>x</code> where{" "}
        <code>left &lt;= x &lt; right</code>.
      </p>

      <p>
        Implement the <code>RangeModule</code> class:
      </p>

      <ul>
        <li>
          <code>RangeModule()</code> Initializes the object of the data
          structure.
        </li>
        <li>
          <code>void addRange(int left, int right)</code> Adds the{" "}
          <strong>half-open interval</strong>{" "}
          <code>
            {"["}left, right{")"}
          </code>
          , tracking every real number in that interval. Adding an interval that
          partially overlaps with currently tracked numbers should add any
          numbers in the interval{" "}
          <code>
            {"["}left, right{")"}
          </code>{" "}
          that are not already tracked.
        </li>
        <li>
          <code>boolean queryRange(int left, int right)</code> Returns{" "}
          <code>true</code> if every real number in the interval{" "}
          <code>
            {"["}left, right{")"}
          </code>{" "}
          is currently being tracked, and <code>false</code> otherwise.
        </li>
        <li>
          <code>void removeRange(int left, int right)</code> Stops tracking
          every real number currently being tracked in the{" "}
          <strong>half-open interval</strong>{" "}
          <code>
            {"["}left, right{")"}
          </code>
          .
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        ["RangeModule", "addRange", "removeRange", "queryRange", "queryRange",
        "queryRange"] <br />
        [[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]] <br />
        <strong>Output</strong> <br />
        [null, null, null, true, false, true] <br />
        <strong>Explanation</strong> <br />
        RangeModule rangeModule = new RangeModule(); <br />
        rangeModule.addRange(10, 20); <br />
        rangeModule.removeRange(14, 16); <br />
        rangeModule.queryRange(10, 14); // return True,(Every number in {"["}10,
        14{")"} is being tracked) <br />
        rangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03,
        14.17 in {"["}13, 15{")"} are not being tracked) <br />
        rangeModule.queryRange(16, 17); // return True, (The number 16 in {"["}
        16, 17{")"} is still being tracked, despite the remove operation)
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= left &lt; right &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>addRange</code>, <code>queryRange</code>,
          and <code>removeRange</code>.
        </li>
      </ul>
    </div>
  ),
  975: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>arr</code>. From some starting
        index, you can make a series of jumps. The (1<sup>st</sup>, 3
        <sup>rd</sup>, 5<sup>th</sup>, ...) jumps in the series are called{" "}
        <strong>odd-numbered jumps</strong>, and the (2<sup>nd</sup>, 4
        <sup>th</sup>, 6<sup>th</sup>, ...) jumps in the series are called{" "}
        <strong>even-numbered jumps</strong>. Note that the{" "}
        <strong>jumps</strong> are numbered, not the indices.
      </p>

      <p>
        You may jump forward from index <code>i</code> to index <code>j</code>{" "}
        (with <code>i &lt; j</code>) in the following way:
      </p>

      <ul>
        <li>
          During <strong>odd-numbered jumps</strong> (i.e., jumps 1, 3, 5, ...),
          you jump to the index <code>j</code> such that{" "}
          <code>arr[i] &lt;= arr[j]</code> and <code>arr[j]</code> is the
          smallest possible value. If there are multiple such indices{" "}
          <code>j</code>, you can only jump to the <strong>smallest</strong>{" "}
          such index <code>j</code>.
        </li>
        <li>
          During <strong>even-numbered jumps</strong> (i.e., jumps 2, 4, 6,
          ...), you jump to the index <code>j</code> such that{" "}
          <code>arr[i] &gt;= arr[j]</code> and <code>arr[j]</code> is the
          largest possible value. If there are multiple such indices{" "}
          <code>j</code>, you can only jump to the <strong>smallest</strong>{" "}
          such index <code>j</code>.
        </li>
        <li>
          It may be the case that for some index <code>i</code>, there are no
          legal jumps.
        </li>
      </ul>

      <p>
        A starting index is <strong>good</strong> if, starting from that index,
        you can reach the end of the array (index <code>arr.length - 1</code>)
        by jumping some number of times (possibly 0 or more than once).
      </p>

      <p>
        Return{" "}
        <em>
          the number of <strong>good</strong> starting indices
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [10,13,12,14,15]
        <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong>
        <br />
        From starting index i = 0, we can make our 1st jump to i = 2 (since
        arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is
        greater or equal to arr[0]), then we cannot jump any more. From starting
        index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot
        jump any more. From starting index i = 3, we can make our 1st jump to i
        = 4, so we have reached the end. From starting index i = 4, we have
        reached the end already. In total, there are 2 different starting
        indices i = 3 and i = 4, where we can reach the end with some number of
        jumps.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [2,3,1,1,4]
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> <br />
        From starting index i = 0, we make jumps to i = 1, i = 2, i = 3:
        <br />
        During our 1st jump (odd-numbered), we first jump to i = 1 because
        arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is
        greater than or equal to arr[0].
        <br />
        During our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because
        arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less
        than or equal to arr[1]. arr[3] is also the largest value, but 2 is a
        smaller index, so we can only jump to i = 2 and not i = 3<br />
        During our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because
        arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or
        equal to arr[2].
        <br />
        We can't jump from i = 3 to i = 4, so the starting index i = 0 is not
        good.
        <br />
        In a similar manner, we can deduce that:
        <br />
        From starting index i = 1, we jump to i = 4, so we reach the end.
        <br />
        From starting index i = 2, we jump to i = 3, and then we can't jump
        anymore.
        <br />
        From starting index i = 3, we jump to i = 4, so we reach the end.
        <br />
        From starting index i = 4, we are already at the end.
        <br />
        In total, there are 3 different starting indices i = 1, i = 3, and i =
        4, where we can reach the end with some number of jumps.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [5,1,3,4,2] <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> We can reach the end from starting indices
        1, 2, and 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= arr.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= arr[i] &lt; 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2402: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code>. There are <code>n</code> rooms
        numbered from <code>0</code> to <code>n - 1</code>.
      </p>

      <p>
        You are given a 2D integer array <code>meetings</code> where{" "}
        <code>
          meetings[i] = [start<sub>i</sub>, end<sub>i</sub>]
        </code>{" "}
        means that a meeting will be held during the{" "}
        <strong>half-closed</strong> time interval{" "}
        <code>{"[start<sub>i</sub>, end<sub>i</sub>)"}</code>. All the values of{" "}
        <code>
          start<sub>i</sub>
        </code>{" "}
        are <strong>unique</strong>.
      </p>

      <p>Meetings are allocated to rooms in the following manner:</p>

      <ul>
        <li>
          Each meeting will take place in the unused room with the{" "}
          <strong>lowest</strong> number.
        </li>
        <li>
          If there are no available rooms, the meeting will be delayed until a
          room becomes free. The delayed meeting should have the{" "}
          <strong>same</strong> duration as the original meeting.
        </li>
        <li>
          When a room becomes unused, meetings that have an earlier original{" "}
          <strong>start</strong> time should be given the room.
        </li>
      </ul>

      <p>
        Return
        <em>
          {" "}
          the <strong>number</strong> of the room that held the most meetings.{" "}
        </em>
        If there are multiple rooms, return
        <em>
          {" "}
          the room with the <strong>lowest</strong> number.
        </em>
      </p>

      <p>
        A <strong>half-closed interval</strong> <code>{"[a, b)"}</code> is the
        interval between <code>a</code> and <code>b</code>{" "}
        <strong>including</strong> <code>a</code> and{" "}
        <strong>not including</strong> <code>b</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]{" "}
        <br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong>
        <br />
        - At time 0, both rooms are not being used. The first meeting starts in
        room 0. <br />
        - At time 1, only room 1 is not being used. The second meeting starts in
        room 1.
        <br />
        - At time 2, both rooms are being used. The third meeting is delayed.
        <br />- At time 3, both rooms are being used. The fourth meeting is
        delayed. <br />- At time 5, the meeting in room 1 finishes. The third
        meeting starts in room 1 for the time period {"["}5,10{")"}. <br />- At
        time 10, the meetings in both rooms finish. The fourth meeting starts in
        room 0 for the time period {"[10,11)"}. <br />
        Both rooms 0 and 1 held 2 meetings, so we return 0.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, meetings =
        [[1,20],[2,10],[3,5],[4,9],[6,8]]
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong> <br />
        - At time 1, all three rooms are not being used. The first meeting
        starts in room 0.
        <br />
        - At time 2, rooms 1 and 2 are not being used. The second meeting starts
        in room 1.
        <br />
        - At time 3, only room 2 is not being used. The third meeting starts in
        room 2.
        <br />
        - At time 4, all three rooms are being used. The fourth meeting is
        delayed.
        <br />- At time 5, the meeting in room 2 finishes. The fourth meeting
        starts in room 2 for the time period {"[5,10)"}.<br />
        - At time 6, all three rooms are being used. The fifth meeting is
        delayed.
        <br />- At time 10, the meetings in rooms 1 and 2 finish. The fifth
        meeting starts in room 1 for the time period {"[10,12)"}.<br />
        Room 0 held 1 meeting while rooms 1 and 2 each held 2 meetings, so we
        return 1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= meetings.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>meetings[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10
            <sup>5</sup>
          </code>
        </li>
        <li>
          All the values of{" "}
          <code>
            start<sub>i</sub>
          </code>{" "}
          are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  2659: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> containing{" "}
        <strong>distinct</strong> numbers, and you can perform the following
        operations <strong>until the array is empty</strong>:
      </p>

      <ul>
        <li>
          If the first element has the <strong>smallest</strong> value, remove
          it
        </li>
        <li>
          Otherwise, put the first element at the <strong>end</strong> of the
          array.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>an integer denoting the number of operations it takes to make </em>
        <code>nums</code>
        <em> empty.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,4,-1] <br />
        <strong>Output:</strong> 5
      </pre>

      <table style={{ border: "2px solid black", borderCollapse: "collapse" }}>
        <thead>
          <tr>
            <th style={{ border: "2px solid black", padding: "5px" }}>
              Operation
            </th>
            <th style={{ border: "2px solid black", padding: "5px" }}>Array</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td style={{ border: "2px solid black", padding: "5px" }}>1</td>
            <td style={{ border: "2px solid black", padding: "5px" }}>
              [4, -1, 3]
            </td>
          </tr>
          <tr>
            <td style={{ border: "2px solid black", padding: "5px" }}>2</td>
            <td style={{ border: "2px solid black", padding: "5px" }}>
              [-1, 3, 4]
            </td>
          </tr>
          <tr>
            <td style={{ border: "2px solid black", padding: "5px" }}>3</td>
            <td style={{ border: "2px solid black", padding: "5px" }}>
              [3, 4]
            </td>
          </tr>
          <tr>
            <td style={{ border: "2px solid black", padding: "5px" }}>4</td>
            <td style={{ border: "2px solid black", padding: "5px" }}>[4]</td>
          </tr>
          <tr>
            <td style={{ border: "2px solid black", padding: "5px" }}>5</td>
            <td style={{ border: "2px solid black", padding: "5px" }}>[]</td>
          </tr>
        </tbody>
      </table>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,4,3] <br />
        <strong>Output:</strong> 5
      </pre>

      <table style={{ border: "2px solid black", borderCollapse: "collapse" }}>
        <thead>
          <tr>
            <th style={{ border: "2px solid black", padding: "5px" }}>
              Operation
            </th>
            <th style={{ border: "2px solid black", padding: "5px" }}>Array</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td style={{ border: "2px solid black", padding: "5px" }}>1</td>
            <td style={{ border: "2px solid black", padding: "5px" }}>
              [2, 4, 3]
            </td>
          </tr>
          <tr>
            <td style={{ border: "2px solid black", padding: "5px" }}>2</td>
            <td style={{ border: "2px solid black", padding: "5px" }}>
              [4, 3]
            </td>
          </tr>
          <tr>
            <td style={{ border: "2px solid black", padding: "5px" }}>3</td>
            <td style={{ border: "2px solid black", padding: "5px" }}>
              [3, 4]
            </td>
          </tr>
          <tr>
            <td style={{ border: "2px solid black", padding: "5px" }}>4</td>
            <td style={{ border: "2px solid black", padding: "5px" }}>[4]</td>
          </tr>
          <tr>
            <td style={{ border: "2px solid black", padding: "5px" }}>5</td>
            <td style={{ border: "2px solid black", padding: "5px" }}>[]</td>
          </tr>
        </tbody>
      </table>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> 3
      </pre>

      <table style={{ border: "2px solid black", borderCollapse: "collapse" }}>
        <thead>
          <tr>
            <th style={{ border: "2px solid black", padding: "5px" }}>
              Operation
            </th>
            <th style={{ border: "2px solid black", padding: "5px" }}>Array</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td style={{ border: "2px solid black", padding: "5px" }}>1</td>
            <td style={{ border: "2px solid black", padding: "5px" }}>
              [2, 3]
            </td>
          </tr>
          <tr>
            <td style={{ border: "2px solid black", padding: "5px" }}>2</td>
            <td style={{ border: "2px solid black", padding: "5px" }}>[3]</td>
          </tr>
          <tr>
            <td style={{ border: "2px solid black", padding: "5px" }}>3</td>
            <td style={{ border: "2px solid black", padding: "5px" }}>[]</td>
          </tr>
        </tbody>
      </table>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9&nbsp;</sup>&lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          All values in <code>nums</code> are <strong>distinct</strong>.
        </li>
      </ul>
    </div>
  ),
  2713: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <strong>1-indexed</strong>&nbsp;<code>m x n</code> integer
        matrix <code>mat</code>, you can select any cell in the matrix as your{" "}
        <strong>starting cell</strong>.
      </p>

      <p>
        From the starting cell, you can move to any other cell{" "}
        <strong>in the</strong> <strong>same row or column</strong>, but only if
        the value of the destination cell is <strong>strictly greater</strong>{" "}
        than the value of the current cell. You can repeat this process as many
        times as possible, moving from cell to cell until you can no longer make
        any moves.
      </p>

      <p>
        Your task is to find the <strong>maximum number of cells</strong> that
        you can visit in the matrix by starting from some cell.
      </p>

      <p>
        Return{" "}
        <em>
          an integer denoting the maximum number of cells that can be visited.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <strong class="example">
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2023/04/23/diag1drawio.png"
            style={{ width: 200, height: 176 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = [[3,1],[3,4]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The image shows how we can visit 2 cells
        starting from row 1, column 2. It can be shown that we cannot visit more
        than 2 cells no matter where we start from, so the answer is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <strong class="example">
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2023/04/23/diag3drawio.png"
            style={{ width: 200, height: 176 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = [[1,1],[1,1]] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> Since the cells must be strictly
        increasing, we can only visit one cell in this example.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <p>
        <strong class="example">
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2023/04/23/diag4drawio.png"
            style={{ width: 350, height: 250 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> mat = [[3,1,6],[-9,5,7]] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The image above shows how we can visit 4
        cells starting from row 2, column 1. It can be shown that we cannot
        visit more than 4 cells no matter where we start from, so the answer is
        4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == mat.length&nbsp;</code>
        </li>
        <li>
          <code>n == mat[i].length&nbsp;</code>
        </li>
        <li>
          <code>
            1 &lt;= m, n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= m * n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>5</sup>&nbsp;&lt;= mat[i][j] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2817: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> and an integer <code>x</code>.
      </p>

      <p>
        Find the <strong>minimum absolute difference</strong> between two
        elements in the array that are at least <code>x</code> indices apart.
      </p>

      <p>
        In other words, find two indices <code>i</code> and <code>j</code> such
        that <code>abs(i - j) &gt;= x</code> and{" "}
        <code>abs(nums[i] - nums[j])</code> is minimized.
      </p>

      <p>
        Return
        <em>
          {" "}
          an integer denoting the <strong>minimum</strong> absolute difference
          between two elements that are at least
        </em>{" "}
        <code>x</code> <em>indices apart</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,3,2,4], x = 2 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> We can select nums[0] = 4 and nums[3] = 4.{" "}
        <br />
        They are at least 2 indices apart, and their absolute difference is the
        minimum, 0. <br />
        It can be shown that 0 is the optimal answer.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,3,2,10,15], x = 1 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> We can select nums[1] = 3 and nums[2] = 2.{" "}
        <br />
        They are at least 1 index apart, and their absolute difference is the
        minimum, 1. <br />
        It can be shown that 1 is the optimal answer.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4], x = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> We can select nums[0] = 1 and nums[3] = 4.{" "}
        <br />
        They are at least 3 indices apart, and their absolute difference is the
        minimum, 3. <br />
        It can be shown that 3 is the optimal answer.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= x &lt; nums.length</code>
        </li>
      </ul>
    </div>
  ),
  3073: (
    <article role="main" class="blog-post">
      <p>
        Given an array <code>nums</code>, return{" "}
        <em>
          the <strong>maximum value</strong> of a triplet
        </em>{" "}
        <code>(i, j, k)</code> <em>such that</em> <code>i &lt; j &lt; k</code>{" "}
        <em>and</em> <code>nums[i] &lt; nums[j] &lt; nums[k]</code>.
      </p>

      <p>
        The <strong>value</strong> of a triplet <code>(i, j, k)</code> is{" "}
        <code>nums[i] - nums[j] + nums[k]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1: </strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io">nums = [5,6,9] </span>
        </p>

        <p>
          <strong>Output: </strong> <span class="example-io">8 </span>
        </p>

        <p>
          <strong>Explanation: </strong> We only have one choice for an
          increasing triplet and that is choosing all three elements. The value
          of this triplet would be <code>5 - 6 + 9 = 8</code>.
        </p>
      </div>
      <br />
      <p>
        <strong class="example">Example 2: </strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io"> nums = [1,5,3,6] </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io"> 4 </span>
        </p>

        <p>
          <strong>Explanation: </strong> There are only two increasing triplets:
        </p>

        <p>
          <code>(0, 1, 3)</code>: The value of this triplet is{" "}
          <code>nums[0] - nums[1] + nums[3] = 1 - 5 + 6 = 2</code>.
        </p>

        <p>
          <code>(0, 2, 3)</code>: The value of this triplet is{" "}
          <code>nums[0] - nums[2] + nums[3] = 1 - 3 + 6 = 4</code>.
        </p>

        <p>
          Thus the answer would be <code>4</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          The input is generated such that at least one triplet meets the given
          condition.
        </li>
      </ul>
    </article>
  ),
  295: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>median</strong> is the middle value in an ordered integer
        list. If the size of the list is even, there is no middle value, and the
        median is the mean of the two middle values.
      </p>

      <ul>
        <li>
          For example, for <code>arr = [2,3,4]</code>, the median is{" "}
          <code>3</code>.
        </li>
        <li>
          For example, for <code>arr = [2,3]</code>, the median is{" "}
          <code>(2 + 3) / 2 = 2.5</code>.
        </li>
      </ul>

      <p>Implement the MedianFinder class:</p>

      <ul>
        <li>
          <code>MedianFinder()</code> initializes the <code>MedianFinder</code>{" "}
          object.
        </li>
        <li>
          <code>void addNum(int num)</code> adds the integer <code>num</code>{" "}
          from the data stream to the data structure.
        </li>
        <li>
          <code>double findMedian()</code> returns the median of all elements so
          far. Answers within{" "}
          <code>
            10<sup>-5</sup>
          </code>{" "}
          of the actual answer will be accepted.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        ["MedianFinder", "addNum", "addNum", "findMedian", "addNum",
        "findMedian"] <br />
        [[], [1], [2], [], [3], []] <br />
        <strong>Output</strong> <br />
        [null, null, null, 1.5, null, 2.0] <br />
        <strong>Explanation</strong> <br />
        MedianFinder medianFinder = new MedianFinder(); <br />
        medianFinder.addNum(1); // arr = [1] <br />
        medianFinder.addNum(2); // arr = [1, 2] <br />
        medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2) <br />
        medianFinder.addNum(3); // arr[1, 2, 3] <br />
        medianFinder.findMedian(); // return 2.0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            -10<sup>5</sup> &lt;= num &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          There will be at least one element in the data structure before
          calling <code>findMedian</code>.
        </li>
        <li>
          At most{" "}
          <code>
            5 * 10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>addNum</code> and <code>findMedian</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <ul>
        <li>
          If all integer numbers from the stream are in the range{" "}
          <code>[0, 100]</code>, how would you optimize your solution?
        </li>
        <li>
          If <code>99%</code> of all integer numbers from the stream are in the
          range <code>[0, 100]</code>, how would you optimize your solution?
        </li>
      </ul>
    </div>
  ),
  2526: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        For a stream of integers, implement a data structure that checks if the
        last <code>k</code> integers parsed in the stream are{" "}
        <strong>equal</strong> to <code>value</code>.
      </p>

      <p>
        Implement the <strong>DataStream</strong> class:
      </p>

      <ul>
        <li>
          <code>DataStream(int value, int k)</code> Initializes the object with
          an empty integer stream and the two integers <code>value</code> and{" "}
          <code>k</code>.
        </li>
        <li>
          <code>boolean consec(int num)</code> Adds <code>num</code> to the
          stream of integers. Returns <code>true</code> if the last{" "}
          <code>k</code> integers are equal to <code>value</code>, and{" "}
          <code>false</code> otherwise. If there are less than <code>k</code>{" "}
          integers, the condition does not hold true, so returns{" "}
          <code>false</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        ["DataStream", "consec", "consec", "consec", "consec"] <br />
        [[4, 3], [4], [4], [4], [3]] <br />
        <strong>Output</strong> <br />
        [null, false, false, true, false] <br />
        <strong>Explanation</strong> <br />
        DataStream dataStream = new DataStream(4, 3); //value = 4, k = 3 <br />
        dataStream.consec(4); // Only 1 integer is parsed, so returns False.{" "}
        <br />
        dataStream.consec(4); // Only 2 integers are parsed. <br />
        // Since 2 is less than k, returns False. <br />
        dataStream.consec(4); // The 3 integers parsed are all equal to value,
        so returns True. <br />
        dataStream.consec(3); // The last k integers parsed in the stream are
        [4,4,3]. <br />
        // Since 3 is not equal to value, it returns False.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= value, num &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>5</sup>
          </code>{" "}
          calls will be made to <code>consec</code>.
        </li>
      </ul>
    </div>
  ),
  3200: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two integers <code>red</code> and <code>blue</code>{" "}
        representing the count of red and blue colored balls. You have to
        arrange these balls to form a triangle such that the 1<sup>st</sup> row
        will have 1 ball, the 2<sup>nd</sup> row will have 2 balls, the 3
        <sup>rd</sup> row will have 3 balls, and so on.
      </p>

      <p>
        All the balls in a particular row should be the <strong>same</strong>{" "}
        color, and adjacent rows should have <strong>different</strong> colors.
      </p>

      <p>
        Return the <strong>maximum</strong>
        <em> height of the triangle</em> that can be achieved.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">red = 2, blue = 4</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> 3
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/06/16/brb.png"
            style={{ width: 300, height: 240, padding: 10 }}
          />
        </p>{" "}
        <br />
        <p>The only possible arrangement is shown above.</p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">red = 2, blue = 1</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/06/16/br.png"
            style={{ width: 150, height: 135, padding: 10 }}
          />
          <br />
          The only possible arrangement is shown above.
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">red = 1, blue = 1</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 4:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">red = 10, blue = 1</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/06/16/br.png"
            style={{ width: 150, height: 135, padding: 10 }}
          />{" "}
          <br />
          The only possible arrangement is shown above.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= red, blue &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  277: (
    <div class="markdown-body div-width">
      <p>
        Suppose you are at a party with <code>n</code> people (labeled from{" "}
        <code>0</code> to <code>n - 1</code>) and among them, there may exist
        one celebrity. The definition of a celebrity is that all the other{" "}
        <code>n - 1</code> people know him/her but he/she does not know any of
        them.
      </p>

      <p>
        Now you want to find out who the celebrity is or verify that there is
        not one. The only thing you are allowed to do is to ask questions like:
        "Hi, A. Do you know B?" to get information of whether A knows B. You
        need to find out the celebrity (or verify there is not one) by asking as
        few questions as possible (in the asymptotic sense).
      </p>

      <p>
        You are given a helper function <code>bool knows(a, b)</code> which
        tells you whether A knows B. Implement a function{" "}
        <code>int findCelebrity(n)</code>.&nbsp;There will be exactly one
        celebrity if he/she is in the party. Return the celebrity's label if
        there is a celebrity in the party. If there is no celebrity, return{" "}
        <code>-1</code>.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/02/02/277_example_1_bold.PNG"
        style={{ width: 186, height: 181 }}
      />
      <pre>
        <strong>Input: </strong>graph ={" "}
        <span id="example-input-1-1">
          [ <br />
          &nbsp; [1,1,0], <br />
          &nbsp; [0,1,0], <br />
          &nbsp; [1,1,1] <br />]
        </span>{" "}
        <br />
        <strong>Output: </strong>
        <span id="example-output-1">1</span> <br />
        <strong>Explanation: </strong>There are three persons labeled with 0, 1
        and 2. graph[i][j] = 1 means person i knows person j, otherwise
        graph[i][j] = 0 means person i does not know person j. The celebrity is
        the person labeled as 1 because both 0 and 2 know him but 1 does not
        know anybody.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/02/02/277_example_2.PNG"
        style={{ width: 193, height: 192 }}
      />
      <pre>
        <strong>Input: </strong>graph ={" "}
        <span id="example-input-2-1">
          [ <br />
          &nbsp; [1,0,1], <br />
          &nbsp; [1,1,0], <br />
          &nbsp; [0,1,1] <br />]
        </span>{" "}
        <br />
        <strong>Output: </strong>
        <span id="example-output-2">-1</span> <br />
        <strong>Explanation: </strong>There is no celebrity.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ol>
        <li>
          The directed graph is represented as an adjacency matrix, which is
          an&nbsp;<code>n x n</code> matrix where <code>a[i][j] = 1</code> means
          person&nbsp;<code>i</code> knows person&nbsp;<code>j</code>{" "}
          while&nbsp;<code>a[i][j] = 0</code> means the contrary.
        </li>
        <li>
          Remember that you won't have direct access to the adjacency matrix.
        </li>
      </ol>
    </div>
  ),
  1237: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a callable function <code>f(x, y)</code>{" "}
        <strong>with a hidden formula</strong> and a value <code>z</code>,
        reverse engineer the formula and return{" "}
        <em>all positive integer pairs </em>
        <code>x</code>
        <em> and </em>
        <code>y</code>
        <em> where </em>
        <code>f(x,y) == z</code>. You may return the pairs in any order.
      </p>

      <p>
        While the exact formula is hidden, the function is monotonically
        increasing, i.e.:
      </p>

      <ul>
        <li>
          <code>f(x, y) &lt; f(x + 1, y)</code>
        </li>
        <li>
          <code>f(x, y) &lt; f(x, y + 1)</code>
        </li>
      </ul>

      <p>The function interface is defined like this:</p>

      <pre>
        {`interface CustomFunction {
  public:
    // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.
    int f(int x, int y);
  };`}
      </pre>

      <p>We will judge your solution as follows:</p>

      <ul>
        <li>
          The judge has a list of <code>9</code> hidden implementations of{" "}
          <code>CustomFunction</code>, along with a way to generate an{" "}
          <strong>answer key</strong> of all valid pairs for a specific{" "}
          <code>z</code>.
        </li>
        <li>
          The judge will receive two inputs: a <code>function_id</code> (to
          determine which implementation to test your code with), and the target{" "}
          <code>z</code>.
        </li>
        <li>
          The judge will call your <code>findSolution</code> and compare your
          results with the <strong>answer key</strong>.
        </li>
        <li>
          If your results match the <strong>answer key</strong>, your solution
          will be <code>Accepted</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> function_id = 1, z = 5 <br />
        <strong>Output:</strong> [[1,4],[2,3],[3,2],[4,1]] <br />
        <strong>Explanation:</strong> The hidden formula for function_id = 1 is
        f(x, y) = x + y. <br />
        The following positive integer values of x and y make f(x, y) equal to
        5: <br />
        x=1, y=4 -&gt; f(1, 4) = 1 + 4 = 5. <br />
        x=2, y=3 -&gt; f(2, 3) = 2 + 3 = 5. <br />
        x=3, y=2 -&gt; f(3, 2) = 3 + 2 = 5. <br />
        x=4, y=1 -&gt; f(4, 1) = 4 + 1 = 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> function_id = 2, z = 5 <br />
        <strong>Output:</strong> [[1,5],[5,1]] <br />
        <strong>Explanation:</strong> The hidden formula for function_id = 2 is
        f(x, y) = x * y. <br />
        The following positive integer values of x and y make f(x, y) equal to
        5: <br />
        x=1, y=5 -&gt; f(1, 5) = 1 * 5 = 5. <br />
        x=5, y=1 -&gt; f(5, 1) = 5 * 1 = 5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= function_id &lt;= 9</code>
        </li>
        <li>
          <code>1 &lt;= z &lt;= 100</code>
        </li>
        <li>
          It is guaranteed that the solutions of <code>f(x, y) == z</code> will
          be in the range <code>1 &lt;= x, y &lt;= 1000</code>.
        </li>
        <li>
          It is also guaranteed that <code>f(x, y)</code> will fit in 32 bit
          signed integer if <code>1 &lt;= x, y &lt;= 1000</code>.
        </li>
      </ul>
    </div>
  ),
  1533: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            We have an integer array <code>arr</code>, where all the integers in
            <code>arr</code> are equal except for one integer which is{" "}
            <strong>larger</strong> than the rest of the integers. You will not
            be given direct access to the array, instead, you will have an{" "}
            <strong>API</strong> <code>ArrayReader</code> which have the
            following functions:
          </p>

          <ul>
            <li>
              <code>int compareSub(int l, int r, int x, int y)</code>: where{" "}
              <code>0 &lt;= l, r, x, y &lt;&nbsp;ArrayReader.length()</code>,{" "}
              <code>l &lt;= r and</code>&nbsp;<code>x &lt;= y</code>. The
              function compares the sum of sub-array <code>arr[l..r]</code> with
              the sum of the sub-array
              <code>arr[x..y]</code> and returns:
              <ul>
                <li>
                  <strong>1</strong> if{" "}
                  <code>
                    arr[l]+arr[l+1]+...+arr[r] &gt; arr[x]+arr[x+1]+...+arr[y]
                  </code>
                  .
                </li>
                <li>
                  <strong>0</strong> if{" "}
                  <code>
                    arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y]
                  </code>
                  .
                </li>
                <li>
                  <strong>-1</strong> if{" "}
                  <code>
                    arr[l]+arr[l+1]+...+arr[r] &lt; arr[x]+arr[x+1]+...+arr[y]
                  </code>
                  .
                </li>
              </ul>
            </li>
            <li>
              <code>int length()</code>: Returns the size of the array.
            </li>
          </ul>

          <p>
            You are allowed to call&nbsp;<code>compareSub()</code>&nbsp;
            <b>20 times</b> at most. You can assume both functions work in{" "}
            <code>O(1)</code> time.
          </p>

          <p>
            Return{" "}
            <em>
              the index of the array <code>arr</code> which has the largest
              integer
            </em>
            .
          </p>

          <p>
            <strong>Follow-up:</strong>
          </p>

          <ul>
            <li>
              What if there are two numbers in <code>arr</code> that are bigger
              than all other numbers?
            </li>
            <li>
              What if there is one number that is bigger than other numbers and
              one number that is smaller than other numbers?
            </li>
          </ul>

          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>

          <pre>
            <strong>Input:</strong> arr = [7,7,7,7,10,7,7,7] <br />
            <strong>Output:</strong> 4 <br />
            <strong>Explanation:</strong> The following calls to the API <br />
            reader.compareSub(0, 0, 1, 1) // returns 0 this is a query comparing
            the sub-array (0, 0) with the sub array (1, 1), (i.e. compares
            arr[0] with arr[1]). <br />
            Thus we know that arr[0] and arr[1] doesn't contain the largest
            element. <br />
            reader.compareSub(2, 2, 3, 3) // returns 0, we can exclude arr[2]
            and arr[3]. <br />
            reader.compareSub(4, 4, 5, 5) // returns 1, thus for sure arr[4] is
            the largest element in the array. <br />
            Notice that we made only 3 calls, so the answer is valid.
          </pre>

          <p>
            <strong>Example 2:</strong>
          </p>

          <pre>
            <strong>Input:</strong> nums = [6,6,12] <br />
            <strong>Output:</strong> 2
          </pre>

          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              <code>2 &lt;= arr.length&nbsp;&lt;= 5 * 10^5</code>
            </li>
            <li>
              <code>1 &lt;= arr[i] &lt;= 100</code>
            </li>
            <li>
              All elements of <code>arr</code> are equal except for one element
              which is larger than all other elements.
            </li>
          </ul>
        </div>
      </div>
    </div>
  ),
  348: (
    <div class="markdown-body div-width">
      <p>
        Design a Tic-tac-toe game that is played between two players on a{" "}
        <i>n</i> x <i>n</i> grid.
      </p>

      <p>You may assume the following rules:</p>
      <ul>
        <li>
          A move is guaranteed to be valid and is placed on an empty block.
        </li>
        <li>Once a winning condition is reached, no more moves is allowed.</li>
        <li>
          A player who succeeds in placing <i>n</i> of their marks in a
          horizontal, vertical, or diagonal row wins the game.
        </li>
      </ul>
      <p></p>

      <p>
        <b>Example:</b>
        <br />
      </p>
      <pre>
        {`Given <i>n</i> = 3, assume that player 1 is "X" and player 2 is "O" in the board.

TicTacToe toe = new TicTacToe(3);

toe.move(0, 0, 1); -&gt; Returns 0 (no one wins) 
|X| | |
| | | |    // Player 1 makes a move at (0, 0).
| | | |

toe.move(0, 2, 2); -&gt; Returns 0 (no one wins)<br />
|X| |O|
| | | |    // Player 2 makes a move at (0, 2).
| | | |

toe.move(2, 2, 1); -&gt; Returns 0 (no one wins)
|X| |O|
| | | |    // Player 1 makes a move at (2, 2).
| | |X|

toe.move(1, 1, 2); -&gt; Returns 0 (no one wins)
|X| |O|
| |O| |    // Player 2 makes a move at (1, 1).
| | |X|

toe.move(2, 0, 1); -&gt; Returns 0 (no one wins)
|X| |O|
| |O| |    // Player 1 makes a move at (2, 0).
|X| |X|

toe.move(1, 0, 2); -&gt; Returns 0 (no one wins)
|X| |O|
|O|O| |    // Player 2 makes a move at (1, 0).
|X| |X|

toe.move(2, 1, 1); -&gt; Returns 1 (player 1 wins)
|X| |O|
|O|O| |    // Player 1 makes a move at (2, 1).
|X|X|X|`}
      </pre>
      <p></p>

      <p>
        <b>Follow up:</b>
        <br />
        Could you do better than O(<i>n</i>
        <sup>2</sup>) per <code>move()</code> operation?
      </p>
    </div>
  ),
  353: (
    <div class="markdown-body div-width">
      <p>
        Design a{" "}
        <a
          href="https://en.wikipedia.org/wiki/Snake_(video_game)"
          target="_blank"
          rel="noreferrer"
        >
          Snake game
        </a>{" "}
        that is played on a device with screen size = <i>width</i> x{" "}
        <i>height</i>.{" "}
        <a
          href="http://patorjk.com/games/snake/"
          target="_blank"
          rel="noreferrer"
        >
          Play the game online
        </a>{" "}
        if you are not familiar with the game.
      </p>

      <p>
        The snake is initially positioned at the top left corner (0,0) with
        length = 1 unit.
      </p>

      <p>
        You are given a list of food's positions in row-column order. When a
        snake eats the food, its length and the game's score both increase by 1.
      </p>

      <p>
        Each food appears one by one on the screen. For example, the second food
        will not appear until the first food was eaten by the snake.
      </p>

      <p>
        When a food does appear on the screen, it is guaranteed that it will not
        appear on a block occupied by the snake.
      </p>

      <p>
        <b>Example:</b>
      </p>

      <pre>
        {`Given width = 3, height = 2, and food = [[1,2],[0,1]].

Snake snake = new Snake(width, height, food);

Initially the snake appears at position (0,0) and the food at (1,2).

|S| | |
| | |F|

snake.move("R"); -&gt; Returns 0

| |S| |
| | |F|

snake.move("D"); -&gt; Returns 0

| | | |
| |S|F|

snake.move("R"); -&gt; Returns 1 (Snake eats the first food and right after that, the second food appears at (0,1) )

| |F| |
| |S|S|

snake.move("U"); -&gt; Returns 1

| |F|S|
| | |S|

snake.move("L"); -&gt; Returns 2 (Snake eats the second food)

| |S|S|
| | |S|

snake.move("U"); -&gt; Returns -1 (Game over because snake collides with border)`}
      </pre>
    </div>
  ),
  1982: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code> representing the length of an
        unknown array that you are trying to recover. You are also given an
        array <code>sums</code> containing the values of all{" "}
        <code>
          2<sup>n</sup>
        </code>{" "}
        <strong>subset sums</strong> of the unknown array (in no particular
        order).
      </p>

      <p>
        Return <em>the array </em>
        <code>ans</code>
        <em> of length </em>
        <code>n</code>
        <em>
          {" "}
          representing the unknown array. If <strong>multiple</strong> answers
          exist, return <strong>any</strong> of them
        </em>
        .
      </p>

      <p>
        An array <code>sub</code> is a <strong>subset</strong> of an array{" "}
        <code>arr</code> if <code>sub</code> can be obtained from{" "}
        <code>arr</code> by deleting some (possibly zero or all) elements of{" "}
        <code>arr</code>. The sum of the elements in <code>sub</code> is one
        possible <strong>subset sum</strong> of <code>arr</code>. The sum of an
        empty array is considered to be <code>0</code>.
      </p>

      <p>
        <strong>Note:</strong> Test cases are generated such that there will{" "}
        <strong>always</strong> be at least one correct answer.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, sums = [-3,-2,-1,0,0,1,2,3] <br />
        <strong>Output:</strong> [1,2,-3] <br />
        <strong>Explanation: </strong>[1,2,-3] is able to achieve the given
        subset sums: <br />
        - []: sum is 0 <br />
        - [1]: sum is 1 <br />
        - [2]: sum is 2 <br />
        - [1,2]: sum is 3 <br />
        - [-3]: sum is -3 <br />
        - [1,-3]: sum is -2 <br />
        - [2,-3]: sum is -1 <br />
        - [1,2,-3]: sum is 0 <br />
        Note that any permutation of [1,2,-3] and also any permutation of
        [-1,-2,3] will also be accepted.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, sums = [0,0,0,0] <br />
        <strong>Output:</strong> [0,0] <br />
        <strong>Explanation:</strong> The only correct answer is [0,0].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4, sums =
        [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8] <br />
        <strong>Output:</strong> [0,-1,4,5] <br />
        <strong>Explanation:</strong> [0,-1,4,5] is able to achieve the given
        subset sums.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 15</code>
        </li>
        <li>
          <code>
            sums.length == 2<sup>n</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= sums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  214: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code>. You can convert <code>s</code> to
        a{" "}
        <span
          data-keyword="palindrome-string"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rt:"
              >
                <div>palindrome</div>
              </div>
            </div>
          </div>
        </span>{" "}
        by adding characters in front of it.
      </p>
      <p>
        Return{" "}
        <em>
          the shortest palindrome you can find by performing this transformation
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> s = "aacecaaa" <br />
        <strong>Output:</strong> "aaacecaaa"
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>{" "}
      <br />
      <pre>
        <strong>Input:</strong> s = "abcd" <br />
        <strong>Output:</strong> "dcbabcd"
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            0 &lt;= s.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters only.
        </li>
      </ul>
    </div>
  ),
  535: (
    <div class="elfjS" data-track-load="description_content">
      <blockquote>
        Note: This is a companion problem to the{" "}
        <a
          href="https://leetcode.com/discuss/interview-question/system-design/"
          target="_blank"
          rel="noreferrer"
        >
          System Design
        </a>{" "}
        problem:{" "}
        <a
          href="https://leetcode.com/discuss/interview-question/124658/Design-a-URL-Shortener-(-TinyURL-)-System/"
          target="_blank"
          rel="noreferrer"
        >
          Design TinyURL
        </a>
        .
      </blockquote>

      <p>
        TinyURL is a URL shortening service where you enter a URL such as{" "}
        <code>https://leetcode.com/problems/design-tinyurl</code> and it returns
        a short URL such as <code>http://tinyurl.com/4e9iAk</code>. Design a
        class to encode a URL and decode a tiny URL.
      </p>

      <p>
        There is no restriction on how your encode/decode algorithm should work.
        You just need to ensure that a URL can be encoded to a tiny URL and the
        tiny URL can be decoded to the original URL.
      </p>

      <p>
        Implement the <code>Solution</code> class:
      </p>

      <ul>
        <li>
          <code>Solution()</code> Initializes the object of the system.
        </li>
        <li>
          <code>String encode(String longUrl)</code> Returns a tiny URL for the
          given <code>longUrl</code>.
        </li>
        <li>
          <code>String decode(String shortUrl)</code> Returns the original long
          URL for the given <code>shortUrl</code>. It is guaranteed that the
          given <code>shortUrl</code> was encoded by the same object.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> url =
        "https://leetcode.com/problems/design-tinyurl" <br />
        <strong>
          Output:
        </strong> "https://leetcode.com/problems/design-tinyurl" <br />
        <strong>Explanation:</strong> <br />
        Solution obj = new Solution(); <br />
        string tiny = obj.encode(url); // returns the encoded tiny url. <br />
        string ans = obj.decode(tiny); // returns the original url after
        decoding it.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= url.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>url</code> is guranteed to be a valid URL.
        </li>
      </ul>
    </div>
  ),
  706: (
    <div class="elfjS" data-track-load="description_content">
      <p>Design a HashMap without using any built-in hash table libraries.</p>

      <p>
        Implement the <code>MyHashMap</code> class:
      </p>

      <ul>
        <li>
          <code>MyHashMap()</code> initializes the object with an empty map.
        </li>
        <li>
          <code>void put(int key, int value)</code> inserts a{" "}
          <code>(key, value)</code> pair into the HashMap. If the{" "}
          <code>key</code> already exists in the map, update the corresponding{" "}
          <code>value</code>.
        </li>
        <li>
          <code>int get(int key)</code> returns the <code>value</code> to which
          the specified <code>key</code> is mapped, or <code>-1</code> if this
          map contains no mapping for the <code>key</code>.
        </li>
        <li>
          <code>void remove(key)</code> removes the <code>key</code> and its
          corresponding <code>value</code> if the map contains the mapping for
          the <code>key</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]{" "}
        <br />
        [[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]] <br />
        <strong>Output</strong> <br />
        [null, null, null, 1, -1, null, 1, null, -1] <br />
        <strong>Explanation</strong> <br />
        MyHashMap myHashMap = new MyHashMap(); <br />
        myHashMap.put(1, 1); // The map is now [[1,1]] <br />
        myHashMap.put(2, 2); // The map is now [[1,1], [2,2]] <br />
        myHashMap.get(1); // return 1, The map is now [[1,1], [2,2]] <br />
        myHashMap.get(3); // return -1 (i.e., not found), The map is now [[1,1],
        [2,2]] <br />
        myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the
        existing value) <br />
        myHashMap.get(2); // return 1, The map is now [[1,1], [2,1]] <br />
        myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]{" "}
        <br />
        myHashMap.get(2); // return -1 (i.e., not found), The map is now [[1,1]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= key, value &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>put</code>, <code>get</code>, and{" "}
          <code>remove</code>.
        </li>
      </ul>
    </div>
  ),
  1569: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> that represents a permutation of
        integers from <code>1</code> to <code>n</code>. We are going to
        construct a binary search tree (BST) by inserting the elements of{" "}
        <code>nums</code> in order into an initially empty BST. Find the number
        of different ways to reorder <code>nums</code> so that the constructed
        BST is identical to that formed from the original array{" "}
        <code>nums</code>.
      </p>

      <ul>
        <li>
          For example, given <code>nums = [2,1,3]</code>, we will have 2 as the
          root, 1 as a left child, and 3 as a right child. The array{" "}
          <code>[2,3,1]</code> also yields the same BST but <code>[3,2,1]</code>{" "}
          yields a different BST.
        </li>
      </ul>

      <p>
        Return <em>the number of ways to reorder</em> <code>nums</code>{" "}
        <em>
          such that the BST formed is identical to the original BST formed from
        </em>{" "}
        <code>nums</code>.
      </p>

      <p>
        Since the answer may be very large, <strong>return it modulo </strong>
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/12/bb.png"
        style={{ width: 121, height: 101 }}
      />
      <pre>
        <strong>Input:</strong> nums = [2,1,3] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> We can reorder nums to be [2,3,1] which
        will yield the same BST. There are no other ways to reorder nums which
        will yield the same BST.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/12/ex1.png"
        style={{ width: 241, height: 161 }}
      />
      <pre>
        <strong>Input:</strong> nums = [3,4,5,1,2] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The following 5 arrays will yield the same
        BST: [3,1,2,4,5] [3,1,4,2,5] [3,1,4,5,2] [3,4,1,2,5] [3,4,1,5,2]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/08/12/ex4.png"
        style={{ width: 121, height: 161 }}
      />
      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There are no other orderings of nums that
        will yield the same BST.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= nums.length</code>
        </li>
        <li>
          All integers in <code>nums</code> are <strong>distinct</strong>.
        </li>
      </ul>
    </div>
  ),
  3179: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two integers <code>n</code> and <code>k</code>.
      </p>

      <p>
        Initially, you start with an array <code>a</code> of <code>n</code>{" "}
        integers where <code>a[i] = 1</code> for all{" "}
        <code>0 &lt;= i &lt;= n - 1</code>. After each second, you
        simultaneously update each element to be the sum of all its preceding
        elements plus the element itself. For example, after one second,{" "}
        <code>a[0]</code> remains the same, <code>a[1]</code> becomes{" "}
        <code>a[0] + a[1]</code>, <code>a[2]</code> becomes{" "}
        <code>a[0] + a[1] + a[2]</code>, and so on.
      </p>

      <p>
        Return the <strong>value</strong> of <code>a[n - 1]</code> after{" "}
        <code>k</code> seconds.
      </p>

      <p>
        Since the answer may be very large, return it <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 4, k = 5</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">56</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <table border="1">
          <tbody>
            <tr>
              <th>Second</th>
              <th>State After</th>
            </tr>
            <tr>
              <td>0</td>
              <td>[1,1,1,1]</td>
            </tr>
            <tr>
              <td>1</td>
              <td>[1,2,3,4]</td>
            </tr>
            <tr>
              <td>2</td>
              <td>[1,3,6,10]</td>
            </tr>
            <tr>
              <td>3</td>
              <td>[1,4,10,20]</td>
            </tr>
            <tr>
              <td>4</td>
              <td>[1,5,15,35]</td>
            </tr>
            <tr>
              <td>5</td>
              <td>[1,6,21,56]</td>
            </tr>
          </tbody>
        </table>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 5, k = 3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">35</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <table border="1">
          <tbody>
            <tr>
              <th>Second</th>
              <th>State After</th>
            </tr>
            <tr>
              <td>0</td>
              <td>[1,1,1,1,1]</td>
            </tr>
            <tr>
              <td>1</td>
              <td>[1,2,3,4,5]</td>
            </tr>
            <tr>
              <td>2</td>
              <td>[1,3,6,10,15]</td>
            </tr>
            <tr>
              <td>3</td>
              <td>[1,4,10,20,35]</td>
            </tr>
          </tbody>
        </table>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n, k &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  464: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        In the "100 game" two players take turns adding, to a running total, any
        integer from <code>1</code> to <code>10</code>. The player who first
        causes the running total to <strong>reach or exceed</strong> 100 wins.
      </p>

      <p>
        What if we change the game so that players <strong>cannot</strong>{" "}
        re-use integers?
      </p>

      <p>
        For example, two players might take turns drawing from a common pool of
        numbers from 1 to 15 without replacement until they reach a total &gt;=
        100.
      </p>

      <p>
        Given two integers <code>maxChoosableInteger</code> and{" "}
        <code>desiredTotal</code>, return <code>true</code> if the first player
        to move can force a win, otherwise, return <code>false</code>. Assume
        both players play <strong>optimally</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> maxChoosableInteger = 10, desiredTotal = 11{" "}
        <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> <br />
        No matter which integer the first player choose, the first player will
        lose. <br />
        The first player can choose an integer from 1 up to 10. <br />
        If the first player choose 1, the second player can only choose integers
        from 2 up to 10. <br />
        The second player will win by choosing 10 and get a total = 11, which is
        &gt;= desiredTotal. <br />
        Same with other integers chosen by the first player, the second player
        will always win.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> maxChoosableInteger = 10, desiredTotal = 0{" "}
        <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> maxChoosableInteger = 10, desiredTotal = 1{" "}
        <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= maxChoosableInteger &lt;= 20</code>
        </li>
        <li>
          <code>0 &lt;= desiredTotal &lt;= 300</code>
        </li>
      </ul>
    </div>
  ),
  847: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have an undirected, connected graph of <code>n</code> nodes labeled
        from <code>0</code> to <code>n - 1</code>. You are given an array{" "}
        <code>graph</code> where <code>graph[i]</code> is a list of all the
        nodes connected with node <code>i</code> by an edge.
      </p>

      <p>
        Return <em>the length of the shortest path that visits every node</em>.
        You may start and stop at any node, you may revisit nodes multiple
        times, and you may reuse edges.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/12/shortest1-graph.jpg"
        style={{ width: 222, height: 183 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[1,2,3],[0],[0],[0]] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> One possible path is [1,0,2,0,3]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/12/shortest2-graph.jpg"
        style={{ width: 382, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[1],[0,2,4],[1,3,4],[2],[1,2]] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> One possible path is [0,1,4,2,3]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == graph.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 12</code>
        </li>
        <li>
          <code>0 &lt;= graph[i].length &lt;&nbsp;n</code>
        </li>
        <li>
          <code>graph[i]</code> does not contain <code>i</code>.
        </li>
        <li>
          If <code>graph[a]</code> contains <code>b</code>, then{" "}
          <code>graph[b]</code> contains <code>a</code>.
        </li>
        <li>The input graph is always connected.</li>
      </ul>
    </div>
  ),
  3149: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>nums</code> which is a{" "}
        <span
          data-keyword="permutation"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rt:"
              >
                <div>permutation</div>
              </div>
            </div>
          </div>
        </span>{" "}
        of <code>[0, 1, 2, ..., n - 1]</code>. The <strong>score</strong> of any
        permutation of <code>[0, 1, 2, ..., n - 1]</code> named{" "}
        <code>perm</code> is defined as:
      </p>

      <p>
        <code>
          score(perm) = |perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| +
          ... + |perm[n - 1] - nums[perm[0]]|
        </code>
      </p>

      <p>
        Return the permutation <code>perm</code> which has the{" "}
        <strong>minimum</strong> possible score. If <em>multiple</em>{" "}
        permutations exist with this score, return the one that is{" "}
        <span
          data-keyword="lexicographically-smaller-array"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rv:"
              >
                <div>lexicographically smallest</div>
              </div>
            </div>
          </div>
        </span>{" "}
        among them.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [1,0,2]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[0,1,2]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <strong>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2024/04/04/example0gif.gif"
              style={{ width: 235, height: 235 }}
            />
          </strong>
        </p>
        <p>
          The lexicographically smallest permutation with minimum cost is{" "}
          <code>[0,1,2]</code>. The cost of this permutation is{" "}
          <code>|0 - 0| + |1 - 2| + |2 - 1| = 2</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [0,2,1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[0,2,1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <strong>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2024/04/04/example1gif.gif"
              style={{ width: 235, height: 235 }}
            />
          </strong>
        </p>
        <p>
          The lexicographically smallest permutation with minimum cost is{" "}
          <code>[0,2,1]</code>. The cost of this permutation is{" "}
          <code>|0 - 1| + |2 - 2| + |1 - 0| = 2</code>.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n == nums.length &lt;= 14</code>
        </li>
        <li>
          <code>nums</code> is a permutation of{" "}
          <code>[0, 1, 2, ..., n - 1]</code>.
        </li>
      </ul>
    </div>
  ),
  2992: (
    <article role="main" class="blog-post">
      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          the number of <strong>permutations</strong> of the{" "}
          <strong>1-indexed</strong> array
        </em>{" "}
        <code>nums = [1, 2, ..., n]</code>
        <em>
          , such that it's <strong>self-divisible</strong>
        </em>
        .
      </p>

      <p>
        Array <code>nums</code> is <strong>self-divisible</strong> if for every{" "}
        <code>1 &lt;= i &lt;= n</code>, <strong>at least</strong> one of the
        following conditions holds:
      </p>

      <ul>
        <li>
          <code>nums[i] % i == 0</code>
        </li>
        <li>
          <code>i % nums[i] == 0</code>
        </li>
      </ul>

      <p>
        A <strong>permutation</strong> of an array is a rearrangement of the
        elements of that array, for example here are all of the permutations of
        the array <code>[1, 2, 3]</code>:
      </p>

      <ul>
        <li>
          <code>[1, 2, 3]</code>
        </li>
        <li>
          <code>[1, 3, 2]</code>
        </li>
        <li>
          <code>[2, 1, 3]</code>
        </li>
        <li>
          <code>[2, 3, 1]</code>
        </li>
        <li>
          <code>[3, 1, 2]</code>
        </li>
        <li>
          <code>[3, 2, 1]</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The array [1] has only 1 permutation which
        is self-divisible.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The array [1,2] has 2 permutations both of
        which are self-divisible: <br />
        nums = [1,2]: This is self-divisible since nums[1] % 1 == 0 and nums[2]
        % 2 == 0. <br />
        nums = [2,1]: This is self-divisible since nums[1] % 1 == 0 and 2 %
        nums[2] == 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The array [1,2,3] has 3 self-divisble
        permutations: [1,2,3], [2,1,3], [3,2,1]. <br />
        It can be shown that the other 3 permutations are not self-divisible.
        Hence the answer is 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 15</code>
        </li>
      </ul>
    </article>
  ),
  1392: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A string is called a <strong>happy prefix</strong> if is a{" "}
        <strong>non-empty</strong> prefix which is also a suffix (excluding
        itself).
      </p>

      <p>
        Given a string <code>s</code>, return{" "}
        <em>
          the <strong>longest happy prefix</strong> of
        </em>{" "}
        <code>s</code>. Return an empty string <code>""</code> if no such prefix
        exists.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "level" <br />
        <strong>Output:</strong> "l" <br />
        <strong>Explanation:</strong> s contains 4 prefix excluding itself ("l",
        "le", "lev", "leve"), and suffix ("l", "el", "vel", "evel"). The largest
        prefix which is also suffix is given by "l".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "ababab" <br />
        <strong>Output:</strong> "abab" <br />
        <strong>Explanation:</strong> "abab" is the largest prefix which is also
        suffix. They can overlap in the original string.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> contains only lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  1960: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> string <code>s</code> and are
        tasked with finding two <strong>non-intersecting palindromic </strong>
        substrings of <strong>odd</strong> length such that the product of their
        lengths is maximized.
      </p>

      <p>
        More formally, you want to choose four integers <code>i</code>,{" "}
        <code>j</code>, <code>k</code>, <code>l</code> such that{" "}
        <code>0 &lt;= i &lt;= j &lt; k &lt;= l &lt; s.length</code> and both the
        substrings <code>s[i...j]</code> and <code>s[k...l]</code> are
        palindromes and have odd lengths. <code>s[i...j]</code> denotes a
        substring from index <code>i</code> to index <code>j</code>{" "}
        <strong>inclusive</strong>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong> possible product of the lengths of the
          two non-intersecting palindromic substrings.
        </em>
      </p>

      <p>
        A <strong>palindrome</strong> is a string that is the same forward and
        backward. A <strong>substring</strong> is a contiguous sequence of
        characters in a string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "ababbb" <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> Substrings "aba" and "bbb" are palindromes
        with odd length. product = 3 * 3 = 9.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "zaaaxbbby" <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> Substrings "aaa" and "bbb" are palindromes
        with odd length. product = 3 * 3 = 9.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  3034: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> of size <code>n</code>, and a{" "}
        <strong>0-indexed</strong> integer array <code>pattern</code> of size{" "}
        <code>m</code> consisting of integers <code>-1</code>, <code>0</code>,
        and <code>1</code>.
      </p>

      <p>
        A{" "}
        <span
          data-keyword="subarray"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r3a:"
              >
                <div>subarray</div>
              </div>
            </div>
          </div>
        </span>{" "}
        <code>nums[i..j]</code> of size <code>m + 1</code> is said to match the{" "}
        <code>pattern</code> if the following conditions hold for each element{" "}
        <code>pattern[k]</code>:
      </p>

      <ul>
        <li>
          <code>nums[i + k + 1] &gt; nums[i + k]</code> if{" "}
          <code>pattern[k] == 1</code>.
        </li>
        <li>
          <code>nums[i + k + 1] == nums[i + k]</code> if{" "}
          <code>pattern[k] == 0</code>.
        </li>
        <li>
          <code>nums[i + k + 1] &lt; nums[i + k]</code> if{" "}
          <code>pattern[k] == -1</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the<strong> count</strong> of subarrays in
        </em>{" "}
        <code>nums</code> <em>that match the</em> <code>pattern</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5,6], pattern = [1,1] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The pattern [1,1] indicates that we are
        looking for strictly increasing subarrays of size 3. In the array nums,
        the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern.{" "}
        <br />
        Hence, there are 4 subarrays in nums that match the pattern.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,4,4,1,3,5,5,3], pattern = [1,0,-1]{" "}
        <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation: </strong>Here, the pattern [1,0,-1] indicates that
        we are looking for a sequence where the first number is smaller than the
        second, the second is equal to the third, and the third is greater than
        the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3]
        match this pattern. <br />
        Hence, there are 2 subarrays in nums that match the pattern.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n == nums.length &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= m == pattern.length &lt; n</code>
        </li>
        <li>
          <code>-1 &lt;= pattern[i] &lt;= 1</code>
        </li>
      </ul>
    </div>
  ),
  3036: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> of size <code>n</code>, and a{" "}
        <strong>0-indexed</strong> integer array <code>pattern</code> of size{" "}
        <code>m</code> consisting of integers <code>-1</code>, <code>0</code>,
        and <code>1</code>.
      </p>

      <p>
        A{" "}
        <span
          data-keyword="subarray"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r3a:"
              >
                <div>subarray</div>
              </div>
            </div>
          </div>
        </span>{" "}
        <code>nums[i..j]</code> of size <code>m + 1</code> is said to match the{" "}
        <code>pattern</code> if the following conditions hold for each element{" "}
        <code>pattern[k]</code>:
      </p>

      <ul>
        <li>
          <code>nums[i + k + 1] &gt; nums[i + k]</code> if{" "}
          <code>pattern[k] == 1</code>.
        </li>
        <li>
          <code>nums[i + k + 1] == nums[i + k]</code> if{" "}
          <code>pattern[k] == 0</code>.
        </li>
        <li>
          <code>nums[i + k + 1] &lt; nums[i + k]</code> if{" "}
          <code>pattern[k] == -1</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the<strong> count</strong> of subarrays in
        </em>{" "}
        <code>nums</code> <em>that match the</em> <code>pattern</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5,6], pattern = [1,1] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The pattern [1,1] indicates that we are
        looking for strictly increasing subarrays of size 3. In the array nums,
        the subarrays [1,2,3], [2,3,4], [3,4,5], and [4,5,6] match this pattern.{" "}
        <br />
        Hence, there are 4 subarrays in nums that match the pattern.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,4,4,1,3,5,5,3], pattern = [1,0,-1]{" "}
        <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation: </strong>Here, the pattern [1,0,-1] indicates that
        we are looking for a sequence where the first number is smaller than the
        second, the second is equal to the third, and the third is greater than
        the fourth. In the array nums, the subarrays [1,4,4,1], and [3,5,5,3]
        match this pattern.
        <br /> Hence, there are 2 subarrays in nums that match the pattern.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= n == nums.length &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= m == pattern.length &lt; n</code>
        </li>
        <li>
          <code>-1 &lt;= pattern[i] &lt;= 1</code>
        </li>
      </ul>
    </div>
  ),
  241: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>expression</code> of numbers and operators, return{" "}
        <em>
          all possible results from computing all the different possible ways to
          group numbers and operators
        </em>
        . You may return the answer in <strong>any order</strong>.
      </p>

      <p>
        The test cases are generated such that the output values fit in a 32-bit
        integer and the number of different results does not exceed{" "}
        <code>
          10<sup>4</sup>
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> expression = "2-1-1" <br />
        <strong>Output:</strong> [0,2] <br />
        <strong>Explanation:</strong> <br />
        ((2-1)-1) = 0 <br />
        (2-(1-1)) = 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> expression = "2*3-4*5" <br />
        <strong>Output:</strong> [-34,-14,-10,-10,10] <br />
        <strong>Explanation:</strong> <br />
        (2*(3-(4*5))) = -34 <br />
        ((2*3)-(4*5)) = -14 <br />
        ((2*(3-4))*5) = -10 <br />
        (2*((3-4)*5)) = -10 <br />
        (((2*3)-4)*5) = 10
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= expression.length &lt;= 20</code>
        </li>
        <li>
          <code>expression</code> consists of digits and the operator{" "}
          <code>'+'</code>, <code>'-'</code>, and <code>'*'</code>.
        </li>
        <li>
          All the integer values in the input expression are in the range{" "}
          <code>[0, 99]</code>.
        </li>
        <li>
          The integer values in the input expression do not have a leading{" "}
          <code>'-'</code> or <code>'+'</code> denoting the sign.
        </li>
      </ul>
    </div>
  ),
  509: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <b>Fibonacci numbers</b>, commonly denoted <code>F(n)</code> form a
        sequence, called the <b>Fibonacci sequence</b>, such that each number is
        the sum of the two preceding ones, starting from <code>0</code> and{" "}
        <code>1</code>. That is,
      </p>

      <pre>F(0) = 0, F(1) = 1 F(n) = F(n - 1) + F(n - 2), for n &gt; 1.</pre>

      <p>
        Given <code>n</code>, calculate <code>F(n)</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> F(2) = F(1) + F(0) = 1 + 0 = 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> F(3) = F(2) + F(1) = 1 + 1 = 2.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> F(4) = F(3) + F(2) = 2 + 1 = 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= n &lt;= 30</code>
        </li>
      </ul>
    </div>
  ),
  1137: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The Tribonacci sequence T<sub>n</sub> is defined as follows:&nbsp;
      </p>

      <p>
        T<sub>0</sub> = 0, T<sub>1</sub> = 1, T<sub>2</sub> = 1, and T
        <sub>n+3</sub> = T<sub>n</sub> + T<sub>n+1</sub> + T<sub>n+2</sub> for n
        &gt;= 0.
      </p>

      <p>
        Given <code>n</code>, return the value of T<sub>n</sub>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> <br />
        T_3 = 0 + 1 + 1 = 2 <br />
        T_4 = 1 + 1 + 2 = 4
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 25 <br />
        <strong>Output:</strong> 1389537
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= n &lt;= 37</code>
        </li>
        <li>
          The answer is guaranteed to fit within a 32-bit integer, ie.{" "}
          <code>answer &lt;= 2^31 - 1</code>.
        </li>
      </ul>
    </div>
  ),
  3154: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>non-negative</strong> integer <code>k</code>.
        There exists a staircase with an infinite number of stairs, with the{" "}
        <strong>lowest</strong> stair numbered 0.
      </p>

      <p>
        Alice has an integer <code>jump</code>, with an initial value of 0. She
        starts on stair 1 and wants to reach stair <code>k</code> using{" "}
        <strong>any</strong> number of <strong>operations</strong>. If she is on
        stair <code>i</code>, in one <strong>operation</strong> she can:
      </p>

      <ul>
        <li>
          Go down to stair <code>i - 1</code>. This operation{" "}
          <strong>cannot</strong> be used consecutively or on stair 0.
        </li>
        <li>
          Go up to stair{" "}
          <code>
            i + 2<sup>jump</sup>
          </code>
          . And then, <code>jump</code> becomes <code>jump + 1</code>.
        </li>
      </ul>

      <p>
        Return the <em>total</em> number of ways Alice can reach stair{" "}
        <code>k</code>.
      </p>

      <p>
        <strong>Note</strong> that it is possible that Alice reaches the stair{" "}
        <code>k</code>, and performs some operations to reach the stair{" "}
        <code>k</code> again.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">k = 0</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>The 2 possible ways of reaching stair 0 are:</p>
        <ul>
          <li>
            Alice starts at stair 1.
            <ul>
              <li>
                Using an operation of the first type, she goes down 1 stair to
                reach stair 0.
              </li>
            </ul>
          </li>
          <li>
            Alice starts at stair 1.
            <ul>
              <li>
                Using an operation of the first type, she goes down 1 stair to
                reach stair 0.
              </li>
              <li>
                Using an operation of the second type, she goes up 2<sup>0</sup>{" "}
                stairs to reach stair 1.
              </li>
              <li>
                Using an operation of the first type, she goes down 1 stair to
                reach stair 0.
              </li>
            </ul>
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">k = 1</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">4</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>The 4 possible ways of reaching stair 1 are:</p>
        <ul>
          <li>Alice starts at stair 1. Alice is at stair 1.</li>
          <li>
            Alice starts at stair 1.
            <ul>
              <li>
                Using an operation of the first type, she goes down 1 stair to
                reach stair 0.
              </li>
              <li>
                Using an operation of the second type, she goes up 2<sup>0</sup>{" "}
                stairs to reach stair 1.
              </li>
            </ul>
          </li>
          <li>
            Alice starts at stair 1.
            <ul>
              <li>
                Using an operation of the second type, she goes up 2<sup>0</sup>{" "}
                stairs to reach stair 2.
              </li>
              <li>
                Using an operation of the first type, she goes down 1 stair to
                reach stair 1.
              </li>
            </ul>
          </li>
          <li>
            Alice starts at stair 1.
            <ul>
              <li>
                Using an operation of the first type, she goes down 1 stair to
                reach stair 0.
              </li>
              <li>
                Using an operation of the second type, she goes up 2<sup>0</sup>{" "}
                stairs to reach stair 1.
              </li>
              <li>
                Using an operation of the first type, she goes down 1 stair to
                reach stair 0.
              </li>
              <li>
                Using an operation of the second type, she goes up 2<sup>1</sup>{" "}
                stairs to reach stair 2.
              </li>
              <li>
                Using an operation of the first type, she goes down 1 stair to
                reach stair 1.
              </li>
            </ul>
          </li>
        </ul>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= k &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  546: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given several <code>boxes</code> with different colors
        represented by different positive numbers.
      </p>

      <p>
        You may experience several rounds to remove boxes until there is no box
        left. Each time you can choose some continuous boxes with the same color
        (i.e., composed of <code>k</code> boxes, <code>k &gt;= 1</code>), remove
        them and get <code>k * k</code> points.
      </p>

      <p>
        Return <em>the maximum points you can get</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> boxes = [1,3,2,2,2,3,4,3,1] <br />
        <strong>Output:</strong> 23 <br />
        <strong>Explanation:</strong> <br />
        [1, 3, 2, 2, 2, 3, 4, 3, 1] <br />
        ----&gt; [1, 3, 3, 4, 3, 1] (3*3=9 points) <br />
        ----&gt; [1, 3, 3, 3, 1] (1*1=1 points) <br />
        ----&gt; [1, 1] (3*3=9 points) <br />
        ----&gt; [] (2*2=4 points)
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> boxes = [1,1,1] <br />
        <strong>Output:</strong> 9
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> boxes = [1] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= boxes.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= boxes[i]&nbsp;&lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  894: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          a list of all possible <strong>full binary trees</strong> with
        </em>{" "}
        <code>n</code> <em>nodes</em>. Each node of each tree in the answer must
        have <code>Node.val == 0</code>.
      </p>

      <p>
        Each element of the answer is the root node of one possible tree. You
        may return the final list of trees in <strong>any order</strong>.
      </p>

      <p>
        A <strong>full binary tree</strong> is a binary tree where each node has
        exactly <code>0</code> or <code>2</code> children.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/22/fivetrees.png"
        style={{ width: 700, height: 400 }}
      />
      <pre>
        <strong>Input:</strong> n = 7 <br />
        <strong>Output:</strong>{" "}
        [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],
        <br />
        [0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> [[0,0,0]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 20</code>
        </li>
      </ul>
    </div>
  ),
  1575: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of <strong>distinct</strong> positive integers
        locations where <code>locations[i]</code> represents the position of
        city <code>i</code>. You are also given integers <code>start</code>,{" "}
        <code>finish</code> and <code>fuel</code> representing the starting
        city, ending city, and the initial amount of fuel you have,
        respectively.
      </p>

      <p>
        At each step, if you are at city <code>i</code>, you can pick any city{" "}
        <code>j</code> such that <code>j != i</code> and{" "}
        <code>0 &lt;= j &lt; locations.length</code> and move to city{" "}
        <code>j</code>. Moving from city <code>i</code> to city <code>j</code>{" "}
        reduces the amount of fuel you have by{" "}
        <code>|locations[i] - locations[j]|</code>. Please notice that{" "}
        <code>|x|</code> denotes the absolute value of <code>x</code>.
      </p>

      <p>
        Notice that <code>fuel</code> <strong>cannot</strong> become negative at
        any point in time, and that you are <strong>allowed</strong> to visit
        any city more than once (including <code>start</code> and{" "}
        <code>finish</code>).
      </p>

      <p>
        Return <em>the count of all possible routes from </em>
        <code>start</code> <em>to</em> <code>finish</code>. Since the answer may
        be too large, return it modulo{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> locations = [2,3,6,8,4], start = 1, finish = 3,
        fuel = 5 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The following are all possible routes,
        each uses 5 units of fuel: <br />
        1 -&gt; 3 <br />
        1 -&gt; 2 -&gt; 3 <br />
        1 -&gt; 4 -&gt; 3 <br />1 -&gt; 4 -&gt; 2 -&gt; 3
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> locations = [4,3,1], start = 1, finish = 0, fuel
        = 6 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The following are all possible routes:{" "}
        <br />
        1 -&gt; 0, used fuel = 1 <br />
        1 -&gt; 2 -&gt; 0, used fuel = 5 <br />
        1 -&gt; 2 -&gt; 1 -&gt; 0, used fuel = 5 <br />
        1 -&gt; 0 -&gt; 1 -&gt; 0, used fuel = 3 <br />1 -&gt; 0 -&gt; 1 -&gt; 0
        -&gt; 1 -&gt; 0, used fuel = 5
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> locations = [5,2,1], start = 0, finish = 2, fuel
        = 3 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> It is impossible to get from 0 to 2 using
        only 3 units of fuel since the shortest route needs 4 units of fuel.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= locations.length &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= locations[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          All integers in <code>locations</code> are <strong>distinct</strong>.
        </li>
        <li>
          <code>0 &lt;= start, finish &lt; locations.length</code>
        </li>
        <li>
          <code>1 &lt;= fuel &lt;= 200</code>
        </li>
      </ul>
    </div>
  ),
  2318: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code>. You roll a fair 6-sided dice{" "}
        <code>n</code> times. Determine the total number of{" "}
        <strong>distinct</strong> sequences of rolls possible such that the
        following conditions are satisfied:
      </p>

      <ol>
        <li>
          The <strong>greatest common divisor</strong> of any{" "}
          <strong>adjacent</strong> values in the sequence is equal to{" "}
          <code>1</code>.
        </li>
        <li>
          There is <strong>at least</strong> a gap of <code>2</code> rolls
          between <strong>equal</strong> valued rolls. More formally, if the
          value of the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          roll is <strong>equal</strong> to the value of the{" "}
          <code>
            j<sup>th</sup>
          </code>{" "}
          roll, then <code>abs(i - j) &gt; 2</code>.
        </li>
      </ol>

      <p>
        Return{" "}
        <em>
          the<strong> total number</strong> of distinct sequences possible
        </em>
        . Since the answer may be very large, return it <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>
        Two sequences are considered distinct if at least one element is
        different.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> 184 <br />
        <strong>Explanation:</strong> Some of the possible sequences are (1, 2,
        3, 4), (6, 1, 2, 3), (1, 2, 3, 1), etc. <br />
        Some invalid sequences are (1, 2, 1, 3), (1, 2, 3, 6). <br />
        (1, 2, 1, 3) is invalid since the first and third roll have an equal
        value and abs(1 - 3) = 2 (i and j are 1-indexed). <br />
        (1, 2, 3, 6) is invalid since the greatest common divisor of 3 and 6 =
        3. <br />
        There are a total of 184 distinct sequences possible, so we return 184.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> 22 <br />
        <strong>Explanation:</strong> Some of the possible sequences are (1, 2),
        (2, 1), (3, 2). <br />
        Some invalid sequences are (3, 6), (2, 4) since the greatest common
        divisor is not equal to 1. <br />
        There are a total of 22 distinct sequences possible, so we return 22.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2876: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a <strong>directed</strong> graph consisting of <code>n</code>{" "}
        nodes numbered from <code>0</code> to <code>n - 1</code> and{" "}
        <code>n</code> directed edges.
      </p>

      <p>
        You are given a <strong>0-indexed</strong> array <code>edges</code>{" "}
        where <code>edges[i]</code> indicates that there is an edge from node{" "}
        <code>i</code> to node <code>edges[i]</code>.
      </p>

      <p>Consider the following process on the graph:</p>

      <ul>
        <li>
          You start from a node <code>x</code> and keep visiting other nodes
          through edges until you reach a node that you have already visited
          before on this <strong>same</strong> process.
        </li>
      </ul>

      <p>
        Return <em>an array </em>
        <code>answer</code>
        <em> where </em>
        <code>answer[i]</code>
        <em>
          {" "}
          is the number of <strong>different</strong> nodes that you will visit
          if you perform the process starting from node{" "}
        </em>
        <code>i</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/08/31/graaphdrawio-1.png"
      />
      <pre>
        <strong>Input:</strong> edges = [1,2,0,0] <br />
        <strong>Output:</strong> [3,3,3,4] <br />
        <strong>Explanation:</strong> We perform the process starting from each
        node in the following way: <br />
        - Starting from node 0, we visit the nodes 0 -&gt; 1 -&gt; 2 -&gt; 0.
        The number of different nodes we visit is 3.
        <br />
        - Starting from node 1, we visit the nodes 1 -&gt; 2 -&gt; 0 -&gt; 1.
        The number of different nodes we visit is 3.
        <br />
        - Starting from node 2, we visit the nodes 2 -&gt; 0 -&gt; 1 -&gt; 2.
        The number of different nodes we visit is 3.
        <br />- Starting from node 3, we visit the nodes 3 -&gt; 0 -&gt; 1 -&gt;
        2 -&gt; 0. The number of different nodes we visit is 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/08/31/graaph2drawio.png"
        style={{ width: 191, height: 251 }}
      />
      <pre>
        <strong>Input:</strong> edges = [1,2,3,4,0] <br />
        <strong>Output:</strong> [5,5,5,5,5] <br />
        <strong>Explanation:</strong> Starting from any node we can visit every
        node in the graph in the process.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == edges.length</code>
        </li>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= edges[i] &lt;= n - 1</code>
        </li>
        <li>
          <code>edges[i] != i</code>
        </li>
      </ul>
    </div>
  ),
  208: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A{" "}
        <a
          href="https://en.wikipedia.org/wiki/Trie"
          target="_blank"
          rel="noreferrer"
        >
          <strong>trie</strong>
        </a>{" "}
        (pronounced as "try") or <strong>prefix tree</strong> is a tree data
        structure used to efficiently store and retrieve keys in a dataset of
        strings. There are various applications of this data structure, such as
        autocomplete and spellchecker.
      </p>

      <p>Implement the Trie class:</p>

      <ul>
        <li>
          <code>Trie()</code> Initializes the trie object.
        </li>
        <li>
          <code>void insert(String word)</code> Inserts the string{" "}
          <code>word</code> into the trie.
        </li>
        <li>
          <code>boolean search(String word)</code> Returns <code>true</code> if
          the string <code>word</code> is in the trie (i.e., was inserted
          before), and <code>false</code> otherwise.
        </li>
        <li>
          <code>boolean startsWith(String prefix)</code> Returns{" "}
          <code>true</code> if there is a previously inserted string{" "}
          <code>word</code> that has the prefix <code>prefix</code>, and{" "}
          <code>false</code> otherwise.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input</strong> <br />
        ["Trie", "insert", "search", "search", "startsWith", "insert", "search"]{" "}
        <br />
        [[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]]
        <strong>Output</strong> <br />
        [null, null, true, false, true, null, true]
        <strong>Explanation</strong> <br />
        Trie trie = new Trie(); <br />
        trie.insert("apple"); <br />
        trie.search("apple"); // return True <br />
        trie.search("app"); // return False <br />
        trie.startsWith("app"); // return True <br />
        trie.insert("app"); <br />
        trie.search("app"); // return True
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= word.length, prefix.length &lt;= 2000</code>
        </li>
        <li>
          <code>word</code> and <code>prefix</code> consist only of lowercase
          English letters.
        </li>
        <li>
          At most{" "}
          <code>
            3 * 10<sup>4</sup>
          </code>{" "}
          calls <strong>in total</strong> will be made to <code>insert</code>,{" "}
          <code>search</code>, and <code>startsWith</code>.
        </li>
      </ul>
    </div>
  ),
  211: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Design a data structure that supports adding new words and finding if a
        string matches any previously added string.
      </p>

      <p>
        Implement the <code>WordDictionary</code> class:
      </p>

      <ul>
        <li>
          <code>WordDictionary()</code>&nbsp;Initializes the object.
        </li>
        <li>
          <code>void addWord(word)</code> Adds <code>word</code> to the data
          structure, it can be matched later.
        </li>
        <li>
          <code>bool search(word)</code>&nbsp;Returns <code>true</code> if there
          is any string in the data structure that matches <code>word</code>
          &nbsp;or <code>false</code> otherwise. <code>word</code> may contain
          dots <code>'.'</code> where dots can be matched with any letter.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example:</strong>
      </p>

      <pre>
        <strong>Input</strong>
        ["WordDictionary","addWord","addWord","addWord","search","search","search","search"]{" "}
        <br />
        [[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]] <br />
        <strong>Output</strong>
        <br />
        [null,null,null,null,false,true,true,true]
        <strong>Explanation</strong>
        <br />
        WordDictionary wordDictionary = new WordDictionary();
        <br />
        wordDictionary.addWord("bad");
        <br />
        wordDictionary.addWord("dad");
        <br />
        wordDictionary.addWord("mad");
        <br />
        wordDictionary.search("pad"); // return False
        <br />
        wordDictionary.search("bad"); // return True
        <br />
        wordDictionary.search(".ad"); // return True
        <br />
        wordDictionary.search("b.."); // return True
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= word.length &lt;= 25</code>
        </li>
        <li>
          <code>word</code> in <code>addWord</code> consists of lowercase
          English letters.
        </li>
        <li>
          <code>word</code> in <code>search</code> consist of <code>'.'</code>{" "}
          or lowercase English letters.
        </li>
        <li>
          There will be at most <code>2</code> dots in <code>word</code> for{" "}
          <code>search</code> queries.
        </li>
        <li>
          At most{" "}
          <code>
            10<sup>4</sup>
          </code>{" "}
          calls will be made to <code>addWord</code> and <code>search</code>.
        </li>
      </ul>
    </div>
  ),
  1065: (
    <div class="markdown-body div-width">
      <p>
        Given a <code>text</code>&nbsp;string and <code>words</code> (a list of
        strings), return all index pairs <code>[i, j]</code> so that the
        substring <code>text[i]...text[j]</code>&nbsp;is in the list of{" "}
        <code>words</code>.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input: </strong>text ={" "}
        <span id="example-input-1-1">"thestoryofleetcodeandme"</span>, words ={" "}
        <span id="example-input-1-2">["story","fleet","leetcode"]</span> <br />
        <strong>Output: </strong>
        <span id="example-output-1">[[3,7],[9,13],[10,17]]</span>
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input: </strong>text ={" "}
        <span id="example-input-2-1">"ababa"</span>, words ={" "}
        <span id="example-input-2-2">["aba","ab"]</span> <br />
        <strong>Output: </strong>
        <span id="example-output-2">[[0,1],[0,2],[2,3],[2,4]]</span>
        <br />
        <strong>Explanation: </strong>
        <br />
        Notice that matches can overlap, see "aba" is found in [0,2] and [2,4].
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>All strings contains only lowercase English letters.</li>
        <li>
          It's guaranteed that all strings in <code>words</code> are different.
        </li>
        <li>
          <code>1 &lt;= text.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= words.length &lt;= 20</code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 50</code>
        </li>
        <li>
          Return the pairs <code>[i,j]</code> in sorted order (i.e. sort them by
          their first coordinate in case of ties sort them by their second
          coordinate).
        </li>
      </ul>
    </div>
  ),
  1858: (
    <article role="main" class="blog-post">
      <p>
        Given an array of strings{" "}
        <code class="language-plaintext highlighter-rouge">words</code>, find
        the <strong>longest</strong> string in{" "}
        <code class="language-plaintext highlighter-rouge">words</code> such
        that <strong>every prefix</strong> of it is also in{" "}
        <code class="language-plaintext highlighter-rouge">words</code>.
      </p>
      <ul>
        <li>
          For example, let{" "}
          <code class="language-plaintext highlighter-rouge">
            words = ["a", "app", "ap"]
          </code>
          . The string{" "}
          <code class="language-plaintext highlighter-rouge">"app"</code> has
          prefixes{" "}
          <code class="language-plaintext highlighter-rouge">"ap"</code> and{" "}
          <code class="language-plaintext highlighter-rouge">"a"</code>, all of
          which are in words.
        </li>
      </ul>
      <p>
        Return{" "}
        <em>
          the string described above. If there is more than one string with the
          same length, return the <strong>lexicographically smallest</strong>{" "}
          one, and if no string exists, return{" "}
          <code class="language-plaintext highlighter-rouge">""</code>
        </em>
        .
      </p>{" "}
      <br />
      <p>
        <strong>Example 1:</strong>
      </p>
      <p>
        <strong>Input:</strong> words = [“k”,”ki”,”kir”,”kira”, “kiran”]
      </p>{" "}
      <p>
        <strong>Output:</strong> “kiran”
      </p>{" "}
      <p>
        <strong>Explanation:</strong> “kiran” has prefixes “kira”, “kir”, “ki”,
        and “k”, and all of them appear in words.
      </p>{" "}
      <br />
      <p>
        <strong>Example 2:</strong>
      </p>{" "}
      <p>
        <strong>Input:</strong> words = [“a”, “banana”, “app”, “appl”, “ap”,
        “apply”, “apple”]
      </p>{" "}
      <p>
        <strong>Output:</strong> “apple”
      </p>{" "}
      <p>
        <strong>Explanation:</strong> Both “apple” and “apply” have all their
        prefixes in words. However, “apple” is lexicographically smaller, so we
        return that.
      </p>{" "}
      <br />
      <p>
        <strong>Example 3:</strong>
      </p>
      <p>
        <strong>Input:</strong> words = [“abc”, “bc”, “ab”, “qwe”]
      </p>
      <p>
        <strong>Output:</strong> “”
      </p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= words.length &lt;= 10^5
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= words[i].length &lt;= 10^5
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= sum(words[i].length) &lt;= 10^5
          </code>
        </li>
      </ul>
    </article>
  ),
  2261: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and two integers <code>k</code>{" "}
        and <code>p</code>, return{" "}
        <em>
          the number of <strong>distinct subarrays,</strong> which have{" "}
          <strong>at most</strong>
        </em>{" "}
        <code>k</code> <em>elements </em>that are <em>divisible by</em>{" "}
        <code>p</code>.
      </p>

      <p>
        Two arrays <code>nums1</code> and <code>nums2</code> are said to be{" "}
        <strong>distinct</strong> if:
      </p>

      <ul>
        <li>
          They are of <strong>different</strong> lengths, or
        </li>
        <li>
          There exists <strong>at least</strong> one index <code>i</code> where{" "}
          <code>nums1[i] != nums2[i]</code>.
        </li>
      </ul>

      <p>
        A <strong>subarray</strong> is defined as a <strong>non-empty</strong>{" "}
        contiguous sequence of elements in an array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [
        <u>
          <strong>2</strong>
        </u>
        ,3,3,
        <u>
          <strong>2</strong>
        </u>
        ,
        <u>
          <strong>2</strong>
        </u>
        ], k = 2, p = 2 <br />
        <strong>Output:</strong> 11 <br />
        <strong>Explanation:</strong> <br />
        The elements at indices 0, 3, and 4 are divisible by p = 2. <br />
        The 11 distinct subarrays which have at most k = 2 elements divisible by
        2 are: <br />
        [2], [2,3], [2,3,3], [2,3,3,2], [3], [3,3], [3,3,2], [3,3,2,2], [3,2],
        [3,2,2], and [2,2]. <br />
        Note that the subarrays [2] and [3] occur more than once in nums, but
        they should each be counted only once. <br />
        The subarray [2,3,3,2,2] should not be counted because it has 3 elements
        that are divisible by 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4], k = 4, p = 1 <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation:</strong> <br />
        All element of nums are divisible by p = 1. <br />
        Also, every subarray of nums will have at most 4 elements that are
        divisible by 1. <br />
        Since all subarrays are distinct, the total number of subarrays
        satisfying all the constraints is 10.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 200</code>
        </li>
        <li>
          <code>1 &lt;= nums[i], p &lt;= 200</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= nums.length</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <p>
        Can you solve this problem in O(n<sup>2</sup>) time complexity?
      </p>
    </div>
  ),
  2416: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>words</code> of size <code>n</code>{" "}
        consisting of <strong>non-empty</strong> strings.
      </p>

      <p>
        We define the <strong>score</strong> of a string <code>term</code> as
        the <strong>number</strong> of strings <code>words[i]</code> such that{" "}
        <code>term</code> is a <strong>prefix</strong> of <code>words[i]</code>.
      </p>

      <ul>
        <li>
          For example, if <code>words = ["a", "ab", "abc", "cab"]</code>, then
          the score of <code>"ab"</code> is <code>2</code>, since{" "}
          <code>"ab"</code> is a prefix of both <code>"ab"</code> and{" "}
          <code>"abc"</code>.
        </li>
      </ul>

      <p>
        Return <em>an array </em>
        <code>answer</code>
        <em> of size </em>
        <code>n</code>
        <em> where </em>
        <code>answer[i]</code>
        <em>
          {" "}
          is the <strong>sum</strong> of scores of every{" "}
          <strong>non-empty</strong> prefix of{" "}
        </em>
        <code>words[i]</code>.
      </p>

      <p>
        <strong>Note</strong> that a string is considered as a prefix of itself.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["abc","ab","bc","b"] <br />
        <strong>Output:</strong> [5,4,3,2] <br />
        <strong>Explanation:</strong> The answer for each string is the
        following: <br />
        - "abc" has 3 prefixes: "a", "ab", and "abc". <br />
        - There are 2 strings with the prefix "a", 2 strings with the prefix
        "ab", and 1 string with the prefix "abc". <br />
        The total is answer[0] = 2 + 2 + 1 = 5. <br />
        - "ab" has 2 prefixes: "a" and "ab". <br />
        - There are 2 strings with the prefix "a", and 2 strings with the prefix
        "ab". <br />
        The total is answer[1] = 2 + 2 = 4. <br />
        - "bc" has 2 prefixes: "b" and "bc". <br />
        - There are 2 strings with the prefix "b", and 1 string with the prefix
        "bc".
        <br />
        The total is answer[2] = 2 + 1 = 3. <br />
        - "b" has 1 prefix: "b".
        <br />
        - There are 2 strings with the prefix "b".
        <br />
        The total is answer[3] = 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["abcd"]
        <br />
        <strong>Output:</strong> [4]
        <br />
        <strong>Explanation:</strong>
        <br />
        "abcd" has 4 prefixes: "a", "ab", "abc", and "abcd".
        <br />
        Each prefix has a score of one, so the total is answer[0] = 1 + 1 + 1 +
        1 = 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= words.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 1000</code>
        </li>
        <li>
          <code>words[i]</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  3042: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> string array{" "}
        <code>words</code>.
      </p>

      <p>
        Let's define a <strong>boolean</strong> function{" "}
        <code>isPrefixAndSuffix</code> that takes two strings, <code>str1</code>{" "}
        and <code>str2</code>:
      </p>

      <ul>
        <li>
          <code>isPrefixAndSuffix(str1, str2)</code> returns <code>true</code>{" "}
          if <code>str1</code> is <strong>both</strong> a{" "}
          <span
            data-keyword="string-prefix"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:r5u:"
                >
                  <div>prefix</div>
                </div>
              </div>
            </div>
          </span>{" "}
          and a{" "}
          <span
            data-keyword="string-suffix"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:r60:"
                >
                  <div>suffix</div>
                </div>
              </div>
            </div>
          </span>{" "}
          of <code>str2</code>, and <code>false</code> otherwise.
        </li>
      </ul>

      <p>
        For example, <code>isPrefixAndSuffix("aba", "ababa")</code> is{" "}
        <code>true</code> because <code>"aba"</code> is a prefix of{" "}
        <code>"ababa"</code> and also a suffix, but{" "}
        <code>isPrefixAndSuffix("abc", "abcd")</code> is <code>false</code>.
      </p>

      <p>
        Return{" "}
        <em>
          an integer denoting the <strong>number</strong> of index pairs{" "}
        </em>
        <code>(i, j)</code>
        <em> such that </em>
        <code>i &lt; j</code>
        <em>, and </em>
        <code>isPrefixAndSuffix(words[i], words[j])</code>
        <em> is </em>
        <code>true</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["a","aba","ababa","aa"] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> In this example, the counted index pairs
        are: <br />
        i = 0 and j = 1 because isPrefixAndSuffix("a", "aba") is true. <br />
        i = 0 and j = 2 because isPrefixAndSuffix("a", "ababa") is true. <br />
        i = 0 and j = 3 because isPrefixAndSuffix("a", "aa") is true. <br />i =
        1 and j = 2 because isPrefixAndSuffix("aba", "ababa") is true. <br />
        Therefore, the answer is 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["pa","papa","ma","mama"]
        <br />
        <strong>Output:</strong> 2<br />
        <strong>Explanation:</strong> In this example, the counted index pairs
        are:
        <br />
        i = 0 and j = 1 because isPrefixAndSuffix("pa", "papa") is true.
        <br />
        i = 2 and j = 3 because isPrefixAndSuffix("ma", "mama") is true.
        <br />
        Therefore, the answer is 2.{" "}
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["abab","ab"] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation: </strong>In this example, the only valid index pair
        is i = 0 and j = 1, and isPrefixAndSuffix("abab", "ab") is false.
        <br /> Therefore, the answer is 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= words.length &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 10</code>
        </li>
        <li>
          <code>words[i]</code> consists only of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  3093: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two arrays of strings <code>wordsContainer</code> and{" "}
        <code>wordsQuery</code>.
      </p>

      <p>
        For each <code>wordsQuery[i]</code>, you need to find a string from{" "}
        <code>wordsContainer</code> that has the{" "}
        <strong>longest common suffix</strong> with <code>wordsQuery[i]</code>.
        If there are two or more strings in <code>wordsContainer</code> that
        share the longest common suffix, find the string that is the{" "}
        <strong>smallest</strong> in length. If there are two or more such
        strings that have the <strong>same</strong> smallest length, find the
        one that occurred <strong>earlier</strong> in{" "}
        <code>wordsContainer</code>.
      </p>

      <p>
        Return <em>an array of integers </em>
        <code>ans</code>
        <em>, where </em>
        <code>ans[i]</code>
        <em> is the index of the string in </em>
        <code>wordsContainer</code>
        <em>
          {" "}
          that has the <strong>longest common suffix</strong> with{" "}
        </em>
        <code>wordsQuery[i]</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            wordsContainer = ["abcd","bcd","xbcd"], wordsQuery =
            ["cd","bcd","xyz"]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1,1,1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          Let's look at each <code>wordsQuery[i]</code> separately:
        </p>
        <ul>
          <li>
            For <code>wordsQuery[0] = "cd"</code>, strings from{" "}
            <code>wordsContainer</code> that share the longest common suffix{" "}
            <code>"cd"</code> are at indices 0, 1, and 2. Among these, the
            answer is the string at index 1 because it has the shortest length
            of 3.
          </li>
          <li>
            For <code>wordsQuery[1] = "bcd"</code>, strings from{" "}
            <code>wordsContainer</code> that share the longest common suffix{" "}
            <code>"bcd"</code> are at indices 0, 1, and 2. Among these, the
            answer is the string at index 1 because it has the shortest length
            of 3.
          </li>
          <li>
            For <code>wordsQuery[2] = "xyz"</code>, there is no string from{" "}
            <code>wordsContainer</code> that shares a common suffix. Hence the
            longest common suffix is <code>""</code>, that is shared with
            strings at index 0, 1, and 2. Among these, the answer is the string
            at index 1 because it has the shortest length of 3.
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            wordsContainer = ["abcdefgh","poiuygh","ghghgh"], wordsQuery =
            ["gh","acbfgh","acbfegh"]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[2,0,2]</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          Let's look at each <code>wordsQuery[i]</code> separately:
        </p>

        <ul>
          <li>
            For <code>wordsQuery[0] = "gh"</code>, strings from{" "}
            <code>wordsContainer</code> that share the longest common suffix{" "}
            <code>"gh"</code> are at indices 0, 1, and 2. Among these, the
            answer is the string at index 2 because it has the shortest length
            of 6.
          </li>
          <li>
            For <code>wordsQuery[1] = "acbfgh"</code>, only the string at index
            0 shares the longest common suffix <code>"fgh"</code>. Hence it is
            the answer, even though the string at index 2 is shorter.
          </li>
          <li>
            For <code>wordsQuery[2] = "acbfegh"</code>, strings from{" "}
            <code>wordsContainer</code> that share the longest common suffix{" "}
            <code>"gh"</code> are at indices 0, 1, and 2. Among these, the
            answer is the string at index 2 because it has the shortest length
            of 6.
          </li>
        </ul>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= wordsContainer.length, wordsQuery.length &lt;= 10
            <sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= wordsContainer[i].length &lt;= 5 * 10<sup>3</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= wordsQuery[i].length &lt;= 5 * 10<sup>3</sup>
          </code>
        </li>
        <li>
          <code>wordsContainer[i]</code> consists only of lowercase English
          letters.
        </li>
        <li>
          <code>wordsQuery[i]</code> consists only of lowercase English letters.
        </li>
        <li>
          Sum of <code>wordsContainer[i].length</code> is at most{" "}
          <code>
            5 * 10<sup>5</sup>
          </code>
          .
        </li>
        <li>
          Sum of <code>wordsQuery[i].length</code> is at most{" "}
          <code>
            5 * 10<sup>5</sup>
          </code>
          .
        </li>
      </ul>
    </div>
  ),
  308: (
    <div class="markdown-body div-width">
      <p>
        Given a 2D matrix <i>matrix</i>, find the sum of the elements inside the
        rectangle defined by its upper left corner (<i>row</i>1, <i>col</i>1)
        and lower right corner (<i>row</i>2,
        <i>col</i>2).
      </p>

      <p>
        <img
          src="https://leetcode.com/static/images/courses/range_sum_query_2d.png"
          border="0"
          alt="Range Sum Query 2D"
        />{" "}
        <br />
        <small>
          The above rectangle (with the red border) is defined by (row1, col1) ={" "}
          <b>(2, 1)</b>
          and (row2, col2) = <b>(4, 3)</b>, which contains sum = <b>8</b>.
        </small>
      </p>

      <p>
        <b>Example:</b>
        <br />
      </p>
      <pre>
        {`Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]`}
        sumRegion(2, 1, 4, 3) -&gt; 8 <br />
        update(3, 2, 2) <br />
        sumRegion(2, 1, 4, 3) -&gt; 10
      </pre>
      <p></p>

      <p>
        <b>Note:</b>
        <br />
      </p>
      <ul>
        <li>
          The matrix is only modifiable by the <i>update</i> function.
        </li>
        <li>
          You may assume the number of calls to <i>update</i> and{" "}
          <i>sumRegion</i> function is distributed evenly.
        </li>
        <li>
          You may assume that <i>row</i>1 ≤ <i>row</i>2 and <i>col</i>1 ≤{" "}
          <i>col</i>2.
        </li>
      </ul>
    </div>
  ),
  1409: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the array <code>queries</code> of positive integers between{" "}
        <code>1</code> and <code>m</code>, you have to process all{" "}
        <code>queries[i]</code> (from <code>i=0</code> to{" "}
        <code>i=queries.length-1</code>) according to the following rules:
      </p>

      <ul>
        <li>
          In the beginning, you have the permutation{" "}
          <code>P=[1,2,3,...,m]</code>.
        </li>
        <li>
          For the current <code>i</code>, find the position of{" "}
          <code>queries[i]</code> in the permutation <code>P</code> (
          <strong>indexing from 0</strong>) and then move this at the beginning
          of the permutation <code>P</code>. Notice that the position of{" "}
          <code>queries[i]</code> in <code>P</code> is the result for{" "}
          <code>queries[i]</code>.
        </li>
      </ul>

      <p>
        Return an array containing the result for the given <code>queries</code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queries = [3,1,2,1], m = 5 <br />
        <strong>Output:</strong> [2,1,2,1] <br />
        <strong>Explanation:</strong> The queries are processed as follow:{" "}
        <br />
        For i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is{" "}
        <strong>2</strong>, then we move 3 to the beginning of P resulting in
        P=[3,1,2,4,5]. <br />
        For i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is{" "}
        <strong>1</strong>, then we move 1 to the beginning of P resulting in
        P=[1,3,2,4,5]. <br />
        For i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is{" "}
        <strong>2</strong>, then we move 2 to the beginning of P resulting in
        P=[2,1,3,4,5]. <br />
        For i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is{" "}
        <strong>1</strong>, then we move 1 to the beginning of P resulting in
        P=[1,2,3,4,5]. <br />
        Therefore, the array containing the result is [2,1,2,1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queries = [4,1,2,2], m = 4 <br />
        <strong>Output:</strong> [3,1,2,0]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queries = [7,5,5,8,3], m = 8 <br />
        <strong>Output:</strong> [6,5,0,7,5]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= m &lt;= 10^3</code>
        </li>
        <li>
          <code>1 &lt;= queries.length &lt;= m</code>
        </li>
        <li>
          <code>1 &lt;= queries[i] &lt;= m</code>
        </li>
      </ul>
    </div>
  ),
  2907: (
    <article role="main" class="blog-post">
      <p>
        Given the <strong>0-indexed</strong> arrays <code>prices</code> and{" "}
        <code>profits</code> of length <code>n</code>. There are <code>n</code>{" "}
        items in an store where the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        item has a price of <code>prices[i]</code> and a profit of{" "}
        <code>profits[i]</code>.
      </p>

      <p>We have to pick three items with the following condition:</p>

      <ul>
        <li>
          <code>prices[i] &lt; prices[j] &lt; prices[k]</code> where{" "}
          <code>i &lt; j &lt; k</code>.
        </li>
      </ul>

      <p>
        If we pick items with indices <code>i</code>, <code>j</code> and{" "}
        <code>k</code> satisfying the above condition, the profit would be{" "}
        <code>profits[i] + profits[j] + profits[k]</code>.
      </p>

      <p>
        Return
        <em>
          {" "}
          the <strong>maximum profit</strong> we can get, and{" "}
        </em>
        <code>-1</code>
        <em>
          {" "}
          if it's not possible to pick three items with the given condition.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [10,2,3,4], profits = [100,2,7,10]{" "}
        <br />
        <strong>Output:</strong> 19 <br />
        <strong>Explanation:</strong> We can't pick the item with index i=0
        since there are no indices j and k such that the condition holds. <br />
        So the only triplet we can pick, are the items with indices 1, 2 and 3
        and it's a valid pick since prices[1] &lt; prices[2] &lt; prices[3].{" "}
        <br />
        The answer would be sum of their profits which is 2 + 7 + 10 = 19.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [1,2,3,4,5], profits = [1,5,3,4,6]{" "}
        <br />
        <strong>Output:</strong> 15 <br />
        <strong>Explanation:</strong> We can select any triplet of items since
        for each triplet of indices i, j and k such that i &lt; j &lt; k, the
        condition holds. <br />
        Therefore the maximum profit we can get would be the 3 most profitable
        items which are indices 1, 3 and 4.
        <br />
        The answer would be sum of their profits which is 5 + 4 + 6 = 15.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> prices = [4,3,2,1], profits = [33,20,19,87]
        <br />
        <strong>Output:</strong> -1
        <br />
        <strong>Explanation:</strong> We can't select any triplet of indices
        such that the condition holds, so we return -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>3 &lt;= prices.length == profits.length &lt;= 2000</code>
        </li>
        <li>
          <code>
            1 &lt;= prices[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= profits[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </article>
  ),
  2926: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code>.
      </p>

      <p>
        A <strong>subsequence</strong> of <code>nums</code> having length{" "}
        <code>k</code> and consisting of <strong>indices</strong>{" "}
        <code>
          i<sub>0</sub>&nbsp;&lt;&nbsp;i<sub>1</sub> &lt;&nbsp;... &lt; i
          <sub>k-1</sub>
        </code>{" "}
        is <strong>balanced</strong> if the following holds:
      </p>

      <ul>
        <li>
          <code>
            nums[i<sub>j</sub>] - nums[i<sub>j-1</sub>] &gt;= i<sub>j</sub> - i
            <sub>j-1</sub>
          </code>
          , for every <code>j</code> in the range <code>[1, k - 1]</code>.
        </li>
      </ul>

      <p>
        A <strong>subsequence</strong> of <code>nums</code> having length{" "}
        <code>1</code> is considered balanced.
      </p>

      <p>
        Return{" "}
        <em>
          an integer denoting the <strong>maximum</strong> possible{" "}
          <strong>sum of elements</strong> in a <strong>balanced</strong>{" "}
          subsequence of{" "}
        </em>
        <code>nums</code>.
      </p>

      <p>
        A <strong>subsequence</strong> of an array is a new{" "}
        <strong>non-empty</strong> array that is formed from the original array
        by deleting some (<strong>possibly none</strong>) of the elements
        without disturbing the relative positions of the remaining elements.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,3,5,6]
        <br />
        <strong>Output:</strong> 14
        <br />
        <strong>Explanation:</strong> In this example, the subsequence [3,5,6]
        consisting of indices 0, 2, and 3 can be selected.
        <br />
        nums[2] - nums[0] &gt;= 2 - 0.
        <br />
        nums[3] - nums[2] &gt;= 3 - 2.
        <br />
        Hence, it is a balanced subsequence, and its sum is the maximum among
        the balanced subsequences of nums.
        <br />
        The subsequence consisting of indices 1, 2, and 3 is also valid.
        <br />
        It can be shown that it is not possible to get a balanced subsequence
        with a sum greater than 14.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,-1,-3,8]
        <br />
        <strong>Output:</strong> 13
        <br />
        <strong>Explanation:</strong> In this example, the subsequence [5,8]
        consisting of indices 0 and 3 can be selected.
        <br />
        nums[3] - nums[0] &gt;= 3 - 0. <br />
        Hence, it is a balanced subsequence, and its sum is the maximum among
        the balanced subsequences of nums.
        <br />
        It can be shown that it is not possible to get a balanced subsequence
        with a sum greater than 13.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [-2,-1] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> In this example, the subsequence [-1] can
        be selected. <br />
        It is a balanced subsequence, and its sum is the maximum among the
        balanced subsequences of nums. <br />
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3187: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>peak</strong> in an array <code>arr</code> is an element that
        is <strong>greater</strong> than its previous and next element in{" "}
        <code>arr</code>.
      </p>

      <p>
        You are given an integer array <code>nums</code> and a 2D integer array{" "}
        <code>queries</code>.
      </p>

      <p>You have to process queries of two types:</p>

      <ul>
        <li>
          <code>
            queries[i] = [1, l<sub>i</sub>, r<sub>i</sub>]
          </code>
          , determine the count of <strong>peak</strong> elements in the{" "}
          <span
            data-keyword="subarray"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:r4q:"
                >
                  <div>subarray</div>
                </div>
              </div>
            </div>
          </span>{" "}
          <code>
            nums[l<sub>i</sub>..r<sub>i</sub>]
          </code>
          .
        </li>
        <li>
          <code>
            queries[i] = [2, index<sub>i</sub>, val<sub>i</sub>]
          </code>
          , change{" "}
          <code>
            nums[index<sub>i</sub>]
          </code>{" "}
          to{" "}
          <code>
            <font face="monospace">
              val<sub>i</sub>
            </font>
          </code>
          .
        </li>
      </ul>

      <p>
        Return an array <code>answer</code> containing the results of the
        queries of the first type in order.
      </p>

      <p>
        <strong>Notes:</strong>
      </p>

      <ul>
        <li>
          The <strong>first</strong> and the <strong>last</strong> element of an
          array or a subarray <strong>cannot</strong> be a peak.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            nums = [3,1,4,2,5], queries = [[2,3,4],[1,0,4]]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[0]</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          First query: We change <code>nums[3]</code> to 4 and <code>nums</code>{" "}
          becomes <code>[3,1,4,4,5]</code>.
        </p>
        <br />
        <p>
          Second query: The number of peaks in the <code>[3,1,4,4,5]</code> is
          0.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            nums = [4,1,4,2,1,5], queries = [[2,2,4],[1,0,2],[1,0,4]]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[0,1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          First query: <code>nums[2]</code> should become 4, but it is already
          set to 4.
        </p>{" "}
        <br />
        <p>
          Second query: The number of peaks in the <code>[4,1,4]</code> is 0.
        </p>
        <br />
        <p>
          Third query: The second 4 is a peak in the <code>[4,1,4,2,1]</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= queries.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>queries[i][0] == 1</code> or <code>queries[i][0] == 2</code>
        </li>
        <li>
          For all <code>i</code> that:
          <ul>
            <li>
              <code>queries[i][0] == 1</code>:{" "}
              <code>
                0 &lt;= queries[i][1] &lt;= queries[i][2] &lt;= nums.length - 1
              </code>
            </li>
            <li>
              <code>queries[i][0] == 2</code>:{" "}
              <code>0 &lt;= queries[i][1] &lt;= nums.length - 1</code>,{" "}
              <code>
                1 &lt;= queries[i][2] &lt;= 10<sup>5</sup>
              </code>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  ),
  587: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>trees</code> where{" "}
        <code>
          trees[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>{" "}
        represents the location of a tree in the garden.
      </p>

      <p>
        Fence the entire garden using the minimum length of rope, as it is
        expensive. The garden is well-fenced only if{" "}
        <strong>all the trees are enclosed</strong>.
      </p>

      <p>
        Return{" "}
        <em>
          the coordinates of trees that are exactly located on the fence
          perimeter
        </em>
        . You may return the answer in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/24/erect2-plane.jpg"
        style={{ width: 400, height: 393 }}
      />
      <pre>
        <strong>Input:</strong> trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]{" "}
        <br />
        <strong>Output:</strong> [[1,1],[2,0],[4,2],[3,3],[2,4]] <br />
        <strong>Explanation:</strong> All the trees will be on the perimeter of
        the fence except the tree at [2, 2], which will be inside the fence.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/24/erect1-plane.jpg"
        style={{ width: 400, height: 393 }}
      />
      <pre>
        <strong>Input:</strong> trees = [[1,2],[2,2],[4,2]] <br />
        <strong>Output:</strong> [[4,2],[2,2],[1,2]] <br />
        <strong>Explanation:</strong> The fence forms a line that passes through
        all the trees.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= trees.length &lt;= 3000</code>
        </li>
        <li>
          <code>trees[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100
          </code>
        </li>
        <li>
          All the given positions are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  892: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>n x n</code> <code>grid</code> where you have
        placed some <code>1 x 1 x 1</code> cubes. Each value{" "}
        <code>v = grid[i][j]</code> represents a tower of <code>v</code> cubes
        placed on top of cell <code>(i, j)</code>.
      </p>

      <p>
        After placing these cubes, you have decided to glue any directly
        adjacent cubes to each other, forming several irregular 3D shapes.
      </p>

      <p>
        Return <em>the total surface area of the resulting shapes</em>.
      </p>

      <p>
        <strong>Note:</strong> The bottom face of each shape counts toward its
        surface area.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/08/tmp-grid2.jpg"
        style={{ width: 162, height: 162 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[1,2],[3,4]] <br />
        <strong>Output:</strong> 34
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/08/tmp-grid4.jpg"
        style={{ width: 242, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[1,1,1],[1,0,1],[1,1,1]] <br />
        <strong>Output:</strong> 32
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/08/tmp-grid5.jpg"
        style={{ width: 242, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[2,2,2],[2,1,2],[2,2,2]] <br />
        <strong>Output:</strong> 46
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == grid.length == grid[i].length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 50</code>
        </li>
        <li>
          <code>0 &lt;= grid[i][j] &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  963: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of points in the <strong>X-Y</strong> plane{" "}
        <code>points</code> where{" "}
        <code>
          points[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>
        .
      </p>

      <p>
        Return{" "}
        <em>
          the minimum area of any rectangle formed from these points, with sides{" "}
          <strong>not necessarily parallel</strong> to the X and Y axes
        </em>
        . If there is not any such rectangle, return <code>0</code>.
      </p>

      <p>
        Answers within{" "}
        <code>
          10<sup>-5</sup>
        </code>{" "}
        of the actual answer will be accepted.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/21/1a.png"
        style={{ width: 398, height: 400 }}
      />
      <pre>
        <strong>Input:</strong> points = [[1,2],[2,1],[1,0],[0,1]] <br />
        <strong>Output:</strong> 2.00000 <br />
        <strong>Explanation:</strong> The minimum area rectangle occurs at
        [1,2],[2,1],[1,0],[0,1], with an area of 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/22/2.png"
        style={{ width: 400, height: 251 }}
      />
      <pre>
        <strong>Input:</strong> points = [[0,1],[2,1],[1,1],[1,0],[2,0]] <br />
        <strong>Output:</strong> 1.00000 <br />
        <strong>Explanation:</strong> The minimum area rectangle occurs at
        [1,0],[1,1],[2,1],[2,0], with an area of 1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2018/12/22/3.png"
        style={{ width: 383, height: 400 }}
      />
      <pre>
        <strong>Input:</strong> points = [[0,3],[1,2],[3,1],[1,3],[2,1]] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There is no possible rectangle to form
        from these points.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= points.length &lt;= 50</code>
        </li>
        <li>
          <code>points[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 4 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          All the given points are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  1232: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array&nbsp;<code>coordinates</code>,{" "}
        <code>coordinates[i] = [x, y]</code>, where <code>[x, y]</code>{" "}
        represents the coordinate of a point. Check if these points&nbsp;make a
        straight line in the XY plane.
      </p>

      <p>&nbsp;</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/10/15/untitled-diagram-2.jpg"
          style={{ width: 336, height: 336 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> coordinates =
        [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]] <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/10/09/untitled-diagram-1.jpg"
            style={{ width: 348, height: 336 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> coordinates =
        [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]] <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;=&nbsp;coordinates.length &lt;= 1000</code>
        </li>
        <li>
          <code>coordinates[i].length == 2</code>
        </li>
        <li>
          <code>
            -10^4 &lt;=&nbsp;coordinates[i][0],&nbsp;coordinates[i][1] &lt;=
            10^4
          </code>
        </li>
        <li>
          <code>coordinates</code>&nbsp;contains no duplicate point.
        </li>
      </ul>
    </div>
  ),
  1266: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        On a 2D plane, there are <code>n</code> points with integer coordinates{" "}
        <code>
          points[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>
        . Return{" "}
        <em>
          the <strong>minimum time</strong> in seconds to visit all the points
          in the order given by{" "}
        </em>
        <code>points</code>.
      </p>

      <p>You can move according to these rules:</p>

      <ul>
        <li>
          In <code>1</code> second, you can either:
          <ul>
            <li>move vertically by one&nbsp;unit,</li>
            <li>move horizontally by one unit, or</li>
            <li>
              move diagonally <code>sqrt(2)</code> units (in other words, move
              one unit vertically then one unit horizontally in <code>1</code>{" "}
              second).
            </li>
          </ul>
        </li>
        <li>
          You have to visit the points in the same order as they appear in the
          array.
        </li>
        <li>
          You are allowed to pass through points that appear later in the order,
          but these do not count as visits.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/11/14/1626_example_1.PNG"
        style={{ width: 500, height: 428 }}
      />
      <pre>
        <strong>Input:</strong> points = [[1,1],[3,4],[-1,0]] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation: </strong>One optimal path is <strong>[1,1]</strong>{" "}
        -&gt; [2,2] -&gt; [3,3] -&gt; <strong>[3,4] </strong>-&gt; [2,3] -&gt;
        [1,2] -&gt; [0,1] -&gt; <strong>[-1,0]</strong>
        Time from [1,1] to [3,4] = 3 seconds <br />
        Time from [3,4] to [-1,0] = 4 seconds <br />
        Total time = 7 seconds
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> points = [[3,2],[-2,2]] <br />
        <strong>Output:</strong> 5
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>points.length == n</code>
        </li>
        <li>
          <code>1 &lt;= n&nbsp;&lt;= 100</code>
        </li>
        <li>
          <code>points[i].length == 2</code>
        </li>
        <li>
          <code>
            -1000&nbsp;&lt;= points[i][0], points[i][1]&nbsp;&lt;= 1000
          </code>
        </li>
      </ul>
    </div>
  ),
  1401: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a circle represented as{" "}
        <code>(radius, xCenter, yCenter)</code> and an axis-aligned rectangle
        represented as <code>(x1, y1, x2, y2)</code>, where{" "}
        <code>(x1, y1)</code> are the coordinates of the bottom-left corner, and{" "}
        <code>(x2, y2)</code> are the coordinates of the top-right corner of the
        rectangle.
      </p>

      <p>
        Return <code>true</code>
        <em> if the circle and rectangle are overlapped otherwise return </em>
        <code>false</code>. In other words, check if there is{" "}
        <strong>any</strong> point{" "}
        <code>
          (x<sub>i</sub>, y<sub>i</sub>)
        </code>{" "}
        that belongs to the circle and the rectangle at the same time.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/02/20/sample_4_1728.png"
        style={{ width: 258, height: 167 }}
      />
      <pre>
        <strong>Input:</strong> radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1
        = -1, x2 = 3, y2 = 1 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Circle and rectangle share the point
        (1,0).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> radius = 1, xCenter = 1, yCenter = 1, x1 = 1, y1
        = -3, x2 = 2, y2 = -1 <br />
        <strong>Output:</strong> false
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/02/20/sample_2_1728.png"
        style={{ width: 150, height: 135 }}
      />
      <pre>
        <strong>Input:</strong> radius = 1, xCenter = 0, yCenter = 0, x1 = -1,
        y1 = 0, x2 = 0, y2 = 1 <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= radius &lt;= 2000</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= xCenter, yCenter &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= x1 &lt; x2 &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= y1 &lt; y2 &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2481: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>valid cut</strong> in a circle can be:
      </p>

      <ul>
        <li>
          A cut that is represented by a straight line that touches two points
          on the edge of the circle and passes through its center, or
        </li>
        <li>
          A cut that is represented by a straight line that touches one point on
          the edge of the circle and its center.
        </li>
      </ul>

      <p>Some valid and invalid cuts are shown in the figures below.</p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/29/alldrawio.png"
        style={{ width: 450, height: 174 }}
      />
      <p>
        Given the integer <code>n</code>, return{" "}
        <em>
          the <strong>minimum</strong> number of cuts needed to divide a circle
          into{" "}
        </em>
        <code>n</code>
        <em> equal slices</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/24/11drawio.png"
        style={{ width: 200, height: 200 }}
      />
      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        The above figure shows how cutting the circle twice through the middle
        divides it into 4 equal slices.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/24/22drawio.png"
        style={{ width: 200, height: 201 }}
      />
      <pre>
        <strong>Input:</strong> n = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> <br />
        At least 3 cuts are needed to divide the circle into 3 equal slices.{" "}
        <br />
        It can be shown that less than 3 cuts cannot result in 3 slices of equal
        size and shape. <br />
        Also note that the first cut will not divide the circle into distinct
        parts.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  3025: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a 2D array <code>points</code> of size <code>n x 2</code>{" "}
        representing integer coordinates of some points on a 2D plane, where{" "}
        <code>
          points[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>
        .
      </p>

      <p>
        Count the number of pairs of points <code>(A, B)</code>, where
      </p>

      <ul>
        <li>
          <code>A</code> is on the <strong>upper left</strong> side of{" "}
          <code>B</code>, and
        </li>
        <li>
          there are no other points in the rectangle (or line) they make (
          <strong>including the border</strong>).
        </li>
      </ul>

      <p>Return the count.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">points = [[1,1],[2,2],[3,3]]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/01/04/example1alicebob.png"
            style={{ width: 427, height: 350 }}
          />
        </p>
        <p>
          There is no way to choose <code>A</code> and <code>B</code> so{" "}
          <code>A</code> is on the upper left side of <code>B</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">points = [[6,2],[4,4],[2,6]]</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          <img
            alt=""
            height="365"
            src="https://assets.leetcode.com/uploads/2024/06/25/t2.jpg"
            width="1321"
          />
        </p>

        <ul>
          <li>
            The left one is the pair <code>(points[1], points[0])</code>, where{" "}
            <code>points[1]</code> is on the upper left side of{" "}
            <code>points[0]</code> and the rectangle is empty.
          </li>
          <li>
            The middle one is the pair <code>(points[2], points[1])</code>, same
            as the left one it is a valid pair.
          </li>
          <li>
            The right one is the pair <code>(points[2], points[0])</code>, where{" "}
            <code>points[2]</code> is on the upper left side of{" "}
            <code>points[0]</code>, but <code>points[1]</code> is inside the
            rectangle so it's not a valid pair.
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">points = [[3,1],[1,3],[1,1]]</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/06/25/t3.jpg"
            style={{ width: 1269, height: 350 }}
          />
        </p>

        <ul>
          <li>
            The left one is the pair <code>(points[2], points[0])</code>, where{" "}
            <code>points[2]</code> is on the upper left side of{" "}
            <code>points[0]</code> and there are no other points on the line
            they form. Note that it is a valid state when the two points form a
            line.
          </li>
          <li>
            The middle one is the pair <code>(points[1], points[2])</code>, it
            is a valid pair same as the left one.
          </li>
          <li>
            The right one is the pair <code>(points[1], points[0])</code>, it is
            not a valid pair as <code>points[2]</code> is on the border of the
            rectangle.
          </li>
        </ul>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n &lt;= 50</code>
        </li>
        <li>
          <code>points[i].length == 2</code>
        </li>
        <li>
          <code>0 &lt;= points[i][0], points[i][1] &lt;= 50</code>
        </li>
        <li>
          All <code>points[i]</code> are distinct.
        </li>
      </ul>
    </div>
  ),
  3047: (
    <>
      <div class="elfjS" data-track-load="description_content">
        <p>
          There exist <code>n</code> rectangles in a 2D plane with edges
          parallel to the x and y axis. You are given two 2D integer
          arrays&nbsp;<code>bottomLeft</code> and <code>topRight</code>
          &nbsp;where <code>bottomLeft[i] = [a_i, b_i]</code> and{" "}
          <code>topRight[i] = [c_i, d_i]</code> represent&nbsp;the{" "}
          <strong>bottom-left</strong> and <strong>top-right</strong>{" "}
          coordinates of the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          rectangle, respectively.
        </p>
        <p>
          You need to find the <strong>maximum</strong> area of a{" "}
          <strong>square</strong> that can fit inside the intersecting region of
          at least two rectangles. Return <code>0</code> if such a square does
          not exist.
        </p>
        <p>&nbsp;</p>
        <p>
          <strong class="example">Example 1:</strong>
        </p>
        <code>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/01/05/example12.png"
            style={{
              padding: 10,
              background: "rgb(255, 255, 255)",
              borderRadius: "0.5rem",
              width: 444,
              height: 364,
            }}
          />
        </code>
        <p>
          <strong>Input:</strong> bottomLeft = [[1,1],[2,2],[3,1]], topRight =
          [[3,3],[4,4],[6,6]]
        </p>
        <br />
        <p>
          <strong>Output:</strong> 1
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          A square with side length 1 can fit inside either the intersecting
          region of rectangles 0 and 1 or the intersecting region of rectangles
          1 and 2. Hence the maximum area is 1. It can be shown that a square
          with a greater side length can not fit inside any intersecting region
          of two rectangles.
        </p>
        <p>
          <strong class="example">Example 2:</strong>
        </p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2024/07/15/diag.png"
          style={{
            padding: 10,
            background: "rgb(255, 255, 255)",
            borderRadius: "0.5rem",
            width: 444,
            height: 364,
          }}
        />
        <p>
          <strong>Input:</strong> bottomLeft = [[1,1],[1,3],[1,5]], topRight =
          [[5,5],[5,7],[5,9]]
        </p>
        <br />
        <p>
          <strong>Output:</strong> 4
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          A square with side length 2 can fit inside either the intersecting
          region of rectangles 0 and 1 or the intersecting region of rectangles
          1 and 2. Hence the maximum area is <code>2 * 2 = 4</code>. It can be
          shown that a square with a greater side length can not fit inside any
          intersecting region of two rectangles.
        </p>
        <p>
          <strong class="example">Example 3:</strong>
        </p>
        <code>
          {" "}
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/01/04/rectanglesexample2.png"
            style={{
              padding: 10,
              background: "rgb(255, 255, 255)",
              borderRadius: "0.5rem",
              width: 444,
              height: 364,
            }}
          />{" "}
        </code>
        <p>
          <strong>Input:</strong> bottomLeft = [[1,1],[2,2],[1,2]], topRight =
          [[3,3],[4,4],[3,4]]
        </p>
        <br />
        <p>
          <strong>Output:</strong> 1
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          A square with side length 1 can fit inside the intersecting region of
          any two rectangles. Also, no larger square can, so the maximum area is
          1. Note that the region can be formed by the intersection of more than
          2 rectangles.
        </p>
        <p>
          <strong class="example">Example 4:</strong>
        </p>
        <code>
          {" "}
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/01/04/rectanglesexample3.png"
            style={{
              padding: 10,
              background: "rgb(255, 255, 255)",
              borderRadius: "0.5rem",
              width: 444,
              height: 364,
            }}
          />{" "}
        </code>
        <p>
          <strong>Input:&nbsp;</strong>bottomLeft = [[1,1],[3,3],[3,1]],
          topRight = [[2,2],[4,4],[4,2]]
        </p>
        <br />
        <p>
          <strong>Output:</strong> 0
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>No pair of rectangles intersect, hence, the answer is 0.</p>
        <p>&nbsp;</p>
        <p>
          <strong>Constraints:</strong>
        </p>
        <ul>
          <li>
            <code>n == bottomLeft.length == topRight.length</code>
          </li>
          <li>
            <code>
              2 &lt;= n &lt;= 10<sup>3</sup>
            </code>
          </li>
          <li>
            <code>bottomLeft[i].length == topRight[i].length == 2</code>
          </li>
          <li>
            <code>
              1 &lt;= bottomLeft[i][0], bottomLeft[i][1] &lt;= 10<sup>7</sup>
            </code>
          </li>
          <li>
            <code>
              1 &lt;= topRight[i][0], topRight[i][1] &lt;= 10<sup>7</sup>
            </code>
          </li>
          <li>
            <code>bottomLeft[i][0] &lt; topRight[i][0]</code>
          </li>
          <li>
            <code>bottomLeft[i][1] &lt; topRight[i][1]</code>
          </li>
        </ul>
      </div>
    </>
  ),
  459: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, check if it can be constructed by taking
        a substring of it and appending multiple copies of the substring
        together.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abab"
        <strong>Output:</strong> true
        <strong>Explanation:</strong> It is the substring "ab" twice. <br />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aba" <br />
        <strong>Output:</strong> false
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcabcabcabc" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> It is the substring "abc" four times or
        the substring "abcabc" twice.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  686: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>a</code> and <code>b</code>, return{" "}
        <em>the minimum number of times you should repeat string </em>
        <code>a</code>
        <em> so that string</em> <code>b</code> <em>is a substring of it</em>.
        If it is impossible for <code>b</code>​​​​​​ to be a substring of{" "}
        <code>a</code> after repeating it, return <code>-1</code>.
      </p>

      <p>
        <strong>Notice:</strong> string <code>"abc"</code> repeated 0 times is{" "}
        <code>""</code>, repeated 1 time is <code>"abc"</code> and repeated 2
        times is <code>"abcabc"</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = "abcd", b = "cdabcdab" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> We return 3 because by repeating a three
        times "ab<strong>cdabcdab</strong>cd", b is a substring of it.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = "a", b = "aa" <br />
        <strong>Output:</strong> 2
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= a.length, b.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>a</code> and <code>b</code> consist of lowercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  796: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>s</code> and <code>goal</code>, return{" "}
        <code>true</code> <em>if and only if</em> <code>s</code>{" "}
        <em>can become</em> <code>goal</code>{" "}
        <em>
          after some number of <strong>shifts</strong> on
        </em>{" "}
        <code>s</code>.
      </p>

      <p>
        A <strong>shift</strong> on <code>s</code> consists of moving the
        leftmost character of <code>s</code> to the rightmost position.
      </p>

      <ul>
        <li>
          For example, if <code>s = "abcde"</code>, then it will be{" "}
          <code>"bcdea"</code> after one shift.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = "abcde", goal = "cdeab" <br />
        <strong>Output:</strong> true <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = "abcde", goal = "abced" <br />
        <strong>Output:</strong> false
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length, goal.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code> and <code>goal</code> consist of lowercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  1023: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of strings <code>queries</code> and a string{" "}
        <code>pattern</code>, return a boolean array <code>answer</code> where{" "}
        <code>answer[i]</code> is <code>true</code> if <code>queries[i]</code>{" "}
        matches <code>pattern</code>, and <code>false</code> otherwise.
      </p>

      <p>
        A query word <code>queries[i]</code> matches <code>pattern</code> if you
        can insert lowercase English letters pattern so that it equals the
        query. You may insert each character at any position and you may not
        insert any characters.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queries =
        ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"],
        pattern = "FB" <br />
        <strong>Output:</strong> [true,false,true,true,false] <br />
        <strong>Explanation:</strong> "FooBar" can be generated like this "F" +
        "oo" + "B" + "ar". <br />
        "FootBall" can be generated like this "F" + "oot" + "B" + "all". <br />
        "FrameBuffer" can be generated like this "F" + "rame" + "B" + "uffer".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queries =
        ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"],
        pattern = "FoBa" <br />
        <strong>Output:</strong> [true,false,true,false,false] <br />
        <strong>Explanation:</strong> "FooBar" can be generated like this "Fo" +
        "o" + "Ba" + "r". <br />
        "FootBall" can be generated like this "Fo" + "ot" + "Ba" + "ll".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queries =
        ["FooBar","FooBarTest","FootBall","FrameBuffer","ForceFeedBack"],
        pattern = "FoBaT" <br />
        <strong>Output:</strong> [false,true,false,false,false] <br />
        <strong>Explanation:</strong> "FooBarTest" can be generated like this
        "Fo" + "o" + "Ba" + "r" + "T" + "est".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= pattern.length, queries.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= queries[i].length &lt;= 100</code>
        </li>
        <li>
          <code>queries[i]</code> and <code>pattern</code> consist of English
          letters.
        </li>
      </ul>
    </div>
  ),
  1455: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <code>sentence</code> that consists of some words separated by a{" "}
        <strong>single space</strong>, and a <code>searchWord</code>, check if{" "}
        <code>searchWord</code> is a prefix of any word in <code>sentence</code>
        .
      </p>

      <p>
        Return <em>the index of the word in </em>
        <code>sentence</code>
        <em>
          {" "}
          (<strong>1-indexed</strong>) where{" "}
        </em>
        <code>searchWord</code>
        <em> is a prefix of this word</em>. If <code>searchWord</code> is a
        prefix of more than one word, return the index of the first word{" "}
        <strong>(minimum index)</strong>. If there is no such word return{" "}
        <code>-1</code>.
      </p>

      <p>
        A <strong>prefix</strong> of a string <code>s</code> is any leading
        contiguous substring of <code>s</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> sentence = "i love eating burger", searchWord =
        "burg" <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> "burg" is prefix of "burger" which is the
        4th word in the sentence.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> sentence = "this problem is an easy problem",
        searchWord = "pro" <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> "pro" is prefix of "problem" which is the
        2nd and the 6th word in the sentence, but we return 2 as it's the
        minimal index.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> sentence = "i am tired", searchWord = "you"{" "}
        <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> "you" is not a prefix of any word in the
        sentence.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= sentence.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= searchWord.length &lt;= 10</code>
        </li>
        <li>
          <code>sentence</code> consists of lowercase English letters and
          spaces.
        </li>
        <li>
          <code>searchWord</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  1668: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        For a string <code>sequence</code>, a string <code>word</code> is{" "}
        <strong>
          <code>k</code>-repeating
        </strong>{" "}
        if <code>word</code> concatenated <code>k</code> times is a substring of{" "}
        <code>sequence</code>. The <code>word</code>'s{" "}
        <strong>
          maximum <code>k</code>-repeating value
        </strong>{" "}
        is the highest value <code>k</code> where <code>word</code> is{" "}
        <code>k</code>-repeating in <code>sequence</code>. If <code>word</code>{" "}
        is not a substring of <code>sequence</code>, <code>word</code>'s maximum{" "}
        <code>k</code>-repeating value is <code>0</code>.
      </p>

      <p>
        Given strings <code>sequence</code> and <code>word</code>, return{" "}
        <em>
          the{" "}
          <strong>
            maximum <code>k</code>-repeating value
          </strong>{" "}
          of <code>word</code> in <code>sequence</code>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> sequence = "ababc", word = "ab" <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation: </strong>"abab" is a substring in "<u>abab</u>c".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> sequence = "ababc", word = "ba" <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation: </strong>"ba" is a substring in "a<u>ba</u>bc".
        "baba" is not a substring in "ababc".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> sequence = "ababc", word = "ac" <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation: </strong>"ac" is not a substring in "ababc".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= sequence.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= word.length &lt;= 100</code>
        </li>
        <li>
          <code>sequence</code> and <code>word</code>&nbsp;contains only
          lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  428: (
    <div class="markdown-body div-width">
      <p>
        Serialization is the process of converting a data structure or object
        into a sequence of bits so that it can be stored in a file or memory
        buffer, or transmitted across a network connection link to be
        reconstructed later in the same or another computer environment.
      </p>

      <p>
        Design an algorithm to serialize and deserialize an N-ary tree. An N-ary
        tree is a rooted tree in which each node has no more than N children.
        There is no restriction on how your serialization/deserialization
        algorithm should work. You just need to ensure that an N-ary tree can be
        serialized to a string and this string can be deserialized to the
        original tree structure.
      </p>

      <p>
        For example, you may serialize the following <code>3-ary</code> tree
      </p>

      <p>&nbsp;</p>

      <p>
        <img
          alt=""
          src="https://leetcode.ca/all/img/428.png"
          style={{ width: 400 }}
        />
      </p>

      <p>&nbsp;</p>

      <p>
        as <code>[1 [3[5 6] 2 4]]</code>. You do not necessarily need to follow
        this format, so please be creative and come up with different approaches
        yourself.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          <code>N</code> is in the range of <code> [1, 1000]</code>
        </li>
        <li>
          Do not use class member/global/static variables to store states. Your
          serialize and deserialize algorithms should be stateless.
        </li>
      </ul>
    </div>
  ),
  429: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an n-ary tree, return the <em>level order</em> traversal of its
        nodes' values.
      </p>

      <p>
        <em>
          Nary-Tree input serialization is represented in their level order
          traversal, each group of children is separated by the null value (See
          examples).
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png"
          style={{ width: "100%", maxWidth: 300 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root = [1,null,3,2,4,null,5,6] <br />
        <strong>Output:</strong> [[1],[3,2,4],[5,6]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png"
          style={{ width: 296, height: 241 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,
        <br />
        null,9,10,null,null,11,null,12,null,13,null,null,14] <br />
        <strong>Output:</strong> [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The height of the n-ary tree is less than or equal to{" "}
          <code>1000</code>
        </li>
        <li>
          The total number of nodes is between{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
        </li>
      </ul>
    </div>
  ),
  559: (
    <div class="elfjS" data-track-load="description_content">
      <p>Given a n-ary tree, find its maximum depth.</p>

      <p>
        The maximum depth is the number of nodes along the longest path from the
        root node down to the farthest leaf node.
      </p>

      <p>
        <em>
          Nary-Tree input serialization is represented in their level order
          traversal, each group of children is separated by the null value (See
          examples).
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png"
          style={{ width: "100%", maxWidth: 300 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root = [1,null,3,2,4,null,5,6] <br />
        <strong>Output:</strong> 3
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png"
          style={{ width: 296, height: 241 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root =
        [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
        <br /> <strong>Output:</strong> 5
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The total number of nodes is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          The depth of the n-ary tree is less than or equal to <code>1000</code>
          .
        </li>
      </ul>
    </div>
  ),
  1245: (
    <div class="markdown-body div-width">
      <p>
        Given an undirected tree, return&nbsp;its diameter: the number of{" "}
        <strong>edges</strong> in a longest path in that tree.
      </p>

      <p>
        The tree is given as an array&nbsp;of&nbsp;<code>edges</code>&nbsp;where{" "}
        <code>edges[i] = [u, v]</code> is a bidirectional edge between
        nodes&nbsp;<code>u</code> and <code>v</code>.&nbsp; Each node
        has&nbsp;labels in the set <code>{`{0, 1, ..., edges.length}`}</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/06/14/1397_example_1.PNG"
          style={{ width: 226, height: 233 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> edges = [[0,1],[0,2]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation: </strong> <br />A longest path of the tree is the
        path 1 - 0 - 2.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2019/06/14/1397_example_2.PNG"
          style={{ width: 350, height: 316 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]
        <br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation: </strong>
        <br />A longest path of the tree is the path 3 - 2 - 1 - 4 - 5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= edges.length &lt;&nbsp;10^4</code>
        </li>
        <li>
          <code>edges[i][0] != edges[i][1]</code>
        </li>
        <li>
          <code>0 &lt;= edges[i][j] &lt;= edges.length</code>
        </li>
        <li>The given edges form an undirected tree.</li>
      </ul>
    </div>
  ),
  1506: (
    <div class="markdown-body div-width">
      <div class="content__u3I1 question-content__JfgR">
        <div>
          <p>
            Given all the nodes of an&nbsp;
            <a
              aria-describedby="sk-tooltip-12056"
              data-sk="tooltip_parent"
              data-stringify-link="https://leetcode.com/articles/introduction-to-n-ary-trees"
              delay="150"
              href="https://slack-redir.net/link?url=https%3A%2F%2Fleetcode.com%2Farticles%2Fintroduction-to-n-ary-trees"
              rel="noopener noreferrer"
              target="_blank"
            >
              N-ary tree
            </a>
            &nbsp;as an array &nbsp;<code>Node[] tree</code>&nbsp;where
            each&nbsp;node has a&nbsp;<strong>unique value</strong>.
          </p>

          <p>
            Find and return the <strong>root</strong> of the N-ary tree.
          </p>

          <p>
            <em>
              Nary-Tree input serialization&nbsp;is represented in their level
              order traversal, each group of children is separated by the null
              value (See examples).
            </em>
          </p>

          <p>
            <strong>Follow up:</strong> Can you find the root of the tree with
            O(1) additional memory space?
          </p>

          <p>
            <strong>Notes:</strong>
          </p>

          <ol>
            <li>The following input is only given to testing purposes.</li>
            <li>
              You will receive as input a list of all nodes of the n-ary tree in
              any order.
            </li>
          </ol>

          <p>&nbsp;</p>
          <p>
            <strong>Example 1:</strong>
          </p>

          <p>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png"
              style={{ width: "100%", maxWidth: 300 }}
            />
          </p>

          <pre>
            <strong>Input:</strong> [1,null,3,2,4,null,5,6]
            <br />
            <strong>Output:</strong> [1,null,3,2,4,null,5,6]
          </pre>

          <p>
            <strong>Example 2:</strong>
          </p>

          <p>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png"
              style={{ width: 296, height: 241 }}
            />
          </p>

          <pre>
            <strong>Input:</strong>{" "}
            [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]{" "}
            <br />
            <strong>Output:</strong>{" "}
            [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
          </pre>

          <p>&nbsp;</p>
          <p>
            <strong>Constraints:</strong>
          </p>

          <ul>
            <li>
              The total number of nodes is between <code>[1,&nbsp;5*10^4]</code>
              .
            </li>
            <li>Each&nbsp;node has a unique value.</li>
          </ul>
        </div>
      </div>
    </div>
  ),
  1522: (
    <div>
      <p>
        Given a&nbsp;<code>root</code>&nbsp;of an{" "}
        <a href="https://leetcode.com/articles/introduction-to-n-ary-trees/">
          N-ary tree
        </a>
        ,&nbsp;you need to compute the length of the diameter of the tree.
      </p>

      <p>
        The diameter of an N-ary tree is the length of the&nbsp;
        <strong>longest</strong>&nbsp;path between any two nodes in
        the&nbsp;tree. This path may or may not pass through the root.
      </p>

      <p>
        (
        <em>
          Nary-Tree input serialization&nbsp;is represented in their level order
          traversal, each group of children is separated by the null value.)
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/07/19/sample_2_1897.png"
          style={{ width: 324, height: 173 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root = [1,null,3,2,4,null,5,6] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation: </strong>Diameter is shown in red color.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/07/19/sample_1_1897.png"
            style={{ width: 253, height: 246 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1,null,2,null,3,4,null,5,null,6] <br />
        <strong>Output:</strong> 4
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/07/19/sample_3_1897.png"
          style={{ width: 369, height: 326 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> root =
        [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]{" "}
        <br />
        <strong>Output:</strong> 7
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The depth of the n-ary tree is less than or equal to <code>1000</code>
          .
        </li>
        <li>
          The total number of nodes is between <code>[0,&nbsp;10^4]</code>.
        </li>
      </ul>
    </div>
  ),
  1719: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array <code>pairs</code>, where{" "}
        <code>
          pairs[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>
        , and:
      </p>

      <ul>
        <li>There are no duplicates.</li>
        <li>
          <code>
            x<sub>i</sub> &lt; y<sub>i</sub>
          </code>
        </li>
      </ul>

      <p>
        Let <code>ways</code> be the number of rooted trees that satisfy the
        following conditions:
      </p>

      <ul>
        <li>
          The tree consists of nodes whose values appeared in <code>pairs</code>
          .
        </li>
        <li>
          A pair{" "}
          <code>
            [x<sub>i</sub>, y<sub>i</sub>]
          </code>{" "}
          exists in <code>pairs</code> <strong>if and only if</strong>{" "}
          <code>
            x<sub>i</sub>
          </code>{" "}
          is an ancestor of{" "}
          <code>
            y<sub>i</sub>
          </code>{" "}
          or{" "}
          <code>
            y<sub>i</sub>
          </code>{" "}
          is an ancestor of{" "}
          <code>
            x<sub>i</sub>
          </code>
          .
        </li>
        <li>
          <strong>Note:</strong> the tree does not have to be a binary tree.
        </li>
      </ul>

      <p>
        Two ways are considered to be different if there is at least one node
        that has different parents in both ways.
      </p>

      <p>Return:</p>

      <ul>
        <li>
          <code>0</code> if <code>ways == 0</code>
        </li>
        <li>
          <code>1</code> if <code>ways == 1</code>
        </li>
        <li>
          <code>2</code> if <code>ways &gt; 1</code>
        </li>
      </ul>

      <p>
        A <strong>rooted tree</strong> is a tree that has a single root node,
        and all edges are oriented to be outgoing from the root.
      </p>

      <p>
        An <strong>ancestor</strong> of a node is any node on the path from the
        root to that node (excluding the node itself). The root has no
        ancestors.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/03/trees2.png"
        style={{ width: 208, height: 221 }}
      />
      <pre>
        <strong>Input:</strong> pairs = [[1,2],[2,3]] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> There is exactly one valid rooted tree,
        which is shown in the above figure.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/03/tree.png"
        style={{ width: 234, height: 241 }}
      />
      <pre>
        <strong>Input:</strong> pairs = [[1,2],[2,3],[1,3]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> There are multiple valid rooted trees.
        Three of them are shown in the above figures.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> pairs = [[1,2],[2,3],[2,4],[1,5]] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There are no valid rooted trees.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= pairs.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= x<sub>i </sub>&lt; y<sub>i</sub> &lt;= 500
          </code>
        </li>
        <li>
          The elements in <code>pairs</code> are unique.
        </li>
      </ul>
    </div>
  ),
  3067: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an unrooted weighted tree with <code>n</code> vertices
        representing servers numbered from <code>0</code> to <code>n - 1</code>,
        an array <code>edges</code> where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>, weight<sub>i</sub>]
        </code>{" "}
        represents a bidirectional edge between vertices{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        of weight{" "}
        <code>
          weight<sub>i</sub>
        </code>
        . You are also given an integer <code>signalSpeed</code>.
      </p>

      <p>
        Two servers <code>a</code> and <code>b</code> are{" "}
        <strong>connectable</strong> through a server <code>c</code> if:
      </p>

      <ul>
        <li>
          <code>a &lt; b</code>, <code>a != c</code> and <code>b != c</code>.
        </li>
        <li>
          The distance from <code>c</code> to <code>a</code> is divisible by{" "}
          <code>signalSpeed</code>.
        </li>
        <li>
          The distance from <code>c</code> to <code>b</code> is divisible by{" "}
          <code>signalSpeed</code>.
        </li>
        <li>
          The path from <code>c</code> to <code>b</code> and the path from{" "}
          <code>c</code> to <code>a</code> do not share any edges.
        </li>
      </ul>

      <p>
        Return <em>an integer array</em> <code>count</code> <em>of length</em>{" "}
        <code>n</code> <em>where</em> <code>count[i]</code>{" "}
        <em>
          is the <strong>number</strong> of server pairs that are{" "}
          <strong>connectable</strong> through
        </em>{" "}
        <em>the server</em> <code>i</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2024/01/21/example22.png"
        style={{
          width: 438,
          height: 243,
          padding: 10,
          background: "rgb(255, 255, 255)",
          borderRadius: "0.5rem;",
        }}
      />
      <pre>
        <strong>Input:</strong> edges =
        [[0,1,1],[1,2,5],[2,3,13],[3,4,9],[4,5,2]], signalSpeed = 1 <br />
        <strong>Output:</strong> [0,4,6,6,4,0] <br />
        <strong>Explanation:</strong> Since signalSpeed is 1, count[c] is equal
        to the number of pairs of paths that start at c and do not share any
        edges. <br />
        In the case of the given path graph, count[c] is equal to the number of
        servers to the left of c multiplied by the servers to the right of c.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2024/01/21/example11.png"
        style={{
          width: 438,
          height: 243,
          padding: 10,
          background: "rgb(255, 255, 255)",
          borderRadius: "0.5rem;",
        }}
      />
      <pre>
        <strong>Input:</strong> edges =
        [[0,6,3],[6,5,3],[0,3,1],[3,2,7],[3,1,6],[3,4,2]], signalSpeed = 3{" "}
        <br />
        <strong>Output:</strong> [2,0,0,0,0,0,2] <br />
        <strong>Explanation:</strong> Through server 0, there are 2 pairs of
        connectable servers: (4, 5) and (4, 6). <br />
        Through server 6, there are 2 pairs of connectable servers: (4, 5) and
        (0, 5). <br />
        It can be shown that no two servers are connectable through servers
        other than 0 and 6.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>edges[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            edges[i] = [a<sub>i</sub>, b<sub>i</sub>, weight<sub>i</sub>]
          </code>
        </li>
        <li>
          <code>
            1 &lt;= weight<sub>i</sub> &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= signalSpeed &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          The input is generated such that <code>edges</code> represents a valid
          tree.
        </li>
      </ul>
    </div>
  ),
  3203: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There exist two <strong>undirected </strong>trees with <code>n</code>{" "}
        and <code>m</code> nodes, numbered from <code>0</code> to{" "}
        <code>n - 1</code> and from <code>0</code> to <code>m - 1</code>,
        respectively. You are given two 2D integer arrays <code>edges1</code>{" "}
        and <code>edges2</code> of lengths <code>n - 1</code> and{" "}
        <code>m - 1</code>, respectively, where{" "}
        <code>
          edges1[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        in the first tree and{" "}
        <code>
          edges2[i] = [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        in the second tree.
      </p>

      <p>
        You must connect one node from the first tree with another node from the
        second tree with an edge.
      </p>

      <p>
        Return the <strong>minimum </strong>possible <strong>diameter </strong>
        of the resulting tree.
      </p>

      <p>
        The <strong>diameter</strong> of a tree is the length of the{" "}
        <em>longest</em> path between any two nodes in the tree.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2024/04/22/example11-transformed.png"
        />
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            edges1 = [[0,1],[0,2],[0,3]], edges2 = [[0,1]]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          We can obtain a tree of diameter 3 by connecting node 0 from the first
          tree with any node from the second tree.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2024/04/22/example211.png"
      />
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            edges1 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], edges2 =
            [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]
          </span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">5</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          We can obtain a tree of diameter 5 by connecting node 0 from the first
          tree with node 0 from the second tree.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n, m &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges1.length == n - 1</code>
        </li>
        <li>
          <code>edges2.length == m - 1</code>
        </li>
        <li>
          <code>edges1[i].length == edges2[i].length == 2</code>
        </li>
        <li>
          <code>
            edges1[i] = [a<sub>i</sub>, b<sub>i</sub>]
          </code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            edges2[i] = [u<sub>i</sub>, v<sub>i</sub>]
          </code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; m
          </code>
        </li>
        <li>
          The input is generated such that <code>edges1</code> and{" "}
          <code>edges2</code> represent valid trees.
        </li>
      </ul>
    </div>
  ),
  207: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are a total of <code>numCourses</code> courses you have to take,
        labeled from <code>0</code> to <code>numCourses - 1</code>. You are
        given an array <code>prerequisites</code> where{" "}
        <code>
          prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that you <strong>must</strong> take course{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        first if you want to take course{" "}
        <code>
          a<sub>i</sub>
        </code>
        .
      </p>

      <ul>
        <li>
          For example, the pair <code>[0, 1]</code>, indicates that to take
          course <code>0</code> you have to first take course <code>1</code>.
        </li>
      </ul>

      <p>
        Return <code>true</code> if you can finish all courses. Otherwise,
        return <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> There are a total of 2 courses to take.{" "}
        <br />
        To take course 1 you should have finished course 0. So it is possible.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numCourses = 2, prerequisites = [[1,0],[0,1]]{" "}
        <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> There are a total of 2 courses to take.{" "}
        <br />
        To take course 1 you should have finished course 0, and to take course 0
        you should also have finished course 1. So it is impossible.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= numCourses &lt;= 2000</code>
        </li>
        <li>
          <code>0 &lt;= prerequisites.length &lt;= 5000</code>
        </li>
        <li>
          <code>prerequisites[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses
          </code>
        </li>
        <li>
          All the pairs prerequisites[i] are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  210: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are a total of <code>numCourses</code> courses you have to take,
        labeled from <code>0</code> to <code>numCourses - 1</code>. You are
        given an array <code>prerequisites</code> where{" "}
        <code>
          prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that you <strong>must</strong> take course{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        first if you want to take course{" "}
        <code>
          a<sub>i</sub>
        </code>
        .
      </p>

      <ul>
        <li>
          For example, the pair <code>[0, 1]</code>, indicates that to take
          course <code>0</code> you have to first take course <code>1</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>the ordering of courses you should take to finish all courses</em>.
        If there are many valid answers, return <strong>any</strong> of them. If
        it is impossible to finish all courses, return{" "}
        <strong>an empty array</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]] <br />
        <strong>Output:</strong> [0,1] <br />
        <strong>Explanation:</strong> There are a total of 2 courses to take. To
        take course 1 you should have finished course 0. So the correct course
        order is [0,1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numCourses = 4, prerequisites =
        [[1,0],[2,0],[3,1],[3,2]] <br />
        <strong>Output:</strong> [0,2,1,3] <br />
        <strong>Explanation:</strong> There are a total of 4 courses to take. To
        take course 3 you should have finished both courses 1 and 2. Both
        courses 1 and 2 should be taken after you finished course 0. <br />
        So one correct course order is [0,1,2,3]. Another correct ordering is
        [0,2,1,3].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numCourses = 1, prerequisites = [] <br />
        <strong>Output:</strong> [0]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= numCourses &lt;= 2000</code>
        </li>
        <li>
          <code>
            0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)
          </code>
        </li>
        <li>
          <code>prerequisites[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          All the pairs{" "}
          <code>
            [a<sub>i</sub>, b<sub>i</sub>]
          </code>{" "}
          are <strong>distinct</strong>.
        </li>
      </ul>
    </div>
  ),
  269: (
    <div class="markdown-body div-width">
      <p>
        There is a new alien language which uses the latin alphabet. However,
        the order among letters are unknown to you. You receive a list of{" "}
        <b>non-empty</b> words from the dictionary, where
        <b>
          words are sorted lexicographically by the rules of this new language
        </b>
        . Derive the order of letters in this language.
      </p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        <strong>Input:</strong>
        {`[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
]`}
        <br />
        <strong>Output: </strong>
        <code>"wertf"</code>
      </pre>
      <br />

      <p>
        <b>Example 2:</b>
      </p>
      <br />

      <pre>
        <strong>Input:</strong>
        {`[
  "z",
  "x"
]`}
        <br />

        <strong>Output: </strong>
        <code>"zx"</code>
      </pre>
      <br />

      <p>
        <b>Example 3:</b>
      </p>
      <br />

      <pre>
        <strong>Input:</strong>
        {`[
  "z",
  "x",
  "z"
]`}
        <br />
        <strong>Output:</strong> <code>""</code>&nbsp;
        <br />
        <strong>Explanation:</strong> The order is invalid, so return{" "}
        <code>""</code>.
      </pre>

      <p>
        <b>Note:</b>
      </p>

      <ul>
        <li>You may assume all letters are in lowercase.</li>
        <li>
          You may assume that if a is a prefix of b, then a must appear before b
          in the given dictionary.
        </li>
        <li>If the order is invalid, return an empty string.</li>
        <li>
          There may be multiple valid order of letters, return any one of them
          is fine.
        </li>
      </ul>
    </div>
  ),
  444: (
    <div class="markdown-body div-width">
      <p>
        Check whether the original sequence <code>org</code> can be uniquely
        reconstructed from the sequences in <code>seqs</code>. The{" "}
        <code>org</code> sequence is a permutation of the integers from 1 to n,
        with 1 ≤ n ≤ 10<sup>4</sup>. Reconstruction means building a shortest
        common supersequence of the sequences in <code>seqs</code> (i.e., a
        shortest sequence so that all sequences in <code>seqs</code> are
        subsequences of it). Determine whether there is only one sequence that
        can be reconstructed from <code>seqs</code> and it is the{" "}
        <code>org</code> sequence.
      </p>

      <p>
        <b>Example 1:</b>
      </p>
      <pre>
        <b>Input:</b> <br />
        org: [1,2,3], seqs: [[1,2],[1,3]]
        <br />
        <b>Output:</b> <br />
        false
        <br />
        <b>Explanation:</b> <br />
        [1,2,3] is not the only one sequence that can be reconstructed, because
        [1,3,2] is also a valid sequence that can be reconstructed.
      </pre>
      <p></p>
      <br />
      <p>
        <b>Example 2:</b> <br />
      </p>
      <pre>
        <b>Input:</b> <br />
        org: [1,2,3], seqs: [[1,2]]
        <br />
        <b>Output:</b> <br />
        false
        <br />
        <b>Explanation:</b> <br />
        The reconstructed sequence can only be [1,2].
      </pre>
      <p></p>

      <p>
        <b>Example 3:</b> <br />
      </p>
      <pre>
        <b>Input:</b> <br />
        org: [1,2,3], seqs: [[1,2],[1,3],[2,3]]
        <br />
        <b>Output:</b> <br />
        true <br />
        <b>Explanation:</b> <br />
        The sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the
        original sequence [1,2,3]. <br />
      </pre>
      <p></p>

      <p>
        <b>Example 4:</b>
      </p>
      <pre>
        <b>Input:</b> <br />
        org: [4,1,5,2,6,3], seqs: [[5,2,6,3],[4,1,5,2]]
        <br />
        <b>Output:</b> <br />
        true <br />
      </pre>
      <p></p>

      <p>
        <b>
          <font color="red">UPDATE (2017/1/8):</font>
        </b>
        <br /> <br />
        The <i>seqs</i> parameter had been changed to a list of list of strings
        (instead of a 2d <br />
        array of strings). Please reload the code definition to get the latest
        changes.
      </p>
    </div>
  ),
  913: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A game on an <strong>undirected</strong> graph is played by two players,
        Mouse and Cat, who alternate turns.
      </p>

      <p>
        The graph is given as follows: <code>graph[a]</code> is a list of all
        nodes <code>b</code> such that <code>ab</code> is an edge of the graph.
      </p>

      <p>
        The mouse starts at node <code>1</code> and goes first, the cat starts
        at node <code>2</code> and goes second, and there is a hole at node{" "}
        <code>0</code>.
      </p>

      <p>
        During each player's turn, they <strong>must</strong> travel along
        one&nbsp;edge of the graph that meets where they are.&nbsp; For example,
        if the Mouse is at node 1, it <strong>must</strong> travel to any node
        in <code>graph[1]</code>.
      </p>

      <p>
        Additionally, it is not allowed for the Cat to travel to the Hole (node{" "}
        <code>0</code>).
      </p>

      <p>Then, the game can end in three&nbsp;ways:</p>

      <ul>
        <li>
          If ever the Cat occupies the same node as the Mouse, the Cat wins.
        </li>
        <li>If ever the Mouse reaches the Hole, the Mouse wins.</li>
        <li>
          If ever a position is repeated (i.e., the players are in the same
          position as a previous turn, and&nbsp;it is the same player's turn to
          move), the game is a draw.
        </li>
      </ul>

      <p>
        Given a <code>graph</code>, and assuming both players play optimally,
        return
      </p>

      <ul>
        <li>
          <code>1</code>&nbsp;if the mouse wins the game,
        </li>
        <li>
          <code>2</code>&nbsp;if the cat wins the game, or
        </li>
        <li>
          <code>0</code>&nbsp;if the game is a draw.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/17/cat1.jpg"
        style={{ width: 300, height: 300 }}
      />
      <pre>
        <strong>Input:</strong> graph =
        [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/17/cat2.jpg"
        style={{ width: 200, height: 200 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[1,3],[0],[3],[0,2]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>3 &lt;= graph.length &lt;= 50</code>
        </li>
        <li>
          <code>1&nbsp;&lt;= graph[i].length &lt; graph.length</code>
        </li>
        <li>
          <code>0 &lt;= graph[i][j] &lt; graph.length</code>
        </li>
        <li>
          <code>graph[i][j] != i</code>
        </li>
        <li>
          <code>graph[i]</code> is unique.
        </li>
        <li>The mouse and the cat can always move.&nbsp;</li>
      </ul>
    </div>
  ),
  1059: (
    <div class="markdown-body div-width">
      <p>
        Given the <code>edges</code> of a directed graph, and two nodes{" "}
        <code>source</code> and
        <code>destination</code> of this graph, determine whether or not all
        paths starting from
        <code>source</code> eventually end at <code>destination</code>, that is:
      </p>

      <ul>
        <li>
          At least one path exists from the <code>source</code> node to the
          <code>destination</code> node
        </li>
        <li>
          If a path exists from the <code>source</code> node to a node with no
          outgoing edges, then that node is equal to <code>destination</code>.
        </li>
        <li>
          The number of possible paths from <code>source</code> to{" "}
          <code>destination</code> is a finite number.
        </li>
      </ul>

      <p>
        Return <code>true</code> if and only if all roads from{" "}
        <code>source</code> lead to <code>destination</code>.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <img src="https://leetcode.ca/all/img/1059_1.jpg" alt="" />
      </p>

      <pre>
        <strong>Input: </strong>n = 3, edges ={" "}
        <span id="example-input-1-2">[[0,1],[0,2]]</span>, source ={" "}
        <span id="example-input-1-3">0</span>, destination = 2
        <br />
        <strong>Output: </strong>
        <span id="example-output-1">false</span>
        <br />
        <strong>Explanation: </strong>It is possible to reach and get stuck on
        both node 1 and node 2.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <img src="https://leetcode.ca/all/img/1059_2.jpg" alt="" />
      </p>

      <pre>
        <strong>Input: </strong>n = <span id="example-input-2-1">4</span>, edges
        = <span id="example-input-2-2">[[0,1],[0,3],[1,2],[2,1]]</span>, source
        = <span id="example-input-2-3">0</span>, destination ={" "}
        <span id="example-input-2-4">3</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-2">false</span>
        <br />
        <strong>Explanation: </strong>We have two possibilities: to end at node
        3, or to loop over node 1 and node 2 indefinitely.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <p>
        <img src="https://leetcode.ca/all/img/1059_3.jpg" alt="" />
      </p>

      <pre>
        <strong>Input: </strong>n = <span id="example-input-3-1">4</span>, edges
        = <span id="example-input-3-2">[[0,1],[0,2],[1,3],[2,3]]</span>, source
        = <span id="example-input-3-3">0</span>, destination ={" "}
        <span id="example-input-3-4">3</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-3">true</span>
        <br />
      </pre>

      <p>
        <strong>Example 4:</strong>
      </p>

      <p>
        <img src="https://leetcode.ca/all/img/1059_4.jpg" alt="" />
      </p>

      <pre>
        <strong>Input: </strong>n = <span id="example-input-4-1">3</span>, edges
        = <span id="example-input-4-2">[[0,1],[1,1],[1,2]]</span>, source ={" "}
        <span id="example-input-4-3">0</span>, destination ={" "}
        <span id="example-input-4-4">2</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-4">false</span>
        <br />
        <strong>Explanation: </strong>All paths from the source node end at the
        destination node, but there are an infinite number of paths, such as
        0-1-2, 0-1-1-2, 0-1-1-1-2, 0-1-1-1-1-2, and so on.
      </pre>

      <p>
        <strong>Example 5:</strong>
      </p>

      <p>
        <img src="https://leetcode.ca/all/img/1059_5.jpg" alt="" />
      </p>

      <pre>
        <strong>Input: </strong>n = <span id="example-input-5-1">2</span>, edges
        = <span id="example-input-5-2">[[0,1],[1,1]]</span>, source ={" "}
        <span id="example-input-5-3">0</span>, destination ={" "}
        <span id="example-input-5-4">1</span>
        <br /> <strong>Output: </strong>
        <span id="example-output-5">false</span> <br />
        <strong>Explanation: </strong>There is infinite self-loop at destination
        node.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Note:</strong>
      </p>

      <ul>
        <li>
          <italic>
            The given graph may have self loops and parallel edges.
          </italic>
        </li>
        <li>
          The number of nodes <code>n</code> in the graph is between{" "}
          <code>1</code> and <code>10000</code>
        </li>
        <li>
          The number of edges in the graph is between <code>0</code> and{" "}
          <code>10000</code>
        </li>
        <li>
          <code>0 &lt;= edges.length &lt;= 10000</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>0 &lt;= source &lt;= n - 1</code>
        </li>
        <li>
          <code>0 &lt;= destination &lt;= n - 1</code>
        </li>
      </ul>
    </div>
  ),
  1136: (
    <div class="markdown-body div-width">
      <p>
        There are <code>N</code> courses, labelled from 1 to <code>N</code>.
      </p>

      <p>
        We are given&nbsp;<code>relations[i] = [X, Y]</code>, representing a
        prerequisite relationship between course <code>X</code> and course{" "}
        <code>Y</code>:&nbsp;course
        <code>X</code>&nbsp;has to be studied before course <code>Y</code>.
      </p>

      <p>
        In one semester you can study any number of courses as long as you have
        studied all the prerequisites for the course you are studying.
      </p>

      <p>
        Return the minimum number of semesters needed to study all
        courses.&nbsp; If there is no way to study all the courses, return{" "}
        <code>-1</code>.
      </p>

      <p>&nbsp;</p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <strong>
          <img src="https://leetcode.ca/all/img/1136_1.png" alt="" />
        </strong>
      </p>

      <pre>
        <strong>Input: </strong>N = <span id="example-input-1-1">3</span>,
        relations = <span id="example-input-1-2">[[1,3],[2,3]]</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-1">2</span> <br />
        <strong>Explanation: </strong>
        <br />
        In the first semester, courses 1 and 2 are studied. In the second
        semester, course 3 is studied.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <strong>
          <img src="https://leetcode.ca/all/img/1136_2.png" alt="" />
        </strong>
      </p>

      <pre>
        <strong>Input: </strong>N = <span id="example-input-2-1">3</span>,
        relations = <span id="example-input-2-2">[[1,2],[2,3],[3,1]]</span>
        <br />
        <strong>Output: </strong>
        <span id="example-output-2">-1</span>
        <br />
        <strong>Explanation: </strong>
        <br />
        No course can be studied because they depend on each other.
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>
          <span>Note:</span>
        </strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= N &lt;= 5000</code>
        </li>
        <li>
          <code>1 &lt;= relations.length &lt;= 5000</code>
        </li>
        <li>
          <code>relations[i][0] != relations[i][1]</code>
        </li>
        <li>There are no repeated relations in the input.</li>
      </ul>
    </div>
  ),
  1462: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are a total of <code>numCourses</code> courses you have to take,
        labeled from <code>0</code> to <code>numCourses - 1</code>. You are
        given an array <code>prerequisites</code> where{" "}
        <code>
          prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that you <strong>must</strong> take course{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        first if you want to take course{" "}
        <code>
          b<sub>i</sub>
        </code>
        .
      </p>

      <ul>
        <li>
          For example, the pair <code>[0, 1]</code> indicates that you have to
          take course <code>0</code> before you can take course <code>1</code>.
        </li>
      </ul>

      <p>
        Prerequisites can also be <strong>indirect</strong>. If course{" "}
        <code>a</code> is a prerequisite of course <code>b</code>, and course{" "}
        <code>b</code> is a prerequisite of course <code>c</code>, then course{" "}
        <code>a</code> is a prerequisite of course <code>c</code>.
      </p>

      <p>
        You are also given an array <code>queries</code> where{" "}
        <code>
          queries[j] = [u<sub>j</sub>, v<sub>j</sub>]
        </code>
        . For the{" "}
        <code>
          j<sup>th</sup>
        </code>{" "}
        query, you should answer whether course{" "}
        <code>
          u<sub>j</sub>
        </code>{" "}
        is a prerequisite of course{" "}
        <code>
          v<sub>j</sub>
        </code>{" "}
        or not.
      </p>

      <p>
        Return <i>a boolean array </i>
        <code>answer</code>
        <i>, where </i>
        <code>answer[j]</code>
        <i> is the answer to the </i>
        <code>
          j<sup>th</sup>
        </code>
        <i> query.</i>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/01/courses4-1-graph.jpg"
        style={{ width: 222, height: 62 }}
      />
      <pre>
        <strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]], queries
        = [[0,1],[1,0]] <br />
        <strong>Output:</strong> [false,true] <br />
        <strong>Explanation:</strong> The pair [1, 0] indicates that you have to
        take course 1 before you can take course 0. <br />
        Course 0 is not a prerequisite of course 1, but the opposite is true.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> numCourses = 2, prerequisites = [], queries =
        [[1,0],[0,1]] <br />
        <strong>Output:</strong> [false,false] <br />
        <strong>Explanation:</strong> There are no prerequisites, and each
        course is independent.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/01/courses4-3-graph.jpg"
        style={{ width: 222, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> numCourses = 3, prerequisites =
        [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]] <br />
        <strong>Output:</strong> [true,true]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= numCourses &lt;= 100</code>
        </li>
        <li>
          <code>
            0 &lt;= prerequisites.length &lt;= (numCourses * (numCourses - 1) /
            2)
          </code>
        </li>
        <li>
          <code>prerequisites[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= numCourses - 1
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          All the pairs{" "}
          <code>
            [a<sub>i</sub>, b<sub>i</sub>]
          </code>{" "}
          are <strong>unique</strong>.
        </li>
        <li>The prerequisites graph has no cycles.</li>
        <li>
          <code>
            1 &lt;= queries.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= numCourses - 1
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
      </ul>
    </div>
  ),
  1857: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a <strong>directed graph</strong> of <code>n</code> colored
        nodes and <code>m</code> edges. The nodes are numbered from{" "}
        <code>0</code> to <code>n - 1</code>.
      </p>

      <p>
        You are given a string <code>colors</code> where <code>colors[i]</code>{" "}
        is a lowercase English letter representing the <strong>color</strong> of
        the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        node in this graph (<strong>0-indexed</strong>). You are also given a 2D
        array <code>edges</code> where{" "}
        <code>
          edges[j] = [a<sub>j</sub>, b<sub>j</sub>]
        </code>{" "}
        indicates that there is a <strong>directed edge</strong> from node{" "}
        <code>
          a<sub>j</sub>
        </code>{" "}
        to node{" "}
        <code>
          b<sub>j</sub>
        </code>
        .
      </p>

      <p>
        A valid <strong>path</strong> in the graph is a sequence of nodes{" "}
        <code>
          x<sub>1</sub> -&gt; x<sub>2</sub> -&gt; x<sub>3</sub> -&gt; ... -&gt;
          x<sub>k</sub>
        </code>{" "}
        such that there is a directed edge from{" "}
        <code>
          x<sub>i</sub>
        </code>{" "}
        to{" "}
        <code>
          x<sub>i+1</sub>
        </code>{" "}
        for every <code>1 &lt;= i &lt; k</code>. The{" "}
        <strong>color value</strong> of the path is the number of nodes that are
        colored the <strong>most frequently</strong> occurring color along that
        path.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>largest color value</strong> of any valid path in the
          given graph, or{" "}
        </em>
        <code>-1</code>
        <em> if the graph contains a cycle</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/04/21/leet1.png"
          style={{ width: 400, height: 182 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> colors = "abaca", edges =
        [[0,1],[0,2],[2,3],[3,4]] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The path 0 -&gt; 2 -&gt; 3 -&gt; 4
        contains 3 nodes that are colored{" "}
        <code>"a" (red in the above image)</code>.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/04/21/leet2.png"
          style={{ width: 85, height: 85 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> colors = "a", edges = [[0,0]] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> There is a cycle from 0 to 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == colors.length</code>
        </li>
        <li>
          <code>m == edges.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= m &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>colors</code> consists of lowercase English letters.
        </li>
        <li>
          <code>
            0 &lt;= a<sub>j</sub>, b<sub>j</sub>&nbsp;&lt; n
          </code>
        </li>
      </ul>
    </div>
  ),
  2360: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>directed</strong> graph of <code>n</code> nodes
        numbered from <code>0</code> to <code>n - 1</code>, where each node has{" "}
        <strong>at most one</strong> outgoing edge.
      </p>

      <p>
        The graph is represented with a given <strong>0-indexed</strong> array{" "}
        <code>edges</code> of size <code>n</code>, indicating that there is a
        directed edge from node <code>i</code> to node <code>edges[i]</code>. If
        there is no outgoing edge from node <code>i</code>, then{" "}
        <code>edges[i] == -1</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the length of the <strong>longest</strong> cycle in the graph
        </em>
        . If no cycle exists, return <code>-1</code>.
      </p>

      <p>
        A cycle is a path that starts and ends at the <strong>same</strong>{" "}
        node.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/06/08/graph4drawio-5.png"
        style={{ width: 335, height: 191 }}
      />
      <pre>
        <strong>Input:</strong> edges = [3,3,4,2,3] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The longest cycle in the graph is the
        cycle: 2 -&gt; 4 -&gt; 3 -&gt; 2. <br />
        The length of this cycle is 3, so 3 is returned.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-1.png"
        style={{ width: 171, height: 161 }}
      />
      <pre>
        <strong>Input:</strong> edges = [2,-1,3,1] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> There are no cycles in this graph.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == edges.length</code>
        </li>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>-1 &lt;= edges[i] &lt; n</code>
        </li>
        <li>
          <code>edges[i] != i</code>
        </li>
      </ul>
    </div>
  ),
  2: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two <strong>non-empty</strong> linked lists representing
        two non-negative integers. The digits are stored in{" "}
        <strong>reverse order</strong>, and each of their nodes contains a
        single digit. Add the two numbers and return the sum&nbsp;as a linked
        list.
      </p>

      <p>
        You may assume the two numbers do not contain any leading zero, except
        the number 0 itself.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg"
        style={{ width: 483, height: 342 }}
      />
      <pre>
        <strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4] <br />
        <strong>Output:</strong> [7,0,8] <br />
        <strong>Explanation:</strong> 342 + 465 = 807.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> l1 = [0], l2 = [0] <br />
        <strong>Output:</strong> [0]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] <br />
        <strong>Output:</strong> [8,9,9,9,0,0,0,1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in each linked list is in the range{" "}
          <code>[1, 100]</code>.
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 9</code>
        </li>
        <li>
          It is guaranteed that the list represents a number that does not have
          leading zeros.
        </li>
      </ul>
    </div>
  ),
  24: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a&nbsp;linked list, swap every two adjacent nodes and return its
        head. You must solve the problem without&nbsp;modifying the values in
        the list's nodes (i.e., only nodes themselves may be changed.)
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">head = [1,2,3,4]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[2,1,4,3]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg"
            style={{ width: 422, height: 222 }}
          />
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">head = []</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[]</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">head = [1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1]</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 4:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">head = [1,2,3]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[2,1,3]</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the&nbsp;list&nbsp;is in the range{" "}
          <code>[0, 100]</code>.
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  138: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A linked list of length <code>n</code> is given such that each node
        contains an additional random pointer, which could point to any node in
        the list, or <code>null</code>.
      </p>

      <p>
        Construct a{" "}
        <a
          href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy"
          target="_blank"
          rel="noreferrer"
        >
          <strong>deep copy</strong>
        </a>{" "}
        of the list. The deep copy should consist of exactly <code>n</code>{" "}
        <strong>brand new</strong> nodes, where each new node has its value set
        to the value of its corresponding original node. Both the{" "}
        <code>next</code> and <code>random</code> pointer of the new nodes
        should point to new nodes in the copied list such that the pointers in
        the original list and copied list represent the same list state.{" "}
        <strong>
          None of the pointers in the new list should point to nodes in the
          original list
        </strong>
        .
      </p>

      <p>
        For example, if there are two nodes <code>X</code> and <code>Y</code> in
        the original list, where <code>X.random --&gt; Y</code>, then for the
        corresponding two nodes <code>x</code> and <code>y</code> in the copied
        list, <code>x.random --&gt; y</code>.
      </p>

      <p>
        Return <em>the head of the copied linked list</em>.
      </p>

      <p>
        The linked list is represented in the input/output as a list of{" "}
        <code>n</code> nodes. Each node is represented as a pair of{" "}
        <code>[val, random_index]</code> where:
      </p>

      <ul>
        <li>
          <code>val</code>: an integer representing <code>Node.val</code>
        </li>
        <li>
          <code>random_index</code>: the index of the node (range from{" "}
          <code>0</code> to <code>n-1</code>) that the <code>random</code>{" "}
          pointer points to, or <code>null</code> if it does not point to any
          node.
        </li>
      </ul>

      <p>
        Your code will <strong>only</strong> be given the <code>head</code> of
        the original linked list.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/12/18/e1.png"
        style={{ width: 700, height: 142 }}
      />
      <pre>
        <strong>Input:</strong> head = [[7,null],[13,0],[11,4],[10,2],[1,0]]{" "}
        <br />
        <strong>Output:</strong> [[7,null],[13,0],[11,4],[10,2],[1,0]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/12/18/e2.png"
        style={{ width: 700, height: 114 }}
      />
      <pre>
        <strong>Input:</strong> head = [[1,1],[2,1]] <br />
        <strong>Output:</strong> [[1,1],[2,1]]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/12/18/e3.png"
            style={{ width: 700, height: 122 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [[3,null],[3,0],[3,null]] <br />
        <strong>Output:</strong> [[3,null],[3,0],[3,null]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>Node.random</code> is <code>null</code> or is pointing to some
          node in the linked list.
        </li>
      </ul>
    </div>
  ),
  160: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the heads of two singly linked-lists <code>headA</code> and{" "}
        <code>headB</code>, return{" "}
        <em>the node at which the two lists intersect</em>. If the two linked
        lists have no intersection at all, return <code>null</code>.
      </p>
      <p>
        For example, the following two linked lists begin to intersect at node{" "}
        <code>c1</code>:
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/05/160_statement.png"
        style={{ width: 500, height: 162 }}
      />
      <p>
        The test cases are generated such that there are no cycles anywhere in
        the entire linked structure.
      </p>
      <p>
        <strong>Note</strong> that the linked lists must{" "}
        <strong>retain their original structure</strong> after the function
        returns.
      </p>
      <p>
        <strong>Custom Judge:</strong>
      </p>
      <p>
        The inputs to the <strong>judge</strong> are given as follows (your
        program is <strong>not</strong> given these inputs):
      </p>
      <ul>
        <li>
          <code>intersectVal</code> - The value of the node where the
          intersection occurs. This is <code>0</code> if there is no intersected
          node.
        </li>
        <li>
          <code>listA</code> - The first linked list.
        </li>
        <li>
          <code>listB</code> - The second linked list.
        </li>
        <li>
          <code>skipA</code> - The number of nodes to skip ahead in{" "}
          <code>listA</code> (starting from the head) to get to the intersected
          node.
        </li>
        <li>
          <code>skipB</code> - The number of nodes to skip ahead in{" "}
          <code>listB</code> (starting from the head) to get to the intersected
          node.
        </li>
      </ul>
      <p>
        The judge will then create the linked structure based on these inputs
        and pass the two heads, <code>headA</code> and <code>headB</code> to
        your program. If you correctly return the intersected node, then your
        solution will be <strong>accepted</strong>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png"
        style={{ width: 500, height: 162 }}
      />
      <pre>
        <strong>Input:</strong> intersectVal = 8, listA = [4,1,8,4,5], listB =
        [5,6,1,8,4,5], skipA = 2, skipB = 3<br />
        <strong>Output:</strong> Intersected at '8'
        <br />
        <strong>Explanation:</strong> The intersected node's value is 8 (note
        that this must not be 0 if the two lists intersect).
        <br />
        From the head of A, it reads as [4,1,8,4,5]. From the head of B, it
        reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in
        A; There are 3 nodes before the intersected node in B.
        <br />- Note that the intersected node's value is not 1 because the
        nodes with value 1 in A and B (2<sup>nd</sup> node in A and 3
        <sup>rd</sup> node in B) are different node references. In other words,
        they point to two different locations in memory, while the nodes with
        value 8 in A and B (3<sup>rd</sup> node in A and 4<sup>th</sup> node in
        B) point to the same location in memory.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png"
        style={{ width: 500, height: 194 }}
      />
      <pre>
        <strong>Input:</strong> intersectVal = 2, listA = [1,9,1,2,4], listB =
        [3,2,4], skipA = 3, skipB = 1 <br />
        <strong>Output:</strong> Intersected at '2' <br />
        <strong>Explanation:</strong> The intersected node's value is 2 (note
        that this must not be 0 if the two lists intersect). <br />
        From the head of A, it reads as [1,9,1,2,4]. From the head of B, it
        reads as [3,2,4]. There are 3 nodes before the intersected node in A;
        There are 1 node before the intersected node in B.
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/05/160_example_3.png"
        style={{ width: 300, height: 189 }}
      />
      <pre>
        <strong>Input:</strong> intersectVal = 0, listA = [2,6,4], listB =
        [1,5], skipA = 3, skipB = 2 <br />
        <strong>Output:</strong> No intersection <br />
        <strong>Explanation:</strong> From the head of A, it reads as [2,6,4].
        From the head of B, it reads as [1,5]. Since the two lists do not
        intersect, intersectVal must be 0, while skipA and skipB can be
        arbitrary values. <br />
        Explanation: The two lists do not intersect, so return null.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes of <code>listA</code> is in the <code>m</code>.
        </li>
        <li>
          The number of nodes of <code>listB</code> is in the <code>n</code>.
        </li>
        <li>
          <code>
            1 &lt;= m, n &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= skipA &lt;= m</code>
        </li>
        <li>
          <code>0 &lt;= skipB &lt;= n</code>
        </li>
        <li>
          <code>intersectVal</code> is <code>0</code> if <code>listA</code> and{" "}
          <code>listB</code> do not intersect.
        </li>
        <li>
          <code>intersectVal == listA[skipA] == listB[skipB]</code> if{" "}
          <code>listA</code> and <code>listB</code> intersect.
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you write a solution that runs in{" "}
      <code>O(m + n)</code> time and use only <code>O(1)</code> memory?
    </div>
  ),
  206: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a singly linked list, reverse the list,
        and return <em>the reversed list</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg"
        style={{ width: 542, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5] <br />
        <strong>Output:</strong> [5,4,3,2,1]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg"
        style={{ width: 182, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2] <br />
        <strong>Output:</strong> [2,1]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is the range <code>[0, 5000]</code>.
        </li>
        <li>
          <code>-5000 &lt;= Node.val &lt;= 5000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> A linked list can be reversed either
        iteratively or recursively. Could you implement both?
      </p>
    </div>
  ),
  234: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a singly linked list, return{" "}
        <code>true</code>
        <em> if it is a </em>
        <span
          data-keyword="palindrome-sequence"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rh6:"
              >
                <div>
                  <em>palindrome</em>
                </div>
              </div>
            </div>
          </div>
        </span>
        <em> or </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg"
        style={{ width: 422, height: 62 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,2,1] <br />
        <strong>Output:</strong> true
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg"
        style={{ width: 182, height: 62 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2] <br />
        <strong>Output:</strong> false
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the list is in the range{" "}
          <code>
            [1, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 9</code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you do it in <code>O(n)</code> time and{" "}
      <code>O(1)</code> space?
    </div>
  ),
  328: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a singly linked list, group all the nodes
        with odd indices together followed by the nodes with even indices, and
        return <em>the reordered list</em>.
      </p>

      <p>
        The <strong>first</strong> node is considered <strong>odd</strong>, and
        the <strong>second</strong> node is <strong>even</strong>, and so on.
      </p>

      <p>
        Note that the relative order inside both the even and odd groups should
        remain as it was in the input.
      </p>

      <p>
        You must solve the problem&nbsp;in <code>O(1)</code>&nbsp;extra space
        complexity and <code>O(n)</code> time complexity.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/10/oddeven-linked-list.jpg"
        style={{ width: 300, height: 123 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5] <br />
        <strong>Output:</strong> [1,3,5,2,4]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/10/oddeven2-linked-list.jpg"
        style={{ width: 500, height: 142 }}
      />
      <pre>
        <strong>Input:</strong> head = [2,1,3,5,6,4,7] <br />
        <strong>Output:</strong> [2,3,6,7,1,5,4]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the linked list is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            -10<sup>6</sup> &lt;= Node.val &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1474: (
    <div>
      <p>
        Given the&nbsp;<code>head</code>&nbsp;of a linked list and two integers
        <code>m</code> and <code>n</code>. Traverse the linked list and remove
        some nodes&nbsp;in the following way:
      </p>

      <ul>
        <li>Start with the head as the current node.</li>
        <li>
          Keep the first <code>m</code> nodes starting with the current node.
        </li>
        <li>
          Remove the next <code>n</code> nodes
        </li>
        <li>
          Keep repeating steps 2 and 3 until you reach the end of the list.
        </li>
      </ul>

      <p>
        Return the head of the modified list after removing the mentioned nodes.
      </p>

      <p>
        <strong>Follow up question:</strong> How can you solve this problem by
        modifying the list in-place?
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/06/06/sample_1_1848.png"
            style={{ width: 620, height: 95 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5,6,7,8,9,10,11,12,13], m = 2, n
        = 3 <br />
        <strong>Output:</strong> [1,2,6,7,11,12] <br />
        <strong>Explanation: </strong>Keep the first (m = 2) nodes starting from
        the head of the linked List (1 -&gt;2) show in black nodes. <br />
        Delete the next (n = 3) nodes (3 -&gt; 4 -&gt; 5) show in read nodes.{" "}
        <br />
        Continue with the same procedure until reaching the tail of the Linked
        List. <br />
        Head of linked list after removing nodes is returned.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2020/06/06/sample_2_1848.png"
            style={{ width: 620, height: 123 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5,6,7,8,9,10,11], m = 1, n = 3{" "}
        <br />
        <strong>Output:</strong> [1,5,9] <br />
        <strong>Explanation:</strong> Head of linked list after removing nodes
        is returned.
      </pre>

      <p>
        <strong>Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5,6,7,8,9,10,11], m = 3, n = 1{" "}
        <br />
        <strong>Output:</strong> [1,2,3,5,6,7,9,10,11]
      </pre>

      <p>
        <strong>Example 4:</strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [9,3,7,7,9,10,8,2], m = 1, n = 2 <br />
        <strong>Output:</strong> [9,7,8]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The given linked list will contain between&nbsp;<code>1</code>
          &nbsp;and&nbsp;<code>10^4</code>&nbsp;nodes.
        </li>
        <li>
          The value of each node in the linked list will be in the range
          <code>&nbsp;[1, 10^6]</code>.
        </li>
        <li>
          <code>1 &lt;= m,n &lt;=&nbsp;1000</code>
        </li>
      </ul>
    </div>
  ),
  2058: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>critical point</strong> in a linked list is defined as{" "}
        <strong>either</strong> a <strong>local maxima</strong> or a{" "}
        <strong>local minima</strong>.
      </p>

      <p>
        A node is a <strong>local maxima</strong> if the current node has a
        value <strong>strictly greater</strong> than the previous node and the
        next node.
      </p>

      <p>
        A node is a <strong>local minima</strong> if the current node has a
        value <strong>strictly smaller</strong> than the previous node and the
        next node.
      </p>

      <p>
        Note that a node can only be a local maxima/minima if there exists{" "}
        <strong>both</strong> a previous node and a next node.
      </p>

      <p>
        Given a linked list <code>head</code>, return{" "}
        <em>an array of length 2 containing </em>
        <code>[minDistance, maxDistance]</code>
        <em> where </em>
        <code>minDistance</code>
        <em>
          {" "}
          is the <strong>minimum distance</strong> between{" "}
          <strong>any&nbsp;two distinct</strong> critical points and{" "}
        </em>
        <code>maxDistance</code>
        <em>
          {" "}
          is the <strong>maximum distance</strong> between{" "}
          <strong>any&nbsp;two distinct</strong> critical points. If there are{" "}
          <strong>fewer</strong> than two critical points, return{" "}
        </em>
        <code>[-1, -1]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/10/13/a1.png"
        style={{ width: 148, height: 55 }}
      />
      <pre>
        <strong>Input:</strong> head = [3,1] <br />
        <strong>Output:</strong> [-1,-1] <br />
        <strong>Explanation:</strong> There are no critical points in [3,1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/10/13/a2.png"
        style={{ width: 624, height: 46 }}
      />
      <pre>
        <strong>Input:</strong> head = [5,3,1,2,5,1,2] <br />
        <strong>Output:</strong> [1,3] <br />
        <strong>Explanation:</strong> There are three critical points: <br />-
        [5,3,
        <strong>
          <u>1</u>
        </strong>
        ,2,5,1,2]: The third node is a local minima because 1 is less than 3 and
        2. <br />- [5,3,1,2,
        <u>
          <strong>5</strong>
        </u>
        ,1,2]: The fifth node is a local maxima because 5 is greater than 2 and
        1. <br />- [5,3,1,2,5,
        <u>
          <strong>1</strong>
        </u>
        ,2]: The sixth node is a local minima because 1 is less than 5 and 2.{" "}
        <br />
        The minimum distance is between the fifth and the sixth node.
        minDistance = 6 - 5 = 1. <br />
        The maximum distance is between the third and the sixth node.
        maxDistance = 6 - 3 = 3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/10/14/a5.png"
        style={{ width: 624, height: 39 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,3,2,2,3,2,2,2,7] <br />
        <strong>Output:</strong> [3,3] <br />
        <strong>Explanation:</strong> There are two critical points: <br />- [1,
        <u>
          <strong>3</strong>
        </u>
        ,2,2,3,2,2,2,7]: The second node is a local maxima because 3 is greater
        than 1 and 2. <br />- [1,3,2,2,
        <u>
          <strong>3</strong>
        </u>
        ,2,2,2,7]: The fifth node is a local maxima because 3 is greater than 2
        and 2. <br />
        Both the minimum and maximum distances are between the second and the
        fifth node. <br />
        Thus, minDistance and maxDistance is 5 - 2 = 3. <br />
        Note that the last node is not considered a local maxima because it does
        not have a next node.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is in the range{" "}
          <code>
            [2, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2487: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>head</code> of a linked list.
      </p>

      <p>
        Remove every node which has a node with a greater value anywhere to the
        right side of it.
      </p>

      <p>
        Return <em>the </em>
        <code>head</code>
        <em> of the modified linked list.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/02/drawio.png"
        style={{ width: 631, height: 51 }}
      />
      <pre>
        <strong>Input:</strong> head = [5,2,13,3,8]
        <br />
        <strong>Output:</strong> [13,8]
        <br />
        <strong>Explanation:</strong> The nodes that should be removed are 5, 2
        and 3.
        <br />
        - Node 13 is to the right of node 5. <br />
        - Node 13 is to the right of node 2.
        <br />- Node 8 is to the right of node 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> head = [1,1,1,1] <br />
        <strong>Output:</strong> [1,1,1,1] <br />
        <strong>Explanation:</strong> Every node has value 1, so no nodes are
        removed.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of the nodes in the given list is in the range{" "}
          <code>
            [1, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2674: (
    <article role="main" class="blog-post">
      <p>
        Given a <strong>circular linked list</strong> <code>list</code> of
        positive integers, your task is to split it into 2{" "}
        <strong>circular linked lists</strong> so that the first one contains
        the <strong>first half</strong> of the nodes in <code>list</code>{" "}
        (exactly <code>ceil(list.length / 2)</code> nodes) in the same order
        they appeared in <code>list</code>, and the second one contains{" "}
        <strong>the rest</strong> of the nodes in <code>list</code> in the same
        order they appeared in <code>list</code>.
      </p>

      <p>
        Return{" "}
        <em>
          an array answer of length 2 in which the first element is a{" "}
          <strong>circular linked list</strong> representing the{" "}
          <strong>first half</strong> and the second element is a{" "}
          <strong>circular linked list</strong> representing the{" "}
          <strong>second half</strong>.
        </em>
      </p>

      <div>
        A <strong>circular linked list</strong> is a normal linked list with the
        only difference being that the last node's next node, is the first node.
      </div>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,5,7] <br />
        <strong>Output:</strong> [[1,5],[7]] <br />
        <strong>Explanation:</strong> The initial list has 3 nodes so the first
        half would be the first 2 elements since ceil(3 / 2) = 2 and the rest
        which is 1 node is in the second half.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,6,1,5] <br />
        <strong>Output:</strong> [[2,6],[1,5]] <br />
        <strong>Explanation:</strong> The initial list has 4 nodes so the first
        half would be the first 2 elements since ceil(4 / 2) = 2 and the rest
        which is 2 nodes are in the second half.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in <code>list</code>&nbsp;is in the range{" "}
          <code>
            [2, 10<sup>5</sup>]
          </code>
        </li>
        <li>
          <code>
            0 &lt;= Node.val &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <font face="monospace">
            <code>LastNode.next = FirstNode</code>
          </font>{" "}
          where <code>LastNode</code> is the last node of the list and{" "}
          <code>FirstNode</code> is the first one
        </li>
      </ul>
    </article>
  ),
  3217: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of integers <code>nums</code> and the{" "}
        <code>head</code> of a linked list. Return the <code>head</code> of the
        modified linked list after <strong>removing</strong> all nodes from the
        linked list that have a value that exists in <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,2,3], head = [1,2,3,4,5]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[4,5]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <strong>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample0.png"
              style={{ width: 400, height: 66 }}
            />
          </strong>
        </p>
        <p>Remove the nodes with values 1, 2, and 3.</p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1], head = [1,2,1,2,1,2]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[2,2,2]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample1.png"
            style={{ height: 62, width: 450 }}
          />{" "}
        </p>
        <p>Remove the nodes with value 1.</p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [5], head = [1,2,3,4]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1,2,3,4]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <strong>
            <img
              alt=""
              src="https://assets.leetcode.com/uploads/2024/06/11/linkedlistexample2.png"
              style={{ width: 400, height: 83 }}
            />
          </strong>
        </p>
        <p>No node has value 5.</p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          All elements in <code>nums</code> are unique.
        </li>
        <li>
          The number of nodes in the given list is in the range{" "}
          <code>
            [1, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          The input is generated such that there is at least one node in the
          linked list that has a value not present in <code>nums</code>.
        </li>
      </ul>
    </div>
  ),
  3062: (
    <article role="main" class="blog-post">
      <p>
        You are given the <code>head</code> of a linked list of{" "}
        <strong>even</strong> length containing integers.
      </p>

      <p>
        Each <strong>odd-indexed</strong> node contains an odd integer and each{" "}
        <strong>even-indexed</strong> node contains an even integer.
      </p>

      <p>
        We call each even-indexed node and its next node a <strong>pair</strong>
        , e.g., the nodes with indices <code>0</code> and <code>1</code> are a
        pair, the nodes with indices <code>2</code> and <code>3</code> are a
        pair, and so on.
      </p>

      <p>
        For every <strong>pair</strong>, we compare the values of the nodes in
        the pair:
      </p>

      <ul>
        <li>
          If the odd-indexed node is higher, the <code>"Odd"</code> team gets a
          point.
        </li>
        <li>
          If the even-indexed node is higher, the <code>"Even"</code> team gets
          a point.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the name of the team with the <strong>higher</strong> points, if the
          points are equal, return
        </em>{" "}
        <code>"Tie"</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1: </strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io"> head = [2,1] </span>
        </p>
        <br />
        <p>
          <strong>Output: </strong> <span class="example-io"> "Even" </span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong> There is only one pair in this linked
          list and that is <code>(2,1)</code>. Since <code>2 &gt; 1</code>, the
          Even team gets the point.
        </p>
        <br />

        <p>
          Hence, the answer would be <code>"Even"</code>.
        </p>
      </div>

      <p>
        <strong class="example">Example 2: </strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io"> head = [2,5,4,7,20,5] </span>
        </p>
        <br />

        <p>
          <strong>Output: </strong> <span class="example-io"> "Odd" </span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong> There are <code>3</code> pairs in this
          linked list. Let's investigate each pair individually:
        </p>
        <br />

        <p>
          <code>(2,5)</code> -&gt; Since <code>2 &lt; 5</code>, The Odd team
          gets the point.
        </p>
        <br />

        <p>
          <code>(4,7)</code> -&gt; Since <code>4 &lt; 7</code>, The Odd team
          gets the point.
        </p>
        <br />

        <p>
          <code>(20,5)</code> -&gt; Since <code>20 &gt; 5</code>, The Even team
          gets the point.
        </p>
        <br />

        <p>
          The Odd team earned <code>2</code> points while the Even team got{" "}
          <code>1</code> point and the Odd team has the higher points.
        </p>
        <br />

        <p>
          Hence, the answer would be <code>"Odd"</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3: </strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io"> head = [4,5,2,1] </span>
        </p>

        <p>
          <strong>Output: </strong> <span class="example-io"> "Tie" </span>
        </p>

        <p>
          <strong>Explanation: </strong> There are <code>2</code> pairs in this
          linked list. Let's investigate each pair individually:
        </p>

        <p>
          <code>(4,5)</code> -&gt; Since <code>4 &lt; 5</code>, the Odd team
          gets the point.
        </p>

        <p>
          <code>(2,1)</code> -&gt; Since <code>2 &gt; 1</code>, the Even team
          gets the point.
        </p>

        <p>
          Both teams earned <code>1</code> point.
        </p>

        <p>
          Hence, the answer would be <code>"Tie"</code>.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is in the range <code>[2, 100]</code>.
        </li>
        <li>The number of nodes in the list is even.</li>
        <li>
          <code>1 &lt;= Node.val &lt;= 100</code>
        </li>
        <li>The value of each odd-indexed node is odd.</li>
        <li>The value of each even-indexed node is even.</li>
      </ul>
    </article>
  ),
  25: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>head</code> of a linked list, reverse the nodes of the
        list <code>k</code> at a time, and return <em>the modified list</em>.
      </p>

      <p>
        <code>k</code> is a positive integer and is less than or equal to the
        length of the linked list. If the number of nodes is not a multiple of{" "}
        <code>k</code> then left-out nodes, in the end, should remain as it is.
      </p>

      <p>
        You may not alter the values in the list's nodes, only nodes themselves
        may be changed.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg"
        style={{ width: 542, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5], k = 2 <br />
        <strong>Output:</strong> [2,1,4,3,5]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg"
        style={{ width: 542, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> head = [1,2,3,4,5], k = 3 <br />
        <strong>Output:</strong> [3,2,1,4,5]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the list is <code>n</code>.
        </li>
        <li>
          <code>1 &lt;= k &lt;= n &lt;= 5000</code>
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow-up:</strong> Can you solve the problem in{" "}
        <code>O(1)</code> extra memory space?
      </p>
    </div>
  ),
  50: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Implement{" "}
        <a
          rel="noreferrer"
          href="http://www.cplusplus.com/reference/valarray/pow/"
          target="_blank"
        >
          pow(x, n)
        </a>
        , which calculates <code>x</code> raised to the power <code>n</code>{" "}
        (i.e.,{" "}
        <code>
          x<sup>n</sup>
        </code>
        ).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 2.00000, n = 10 <br />
        <strong>Output:</strong> 1024.00000
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 2.10000, n = 3 <br />
        <strong>Output:</strong> 9.26100
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> x = 2.00000, n = -2 <br />
        <strong>Output:</strong> 0.25000 <br />
        <strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 =
        0.25
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>-100.0 &lt; x &lt; 100.0</code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup>-1
          </code>
        </li>
        <li>
          <code>n</code> is an integer.
        </li>
        <li>
          Either <code>x</code> is not zero or <code>n &gt; 0</code>.
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  247: (
    <div class="markdown-body div-width">
      <p>
        A strobogrammatic number is a number that looks the same when rotated
        180 degrees (looked at upside down).
      </p>

      <p>Find all strobogrammatic numbers that are of length = n.</p>

      <p>
        <b>Example:</b>
      </p>

      <pre>
        <b>Input:</b> n = 2 <br />
        <b>Output:</b> <code>["11","69","88","96"]</code>
      </pre>
    </div>
  ),
  273: (
    <div class="markdown-body div-width">
      <p>
        Convert a non-negative integer to its english words representation.
        Given input is guaranteed to be less than 2<sup>31</sup> - 1.
      </p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        <b>Input:</b> 123 <br />
        <b>Output:</b> "One Hundred Twenty Three"
      </pre>

      <p>
        <b>Example 2:</b>
      </p>

      <pre>
        <b>Input:</b> 12345 <br />
        <b>Output:</b> "Twelve Thousand Three Hundred Forty Five"
      </pre>

      <p>
        <b>Example 3:</b>
      </p>

      <pre>
        <b>Input:</b> 1234567 <br />
        <b>Output:</b> "One Million Two Hundred Thirty Four Thousand Five
        Hundred Sixty Seven"
      </pre>

      <p>
        <b>Example 4:</b>
      </p>

      <pre>
        <b>Input:</b> 1234567891 <br />
        <b>Output:</b> "One Billion Two Hundred Thirty Four Million Five Hundred
        Sixty Seven Thousand Eight Hundred Ninety One"
      </pre>
    </div>
  ),
  390: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have a list <code>arr</code> of all integers in the range{" "}
        <code>[1, n]</code> sorted in a strictly increasing order. Apply the
        following algorithm on <code>arr</code>:
      </p>

      <ul>
        <li>
          Starting from left to right, remove the first number and every other
          number afterward until you reach the end of the list.
        </li>
        <li>
          Repeat the previous step again, but this time from right to left,
          remove the rightmost number and every other number from the remaining
          numbers.
        </li>
        <li>
          Keep repeating the steps again, alternating left to right and right to
          left, until a single number remains.
        </li>
      </ul>

      <p>
        Given the integer <code>n</code>, return{" "}
        <em>the last number that remains in</em> <code>arr</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 9 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> <br />
        arr = [<u>1</u>, 2, <u>3</u>, 4, <u>5</u>, 6, <u>7</u>, 8, <u>9</u>]{" "}
        <br />
        arr = [2, <u>4</u>, 6, <u>8</u>] <br />
        arr = [<u>2</u>, 6] <br />
        arr = [6]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  779: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        We build a table of <code>n</code> rows (<strong>1-indexed</strong>). We
        start by writing <code>0</code> in the{" "}
        <code>
          1<sup>st</sup>
        </code>{" "}
        row. Now in every subsequent row, we look at the previous row and
        replace each occurrence of <code>0</code> with <code>01</code>, and each
        occurrence of <code>1</code> with <code>10</code>.
      </p>

      <ul>
        <li>
          For example, for <code>n = 3</code>, the{" "}
          <code>
            1<sup>st</sup>
          </code>{" "}
          row is <code>0</code>, the{" "}
          <code>
            2<sup>nd</sup>
          </code>{" "}
          row is <code>01</code>, and the{" "}
          <code>
            3<sup>rd</sup>
          </code>{" "}
          row is <code>0110</code>.
        </li>
      </ul>

      <p>
        Given two integer <code>n</code> and <code>k</code>, return the{" "}
        <code>
          k<sup>th</sup>
        </code>{" "}
        (<strong>1-indexed</strong>) symbol in the{" "}
        <code>
          n<sup>th</sup>
        </code>{" "}
        row of a table of <code>n</code> rows.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1, k = 1 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> row 1: <u>0</u>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, k = 1 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong>
        row 1: 0 row 2: <u>0</u>1
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, k = 2 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong>
        row 1: 0 row 2: 0<u>1</u>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 30</code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 2<sup>n - 1</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1106: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>boolean expression</strong> is an expression that evaluates to
        either <code>true</code> or <code>false</code>. It can be in one of the
        following shapes:
      </p>

      <ul>
        <li>
          <code>'t'</code> that evaluates to <code>true</code>.
        </li>
        <li>
          <code>'f'</code> that evaluates to <code>false</code>.
        </li>
        <li>
          <code>'!(subExpr)'</code> that evaluates to{" "}
          <strong>the logical NOT</strong> of the inner expression{" "}
          <code>subExpr</code>.
        </li>
        <li>
          <code>
            '&amp;(subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr
            <sub>n</sub>)'
          </code>{" "}
          that evaluates to <strong>the logical AND</strong> of the inner
          expressions{" "}
          <code>
            subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub>
          </code>{" "}
          where <code>n &gt;= 1</code>.
        </li>
        <li>
          <code>
            '|(subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr
            <sub>n</sub>)'
          </code>{" "}
          that evaluates to <strong>the logical OR</strong> of the inner
          expressions{" "}
          <code>
            subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub>
          </code>{" "}
          where <code>n &gt;= 1</code>.
        </li>
      </ul>

      <p>
        Given a string <code>expression</code> that represents a{" "}
        <strong>boolean expression</strong>, return{" "}
        <em>the evaluation of that expression</em>.
      </p>

      <p>
        It is <strong>guaranteed</strong> that the given expression is valid and
        follows the given rules.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> expression = "&amp;(|(f))" <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong> <br />
        First, evaluate |(f) --&gt; f. The expression is now "&amp;(f)".
        <br />
        Then, evaluate &amp;(f) --&gt; f. The expression is now "f".
        <br />
        Finally, return false.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> expression = "|(f,f,f,t)" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The evaluation of (false OR false OR false
        OR true) is true.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> expression = "!(&amp;(f,t))" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> <br />
        First, evaluate &amp;(f,t) --&gt; (false AND true) --&gt; false --&gt;
        f. The expression is now "!(f)". <br />
        Then, evaluate !(f) --&gt; NOT false --&gt; true. We return true.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= expression.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          expression[i] is one following characters: <code>'('</code>,{" "}
          <code>')'</code>, <code>'&amp;'</code>, <code>'|'</code>,{" "}
          <code>'!'</code>, <code>'t'</code>, <code>'f'</code>, and{" "}
          <code>','</code>.
        </li>
      </ul>
    </div>
  ),
  1922: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A digit string is <strong>good</strong> if the digits{" "}
        <strong>(0-indexed)</strong> at <strong>even</strong> indices are{" "}
        <strong>even</strong> and the digits at <strong>odd</strong> indices are{" "}
        <strong>prime</strong> (<code>2</code>, <code>3</code>, <code>5</code>,
        or <code>7</code>).
      </p>

      <ul>
        <li>
          For example, <code>"2582"</code> is good because the digits (
          <code>2</code> and <code>8</code>) at even positions are even and the
          digits (<code>5</code> and <code>2</code>) at odd positions are prime.
          However, <code>"3245"</code> is <strong>not</strong> good because{" "}
          <code>3</code> is at an even index but is not even.
        </li>
      </ul>

      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          the <strong>total</strong> number of good digit strings of length{" "}
        </em>
        <code>n</code>. Since the answer may be large,{" "}
        <strong>return it modulo </strong>
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>
        A <strong>digit string</strong> is a string consisting of digits{" "}
        <code>0</code> through <code>9</code> that may contain leading zeros.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The good numbers of length 1 are "0", "2",
        "4", "6", "8".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> 400
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 50 <br />
        <strong>Output:</strong> 564908303
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>15</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2550: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a regular convex polygon with <code>n</code> vertices. The
        vertices are labeled from <code>0</code> to <code>n - 1</code> in a
        clockwise direction, and each vertex has{" "}
        <strong>exactly one monkey</strong>. The following figure shows a convex
        polygon of <code>6</code> vertices.
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2023/01/22/hexagon.jpg"
        style={{ width: 300, height: 293 }}
      />
      <br />
      <p>
        Simultaneously, each monkey moves to a neighboring vertex. A{" "}
        <strong>collision</strong> happens if at least two monkeys reside on the
        same vertex after the movement or intersect on an edge.
      </p>

      <p>
        Return the number of ways the monkeys can move so that at least{" "}
        <strong>one collision</strong> happens. Since the answer may be very
        large, return it modulo{" "}
        <code>
          10<sup>9 </sup>+ 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">6</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          There are 8 total possible movements.
          <br /> <br />
          Two ways such that they collide at some point are:
        </p>{" "}
        <br />
        <ul>
          <li>
            Monkey 1 moves in a clockwise direction; monkey 2 moves in an
            anticlockwise direction; monkey 3 moves in a clockwise direction.
            Monkeys 1 and 2 collide.
          </li>
          <li>
            Monkey 1 moves in an anticlockwise direction; monkey 2 moves in an
            anticlockwise direction; monkey 3 moves in a clockwise direction.
            Monkeys 1 and 3 collide.
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 4</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">14</span>
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  204: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return{" "}
        <em>the number of prime numbers that are strictly less than</em>{" "}
        <code>n</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 10 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> There are 4 prime numbers less than 10,
        they are 2, 3, 5, 7.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 0 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= n &lt;= 5 * 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  258: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>num</code>, repeatedly add all its digits until
        the result has only one digit, and return it.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 38 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The process is <br />
        38 --&gt; 3 + 8 --&gt; 11 <br />
        11 --&gt; 1 + 1 --&gt; 2 <br />
        Since 2 has only one digit, return it.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 0 <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= num &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong> Could you do it without any loop/recursion
        in <code>O(1)</code> runtime?
      </p>
    </div>
  ),
  1250: (
    <div>
      <div class="elfjS" data-track-load="description_content">
        <p>
          Given an array <code>nums</code> of&nbsp;positive integers. Your task
          is to select some subset of <code>nums</code>, multiply each element
          by an integer and add all these numbers.&nbsp;The array is said to
          be&nbsp;<strong>good&nbsp;</strong>if you can obtain a sum of&nbsp;
          <code>1</code>&nbsp;from the array by any possible subset and
          multiplicand.
        </p>

        <p>
          Return&nbsp;<code>True</code>&nbsp;if the array is{" "}
          <strong>good&nbsp;</strong>otherwise&nbsp;return&nbsp;
          <code>False</code>.
        </p>

        <p>&nbsp;</p>
        <p>
          <strong class="example">Example 1:</strong>
        </p>

        <pre>
          <strong>Input:</strong> nums = [12,5,7,23] <br />
          <strong>Output:</strong> true <br />
          <strong>Explanation:</strong> Pick numbers 5 and 7. <br />
          5*3 + 7*(-2) = 1
        </pre>

        <p>
          <strong class="example">Example 2:</strong>
        </p>

        <pre>
          <strong>Input:</strong> nums = [29,6,10] <br />
          <strong>Output:</strong> true <br />
          <strong>Explanation:</strong> Pick numbers 29, 6 and 10. <br />
          29*1 + 6*(-3) + 10*(-1) = 1
        </pre>

        <p>
          <strong class="example">Example 3:</strong>
        </p>

        <pre>
          <strong>Input:</strong> nums = [3,6] <br />
          <strong>Output:</strong> false
        </pre>

        <p>&nbsp;</p>
        <p>
          <strong>Constraints:</strong>
        </p>

        <ul>
          <li>
            <code>1 &lt;= nums.length &lt;= 10^5</code>
          </li>
          <li>
            <code>1 &lt;= nums[i] &lt;= 10^9</code>
          </li>
        </ul>
      </div>
    </div>
  ),
  1492: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two positive integers <code>n</code> and <code>k</code>. A
        factor of an integer <code>n</code> is defined as an integer{" "}
        <code>i</code> where <code>n % i == 0</code>.
      </p>

      <p>
        Consider a list of all factors of <code>n</code> sorted in{" "}
        <strong>ascending order</strong>, return <em>the </em>
        <code>
          k<sup>th</sup>
        </code>
        <em> factor</em> in this list or return <code>-1</code> if{" "}
        <code>n</code> has less than <code>k</code> factors.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 12, k = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Factors list is [1, 2, 3, 4, 6, 12], the 3
        <sup>rd</sup> factor is 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 7, k = 2 <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> Factors list is [1, 7], the 2<sup>nd</sup>{" "}
        factor is 7.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4, k = 4 <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> Factors list is [1, 2, 4], there is only 3
        factors. We should return -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= n &lt;= 1000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow up:</strong>
      </p>

      <p>Could you solve this problem in less than O(n) complexity?</p>
    </div>
  ),
  1952: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer <code>n</code>, return <code>true</code>
        <em> if </em>
        <code>n</code>
        <em>
          {" "}
          has <strong>exactly three positive divisors</strong>. Otherwise,
          return{" "}
        </em>
        <code>false</code>.
      </p>

      <p>
        An integer <code>m</code> is a <strong>divisor</strong> of{" "}
        <code>n</code> if there exists an integer <code>k</code> such that{" "}
        <code>n = k * m</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> false <br />
        <strong>Explantion:</strong> 2 has only two divisors: 1 and 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> true <br />
        <strong>Explantion:</strong> 4 has three divisors: 1, 2, and 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1979: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return<strong> </strong>
        <em>
          the <strong>greatest common divisor</strong> of the smallest number
          and largest number in{" "}
        </em>
        <code>nums</code>.
      </p>

      <p>
        The <strong>greatest common divisor</strong> of two numbers is the
        largest positive integer that evenly divides both numbers.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,5,6,9,10] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        The smallest number in nums is 2.
        <br />
        The largest number in nums is 10.
        <br />
        The greatest common divisor of 2 and 10 is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [7,5,6,8,3]
        <br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong>
        <br />
        The smallest number in nums is 3.
        <br />
        The largest number in nums is 8.
        <br />
        The greatest common divisor of 3 and 8 is 1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,3]
        <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong>
        <br />
        The smallest number in nums is 3.
        <br />
        The largest number in nums is 3.
        <br />
        The greatest common divisor of 3 and 3 is 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  2413: (
    <div class="elfjS" data-track-load="description_content">
      Given a <strong>positive</strong> integer <code>n</code>, return{" "}
      <em>
        the smallest positive integer that is a multiple of{" "}
        <strong>both</strong>{" "}
      </em>
      <code>2</code>
      <em> and </em>
      <code>n</code>.<p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 5 <br />
        <strong>Output:</strong> 10 <br />
        <strong>Explanation:</strong> The smallest multiple of both 5 and 2 is
        10.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> n = 6 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The smallest multiple of both 6 and 2 is
        6. Note that a number is a multiple of itself.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= n &lt;= 150</code>
        </li>
      </ul>
    </div>
  ),
  2427: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two positive integers <code>a</code> and <code>b</code>, return{" "}
        <em>
          the number of <strong>common</strong> factors of{" "}
        </em>
        <code>a</code>
        <em> and </em>
        <code>b</code>.
      </p>

      <p>
        An integer <code>x</code> is a <strong>common factor</strong> of{" "}
        <code>a</code> and <code>b</code> if <code>x</code> divides both{" "}
        <code>a</code> and <code>b</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 12, b = 6 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The common factors of 12 and 6 are 1, 2,
        3, 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = 25, b = 30 <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The common factors of 25 and 30 are 1, 5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= a, b &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  2614: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a 0-indexed two-dimensional integer array{" "}
        <code>nums</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the largest <strong>prime</strong> number that lies on at least one of
          the <b>diagonals</b> of{" "}
        </em>
        <code>nums</code>. In case, no prime is present on any of the diagonals,
        return<em> 0.</em>
      </p>

      <p>Note that:</p>

      <ul>
        <li>
          An integer is <strong>prime</strong> if it is greater than{" "}
          <code>1</code> and has no positive integer divisors other than{" "}
          <code>1</code> and itself.
        </li>
        <li>
          An integer <code>val</code> is on one of the{" "}
          <strong>diagonals</strong> of <code>nums</code> if there exists an
          integer <code>i</code> for which <code>nums[i][i] = val</code> or an{" "}
          <code>i</code> for which{" "}
          <code>nums[i][nums.length - i - 1] = val</code>.
        </li>
      </ul>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2023/03/06/screenshot-2023-03-06-at-45648-pm.png"
          style={{ width: 181, height: 121 }}
        />
      </p>

      <p>
        In the above diagram, one diagonal is <strong>[1,5,9]</strong> and
        another diagonal is<strong> [3,5,7]</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [[1,2,3],[5,6,7],[9,10,11]] <br />
        <strong>Output:</strong> 11 <br />
        <strong>Explanation:</strong> The numbers 1, 3, 6, 9, and 11 are the
        only numbers present on at least one of the diagonals. Since 11 is the
        largest prime, we return 11.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [[1,2,3],[5,17,7],[9,11,10]] <br />
        <strong>Output:</strong> 17 <br />
        <strong>Explanation:</strong> The numbers 1, 3, 9, 10, and 17 are all
        present on at least one of the diagonals. 17 is the largest prime, so we
        return 17.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 300</code>
        </li>
        <li>
          <code>
            nums.length == nums<sub>i</sub>.length
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums<span>[i][j]</span>&nbsp;&lt;= 4*10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2862: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>1</strong>
        <strong>-indexed</strong> array <code>nums</code>. Your task is to
        select a <strong>complete subset</strong> from <code>nums</code> where
        every pair of selected indices multiplied is a{" "}
        <span
          data-keyword="perfect-square"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r73:"
              >
                <div>perfect square,</div>
              </div>
            </div>
          </div>
        </span>
        . i. e. if you select{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          a<sub>j</sub>
        </code>
        , <code>i * j</code> must be a perfect square.
      </p>

      <p>
        Return the <em>sum</em> of the complete subset with the{" "}
        <em>maximum sum</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [8,7,3,5,7,2,4,9]</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">16</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          We select elements at indices 2 and 8 and <code>2 * 8</code> is a
          perfect square.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [8,10,3,8,1,13,7,9,4]</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">20</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>
          We select elements at indices 1, 4, and 9. <code>1 * 4</code>,{" "}
          <code>1 * 9</code>, <code>4 * 9</code> are perfect squares.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n == nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3012: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> containing <strong>positive</strong> integers.
      </p>

      <p>
        Your task is to <strong>minimize</strong> the length of{" "}
        <code>nums</code> by performing the following operations{" "}
        <strong>any</strong> number of times (including zero):
      </p>

      <ul>
        <li>
          Select <strong>two</strong> <strong>distinct</strong> indices{" "}
          <code>i</code> and <code>j</code> from <code>nums</code>, such that{" "}
          <code>nums[i] &gt; 0</code> and <code>nums[j] &gt; 0</code>.
        </li>
        <li>
          Insert the result of <code>nums[i] % nums[j]</code> at the end of{" "}
          <code>nums</code>.
        </li>
        <li>
          Delete the elements at indices <code>i</code> and <code>j</code> from{" "}
          <code>nums</code>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          an integer denoting the <strong>minimum</strong>{" "}
          <strong>length</strong> of{" "}
        </em>
        <code>nums</code>
        <em> after performing the operation any number of times.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,4,3,1]
        <strong>Output:</strong> 1<strong>Explanation:</strong> One way to
        minimize the length of the array is as follows: <br />
        Operation 1: Select indices 2 and 1, insert nums[2] % nums[1] at the end
        and it becomes [1,4,3,1,3], then delete elements at indices 2 and 1.{" "}
        <br />
        nums becomes [1,1,3]. <br />
        Operation 2: Select indices 1 and 2, insert nums[1] % nums[2] at the end
        and it becomes [1,1,3,1], then delete elements at indices 1 and 2.{" "}
        <br />
        nums becomes [1,1]. <br />
        Operation 3: Select indices 1 and 0, insert nums[1] % nums[0] at the end
        and it becomes [1,1,0], then delete elements at indices 1 and 0. <br />
        nums becomes [0]. <br />
        The length of nums cannot be reduced further. Hence, the answer is 1.{" "}
        <br />
        It can be shown that 1 is the minimum achievable length.{" "}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,5,5,10,5]
        <strong>Output:</strong> 2<strong>Explanation:</strong> One way to
        minimize the length of the array is as follows: <br />
        Operation 1: Select indices 0 and 3, insert nums[0] % nums[3] at the end
        and it becomes [5,5,5,10,5,5], then delete elements at indices 0 and 3.{" "}
        <br />
        nums becomes [5,5,5,5]. <br />
        Operation 2: Select indices 2 and 3, insert nums[2] % nums[3] at the end
        and it becomes [5,5,5,5,0], then delete elements at indices 2 and 3.{" "}
        <br />
        nums becomes [5,5,0]. <br />
        Operation 3: Select indices 0 and 1, insert nums[0] % nums[1] at the end
        and it becomes [5,5,0,0], then delete elements at indices 0 and 1.{" "}
        <br />
        nums becomes [0,0]. <br />
        The length of nums cannot be reduced further. Hence, the answer is 2.{" "}
        <br />
        It can be shown that 2 is the minimum achievable length.{" "}
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,4] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> One way to minimize the length of the
        array is as follows: <br />
        Operation 1: Select indices 1 and 2, insert nums[1] % nums[2] at the end
        and it becomes [2,3,4,3], then delete elements at indices 1 and 2.{" "}
        <br />
        nums becomes [2,3]. <br />
        Operation 2: Select indices 1 and 0, insert nums[1] % nums[0] at the end
        and it becomes [2,3,1], then delete elements at indices 1 and 0. <br />
        nums becomes [1]. <br />
        The length of nums cannot be reduced further. Hence, the answer is 1.{" "}
        <br />
        It can be shown that 1 is the minimum achievable length.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3115: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>.
      </p>

      <p>
        Return an integer that is the <strong>maximum</strong> distance between
        the <strong>indices</strong> of two (not necessarily different) prime
        numbers in <code>nums</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [4,2,9,5,3]</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong> <code>nums[1]</code>,{" "}
          <code>nums[3]</code>, and <code>nums[4]</code> are prime. So the
          answer is <code>|4 - 1| = 3</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [4,8,2,8]</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong> <code>nums[2]</code> is prime. Because
          there is just one prime number, the answer is <code>|2 - 2| = 0</code>
          .
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 3 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
        <li>
          The input is generated such that the number of prime numbers in the{" "}
          <code>nums</code> is at least one.
        </li>
      </ul>
    </div>
  ),
  261: (
    <div class="markdown-body div-width">
      <p>
        Given <code>n</code> nodes labeled from <code>0</code> to{" "}
        <code>n-1</code> and a list of undirected edges (each edge is a pair of
        nodes), write a function to check whether these edges make up a valid
        tree.
      </p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <code>n = 5</code>, and{" "}
        <code>edges = [[0,1], [0,2], [0,3], [1,4]]</code> <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <code>n = 5, </code>and{" "}
        <code>edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]</code> <br />
        <strong>Output:</strong> false
      </pre>

      <p>
        <b>Note</b>: you can assume that no duplicate edges will appear in{" "}
        <code>edges</code>. Since all edges are undirected, <code>[0,1]</code>{" "}
        is the same as <code>[1,0]</code> and thus will not appear together in{" "}
        <code>edges</code>.
      </p>
    </div>
  ),
  323: (
    <div class="markdown-body div-width">
      <p>
        Given <code>n</code> nodes labeled from <code>0</code> to{" "}
        <code>n - 1</code> and a list of undirected edges (each edge is a pair
        of nodes), write a function to find the number of connected components
        in an undirected graph.
      </p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        <strong>Input: </strong>
        <code>n = 5</code> and <code>edges = [[0, 1], [1, 2], [3, 4]]</code>{" "}
        <br />
        <br />
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0323.Number%20of%20Connected%20Components%20in%20an%20Undirected%20Graph/images/conn1-graph.jpg"
          style={{ width: 382, height: 222 }}
        />
        <br />
        <strong>Output: </strong>2
      </pre>

      <p>
        <b>Example 2:</b>
      </p>

      <pre>
        <strong>Input: </strong>
        <code>n = 5</code> and{" "}
        <code>edges = [[0, 1], [1, 2], [2, 3], [3, 4]]</code> <br /> <br />
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0323.Number%20of%20Connected%20Components%20in%20an%20Undirected%20Graph/images/conn2-graph.jpg"
          style={{ width: 382, height: 222 }}
        />
        <br />
        <strong>Output:&nbsp;&nbsp;</strong>1
      </pre>

      <p>
        <b>Note:</b>
        <br />
        You can assume that no duplicate edges will appear in <code>edges</code>
        . Since all edges are undirected, <code>[0, 1]</code> is the same as{" "}
        <code>[1, 0]</code> and thus will not appear together in{" "}
        <code>edges</code>.
      </p>
    </div>
  ),
  547: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> cities. Some of them are connected, while some
        are not. If city <code>a</code> is connected directly with city{" "}
        <code>b</code>, and city <code>b</code> is connected directly with city{" "}
        <code>c</code>, then city <code>a</code> is connected indirectly with
        city <code>c</code>.
      </p>

      <p>
        A <strong>province</strong> is a group of directly or indirectly
        connected cities and no other cities outside of the group.
      </p>

      <p>
        You are given an <code>n x n</code> matrix <code>isConnected</code>{" "}
        where <code>isConnected[i][j] = 1</code> if the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        city and the{" "}
        <code>
          j<sup>th</sup>
        </code>{" "}
        city are directly connected, and <code>isConnected[i][j] = 0</code>{" "}
        otherwise.
      </p>

      <p>
        Return{" "}
        <em>
          the total number of <strong>provinces</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg"
        style={{ width: 222, height: 142 }}
      />
      <pre>
        <strong>Input:</strong> isConnected = [[1,1,0],[1,1,0],[0,0,1]] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/24/graph2.jpg"
        style={{ width: 222, height: 142 }}
      />
      <pre>
        <strong>Input:</strong> isConnected = [[1,0,0],[0,1,0],[0,0,1]] <br />
        <strong>Output:</strong> 3
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 200</code>
        </li>
        <li>
          <code>n == isConnected.length</code>
        </li>
        <li>
          <code>n == isConnected[i].length</code>
        </li>
        <li>
          <code>isConnected[i][j]</code> is <code>1</code> or <code>0</code>.
        </li>
        <li>
          <code>isConnected[i][i] == 1</code>
        </li>
        <li>
          <code>isConnected[i][j] == isConnected[j][i]</code>
        </li>
      </ul>
    </div>
  ),
  684: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        In this problem, a tree is an <strong>undirected graph</strong> that is
        connected and has no cycles.
      </p>

      <p>
        You are given a graph that started as a tree with <code>n</code> nodes
        labeled from <code>1</code> to <code>n</code>, with one additional edge
        added. The added edge has two <strong>different</strong> vertices chosen
        from <code>1</code> to <code>n</code>, and was not an edge that already
        existed. The graph is represented as an array <code>edges</code> of
        length <code>n</code> where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        in the graph.
      </p>

      <p>
        Return{" "}
        <em>
          an edge that can be removed so that the resulting graph is a tree of{" "}
        </em>
        <code>n</code>
        <em> nodes</em>. If there are multiple answers, return the answer that
        occurs last in the input.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/02/reduntant1-1-graph.jpg"
        style={{ width: 222, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> edges = [[1,2],[1,3],[2,3]] <br />
        <strong>Output:</strong> [2,3]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/05/02/reduntant1-2-graph.jpg"
        style={{ width: 382, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> edges = [[1,2],[2,3],[3,4],[1,4],[1,5]] <br />
        <strong>Output:</strong> [1,4]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == edges.length</code>
        </li>
        <li>
          <code>3 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt;= edges.length
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>There are no repeated edges.</li>
        <li>The given graph is connected.</li>
      </ul>
    </div>
  ),
  685: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        In this problem, a rooted tree is a <b>directed</b> graph such that,
        there is exactly one node (the root) for which all other nodes are
        descendants of this node, plus every node has exactly one parent, except
        for the root node which has no parents.
      </p>
      <p>
        The given input is a directed graph that started as a rooted tree with{" "}
        <code>n</code> nodes (with distinct values from <code>1</code> to{" "}
        <code>n</code>), with one additional directed edge added. The added edge
        has two different vertices chosen from <code>1</code> to <code>n</code>,
        and was not an edge that already existed.
      </p>
      <p>
        The resulting graph is given as a 2D-array of <code>edges</code>. Each
        element of <code>edges</code> is a pair{" "}
        <code>
          [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        that represents a <b>directed</b> edge connecting nodes{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>
        , where{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        is a parent of child{" "}
        <code>
          v<sub>i</sub>
        </code>
        .
      </p>
      <p>
        Return{" "}
        <em>
          an edge that can be removed so that the resulting graph is a rooted
          tree of
        </em>{" "}
        <code>n</code> <em>nodes</em>. If there are multiple answers, return the
        answer that occurs last in the given 2D-array.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/20/graph1.jpg"
        style={{ width: 222, height: 222 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> edges = [[1,2],[1,3],[2,3]] <br />
        <strong>Output:</strong> [2,3]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/12/20/graph2.jpg"
        style={{ width: 222, height: 382 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> edges = [[1,2],[2,3],[3,4],[4,1],[1,5]] <br />
        <strong>Output:</strong> [4,1]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>n == edges.length</code>
        </li>
        <li>
          <code>3 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
      </ul>
    </div>
  ),
  721: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a list of <code>accounts</code> where each element{" "}
        <code>accounts[i]</code> is a list of strings, where the first element{" "}
        <code>accounts[i][0]</code> is a name, and the rest of the elements are{" "}
        <strong>emails</strong> representing emails of the account.
      </p>

      <p>
        Now, we would like to merge these accounts. Two accounts definitely
        belong to the same person if there is some common email to both
        accounts. Note that even if two accounts have the same name, they may
        belong to different people as people could have the same name. A person
        can have any number of accounts initially, but all of their accounts
        definitely have the same name.
      </p>

      <p>
        After merging the accounts, return the accounts in the following format:
        the first element of each account is the name, and the rest of the
        elements are emails <strong>in sorted order</strong>. The accounts
        themselves can be returned in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> accounts =
        [["John","johnsmith@mail.com","john_newyork@mail.com"],["John","johnsmith@mail.com","john00@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]
        <br /> <strong>Output:</strong>{" "}
        [["John","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]
        <br /> <strong>Explanation:</strong> <br />
        The first and second John's are the same person as they have the common
        email "johnsmith@mail.com". <br />
        The third John and Mary are different people as none of their email
        addresses are used by other accounts. <br />
        We could return these lists in any order, for example the answer
        [['Mary', 'mary@mail.com'], <br /> ['John', 'johnnybravo@mail.com'],
        <br /> ['John', 'john00@mail.com', 'john_newyork@mail.com',
        'johnsmith@mail.com']] would still be accepted. <br />
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> accounts =
        [["Gabe","Gabe0@m.co","Gabe3@m.co","Gabe1@m.co"],["Kevin","Kevin3@m.co","Kevin5@m.co","Kevin0@m.co"],{" "}
        <br />
        ["Ethan","Ethan5@m.co","Ethan4@m.co","Ethan0@m.co"],["Hanzo","Hanzo3@m.co","Hanzo1@m.co","Hanzo0@m.co"],["Fern","Fern5@m.co","Fern1@m.co","Fern0@m.co"]]
        <br /> <strong>Output:</strong>{" "}
        [["Ethan","Ethan0@m.co","Ethan4@m.co","Ethan5@m.co"], <br />
        ["Gabe","Gabe0@m.co","Gabe1@m.co","Gabe3@m.co"],["Hanzo","Hanzo0@m.co","Hanzo1@m.co","Hanzo3@m.co"],["Kevin","Kevin0@m.co","Kevin3@m.co","Kevin5@m.co"],["Fern","Fern0@m.co","Fern1@m.co","Fern5@m.co"]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= accounts.length &lt;= 1000</code>
        </li>
        <li>
          <code>2 &lt;= accounts[i].length &lt;= 10</code>
        </li>
        <li>
          <code>1 &lt;= accounts[i][j].length &lt;= 30</code>
        </li>
        <li>
          <code>accounts[i][0]</code> consists of English letters.
        </li>
        <li>
          <code>accounts[i][j] (for j &gt; 0)</code> is a valid email.
        </li>
      </ul>
    </div>
  ),
  924: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a network of <code>n</code> nodes represented as an{" "}
        <code>n x n</code> adjacency matrix <code>graph</code>, where the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        node is directly connected to the{" "}
        <code>
          j<sup>th</sup>
        </code>{" "}
        node if <code>graph[i][j] == 1</code>.
      </p>

      <p>
        Some nodes <code>initial</code> are initially infected by malware.
        Whenever two nodes are directly connected, and at least one of those two
        nodes is infected by malware, both nodes will be infected by malware.
        This spread of malware will continue until no more nodes can be infected
        in this manner.
      </p>

      <p>
        Suppose <code>M(initial)</code> is the final number of nodes infected
        with malware in the entire network after the spread of malware stops. We
        will remove <strong>exactly one node</strong> from <code>initial</code>.
      </p>

      <p>
        Return the node that, if removed, would minimize <code>M(initial)</code>
        . If multiple nodes could be removed to minimize <code>M(initial)</code>
        , return such a node with <strong>the smallest index</strong>.
      </p>

      <p>
        Note that if a node was removed from the <code>initial</code> list of
        infected nodes, it might still be infected later due to the malware
        spread.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> graph = [[1,1,0],[1,1,0],[0,0,1]], initial =
        [0,1] <br />
        <strong>Output:</strong> 0 <br />
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> graph = [[1,0,0],[0,1,0],[0,0,1]], initial =
        [0,2] <br />
        <strong>Output:</strong> 0 <br />
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> graph = [[1,1,1],[1,1,1],[1,1,1]], initial =
        [1,2] <br />
        <strong>Output:</strong> 1
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == graph.length</code>
        </li>
        <li>
          <code>n == graph[i].length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 300</code>
        </li>
        <li>
          <code>graph[i][j]</code> is <code>0</code> or <code>1</code>.
        </li>
        <li>
          <code>graph[i][j] == graph[j][i]</code>
        </li>
        <li>
          <code>graph[i][i] == 1</code>
        </li>
        <li>
          <code>1 &lt;= initial.length &lt;= n</code>
        </li>
        <li>
          <code>0 &lt;= initial[i] &lt;= n - 1</code>
        </li>
        <li>
          All the integers in <code>initial</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  1061: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two strings of the same length <code>s1</code> and{" "}
        <code>s2</code> and a string <code>baseStr</code>.
      </p>

      <p>
        We say <code>s1[i]</code> and <code>s2[i]</code> are equivalent
        characters.
      </p>

      <ul>
        <li>
          For example, if <code>s1 = "abc"</code> and <code>s2 = "cde"</code>,
          then we have <code>'a' == 'c'</code>, <code>'b' == 'd'</code>, and{" "}
          <code>'c' == 'e'</code>.
        </li>
      </ul>

      <p>
        Equivalent characters follow the usual rules of any equivalence
        relation:
      </p>

      <ul>
        <li>
          <strong>Reflexivity:</strong> <code>'a' == 'a'</code>.
        </li>
        <li>
          <strong>Symmetry:</strong> <code>'a' == 'b'</code> implies{" "}
          <code>'b' == 'a'</code>.
        </li>
        <li>
          <strong>Transitivity:</strong> <code>'a' == 'b'</code> and{" "}
          <code>'b' == 'c'</code> implies <code>'a' == 'c'</code>.
        </li>
      </ul>

      <p>
        For example, given the equivalency information from{" "}
        <code>s1 = "abc"</code> and <code>s2 = "cde"</code>, <code>"acd"</code>{" "}
        and <code>"aab"</code> are equivalent strings of{" "}
        <code>baseStr = "eed"</code>, and <code>"aab"</code> is the
        lexicographically smallest equivalent string of <code>baseStr</code>.
      </p>

      <p>
        Return <em>the lexicographically smallest equivalent string of </em>
        <code>baseStr</code>
        <em> by using the equivalency information from </em>
        <code>s1</code>
        <em> and </em>
        <code>s2</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "parker", s2 = "morris", baseStr = "parser"{" "}
        <br />
        <strong>Output:</strong> "makkek" <br />
        <strong>Explanation:</strong> Based on the equivalency information in s1
        and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i].{" "}
        <br />
        The characters in each group are equivalent and sorted in
        lexicographical order. <br />
        So the answer is "makkek".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "hello", s2 = "world", baseStr = "hold"{" "}
        <br />
        <strong>Output:</strong> "hdld" <br />
        <strong>Explanation: </strong>Based on the equivalency information in s1
        and s2, we can group their characters as [h,w], [d,e,o], [l,r]. <br />
        So only the second letter 'o' in baseStr is changed to 'd', the answer
        is "hdld".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "leetcode", s2 = "programs", baseStr =
        "sourcecode" <br />
        <strong>Output:</strong> "aauaaaaada" <br />
        <strong>Explanation:</strong> We group the equivalent characters in s1
        and s2 as [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in
        baseStr except 'u' and 'd' are transformed to 'a', the answer is
        "aauaaaaada".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s1.length, s2.length, baseStr &lt;= 1000</code>
        </li>
        <li>
          <code>s1.length == s2.length</code>
        </li>
        <li>
          <code>s1</code>, <code>s2</code>, and <code>baseStr</code> consist of
          lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  1627: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        We have <code>n</code> cities labeled from <code>1</code> to{" "}
        <code>n</code>. Two different cities with labels <code>x</code> and{" "}
        <code>y</code> are directly connected by a bidirectional road if and
        only if <code>x</code> and <code>y</code> share a common divisor{" "}
        <strong>strictly greater</strong> than some <code>threshold</code>. More
        formally, cities with labels <code>x</code> and <code>y</code> have a
        road between them if there exists an integer <code>z</code> such that
        all of the following are true:
      </p>

      <ul>
        <li>
          <code>x % z == 0</code>,
        </li>
        <li>
          <code>y % z == 0</code>, and
        </li>
        <li>
          <code>z &gt; threshold</code>.
        </li>
      </ul>

      <p>
        Given the two integers, <code>n</code> and <code>threshold</code>, and
        an array of <code>queries</code>, you must determine for each{" "}
        <code>
          queries[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        if cities{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        are connected directly or indirectly.&nbsp;(i.e. there is some path
        between them).
      </p>

      <p>
        Return <em>an array </em>
        <code>answer</code>
        <em>, where </em>
        <code>answer.length == queries.length</code>
        <em> and </em>
        <code>answer[i]</code>
        <em> is </em>
        <code>true</code>
        <em> if for the </em>
        <code>
          i<sup>th</sup>
        </code>
        <em> query, there is a path between </em>
        <code>
          a<sub>i</sub>
        </code>
        <em> and </em>
        <code>
          b<sub>i</sub>
        </code>
        <em>, or </em>
        <code>answer[i]</code>
        <em> is </em>
        <code>false</code>
        <em> if there is no path.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/09/ex1.jpg"
        style={{ width: 382, height: 181 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, threshold = 2, queries =
        [[1,4],[2,5],[3,6]] <br />
        <strong>Output:</strong> [false,false,true] <br />
        <strong>Explanation:</strong> The divisors for each number: <br />
        1: 1 <br />
        2: 1, 2 <br />
        3: 1, <u>3</u> <br />
        4: 1, 2, <u>4</u> <br />
        5: 1, <u>5</u> <br />
        6: 1, 2, <u>3</u>, <u>6</u> <br />
        Using the underlined divisors above the threshold, only cities 3 and 6
        share a common divisor, so they are the <br />
        only ones directly connected. The result of each query: <br />
        [1,4] 1 is not connected to 4 <br />
        [2,5] 2 is not connected to 5 <br />
        [3,6] 3 is connected to 6 through path 3--6
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/10/tmp.jpg"
        style={{ width: 532, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, threshold = 0, queries =
        [[4,5],[3,4],[3,2],[2,6],[1,3]] <br />
        <strong>Output:</strong> [true,true,true,true,true] <br />
        <strong>Explanation:</strong> The divisors for each number are the same
        as the previous example. However, since the threshold is 0, all divisors
        can be used. Since all numbers share 1 as a divisor, all cities are
        connected.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/17/ex3.jpg"
        style={{ width: 282, height: 282 }}
      />
      <pre>
        <strong>Input:</strong> n = 5, threshold = 1, queries =
        [[4,5],[4,5],[3,2],[2,3],[3,4]] <br />
        <strong>Output:</strong> [false,false,false,false,false] <br />
        <strong>Explanation:</strong> Only cities 2 and 4 share a common divisor
        2 which is strictly greater than the threshold 1, so they are the only
        ones directly connected. Please notice that there can be multiple
        queries for the same pair of nodes [x, y], and that the query [x, y] is
        equivalent to the query [y, x].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= threshold &lt;= n</code>
        </li>
        <li>
          <code>
            1 &lt;= queries.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>queries[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= cities
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
      </ul>
    </div>
  ),
  1971: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a <strong>bi-directional</strong> graph with <code>n</code>{" "}
        vertices, where each vertex is labeled from <code>0</code> to{" "}
        <code>n - 1</code> (<strong>inclusive</strong>). The edges in the graph
        are represented as a 2D integer array <code>edges</code>, where each{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        denotes a bi-directional edge between vertex{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and vertex{" "}
        <code>
          v<sub>i</sub>
        </code>
        . Every vertex pair is connected by <strong>at most one</strong> edge,
        and no vertex has an edge to itself.
      </p>

      <p>
        You want to determine if there is a <strong>valid path</strong> that
        exists from vertex <code>source</code> to vertex{" "}
        <code>destination</code>.
      </p>

      <p>
        Given <code>edges</code> and the integers <code>n</code>,{" "}
        <code>source</code>, and <code>destination</code>, return{" "}
        <code>true</code>
        <em>
          {" "}
          if there is a <strong>valid path</strong> from{" "}
        </em>
        <code>source</code>
        <em> to </em>
        <code>destination</code>
        <em>, or </em>
        <code>false</code>
        <em> otherwise</em>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/14/validpath-ex1.png"
        style={{ width: 141, height: 121 }}
      />
      <pre>
        <strong>Input:</strong> n = 3, edges = [[0,1],[1,2],[2,0]], source = 0,
        destination = 2 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> There are two paths from vertex 0 to
        vertex 2: <br />
        - 0 → 1 → 2 <br />- 0 → 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/08/14/validpath-ex2.png"
        style={{ width: 281, height: 141 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]],
        source = 0, destination = 5 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> There is no path from vertex 0 to vertex
        5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= edges.length &lt;= 2 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
        <li>
          <code>0 &lt;= source, destination &lt;= n - 1</code>
        </li>
        <li>There are no duplicate edges.</li>
        <li>There are no self edges.</li>
      </ul>
    </div>
  ),
  2421: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a tree (i.e. a connected, undirected graph with no cycles)
        consisting of <code>n</code> nodes numbered from <code>0</code> to{" "}
        <code>n - 1</code> and exactly <code>n - 1</code> edges.
      </p>

      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>vals</code> of length <code>n</code> where <code>vals[i]</code>{" "}
        denotes the value of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        node. You are also given a 2D integer array <code>edges</code> where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        denotes that there exists an <strong>undirected</strong> edge connecting
        nodes{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>
        .
      </p>

      <p>
        A <strong>good path</strong> is a simple path that satisfies the
        following conditions:
      </p>

      <ol>
        <li>
          The starting node and the ending node have the <strong>same</strong>{" "}
          value.
        </li>
        <li>
          All nodes between the starting node and the ending node have values{" "}
          <strong>less than or equal to</strong> the starting node (i.e. the
          starting node's value should be the maximum value along the path).
        </li>
      </ol>

      <p>
        Return <em>the number of distinct good paths</em>.
      </p>

      <p>
        Note that a path and its reverse are counted as the{" "}
        <strong>same</strong> path. For example, <code>0 -&gt; 1</code> is
        considered to be the same as <code>1 -&gt; 0</code>. A single node is
        also considered as a valid path.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/08/04/f9caaac15b383af9115c5586779dec5.png"
        style={{ width: 400, height: 333 }}
      />
      <pre>
        <strong>Input:</strong> vals = [1,3,2,1,3], edges =
        [[0,1],[0,2],[2,3],[2,4]] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> There are 5 good paths consisting of a
        single node. <br />
        There is 1 additional good path: 1 -&gt; 0 -&gt; 2 -&gt; 4. <br />
        (The reverse path 4 -&gt; 2 -&gt; 0 -&gt; 1 is treated as the same as 1
        -&gt; 0 -&gt; 2 -&gt; 4.) <br />
        Note that 0 -&gt; 2 -&gt; 3 is not a good path because vals[2] &gt;
        vals[0].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/08/04/149d3065ec165a71a1b9aec890776ff.png"
        style={{ width: 273, height: 350 }}
      />
      <pre>
        <strong>Input:</strong> vals = [1,1,2,2,3], edges =
        [[0,1],[1,2],[2,3],[2,4]] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> There are 5 good paths consisting of a
        single node. <br />
        There are 2 additional good paths: 0 -&gt; 1 and 2 -&gt; 3.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/08/04/31705e22af3d9c0a557459bc7d1b62d.png"
        style={{ width: 100, height: 88 }}
      />
      <pre>
        <strong>Input:</strong> vals = [1], edges = [] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The tree consists of only one node, so
        there is one good path.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == vals.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= vals[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          <code>edges</code> represents a valid tree.
        </li>
      </ul>
    </div>
  ),
  3108: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an undirected weighted graph with <code>n</code> vertices
        labeled from <code>0</code> to <code>n - 1</code>.
      </p>

      <p>
        You are given the integer <code>n</code> and an array <code>edges</code>
        , where{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between vertices{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        with a weight of{" "}
        <code>
          w<sub>i</sub>
        </code>
        .
      </p>

      <p>
        A walk on a graph is a sequence of vertices and edges. The walk starts
        and ends with a vertex, and each edge connects the vertex that comes
        before it and the vertex that comes after it. It's important to note
        that a walk may visit the same edge or vertex more than once.
      </p>

      <p>
        The <strong>cost</strong> of a walk starting at node <code>u</code> and
        ending at node <code>v</code> is defined as the bitwise <code>AND</code>{" "}
        of the weights of the edges traversed during the walk. In other words,
        if the sequence of edge weights encountered during the walk is{" "}
        <code>
          w<sub>0</sub>, w<sub>1</sub>, w<sub>2</sub>, ..., w<sub>k</sub>
        </code>
        , then the cost is calculated as{" "}
        <code>
          w<sub>0</sub> &amp; w<sub>1</sub> &amp; w<sub>2</sub> &amp; ... &amp;
          w<sub>k</sub>
        </code>
        , where <code>&amp;</code> denotes the bitwise <code>AND</code>{" "}
        operator.
      </p>

      <p>
        You are also given a 2D array <code>query</code>, where{" "}
        <code>
          query[i] = [s<sub>i</sub>, t<sub>i</sub>]
        </code>
        . For each query, you need to find the minimum cost of the walk starting
        at vertex{" "}
        <code>
          s<sub>i</sub>
        </code>{" "}
        and ending at vertex{" "}
        <code>
          t<sub>i</sub>
        </code>
        . If there exists no such walk, the answer is <code>-1</code>.
      </p>

      <p>
        Return <em>the array </em>
        <code>answer</code>
        <em>, where </em>
        <code>answer[i]</code>
        <em>
          {" "}
          denotes the <strong>minimum</strong> cost of a walk for query{" "}
        </em>
        <code>i</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 5, edges = [[0,1,7],[1,3,7],[1,2,1]], query = [[0,3],[3,4]]
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">[1,-1]</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2024/01/31/q4_example1-1.png"
          style={{
            padding: 10,
            background: "rgb(255, 255, 255)",
            borderRadius: "0.5rem",
            width: 351,
            height: 141,
          }}
        />
        <p>
          To achieve the cost of 1 in the first query, we need to move on the
          following edges: <code>0-&gt;1</code> (weight 7), <code>1-&gt;2</code>{" "}
          (weight 1), <code>2-&gt;1</code> (weight 1), <code>1-&gt;3</code>{" "}
          (weight 7).
        </p>
        <br />
        <p>
          In the second query, there is no walk between nodes 3 and 4, so the
          answer is -1.
        </p>

        <p>
          <strong class="example">Example 2:</strong>
        </p>
      </div>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 3, edges = [[0,2,7],[0,1,15],[1,2,6],[1,2,1]], query = [[1,2]]
          </span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">[0]</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2024/01/31/q4_example2e.png"
          style={{
            padding: 10,
            background: "rgb(255, 255, 255)",
            borderRadius: "0.5rem",
            width: 211,
            height: 181,
          }}
        />
        <p>
          To achieve the cost of 0 in the first query, we need to move on the
          following edges: <code>1-&gt;2</code> (weight 1), <code>2-&gt;1</code>{" "}
          (weight 6), <code>1-&gt;2</code> (weight 1).
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= edges.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= w<sub>i</sub> &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= query.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>query[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= s<sub>i</sub>, t<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            s<sub>i</sub> !=&nbsp;t<sub>i</sub>
          </code>
        </li>
      </ul>
    </div>
  ),
  102: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>the level order traversal of its nodes' values</em>. (i.e., from
        left to right, level by level).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg"
        style={{ width: 277, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> [[3],[9,20],[15,7]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> [[1]]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 2000]</code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  103: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>the zigzag level order traversal of its nodes' values</em>. (i.e.,
        from left to right, then right to left for the next level and alternate
        between).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg"
        style={{ width: 277, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> [[3],[20,9],[15,7]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> [[1]]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 2000]</code>
          .
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  104: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>its maximum depth</em>.
      </p>
      <p>
        A binary tree's <strong>maximum depth</strong>&nbsp;is the number of
        nodes along the longest path from the root node down to the farthest
        leaf node.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg"
        style={{ width: 400, height: 277 }}
      />{" "}
      <br />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> 3
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> root = [1,null,2] <br />
        <strong>Output:</strong> 2
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [0, 10<sup>4</sup>]
          </code>
          .
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  107: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>the bottom-up level order traversal of its nodes' values</em>.
        (i.e., from left to right, level by level from leaf to root).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg"
        style={{ width: 277, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> [[15,7],[9,20],[3]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> [[1]]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 2000]</code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  111: (
    <div class="elfjS" data-track-load="description_content">
      <p>Given a binary tree, find its minimum depth.</p>

      <p>
        The minimum depth is the number of nodes along the shortest path from
        the root node down to the nearest leaf node.
      </p>

      <p>
        <strong>Note:</strong>&nbsp;A leaf is a node with no children.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg"
        style={{ width: 432, height: 302 }}
      />
      <pre>
        <strong>Input:</strong> root = [3,9,20,null,null,15,7] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [2,null,3,null,4,null,5,null,6] <br />
        <strong>Output:</strong> 5
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [0, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>-1000 &lt;= Node.val &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  226: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, invert the tree, and
        return <em>its root</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg"
        style={{ width: 500, height: 165 }}
      />
      <pre>
        <strong>Input:</strong> root = [4,2,7,1,3,6,9] <br />
        <strong>Output:</strong> [4,7,2,9,6,3,1]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg"
        style={{ width: 500, height: 120 }}
      />
      <pre>
        <strong>Input:</strong> root = [2,1,3] <br />
        <strong>Output:</strong> [2,3,1]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 100]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  286: (
    <div class="markdown-body div-width">
      <p>
        You are given a <i>m x n</i> 2D grid initialized with these three
        possible values.
      </p>

      <ul>
        <li>
          <code>-1</code> - A wall or an obstacle.
        </li>
        <li>
          <code>0</code> - A gate.
        </li>
        <li>
          <code>INF</code> - Infinity means an empty room. We use the value{" "}
          <code>
            2<sup>31</sup> - 1 = 2147483647
          </code>{" "}
          to represent <code>INF</code> as you may assume that the distance to a
          gate is less than <code>2147483647</code>.
        </li>
      </ul>

      <p>
        Fill each empty room with the distance to its <i>nearest</i> gate. If it
        is impossible to reach a gate, it should be filled with <code>INF</code>
        .
      </p>

      <p>
        <strong>Example:&nbsp;</strong>
      </p>

      <p>Given the 2D grid:</p>

      <pre>
        {`INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF`}
      </pre>

      <p>After running your function, the 2D grid should be:</p>

      <pre>
        {`  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4`}
      </pre>
    </div>
  ),
  934: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an <code>n x n</code> binary matrix <code>grid</code>{" "}
        where <code>1</code> represents land and <code>0</code> represents
        water.
      </p>

      <p>
        An <strong>island</strong> is a 4-directionally connected group of{" "}
        <code>1</code>'s not connected to any other <code>1</code>'s. There are{" "}
        <strong>exactly two islands</strong> in <code>grid</code>.
      </p>

      <p>
        You may change <code>0</code>'s to <code>1</code>'s to connect the two
        islands to form <strong>one island</strong>.
      </p>

      <p>
        Return <em>the smallest number of </em>
        <code>0</code>
        <em>'s you must flip to connect the two islands</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[0,1],[1,0]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid = [[0,1,0],[0,0,0],[0,0,1]] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> grid =
        [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == grid.length == grid[i].length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.
        </li>
        <li>
          There are exactly two islands in <code>grid</code>.
        </li>
      </ul>
    </div>
  ),
  1129: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code>, the number of nodes in a
        directed graph where the nodes are labeled from <code>0</code> to{" "}
        <code>n - 1</code>. Each edge is red or blue in this graph, and there
        could be self-edges and parallel edges.
      </p>

      <p>
        You are given two arrays <code>redEdges</code> and{" "}
        <code>blueEdges</code> where:
      </p>

      <ul>
        <li>
          <code>
            redEdges[i] = [a<sub>i</sub>, b<sub>i</sub>]
          </code>{" "}
          indicates that there is a directed red edge from node{" "}
          <code>
            a<sub>i</sub>
          </code>{" "}
          to node{" "}
          <code>
            b<sub>i</sub>
          </code>{" "}
          in the graph, and
        </li>
        <li>
          <code>
            blueEdges[j] = [u<sub>j</sub>, v<sub>j</sub>]
          </code>{" "}
          indicates that there is a directed blue edge from node{" "}
          <code>
            u<sub>j</sub>
          </code>{" "}
          to node{" "}
          <code>
            v<sub>j</sub>
          </code>{" "}
          in the graph.
        </li>
      </ul>

      <p>
        Return an array <code>answer</code> of length <code>n</code>, where each{" "}
        <code>answer[x]</code> is the length of the shortest path from node{" "}
        <code>0</code> to node <code>x</code> such that the edge colors
        alternate along the path, or <code>-1</code> if such a path does not
        exist.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, redEdges = [[0,1],[1,2]], blueEdges = []{" "}
        <br />
        <strong>Output:</strong> [0,1,-1]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]{" "}
        <br />
        <strong>Output:</strong> [0,1,-1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= redEdges.length,&nbsp;blueEdges.length &lt;= 400</code>
        </li>
        <li>
          <code>redEdges[i].length == blueEdges[j].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub>, u<sub>j</sub>, v<sub>j</sub>{" "}
            &lt; n
          </code>
        </li>
      </ul>
    </div>
  ),
  1236: (
    <div class="markdown-body div-width">
      <p>
        Given a url <code>startUrl</code> and an interface{" "}
        <code>HtmlParser</code>, implement a web crawler to crawl all links that
        are under the&nbsp;<strong>same hostname</strong> as&nbsp;
        <code>startUrl</code>.&nbsp;
      </p>

      <p>Returns all urls obtained by your web crawler in any order. </p>

      <p>Your crawler should:</p>

      <ul>
        <li>
          Start from the page: <code>startUrl</code>
        </li>
        <li>
          Call <code>HtmlParser.getUrls(url)</code> to get all urls from a
          webpage of given url.
        </li>
        <li>Do not crawl the same link twice.</li>
        <li>
          Only the links that are under the <strong>same hostname</strong> as
          startUrl&nbsp;should be explored by the crawler
        </li>
      </ul>

      <p>
        <img alt="" src="img/1236_1.png" />
      </p>

      <p>
        As shown in the example url above, the hostname is{" "}
        <code>example.org</code>. For simplicity sake, you may assume
        all&nbsp;urls use <strong>http protocol</strong> without any&nbsp;
        <strong>port</strong> specified.
      </p>

      <p>The function interface is defined like this:&nbsp;</p>

      <p>
        <code>{`interface HtmlParser {
        public:
        &nbsp; // Returns a list of urls contained in <em>url</em> .
        &nbsp; public List&lt;String&gt; getUrls(String url);
        }`}</code>
      </p>

      <p>
        Below there are two examples explaining the functionality of the
        problem, for custom testing purposes you'll have 3 variables&nbsp;
        <code data-stringify-type="code">urls</code>,&nbsp;
        <code data-stringify-type="code">edges</code>&nbsp;and&nbsp;
        <code data-stringify-type="code">startUrl</code>. Notice that you will
        only have access to&nbsp;
        <code data-stringify-type="code">startUrl</code>, while&nbsp;
        <code data-stringify-type="code">urls</code>&nbsp;and&nbsp;
        <code data-stringify-type="code">edges</code>&nbsp;are secret to you on
        the rest of the testcases.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <p>
        <img alt="" src="https://leetcode.ca/all/img/1236_1.png" />
      </p>

      <pre>
        <strong>Input:</strong>urls = [ <br />
        &nbsp; "http://news.yahoo.com", <br />
        &nbsp; "http://news.yahoo.com/news", <br />
        &nbsp; "http://news.yahoo.com/news/topics/", <br />
        &nbsp; "http://news.google.com", <br />
        &nbsp; "http://news.yahoo.com/us" <br />
        ] <br />
        edges = [[2,0],[2,1],[3,2],[3,1],[0,4]] <br />
        startUrl = "http://news.yahoo.com/news/topics/" <br />
        <strong>Output:</strong> [ <br />
        &nbsp; "http://news.yahoo.com", <br />
        &nbsp; "http://news.yahoo.com/news", <br />
        &nbsp; "http://news.yahoo.com/news/topics/", <br />
        &nbsp; "http://news.yahoo.com/us" <br />]
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/10/23/sample_3_1497.png"
            style={{ width: 540, height: 270 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong>
        urls = [ <br />
        &nbsp; "http://news.yahoo.com", <br />
        &nbsp; "http://news.yahoo.com/news", <br />
        &nbsp; "http://news.yahoo.com/news/topics/", <br />
        &nbsp; "http://news.google.com" <br />
        ] <br />
        edges = [[0,2],[2,1],[3,2],[3,1],[3,0]] <br />
        startUrl = "http://news.google.com" <br />
        <strong>Output:</strong> ["http://news.google.com"] <br />
        <strong>Explanation: </strong>The startUrl links to all other pages that
        do not share the same hostname.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= urls.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= urls[i].length &lt;= 300</code>
        </li>
        <li>
          <code>startUrl</code>&nbsp;is one of the <code>urls</code>.
        </li>
        <li>
          Hostname label must be from 1 to 63 characters long, including the
          dots, may contain only the ASCII letters from 'a' to&nbsp;'z',
          digits&nbsp; from '0' to '9' and the&nbsp;hyphen-minus&nbsp;character
          ('-').
        </li>
        <li>
          The hostname may not start or end with&nbsp;the hyphen-minus character
          ('-').&nbsp;
        </li>
        <li>
          See:&nbsp;&nbsp;
          <a href="https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames">
            https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames
          </a>
        </li>
        <li>You may assume there're&nbsp;no duplicates in url library.</li>
      </ul>
    </div>
  ),
  1609: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A binary tree is named <strong>Even-Odd</strong> if it meets the
        following conditions:
      </p>

      <ul>
        <li>
          The root of the binary tree is at level index <code>0</code>, its
          children are at level index <code>1</code>, their children are at
          level index <code>2</code>, etc.
        </li>
        <li>
          For every <strong>even-indexed</strong> level, all nodes at the level
          have <strong>odd</strong> integer values in{" "}
          <strong>strictly increasing</strong> order (from left to right).
        </li>
        <li>
          For every <b>odd-indexed</b> level, all nodes at the level have{" "}
          <b>even</b> integer values in <strong>strictly decreasing</strong>{" "}
          order (from left to right).
        </li>
      </ul>

      <p>
        Given the <code>root</code> of a binary tree, <em>return </em>
        <code>true</code>
        <em>
          {" "}
          if the binary tree is <strong>Even-Odd</strong>, otherwise return{" "}
        </em>
        <code>false</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/15/sample_1_1966.png"
        style={{ width: 362, height: 229 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,10,4,3,null,7,9,12,8,6,null,null,2]{" "}
        <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The node values on each level are: <br />
        Level 0: [1] <br />
        Level 1: [10,4] <br />
        Level 2: [3,7,9] <br />
        Level 3: [12,8,6,2] <br />
        Since levels 0 and 2 are all odd and increasing and levels 1 and 3 are
        all even and decreasing, the tree is Even-Odd.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/15/sample_2_1966.png"
        style={{ width: 363, height: 167 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,4,2,3,3,7] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The node values on each level are: <br />
        Level 0: [5] <br />
        Level 1: [4,2] <br />
        Level 2: [3,3,7] <br />
        Node values in level 2 must be in strictly increasing order, so the tree
        is not Even-Odd.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/22/sample_1_333_1966.png"
        style={{ width: 363, height: 167 }}
      />
      <pre>
        <strong>Input:</strong> root = [5,9,1,3,5,7] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Node values in the level 1 should be even
        integers.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1631: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are a hiker preparing for an upcoming hike. You are given{" "}
        <code>heights</code>, a 2D array of size <code>rows x columns</code>,
        where <code>heights[row][col]</code> represents the height of cell{" "}
        <code>(row, col)</code>. You are situated in the top-left cell,{" "}
        <code>(0, 0)</code>, and you hope to travel to the bottom-right cell,{" "}
        <code>(rows-1, columns-1)</code> (i.e.,&nbsp;<strong>0-indexed</strong>
        ). You can move <strong>up</strong>, <strong>down</strong>,{" "}
        <strong>left</strong>, or <strong>right</strong>, and you wish to find a
        route that requires the minimum <strong>effort</strong>.
      </p>

      <p>
        A route's <strong>effort</strong> is the{" "}
        <strong>maximum absolute difference</strong>
        <strong> </strong>in heights between two consecutive cells of the route.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum <strong>effort</strong> required to travel from the
          top-left cell to the bottom-right cell.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/10/04/ex1.png"
          style={{ width: 300, height: 300 }}
        />{" "}
      </p>

      <pre>
        <strong>Input:</strong> heights = [[1,2,2],[3,8,2],[5,3,5]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The route of [1,3,5,3,5] has a maximum
        absolute difference of 2 in consecutive cells. <br />
        This is better than the route of [1,2,2,2,5], where the maximum absolute
        difference is 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2020/10/04/ex2.png"
          style={{ width: 300, height: 300 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> heights = [[1,2,3],[3,8,4],[5,3,5]] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The route of [1,2,3,4,5] has a maximum
        absolute difference of 1 in consecutive cells, which is better than
        route [1,3,5,3,5].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/04/ex3.png"
        style={{ width: 300, height: 300 }}
      />
      <pre>
        <strong>Input:</strong> heights =
        [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> This route does not require any effort.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>rows == heights.length</code>
        </li>
        <li>
          <code>columns == heights[i].length</code>
        </li>
        <li>
          <code>1 &lt;= rows, columns &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= heights[i][j] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2492: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a positive integer <code>n</code> representing{" "}
        <code>n</code> cities numbered from <code>1</code> to <code>n</code>.
        You are also given a <strong>2D</strong> array <code>roads</code> where{" "}
        <code>
          roads[i] = [a<sub>i</sub>, b<sub>i</sub>, distance<sub>i</sub>]
        </code>{" "}
        indicates that there is a <strong>bidirectional </strong>road between
        cities{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        with a distance equal to{" "}
        <code>
          distance<sub>i</sub>
        </code>
        . The cities graph is not necessarily connected.
      </p>

      <p>
        The <strong>score</strong> of a path between two cities is defined as
        the <strong>minimum </strong>distance of a road in this path.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum </strong>possible score of a path between cities{" "}
        </em>
        <code>1</code>
        <em> and </em>
        <code>n</code>.
      </p>

      <p>
        <strong>Note</strong>:
      </p>

      <ul>
        <li>A path is a sequence of roads between two cities.</li>
        <li>
          It is allowed for a path to contain the same road{" "}
          <strong>multiple</strong> times, and you can visit cities{" "}
          <code>1</code> and <code>n</code> multiple times along the path.
        </li>
        <li>
          The test cases are generated such that there is{" "}
          <strong>at least</strong> one path between <code>1</code> and{" "}
          <code>n</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/12/graph11.png"
        style={{ width: 190, height: 231 }}
      />
      <pre>
        <strong>Input:</strong> n = 4, roads = [[1,2,9],[2,3,6],[2,4,5],[1,4,7]]{" "}
        <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The path from city 1 to 4 with the minimum
        score is: 1 -&gt; 2 -&gt; 4. The score of this path is min(9,5) = 5. It
        can be shown that no other path has less score.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/10/12/graph22.png"
        style={{ width: 190, height: 231 }}
      />
      <pre>
        <strong>Input:</strong> n = 4, roads = [[1,2,2],[1,3,4],[3,4,7]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> The path from city 1 to 4 with the minimum
        score is: 1 -&gt; 2 -&gt; 1 -&gt; 3 -&gt; 4. The score of this path is
        min(2,2,4,7) = 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= roads.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>roads[i].length == 3</code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= distance<sub>i</sub> &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>There are no repeated edges.</li>
        <li>
          There is at least one path between <code>1</code> and <code>n</code>.
        </li>
      </ul>
    </div>
  ),
  3157: (
    <>
      <p>
        Given the root of a binary tree <code>root</code> where each node has a
        value, return the level of the tree that has the{" "}
        <strong>minimum</strong> sum of values among all the levels (in case of
        a tie, return the <strong>lowest</strong> level).
      </p>

      <p>
        <strong>Note</strong> that the root of the tree is at level 1 and the
        level of any other node is its distance from the root + 1.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [50,6,2,30,80,7]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/3100-3199/3157.Find%20the%20Level%20of%20Tree%20with%20Minimum%20Sum/images/image_2024-05-17_16-15-46.png"
            style={{
              padding: 10,
              background: "rgb(255, 255, 255)",
              borderRadius: "0.5rem",
              width: 265,
              height: 129,
            }}
          />
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [36,17,10,null,null,24]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/3100-3199/3157.Find%20the%20Level%20of%20Tree%20with%20Minimum%20Sum/images/image_2024-05-17_16-14-18.png"
            style={{
              padding: 10,
              background: "rgb(255, 255, 255)",
              borderRadius: "0.5rem",
              width: 170,
              height: 135,
            }}
          />
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [5,null,5,null,5]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/3100-3199/3157.Find%20the%20Level%20of%20Tree%20with%20Minimum%20Sum/images/image_2024-05-19_19-07-20.png"
          />
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range{" "}
          <code>
            [1, 10<sup>5</sup>]
          </code>
          .
        </li>
        <li>
          <code>
            1 &lt;= Node.val &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </>
  ),
  199: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, imagine yourself standing
        on the <strong>right side</strong> of it, return{" "}
        <em>the values of the nodes you can see ordered from top to bottom</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [1,2,3,null,5,null,4]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1,3,4]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/11/24/tmpd5jn43fs-1.png"
            style={{ width: 400, height: 207 }}
          />
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [1,2,3,4,null,null,null,5]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1,3,4,5]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/11/24/tmpkpe40xeh-1.png"
            style={{ width: 400, height: 214 }}
          />
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">root = [1,null,3]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[1,3]</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 4:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">root = []</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[]</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[0, 100]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  294: (
    <div class="markdown-body div-width">
      <p>
        You are playing the following Flip Game with your friend: Given a string
        that contains only these two characters: <code>+</code> and{" "}
        <code>-</code>, you and your friend take turns to flip two{" "}
        <b>consecutive</b> <code>"++"</code> into <code>"--"</code>. The game
        ends when a person can no longer make a move and therefore the other
        person will be the winner.
      </p>

      <p>
        Write a function to determine if the starting player can guarantee a
        win.
      </p>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <code>s = "++++"</code> <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation: </strong>The starting player can guarantee a win by
        flipping the middle <code>"++"</code> to become <code>"+--+"</code>.
      </pre>
    </div>
  ),
  375: (
    <div class="elfjS" data-track-load="description_content">
      <p>We are playing the Guessing Game. The game will work as follows:</p>

      <ul>
        <li>
          I pick a number between&nbsp;<code>1</code>&nbsp;and&nbsp;
          <code>n</code>.
        </li>
        <li>You guess a number.</li>
        <li>
          If you guess the right number, <strong>you win the game</strong>.
        </li>
        <li>
          If you guess the wrong number, then I will tell you whether the number
          I picked is <strong>higher or lower</strong>, and you will continue
          guessing.
        </li>
        <li>
          Every time you guess a wrong number&nbsp;<code>x</code>, you will
          pay&nbsp;<code>x</code>&nbsp;dollars. If you run out of money,{" "}
          <strong>you lose the game</strong>.
        </li>
      </ul>

      <p>
        Given a particular&nbsp;<code>n</code>, return&nbsp;
        <em>
          the minimum amount of money you need to&nbsp;
          <strong>guarantee a win regardless of what number I pick</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/10/graph.png"
        style={{ width: 505, height: 388 }}
      />
      <pre>
        <strong>Input:</strong> n = 10 <br />
        <strong>Output:</strong> 16 <br />
        <strong>Explanation:</strong> The winning strategy is as follows: <br />
        - The range is [1,10]. Guess 7. <br />
        &nbsp; - If this is my number, your total is $0. Otherwise, you pay $7.{" "}
        <br />
        &nbsp; - If my number is higher, the range is [8,10]. Guess 9. <br />
        &nbsp; - If this is my number, your total is $7. Otherwise, you pay $9.{" "}
        <br />
        &nbsp; - If my number is higher, it must be 10. Guess 10. Your total is
        $7 + $9 = $16. <br />
        &nbsp; - If my number is lower, it must be 8. Guess 8. Your total is $7
        + $9 = $16.
        <br />
        &nbsp; - If my number is lower, the range is [1,6]. Guess 3.
        <br />
        &nbsp; - If this is my number, your total is $7. Otherwise, you pay $3.
        <br />
        &nbsp; - If my number is higher, the range is [4,6]. Guess 5.
        <br />
        &nbsp; - If this is my number, your total is $7 + $3 = $10. Otherwise,
        you pay $5.
        <br />
        &nbsp; - If my number is higher, it must be 6. Guess 6. Your total is $7
        + $3 + $5 = $15.
        <br />
        &nbsp; - If my number is lower, it must be 4. Guess 4. Your total is $7
        + $3 + $5 = $15.
        <br />
        &nbsp; - If my number is lower, the range is [1,2]. Guess 1.
        <br />
        &nbsp; - If this is my number, your total is $7 + $3 = $10. Otherwise,
        you pay $1.
        <br />
        &nbsp; - If my number is higher, it must be 2. Guess 2. Your total is $7
        + $3 + $1 = $11.
        <br />
        The worst case in all these scenarios is that you pay $16. Hence, you
        only need $16 to guarantee a win.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1<br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong>&nbsp;There is only one possible number, so
        you can guess 1 and not have to pay anything.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2<br />
        <strong>Output:</strong> 1<br />
        <strong>Explanation:</strong>&nbsp;There are two possible numbers, 1 and
        2.
        <br />
        - Guess 1.
        <br />
        &nbsp; - If this is my number, your total is $0. Otherwise, you pay $1.
        <br />
        &nbsp; - If my number is higher, it must be 2. Guess 2. Your total is
        $1.
        <br />
        The worst case is that you pay $1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 200</code>
        </li>
      </ul>
    </div>
  ),
  486: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>. Two players are
        playing a game with this array: player 1 and player 2.
      </p>

      <p>
        Player 1 and player 2 take turns, with player 1 starting first. Both
        players start the game with a score of <code>0</code>. At each turn, the
        player takes one of the numbers from either end of the array (i.e.,{" "}
        <code>nums[0]</code> or <code>nums[nums.length - 1]</code>) which
        reduces the size of the array by <code>1</code>. The player adds the
        chosen number to their score. The game ends when there are no more
        elements in the array.
      </p>

      <p>
        Return <code>true</code> if Player 1 can win the game. If the scores of
        both players are equal, then player 1 is still the winner, and you
        should also return <code>true</code>. You may assume that both players
        are playing optimally.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,5,2] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Initially, player 1 can choose between 1
        and 2. <br />
        If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If
        player 2 chooses 5, then player 1 will be left with 1 (or 2). <br />
        So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. <br />
        Hence, player 1 will never be the winner and you need to return false.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,5,233,7] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Player 1 first chooses 1. Then player 2
        has to choose between 5 and 7. No matter which number player 2 choose,
        player 1 can choose 233. <br />
        Finally, player 1 has more score (234) than player 2 (12), so you need
        to return True representing player1 can win.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 20</code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>7</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  877: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice and Bob play a game with piles of stones. There are an{" "}
        <strong>even</strong> number of piles arranged in a row, and each pile
        has a <strong>positive</strong> integer number of stones{" "}
        <code>piles[i]</code>.
      </p>

      <p>
        The objective of the game is to end with the most stones. The{" "}
        <strong>total</strong> number of stones across all the piles is{" "}
        <strong>odd</strong>, so there are no ties.
      </p>

      <p>
        Alice and Bob take turns, with <strong>Alice starting first</strong>.
        Each turn, a player takes the entire pile of stones either from the{" "}
        <strong>beginning</strong> or from the <strong>end</strong> of the row.
        This continues until there are no more piles left, at which point the
        person with the <strong>most stones wins</strong>.
      </p>

      <p>
        Assuming Alice and Bob play optimally, return <code>true</code>
        <em> if Alice wins the game, or </em>
        <code>false</code>
        <em> if Bob wins</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> piles = [5,3,4,5] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> <br />
        Alice starts first, and can only take the first 5 or the last 5. <br />
        Say she takes the first 5, so that the row becomes [3, 4, 5]. <br />
        If Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with
        10 points. <br />
        If Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to
        win with 9 points. <br />
        This demonstrated that taking the first 5 was a winning move for Alice,
        so we return true.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> piles = [3,7,2,3] <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= piles.length &lt;= 500</code>
        </li>
        <li>
          <code>piles.length</code> is <strong>even</strong>.
        </li>
        <li>
          <code>1 &lt;= piles[i] &lt;= 500</code>
        </li>
        <li>
          <code>sum(piles[i])</code> is <strong>odd</strong>.
        </li>
      </ul>
    </div>
  ),
  1140: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice and Bob continue their games with piles of stones. There are a
        number of piles <strong>arranged in a row</strong>, and each pile has a
        positive integer number of stones <code>piles[i]</code>. The objective
        of the game is to end with the most stones.
      </p>

      <p>Alice and Bob take turns, with Alice starting first.</p>

      <p>
        On each player's turn, that player can take{" "}
        <strong>all the stones</strong> in the <strong>first</strong>{" "}
        <code>X</code> remaining piles, where <code>1 &lt;= X &lt;= 2M</code>.
        Then, we set <code>M = max(M, X)</code>. Initially, M = 1.
      </p>

      <p>The game continues until all the stones have been taken.</p>

      <p>
        Assuming Alice and Bob play optimally, return the maximum number of
        stones Alice can get.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">piles = [2,7,9,4,4]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">10</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <ul>
          <li>
            If Alice takes one pile at the beginning, Bob takes two piles, then
            Alice takes 2 piles again. Alice can get <code>2 + 4 + 4 = 10</code>{" "}
            stones in total.
          </li>
          <li>
            If Alice takes two piles at the beginning, then Bob can take all
            three piles left. In this case, Alice get <code>2 + 7 = 9</code>{" "}
            stones in total.
          </li>
        </ul>
        <br />
        <p>So we return 10 since it's larger.</p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">piles = [1,2,3,4,5,100]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">104</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= piles.length &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= piles[i]&nbsp;&lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1406: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice and Bob continue their games with piles of stones. There are
        several stones <strong>arranged in a row</strong>, and each stone has an
        associated value which is an integer given in the array{" "}
        <code>stoneValue</code>.
      </p>

      <p>
        Alice and Bob take turns, with Alice starting first. On each player's
        turn, that player can take <code>1</code>, <code>2</code>, or{" "}
        <code>3</code> stones from the <strong>first</strong> remaining stones
        in the row.
      </p>

      <p>
        The score of each player is the sum of the values of the stones taken.
        The score of each player is <code>0</code> initially.
      </p>

      <p>
        The objective of the game is to end with the highest score, and the
        winner is the player with the highest score and there could be a tie.
        The game continues until all the stones have been taken.
      </p>

      <p>
        Assume Alice and Bob <strong>play optimally</strong>.
      </p>

      <p>
        Return <code>"Alice"</code>
        <em> if Alice will win, </em>
        <code>"Bob"</code>
        <em> if Bob will win, or </em>
        <code>"Tie"</code>
        <em> if they will end the game with the same score</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stoneValue = [1,2,3,7] <br />
        <strong>Output:</strong> "Bob" <br />
        <strong>Explanation:</strong> Alice will always lose. Her best move will
        be to take three piles and the score become 6. Now the score of Bob is 7
        and Bob wins.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stoneValue = [1,2,3,-9] <br />
        <strong>Output:</strong> "Alice" <br />
        <strong>Explanation:</strong> Alice must choose all the three piles at
        the first move to win and leave Bob with negative score.
        <br /> If Alice chooses one pile her score will be 1 and the next move
        Bob's score becomes 5. In the next move, Alice will take the pile with
        value = -9 and lose.
        <br /> If Alice chooses two piles her score will be 3 and the next move
        Bob's score becomes 3. In the next move, Alice will take the pile with
        value = -9 and also lose.
        <br /> Remember that both play optimally so here Alice will choose the
        scenario that makes her win.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stoneValue = [1,2,3,6] <br />
        <strong>Output:</strong> "Tie" <br />
        <strong>Explanation:</strong> Alice cannot win this game. She can end
        the game in a draw if she decided to choose all the first three piles,
        otherwise she will lose.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= stoneValue.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>-1000 &lt;= stoneValue[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1510: (
    <div class="elfjS" data-track-load="description_content">
      <p>Alice and Bob take turns playing a game, with Alice starting first.</p>

      <p>
        Initially, there are <code>n</code> stones in a pile. On each player's
        turn, that player makes a <em>move</em> consisting of removing{" "}
        <strong>any</strong> non-zero <strong>square number</strong> of stones
        in the pile.
      </p>

      <p>Also, if a player cannot make a move, he/she loses the game.</p>

      <p>
        Given a positive integer <code>n</code>, return <code>true</code> if and
        only if Alice wins the game otherwise return <code>false</code>,
        assuming both players play optimally.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation: </strong>Alice can remove 1 stone winning the game
        because Bob doesn't have any moves.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation: </strong>Alice can only remove 1 stone, after that
        Bob removes the last one winning the game (2 -&gt; 1 -&gt; 0).
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 4 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> n is already a perfect square, Alice can
        win with one move, removing 4 stones (4 -&gt; 0).
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1686: (
    <div class="elfjS" data-track-load="description_content">
      <p>Alice and Bob take turns playing a game, with Alice starting first.</p>

      <p>
        There are <code>n</code> stones in a pile. On each player's turn, they
        can <strong>remove</strong> a stone from the pile and receive points
        based on the stone's value. Alice and Bob may{" "}
        <strong>value the stones differently</strong>.
      </p>

      <p>
        You are given two integer arrays of length <code>n</code>,{" "}
        <code>aliceValues</code> and <code>bobValues</code>. Each{" "}
        <code>aliceValues[i]</code> and <code>bobValues[i]</code> represents how
        Alice and Bob, respectively, value the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        stone.
      </p>

      <p>
        The winner is the person with the most points after all the stones are
        chosen. If both players have the same amount of points, the game results
        in a draw. Both players will play <strong>optimally</strong>.&nbsp;Both
        players know the other's values.
      </p>

      <p>Determine the result of the game, and:</p>

      <ul>
        <li>
          If Alice wins, return <code>1</code>.
        </li>
        <li>
          If Bob wins, return <code>-1</code>.
        </li>
        <li>
          If the game results in a draw, return <code>0</code>.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> aliceValues = [1,3], bobValues = [2,1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> <br />
        If Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.{" "}
        <br />
        Bob can only choose stone 0, and will only receive 2 points. <br />
        Alice wins.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> aliceValues = [1,2], bobValues = [3,1] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> <br />
        If Alice takes stone 0, and Bob takes stone 1, they will both have 1
        point. Draw.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> aliceValues = [2,4,3], bobValues = [1,6,7]{" "}
        <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> <br />
        Regardless of how Alice plays, Bob will be able to have more points than
        Alice. <br />
        For example, if Alice takes stone 1, Bob can take stone 2, and Alice
        takes stone 0, Alice will have 6 points to Bob's 7. <br />
        Bob wins.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == aliceValues.length == bobValues.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= aliceValues[i], bobValues[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1690: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice and Bob take turns playing a game, with{" "}
        <strong>Alice starting first</strong>.
      </p>

      <p>
        There are <code>n</code> stones arranged in a row. On each player's
        turn, they can <strong>remove</strong> either the leftmost stone or the
        rightmost stone from the row and receive points equal to the{" "}
        <strong>sum</strong> of the remaining stones' values in the row. The
        winner is the one with the higher score when there are no stones left to
        remove.
      </p>

      <p>
        Bob found that he will always lose this game (poor Bob, he always
        loses), so he decided to{" "}
        <strong>minimize the score's difference</strong>. Alice's goal is to{" "}
        <strong>maximize the difference</strong> in the score.
      </p>

      <p>
        Given an array of integers <code>stones</code> where{" "}
        <code>stones[i]</code> represents the value of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        stone <strong>from the left</strong>, return{" "}
        <em>
          the <strong>difference</strong> in Alice and Bob's score if they both
          play <strong>optimally</strong>.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [5,3,1,4,2] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> <br />
        - Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob =
        0, stones = [5,3,1,4]. <br />
        - Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8,
        stones = [3,1,4]. <br />
        - Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones
        = [1,4]. <br />- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12,
        stones = [4]. <br />- Alice removes 4 and gets 0 points. Alice = 18, Bob
        = 12, stones = []. <br />
        The score difference is 18 - 12 = 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [7,90,5,1,100,10,10,2] <br />
        <strong>Output:</strong> 122
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == stones.length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= stones[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1872: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice and Bob take turns playing a game, with{" "}
        <strong>Alice starting first</strong>.
      </p>

      <p>
        There are <code>n</code> stones arranged in a row. On each player's
        turn, while the number of stones is <strong>more than one</strong>, they
        will do the following:
      </p>

      <ul>
        <li>
          Choose an integer <code>x &gt; 1</code>, and <strong>remove</strong>{" "}
          the leftmost <code>x</code> stones from the row.
        </li>
        <li>
          Add the <strong>sum</strong> of the <strong>removed</strong> stones'
          values to the player's score.
        </li>
        <li>
          Place a <strong>new stone</strong>, whose value is equal to that sum,
          on the left side of the row.
        </li>
      </ul>

      <p>
        The game stops when <strong>only</strong> <strong>one</strong> stone is
        left in the row.
      </p>

      <p>
        The <strong>score difference</strong> between Alice and Bob is{" "}
        <code>(Alice's score - Bob's score)</code>. Alice's goal is to{" "}
        <strong>maximize</strong> the score difference, and Bob's goal is the{" "}
        <strong>minimize</strong> the score difference.
      </p>

      <p>
        Given an integer array <code>stones</code> of length <code>n</code>{" "}
        where <code>stones[i]</code> represents the value of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        stone <strong>from the left</strong>, return{" "}
        <em>
          the <strong>score difference</strong> between Alice and Bob if they
          both play <strong>optimally</strong>.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [-1,2,-3,4,-5]
        <br />
        <strong>Output:</strong> 5<br />
        <strong>Explanation:</strong>
        <br />
        - Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her
        score, and places a stone of
        <br />
        value 2 on the left. stones = [2,-5].
        <br />
        - Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and
        places a stone of value -3 on
        <br />
        the left. stones = [-3].
        <br />
        The difference between their scores is 2 - (-3) = 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [7,-6,5,10,5,-2,-6]
        <br />
        <strong>Output:</strong> 13
        <br />
        <strong>Explanation:</strong> <br />
        - Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) =
        13 to her score, and places a<br />
        stone of value 13 on the left. stones = [13].
        <br />
        The difference between their scores is 13 - 0 = 13.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [-10,-12] <br />
        <strong>Output:</strong> -22 <br />
        <strong>Explanation:</strong> <br />
        - Alice can only make one move, which is to remove both stones. She adds
        (-10) + (-12) = -22 to her <br />
        score and places a stone of value -22 on the left. stones = [-22].
        <br />
        The difference between their scores is (-22) - 0 = -22.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == stones.length</code>
        </li>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>4</sup> &lt;= stones[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2029: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Alice and Bob continue their games with stones. There is a row of n
        stones, and each stone has an associated value. You are given an integer
        array <code>stones</code>, where <code>stones[i]</code> is the{" "}
        <strong>value</strong> of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        stone.
      </p>

      <p>
        Alice and Bob take turns, with <strong>Alice</strong> starting first. On
        each turn, the player may remove any stone from <code>stones</code>. The
        player who removes a stone <strong>loses</strong> if the{" "}
        <strong>sum</strong> of the values of{" "}
        <strong>all removed stones</strong> is divisible by <code>3</code>. Bob
        will win automatically if there are no remaining stones (even if it is
        Alice's turn).
      </p>

      <p>
        Assuming both players play <strong>optimally</strong>, return{" "}
        <code>true</code> <em>if Alice wins and</em> <code>false</code>{" "}
        <em>if Bob wins</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [2,1] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong>&nbsp;The game will be played as follows:{" "}
        <br />
        - Turn 1: Alice can remove either stone. <br />
        - Turn 2: Bob removes the remaining stone. <br />
        The sum of the removed stones is 1 + 2 = 3 and is divisible by 3.
        Therefore, Bob loses and Alice wins the game.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [2] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong>&nbsp;Alice will remove the only stone, and
        the sum of the values on the removed stones is 2.
        <br /> Since all the stones are removed and the sum of values is not
        divisible by 3, Bob wins the game.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> stones = [5,1,2,4,3] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Bob will always win. One possible way for
        Bob to win is shown below: <br />
        - Turn 1: Alice can remove the second stone with value 1. Sum of removed
        stones = 1. <br />
        - Turn 2: Bob removes the fifth stone with value 3. Sum of removed
        stones = 1 + 3 = 4. <br />
        - Turn 3: Alices removes the fourth stone with value 4. Sum of removed
        stones = 1 + 3 + 4 = 8. <br />
        - Turn 4: Bob removes the third stone with value 2. Sum of removed
        stones = 1 + 3 + 4 + 2 = 10. <br />
        - Turn 5: Alice removes the first stone with value 5. Sum of removed
        stones = 1 + 3 + 4 + 2 + 5 = 15. <br />
        Alice loses the game because the sum of the removed stones (15) is
        divisible by 3. Bob wins the game.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= stones.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= stones[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2038: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> pieces arranged in a line, and each piece is
        colored either by <code>'A'</code> or by <code>'B'</code>. You are given
        a string <code>colors</code> of length <code>n</code> where{" "}
        <code>colors[i]</code> is the color of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        piece.
      </p>

      <p>
        Alice and Bob are playing a game where they take{" "}
        <strong>alternating turns</strong> removing pieces from the line. In
        this game, Alice moves<strong> first</strong>.
      </p>

      <ul>
        <li>
          Alice is only allowed to remove a piece colored <code>'A'</code> if{" "}
          <strong>both its neighbors</strong> are also colored <code>'A'</code>.
          She is <strong>not allowed</strong> to remove pieces that are colored{" "}
          <code>'B'</code>.
        </li>
        <li>
          Bob is only allowed to remove a piece colored <code>'B'</code> if{" "}
          <strong>both its neighbors</strong> are also colored <code>'B'</code>.
          He is <strong>not allowed</strong> to remove pieces that are colored{" "}
          <code>'A'</code>.
        </li>
        <li>
          Alice and Bob <strong>cannot</strong> remove pieces from the edge of
          the line.
        </li>
        <li>
          If a player cannot make a move on their turn, that player{" "}
          <strong>loses</strong> and the other player <strong>wins</strong>.
        </li>
      </ul>

      <p>
        Assuming Alice and Bob play optimally, return <code>true</code>
        <em> if Alice wins, or return </em>
        <code>false</code>
        <em> if Bob wins</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> colors = "AAABABB" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> <br />A<u>A</u>ABABB -&gt; AABABB
        <br />
        Alice moves first.
        <br />
        She removes the second 'A' from the left since that is the only 'A'
        whose neighbors are both 'A'.
        <br />
        Now it's Bob's turn.
        <br />
        Bob cannot make a move on his turn since there are no 'B's whose
        neighbors are both 'B'.
        <br />
        Thus, Alice wins, so return true.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> colors = "AA"
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong>
        <br />
        Alice has her turn first.
        <br />
        There are only two 'A's and both are on the edge of the line, so she
        cannot move on her turn.
        <br />
        Thus, Bob wins, so return false.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> colors = "ABBBBBBBAAA"
        <br />
        <strong>Output:</strong> false
        <br />
        <strong>Explanation:</strong>
        <br />
        ABBBBBBBA<u>A</u>A -&gt; ABBBBBBBAA
        <br />
        Alice moves first.
        <br />
        Her only option is to remove the second to last 'A' from the right.
        <br />
        ABBBB<u>B</u>BBAA -&gt; ABBBBBBAA Next is Bob's turn.
        <br />
        He has many options for which 'B' piece to remove. He can pick any.
        <br />
        <br />
        On Alice's second turn, she has no more pieces that she can remove.
        <br />
        Thus, Bob wins, so return false.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;=&nbsp;colors.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>colors</code>&nbsp;consists of only the letters&nbsp;
          <code>'A'</code>&nbsp;and&nbsp;<code>'B'</code>
        </li>
      </ul>
    </div>
  ),
  299: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are playing the{" "}
        <strong>
          <a
            href="https://en.wikipedia.org/wiki/Bulls_and_Cows"
            target="_blank"
            rel="noreferrer"
          >
            Bulls and Cows
          </a>
        </strong>{" "}
        game with your friend.
      </p>

      <p>
        You write down a secret number and ask your friend to guess what the
        number is. When your friend makes a guess, you provide a hint with the
        following info:
      </p>

      <ul>
        <li>
          The number of "bulls", which are digits in the guess that are in the
          correct position.
        </li>
        <li>
          The number of "cows", which are digits in the guess that are in your
          secret number but are located in the wrong position. Specifically, the
          non-bull digits in the guess that could be rearranged such that they
          become bulls.
        </li>
      </ul>

      <p>
        Given the secret number <code>secret</code> and your friend's guess{" "}
        <code>guess</code>, return <em>the hint for your friend's guess</em>.
      </p>

      <p>
        The hint should be formatted as <code>"xAyB"</code>, where{" "}
        <code>x</code> is the number of bulls and <code>y</code> is the number
        of cows. Note that both <code>secret</code> and <code>guess</code> may
        contain duplicate digits.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> secret = "1807", guess = "7810" <br />
        <strong>Output:</strong> "1A3B" <br />
        <strong>Explanation:</strong> Bulls are connected with a '|' and cows
        are underlined:
        <br />
        "1807"
        <br />
        |<br />"<u>7</u>8<u>10</u>"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> secret = "1123", guess = "0111"
        <br />
        <strong>Output:</strong> "1A1B"
        <br />
        <strong>Explanation:</strong> Bulls are connected with a '|' and cows
        are underlined:
        <br />
        "1123" "1123"
        <br />
        | or |<br />
        "01<u>1</u>1" "011<u>1</u>"<br />
        Note that only one of the two unmatched 1s is counted as a cow since the
        non-bull digits can only be rearranged to allow one 1 to be a bull.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= secret.length, guess.length &lt;= 1000</code>
        </li>
        <li>
          <code>secret.length == guess.length</code>
        </li>
        <li>
          <code>secret</code> and <code>guess</code> consist of digits only.
        </li>
      </ul>
    </div>
  ),
  383: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>ransomNote</code> and <code>magazine</code>,
        return <code>true</code>
        <em> if </em>
        <code>ransomNote</code>
        <em> can be constructed by using the letters from </em>
        <code>magazine</code>
        <em> and </em>
        <code>false</code>
        <em> otherwise</em>.
      </p>

      <p>
        Each letter in <code>magazine</code> can only be used once in{" "}
        <code>ransomNote</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> ransomNote = "a", magazine = "b" <br />
        <strong>Output:</strong> false
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> ransomNote = "aa", magazine = "ab" <br />
        <strong>Output:</strong> false
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> ransomNote = "aa", magazine = "aab" <br />
        <strong>Output:</strong> true
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= ransomNote.length, magazine.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>ransomNote</code> and <code>magazine</code> consist of lowercase
          English letters.
        </li>
      </ul>
    </div>
  ),
  869: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code>. We reorder the digits in any
        order (including the original order) such that the leading digit is not
        zero.
      </p>

      <p>
        Return <code>true</code>{" "}
        <em>
          if and only if we can do this so that the resulting number is a power
          of two
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 10 <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1213: (
    <div class="markdown-body div-width">
      <p>
        Given three integer arrays <code>arr1</code>, <code>arr2</code> and
        <code>arr3</code>&nbsp;<strong>sorted</strong> in{" "}
        <strong>strictly increasing</strong>
        order, return a sorted array of <strong>only</strong>
        &nbsp;the&nbsp;integers that appeared in <strong>all</strong> three
        arrays.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 =
        [1,3,4,5,8] <br />
        <strong>Output:</strong> [1,5] <br />
        <strong>Explanation: </strong>Only 1 and 5 appeared in the three arrays.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= arr1.length, arr2.length, arr3.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= arr1[i], arr2[i], arr3[i] &lt;= 2000</code>
        </li>
      </ul>
    </div>
  ),
  1512: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code>, return{" "}
        <em>
          the number of <strong>good pairs</strong>
        </em>
        .
      </p>

      <p>
        A pair <code>(i, j)</code> is called <em>good</em> if{" "}
        <code>nums[i] == nums[j]</code> and <code>i</code> &lt; <code>j</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,1,1,3] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> There are 4 good pairs (0,3), (0,4),
        (3,4), (2,5) 0-indexed.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1] <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> Each pair in the array are <em>good</em>.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1726: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> of <strong>distinct</strong> positive
        integers, return <em>the number of tuples </em>
        <code>(a, b, c, d)</code>
        <em> such that </em>
        <code>a * b = c * d</code>
        <em> where </em>
        <code>a</code>
        <em>, </em>
        <code>b</code>
        <em>, </em>
        <code>c</code>
        <em>, and </em>
        <code>d</code>
        <em> are elements of </em>
        <code>nums</code>
        <em>, and </em>
        <code>a != b != c != d</code>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3,4,6] <br />
        <strong>Output:</strong> 8 <br />
        <strong>Explanation:</strong> There are 8 valid tuples: <br />
        (2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3) <br />
        (3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,4,5,10] <br />
        <strong>Output:</strong> 16 <br />
        <strong>Explanation:</strong> There are 16 valid tuples: <br />
        (1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2) <br />
        (2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1) <br />
        (2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4) <br />
        (4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          All elements in <code>nums</code> are <strong>distinct</strong>.
        </li>
      </ul>
    </div>
  ),
  1748: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>. The unique elements of
        an array are the elements that appear <strong>exactly once</strong> in
        the array.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>sum</strong> of all the unique elements of{" "}
        </em>
        <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,2] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The unique elements are [1,3], and the sum
        is 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1,1] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There are no unique elements, and the sum
        is 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5] <br />
        <strong>Output:</strong> 15 <br />
        <strong>Explanation:</strong> The unique elements are [1,2,3,4,5], and
        the sum is 15.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1790: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two strings <code>s1</code> and <code>s2</code> of equal
        length. A <strong>string swap</strong> is an operation where you choose
        two indices in a string (not necessarily different) and swap the
        characters at these indices.
      </p>

      <p>
        Return <code>true</code>{" "}
        <em>
          if it is possible to make both strings equal by performing{" "}
          <strong>at most one string swap </strong>on{" "}
          <strong>exactly one</strong> of the strings.{" "}
        </em>
        Otherwise, return <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "bank", s2 = "kanb" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> For example, swap the first character with
        the last character of s2 to make "bank".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "attack", s2 = "defend" <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> It is impossible to make them equal with
        one string swap.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "kelb", s2 = "kelb" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The two strings are already equal, so no
        string swap operation is required.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s1.length, s2.length &lt;= 100</code>
        </li>
        <li>
          <code>s1.length == s2.length</code>
        </li>
        <li>
          <code>s1</code> and <code>s2</code> consist of only lowercase English
          letters.
        </li>
      </ul>
    </div>
  ),
  1940: (
    <article role="main" class="blog-post">
      <p>
        Given an array of integer arrays{" "}
        <code class="language-plaintext highlighter-rouge">arrays</code> where
        each <code class="language-plaintext highlighter-rouge">arrays[i]</code>{" "}
        is sorted in <strong>strictly increasing</strong> order, return{" "}
        <em>
          an integer array representing the{" "}
          <strong>longest common subsequence</strong> between{" "}
          <strong>all</strong> the arrays
        </em>
        .
      </p>

      <p>
        A <strong>subsequence</strong> is a sequence that can be derived from
        another sequence by deleting some elements (possibly none) without
        changing the order of the remaining elements.
      </p>

      <p>
        <strong>Example 1:</strong>
      </p>
      <div class="language-plaintext highlighter-rouge">
        <div class="highlight">
          <pre class="highlight">
            <code>
              Input: arrays = [[1,3,4], [1,4,7,9]]
              <br />
              Output: [1,4] <br />
              Explanation: The longest common subsequence in the two arrays is
              [1,4].
            </code>
          </pre>
        </div>
      </div>
      <p>
        <strong>Example 2:</strong>
      </p>
      <div class="language-plaintext highlighter-rouge">
        <div class="highlight">
          <pre class="highlight">
            <code>
              Input: arrays = [[2,3,6,8], [1,2,3,5,6,7,10], [2,3,4,6,9]]
              <br />
              Output: [2,3,6] <br />
              Explanation: The longest common subsequence in all three arrays is
              [2,3,6].
            </code>
          </pre>
        </div>
      </div>
      <p>
        <strong>Example 3:</strong>
      </p>
      <div class="language-plaintext highlighter-rouge">
        <div class="highlight">
          <pre class="highlight">
            <code>
              Input: arrays = [[1,2,3,4,5], [6,7,8]]
              <br />
              Output: []
              <br />
              Explanation: There is no common subsequence between the two
              arrays.
            </code>
          </pre>
        </div>
      </div>

      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code class="language-plaintext highlighter-rouge">
            2 &lt;= arrays.length &lt;= 100
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= arrays[i].length &lt;= 100
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">
            1 &lt;= arrays[i][j] &lt;= 100
          </code>
        </li>
        <li>
          <code class="language-plaintext highlighter-rouge">arrays[i]</code> is
          sorted in strictly increasing order.
        </li>
      </ul>
    </article>
  ),
  2053: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>distinct string</strong> is a string that is present only{" "}
        <strong>once</strong> in an array.
      </p>

      <p>
        Given an array of strings <code>arr</code>, and an integer{" "}
        <code>k</code>, return <em>the </em>
        <code>
          k<sup>th</sup>
        </code>
        <em>
          {" "}
          <strong>distinct string</strong> present in{" "}
        </em>
        <code>arr</code>. If there are <strong>fewer</strong> than{" "}
        <code>k</code> distinct strings, return{" "}
        <em>
          an <strong>empty string </strong>
        </em>
        <code>""</code>.
      </p>

      <p>
        Note that the strings are considered in the{" "}
        <strong>order in which they appear</strong> in the array.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = ["d","b","c","b","c","a"], k = 2 <br />
        <strong>Output:</strong> "a" <br />
        <strong>Explanation:</strong> <br />
        The only distinct strings in arr are "d" and "a". <br />
        "d" appears 1<sup>st</sup>, so it is the 1<sup>st</sup> distinct string.{" "}
        <br />
        "a" appears 2<sup>nd</sup>, so it is the 2<sup>nd</sup> distinct string.{" "}
        <br />
        Since k == 2, "a" is returned.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = ["aaa","aa","a"], k = 1 <br />
        <strong>Output:</strong> "aaa" <br />
        <strong>Explanation:</strong> <br />
        All strings in arr are distinct, so the 1<sup>st</sup> string "aaa" is
        returned.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = ["a","b","a"], k = 3 <br />
        <strong>Output:</strong> "" <br />
        <strong>Explanation:</strong> <br />
        The only distinct string is "b". Since there are fewer than 3 distinct
        strings, we return an empty string "".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= arr.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= arr[i].length &lt;= 5</code>
        </li>
        <li>
          <code>arr[i]</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  2068: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Two strings <code>word1</code> and <code>word2</code> are considered{" "}
        <strong>almost equivalent</strong> if the differences between the
        frequencies of each letter from <code>'a'</code> to <code>'z'</code>{" "}
        between <code>word1</code> and <code>word2</code> is{" "}
        <strong>at most</strong> <code>3</code>.
      </p>

      <p>
        Given two strings <code>word1</code> and <code>word2</code>, each of
        length <code>n</code>, return <code>true</code> <em>if </em>
        <code>word1</code> <em>and</em> <code>word2</code>{" "}
        <em>
          are <strong>almost equivalent</strong>, or
        </em>{" "}
        <code>false</code> <em>otherwise</em>.
      </p>

      <p>
        The <strong>frequency</strong> of a letter <code>x</code> is the number
        of times it occurs in the string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = "aaaa", word2 = "bccb" <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> There are 4 'a's in "aaaa" but 0 'a's in
        "bccb". <br />
        The difference is 4, which is more than the allowed 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = "abcdeef", word2 = "abaaacc" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The differences between the frequencies of
        each letter in word1 and word2 are at most 3: <br />- 'a' appears 1 time
        in word1 and 4 times in word2. The difference is 3. <br />- 'b' appears
        1 time in word1 and 1 time in word2. The difference is 0. <br />- 'c'
        appears 1 time in word1 and 2 times in word2. The difference is 1.{" "}
        <br />- 'd' appears 1 time in word1 and 0 times in word2. The difference
        is 1. <br />
        - 'e' appears 2 times in word1 and 0 times in word2. The difference is
        2. <br />- 'f' appears 1 time in word1 and 0 times in word2. The
        difference is 1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = "cccddabba", word2 = "babababab" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The differences between the frequencies of
        each letter in word1 and word2 are at most 3: <br />
        - 'a' appears 2 times in word1 and 4 times in word2. The difference is
        2. <br />
        - 'b' appears 2 times in word1 and 5 times in word2. The difference is
        3. <br />
        - 'c' appears 3 times in word1 and 0 times in word2. The difference is
        3. <br />- 'd' appears 2 times in word1 and 0 times in word2. The
        difference is 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == word1.length == word2.length</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>word1</code> and <code>word2</code> consist only of lowercase
          English letters.
        </li>
      </ul>
    </div>
  ),
  2248: (
    <div class="elfjS" data-track-load="description_content">
      Given a 2D integer array <code>nums</code> where <code>nums[i]</code> is a
      non-empty array of <strong>distinct</strong> positive integers, return{" "}
      <em>
        the list of integers that are present in <strong>each array</strong> of
      </em>{" "}
      <code>nums</code>
      <em>
        {" "}
        sorted in <strong>ascending order</strong>
      </em>
      .<p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [[
        <u>
          <strong>3</strong>
        </u>
        ,1,2,
        <u>
          <strong>4</strong>
        </u>
        ,5],[1,2,
        <u>
          <strong>3</strong>
        </u>
        ,
        <u>
          <strong>4</strong>
        </u>
        ],[
        <u>
          <strong>3</strong>
        </u>
        ,
        <u>
          <strong>4</strong>
        </u>
        ,5,6]]
        <br /> <strong>Output:</strong> [3,4] <br />
        <strong>Explanation:</strong> <br />
        The only integers present in each of nums[0] = [
        <u>
          <strong>3</strong>
        </u>
        ,1,2,
        <u>
          <strong>4</strong>
        </u>
        ,5], nums[1] = [1,2,
        <u>
          <strong>3</strong>
        </u>
        ,
        <u>
          <strong>4</strong>
        </u>
        ], and nums[2] = [
        <u>
          <strong>3</strong>
        </u>
        ,
        <u>
          <strong>4</strong>
        </u>
        ,5,6] are 3 and 4, so we return [3,4].
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [[1,2,3],[4,5,6]] <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> <br />
        There does not exist any integer present both in nums[0] and nums[1], so
        we return an empty list [].
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= sum(nums[i].length) &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= nums[i][j] &lt;= 1000</code>
        </li>
        <li>
          All the values of <code>nums[i]</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  3046: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> of{" "}
        <strong>even</strong> length. You have to split the array into two parts{" "}
        <code>nums1</code> and <code>nums2</code> such that:
      </p>

      <ul>
        <li>
          <code>nums1.length == nums2.length == nums.length / 2</code>.
        </li>
        <li>
          <code>nums1</code> should contain <strong>distinct </strong>elements.
        </li>
        <li>
          <code>nums2</code> should also contain <strong>distinct</strong>{" "}
          elements.
        </li>
      </ul>

      <p>
        Return <code>true</code>
        <em> if it is possible to split the array, and </em>
        <code>false</code> <em>otherwise</em>
        <em>.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,2,3,4] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> One of the possible ways to split nums is
        nums1 = [1,2,3] and nums2 = [1,2,4].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The only possible way to split nums is
        nums1 = [1,1] and nums2 = [1,1]. Both nums1 and nums2 do not contain
        distinct elements. Therefore, we return false.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>nums.length % 2 == 0 </code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  3184: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>hours</code> representing times in{" "}
        <strong>hours</strong>, return an integer denoting the number of pairs{" "}
        <code>i</code>, <code>j</code> where <code>i &lt; j</code> and{" "}
        <code>hours[i] + hours[j]</code> forms a <strong>complete day</strong>.
      </p>

      <p>
        A <strong>complete day</strong> is defined as a time duration that is an{" "}
        <strong>exact</strong> <strong>multiple</strong> of 24 hours.
      </p>

      <p>
        For example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours,
        and so on.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">hours = [12,12,30,24,24]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          The pairs of indices that form a complete day are <code>(0, 1)</code>{" "}
          and <code>(3, 4)</code>.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">hours = [72,48,24,3]</span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          The pairs of indices that form a complete day are <code>(0, 1)</code>,{" "}
          <code>(0, 2)</code>, and <code>(1, 2)</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= hours.length &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= hours[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3167: (
    <>
      <p>
        You are given a string <code>compressed</code> representing a compressed
        version of a string. The format is a character followed by its
        frequency. For example, <code>&quot;a3b1a1c2&quot;</code> is a
        compressed version of the string <code>&quot;aaabacc&quot;</code>.
      </p>

      <p>
        We seek a <strong>better compression</strong> with the following
        conditions:
      </p>

      <ul>
        <li>
          Each character should appear <strong>only once</strong> in the
          compressed version.
        </li>
        <li>
          The characters should be in <strong>alphabetical order</strong>.
        </li>
      </ul>

      <p>
        Return the <em>better compression</em> of <code>compressed</code>.
      </p>

      <p>
        <strong>Note:</strong> In the better version of compression, the order
        of letters may change, which is acceptable.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">compressed = &quot;a3c9b2c1&quot;</span>
        </p>{" "}
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">&quot;a3b2c10&quot;</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>
          Characters &quot;a&quot; and &quot;b&quot; appear only once in the
          input, but &quot;c&quot; appears twice, once with a size of 9 and once
          with a size of 1.
        </p>
        <p>Hence, in the resulting string, it should have a size of 10.</p>
      </div>

      <br />
      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">compressed = &quot;c2b3a1&quot;</span>
        </p>{" "}
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">&quot;a1b3c2&quot;</span>
        </p>
      </div>
      <br />

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">compressed = &quot;a2b4c1&quot;</span>
        </p>{" "}
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">&quot;a2b4c1&quot;</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= compressed.length &lt;= 6 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>compressed</code> consists only of lowercase English letters and
          digits.
        </li>
        <li>
          <code>compressed</code> is a valid compression, i.e., each character
          is followed by its frequency.
        </li>
        <li>
          Frequencies are in the range{" "}
          <code>
            [1, 10<sup>4</sup>]
          </code>{" "}
          and have no leading zeroes.
        </li>
      </ul>
    </>
  ),
  743: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a network of <code>n</code> nodes, labeled from{" "}
        <code>1</code> to <code>n</code>. You are also given <code>times</code>,
        a list of travel times as directed edges{" "}
        <code>
          times[i] = (u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>)
        </code>
        , where{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        is the source node,{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        is the target node, and{" "}
        <code>
          w<sub>i</sub>
        </code>{" "}
        is the time it takes for a signal to travel from source to target.
      </p>

      <p>
        We will send a signal from a given node <code>k</code>. Return{" "}
        <em>
          the <strong>minimum</strong> time it takes for all the
        </em>{" "}
        <code>n</code> <em>nodes to receive the signal</em>. If it is impossible
        for all the <code>n</code> nodes to receive the signal, return{" "}
        <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png"
        style={{ width: 217, height: 239 }}
      />
      <pre>
        <strong>Input:</strong> times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2{" "}
        <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> times = [[1,2,1]], n = 2, k = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> times = [[1,2,1]], n = 2, k = 2 <br />
        <strong>Output:</strong> -1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= times.length &lt;= 6000</code>
        </li>
        <li>
          <code>times[i].length == 3</code>
        </li>
        <li>
          <code>
            1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= w<sub>i</sub> &lt;= 100
          </code>
        </li>
        <li>
          All the pairs{" "}
          <code>
            (u<sub>i</sub>, v<sub>i</sub>)
          </code>{" "}
          are <strong>unique</strong>. (i.e., no multiple edges.)
        </li>
      </ul>
    </div>
  ),
  787: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> cities connected by some number of flights. You
        are given an array <code>flights</code> where{" "}
        <code>
          flights[i] = [from<sub>i</sub>, to<sub>i</sub>, price<sub>i</sub>]
        </code>{" "}
        indicates that there is a flight from city{" "}
        <code>
          from<sub>i</sub>
        </code>{" "}
        to city{" "}
        <code>
          to<sub>i</sub>
        </code>{" "}
        with cost{" "}
        <code>
          price<sub>i</sub>
        </code>
        .
      </p>

      <p>
        You are also given three integers <code>src</code>, <code>dst</code>,
        and <code>k</code>, return{" "}
        <em>
          <strong>the cheapest price</strong> from{" "}
        </em>
        <code>src</code>
        <em> to </em>
        <code>dst</code>
        <em> with at most </em>
        <code>k</code>
        <em> stops. </em>If there is no such route, return<em> </em>
        <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-3drawio.png"
        style={{ width: 332, height: 392 }}
      />
      <pre>
        <strong>Input:</strong> n = 4, flights =
        [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k
        = 1 <br />
        <strong>Output:</strong> 700 <br />
        <strong>Explanation:</strong> <br />
        The graph is shown above. <br />
        The optimal path with at most 1 stop from city 0 to 3 is marked in red
        and has cost 100 + 600 = 700. <br />
        Note that the path through cities [0,1,2,3] is cheaper but is invalid
        because it uses 2 stops.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-1drawio.png"
        style={{ width: 332, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> n = 3, flights =
        [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1 <br />
        <strong>Output:</strong> 200 <br />
        <strong>Explanation:</strong> <br />
        The graph is shown above. <br />
        The optimal path with at most 1 stop from city 0 to 2 is marked in red
        and has cost 100 + 100 = 200.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-2drawio.png"
        style={{ width: 332, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> n = 3, flights =
        [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0 <br />
        <strong>Output:</strong> 500 <br />
        <strong>Explanation:</strong> <br />
        The graph is shown above. <br />
        The optimal path with no stops from city 0 to 2 is marked in red and has
        cost 500.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= flights.length &lt;= (n * (n - 1) / 2)</code>
        </li>
        <li>
          <code>flights[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            from<sub>i</sub> != to<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= price<sub>i</sub> &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>There will not be any multiple flights between two cities.</li>
        <li>
          <code>0 &lt;= src, dst, k &lt; n</code>
        </li>
        <li>
          <code>src != dst</code>
        </li>
      </ul>
    </div>
  ),
  882: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an undirected graph (the <strong>"original graph"</strong>
        ) with <code>n</code> nodes labeled from <code>0</code> to{" "}
        <code>n - 1</code>. You decide to <strong>subdivide</strong> each edge
        in the graph into a chain of nodes, with the number of new nodes varying
        between each edge.
      </p>

      <p>
        The graph is given as a 2D array of <code>edges</code> where{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>, cnt<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        in the original graph, and{" "}
        <code>
          cnt<sub>i</sub>
        </code>{" "}
        is the total number of new nodes that you will{" "}
        <strong>subdivide</strong> the edge into. Note that{" "}
        <code>
          cnt<sub>i</sub> == 0
        </code>{" "}
        means you will not subdivide the edge.
      </p>

      <p>
        To <strong>subdivide</strong> the edge{" "}
        <code>
          [u<sub>i</sub>, v<sub>i</sub>]
        </code>
        , replace it with{" "}
        <code>
          (cnt<sub>i</sub> + 1)
        </code>{" "}
        new edges and{" "}
        <code>
          cnt<sub>i</sub>
        </code>{" "}
        new nodes. The new nodes are{" "}
        <code>
          x<sub>1</sub>
        </code>
        ,{" "}
        <code>
          x<sub>2</sub>
        </code>
        , ...,{" "}
        <code>
          x
          <sub>
            cnt<sub>i</sub>
          </sub>
        </code>
        , and the new edges are{" "}
        <code>
          [u<sub>i</sub>, x<sub>1</sub>]
        </code>
        ,{" "}
        <code>
          [x<sub>1</sub>, x<sub>2</sub>]
        </code>
        ,{" "}
        <code>
          [x<sub>2</sub>, x<sub>3</sub>]
        </code>
        , ...,{" "}
        <code>
          [x
          <sub>
            cnt<sub>i</sub>-1
          </sub>
          , x
          <sub>
            cnt<sub>i</sub>
          </sub>
          ]
        </code>
        ,{" "}
        <code>
          [x
          <sub>
            cnt<sub>i</sub>
          </sub>
          , v<sub>i</sub>]
        </code>
        .
      </p>

      <p>
        In this <strong>new graph</strong>, you want to know how many nodes are{" "}
        <strong>reachable</strong> from the node <code>0</code>, where a node is{" "}
        <strong>reachable</strong> if the distance is <code>maxMoves</code> or
        less.
      </p>

      <p>
        Given the original graph and <code>maxMoves</code>, return{" "}
        <em>
          the number of nodes that are <strong>reachable</strong> from node{" "}
        </em>
        <code>0</code>
        <em> in the new graph</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png"
        style={{ width: 600, height: 247 }}
      />
      <pre>
        <strong>Input:</strong> edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves =
        6, n = 3 <br />
        <strong>Output:</strong> 13 <br />
        <strong>Explanation:</strong> The edge subdivisions are shown in the
        image above. <br />
        The nodes that are reachable are highlighted in yellow.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]],
        maxMoves = 10, n = 4 <br />
        <strong>Output:</strong> 23
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> edges =
        [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> Node 0 is disconnected from the rest of
        the graph, so only node 0 is reachable.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= edges.length &lt;= min(n * (n - 1) / 2, 10<sup>4</sup>)
          </code>
        </li>
        <li>
          <code>edges[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub> &lt; v<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          There are <strong>no multiple edges</strong> in the graph.
        </li>
        <li>
          <code>
            0 &lt;= cnt<sub>i</sub> &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= maxMoves &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 3000</code>
        </li>
      </ul>
    </div>
  ),
  1514: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an undirected weighted graph of&nbsp;<code>n</code>
        &nbsp;nodes (0-indexed), represented by an edge list where&nbsp;
        <code>edges[i] = [a, b]</code>&nbsp;is an undirected edge connecting the
        nodes&nbsp;<code>a</code>&nbsp;and&nbsp;<code>b</code>&nbsp;with a
        probability of success of traversing that edge&nbsp;
        <code>succProb[i]</code>.
      </p>

      <p>
        Given two nodes&nbsp;<code>start</code>&nbsp;and&nbsp;<code>end</code>,
        find the path with the maximum probability of success to go from&nbsp;
        <code>start</code>&nbsp;to&nbsp;<code>end</code>&nbsp;and return its
        success probability.
      </p>

      <p>
        If there is no path from&nbsp;<code>start</code>&nbsp;to&nbsp;
        <code>end</code>, <strong>return&nbsp;0</strong>. Your answer will be
        accepted if it differs from the correct answer by at most{" "}
        <strong>1e-5</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/09/20/1558_ex1.png"
            style={{ width: 187, height: 186 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, edges = [[0,1],[1,2],[0,2]], succProb =
        [0.5,0.5,0.2], start = 0, end = 2 <br />
        <strong>Output:</strong> 0.25000 <br />
        <strong>Explanation:</strong>&nbsp;There are two paths from start to
        end, one having a probability of success = 0.2 and the other has 0.5 *
        0.5 = 0.25.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/09/20/1558_ex2.png"
            style={{ width: 189, height: 186 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, edges = [[0,1],[1,2],[0,2]], succProb =
        [0.5,0.5,0.3], start = 0, end = 2 <br />
        <strong>Output:</strong> 0.30000
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <p>
        <strong>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2019/09/20/1558_ex3.png"
            style={{ width: 215, height: 191 }}
          />
        </strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, edges = [[0,1]], succProb = [0.5], start
        = 0, end = 2 <br />
        <strong>Output:</strong> 0.00000 <br />
        <strong>Explanation:</strong>&nbsp;There is no path between 0 and 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n &lt;= 10^4</code>
        </li>
        <li>
          <code>0 &lt;= start, end &lt; n</code>
        </li>
        <li>
          <code>start != end</code>
        </li>
        <li>
          <code>0 &lt;= a, b &lt; n</code>
        </li>
        <li>
          <code>a != b</code>
        </li>
        <li>
          <code>0 &lt;= succProb.length == edges.length &lt;= 2*10^4</code>
        </li>
        <li>
          <code>0 &lt;= succProb[i] &lt;= 1</code>
        </li>
        <li>There is at most one edge between every two nodes.</li>
      </ul>
    </div>
  ),
  1976: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are in a city that consists of <code>n</code> intersections numbered
        from <code>0</code> to <code>n - 1</code> with{" "}
        <strong>bi-directional</strong> roads between some intersections. The
        inputs are generated such that you can reach any intersection from any
        other intersection and that there is at most one road between any two
        intersections.
      </p>

      <p>
        You are given an integer <code>n</code> and a 2D integer array{" "}
        <code>roads</code> where{" "}
        <code>
          roads[i] = [u<sub>i</sub>, v<sub>i</sub>, time<sub>i</sub>]
        </code>{" "}
        means that there is a road between intersections{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        that takes{" "}
        <code>
          time<sub>i</sub>
        </code>{" "}
        minutes to travel. You want to know in how many ways you can travel from
        intersection <code>0</code> to intersection <code>n - 1</code> in the{" "}
        <strong>shortest amount of time</strong>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>number of ways</strong> you can arrive at your destination
          in the <strong>shortest amount of time</strong>
        </em>
        . Since the answer may be large, return it <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/17/graph2.png"
        style={{ width: 235, height: 381 }}
      />
      <pre>
        <strong>Input:</strong> n = 7, roads =
        [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]
        <br /> <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> The shortest amount of time it takes to go
        from intersection 0 to intersection 6 is 7 minutes.
        <br /> The four ways to get there in 7 minutes are: <br />
        - 0 ➝ 6 <br />
        - 0 ➝ 4 ➝ 6 <br />
        - 0 ➝ 1 ➝ 2 ➝ 5 ➝ 6 <br />- 0 ➝ 1 ➝ 3 ➝ 5 ➝ 6
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, roads = [[1,0,10]] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> There is only one way to go from
        intersection 0 to intersection 1, and it takes 10 minutes.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 200</code>
        </li>
        <li>
          <code>n - 1 &lt;= roads.length &lt;= n * (n - 1) / 2</code>
        </li>
        <li>
          <code>roads[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            1 &lt;= time<sub>i</sub> &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            u<sub>i </sub>!= v<sub>i</sub>
          </code>
        </li>
        <li>There is at most one road connecting any two intersections.</li>
        <li>You can reach any intersection from any other intersection.</li>
      </ul>
    </div>
  ),
  2045: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A city is represented as a <strong>bi-directional connected</strong>{" "}
        graph with <code>n</code> vertices where each vertex is labeled from{" "}
        <code>1</code> to <code>n</code> (<strong>inclusive</strong>). The edges
        in the graph are represented as a 2D integer array <code>edges</code>,
        where each{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        denotes a bi-directional edge between vertex{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and vertex{" "}
        <code>
          v<sub>i</sub>
        </code>
        . Every vertex pair is connected by <strong>at most one</strong> edge,
        and no vertex has an edge to itself. The time taken to traverse any edge
        is <code>time</code> minutes.
      </p>
      <p>
        Each vertex has a traffic signal which changes its color from{" "}
        <strong>green</strong> to <strong>red</strong> and vice versa
        every&nbsp;<code>change</code> minutes. All signals change{" "}
        <strong>at the same time</strong>. You can enter a vertex at{" "}
        <strong>any time</strong>, but can leave a vertex{" "}
        <strong>only when the signal is green</strong>. You{" "}
        <strong>cannot wait </strong>at a vertex if the signal is{" "}
        <strong>green</strong>.
      </p>
      <p>
        The <strong>second minimum value</strong> is defined as the smallest
        value<strong> strictly larger </strong>than the minimum value.
      </p>
      <ul>
        <li>
          For example the second minimum value of <code>[2, 3, 4]</code> is{" "}
          <code>3</code>, and the second minimum value of <code>[2, 2, 4]</code>{" "}
          is <code>4</code>.
        </li>
      </ul>
      <p>
        Given <code>n</code>, <code>edges</code>, <code>time</code>, and{" "}
        <code>change</code>, return{" "}
        <em>
          the <strong>second minimum time</strong> it will take to go from
          vertex{" "}
        </em>
        <code>1</code>
        <em> to vertex </em>
        <code>n</code>.
      </p>
      <p>
        <strong>Notes:</strong>
      </p>
      <ul>
        <li>
          You can go through any vertex <strong>any</strong> number of times,{" "}
          <strong>including</strong> <code>1</code> and <code>n</code>.
        </li>
        <li>
          You can assume that when the journey <strong>starts</strong>, all
          signals have just turned <strong>green</strong>.
        </li>
      </ul>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/09/29/e1.png"
        style={{ width: 200, height: 250 }}
      />{" "}
         
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/09/29/e2.png"
        style={{ width: 200, height: 250 }}
      />
      <pre>
        <strong>Input:</strong> n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]],
        time = 3, change = 5<br />
        <strong>Output:</strong> 13
        <br />
        <strong>Explanation:</strong>
        The figure on the left shows the given graph.
        <br />
        The blue path in the figure on the right is the minimum time path.
        <br />
        The time taken is:
        <br />
        - Start at 1, time elapsed=0
        <br />
        - 1 -&gt; 4: 3 minutes, time elapsed=3
        <br />
        - 4 -&gt; 5: 3 minutes, time elapsed=6
        <br />
        Hence the minimum time needed is 6 minutes.
        <br />
        The red path shows the path to get the second minimum time.
        <br />
        - Start at 1, time elapsed=0
        <br />
        - 1 -&gt; 3: 3 minutes, time elapsed=3
        <br />
        - 3 -&gt; 4: 3 minutes, time elapsed=6
        <br />
        - Wait at 4 for 4 minutes, time elapsed=10
        <br />
        - 4 -&gt; 5: 3 minutes, time elapsed=13
        <br />
        Hence the second minimum time is 13 minutes.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/09/29/eg2.png"
        style={{ width: 225, height: 50 }}
      />
      <pre>
        <strong>Input:</strong> n = 2, edges = [[1,2]], time = 3, change = 2{" "}
        <br />
        <strong>Output:</strong> 11 <br />
        <strong>Explanation:</strong> <br />
        The minimum time path is 1 -&gt; 2 with time = 3 minutes. <br />
        The second minimum time path is 1 -&gt; 2 -&gt; 1 -&gt; 2 with time = 11
        minutes.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            n - 1 &lt;= edges.length &lt;= min(2 * 10<sup>4</sup>, n * (n - 1) /
            2)
          </code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
        <li>There are no duplicate edges.</li>
        <li>
          Each vertex can be reached directly or indirectly from every other
          vertex.
        </li>
        <li>
          <code>
            1 &lt;= time, change &lt;= 10<sup>3</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2203: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code> denoting the number of nodes of
        a <strong>weighted directed</strong> graph. The nodes are numbered from{" "}
        <code>0</code> to <code>n - 1</code>.
      </p>

      <p>
        You are also given a 2D integer array <code>edges</code> where{" "}
        <code>
          edges[i] = [from<sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]
        </code>{" "}
        denotes that there exists a <strong>directed</strong> edge from{" "}
        <code>
          from<sub>i</sub>
        </code>{" "}
        to{" "}
        <code>
          to<sub>i</sub>
        </code>{" "}
        with weight{" "}
        <code>
          weight<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Lastly, you are given three <strong>distinct</strong> integers{" "}
        <code>src1</code>, <code>src2</code>, and <code>dest</code> denoting
        three distinct nodes of the graph.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum weight</strong> of a subgraph of the graph such
          that it is <strong>possible</strong> to reach
        </em>{" "}
        <code>dest</code> <em>from both</em> <code>src1</code> <em>and</em>{" "}
        <code>src2</code> <em>via a set of edges of this subgraph</em>. In case
        such a subgraph does not exist, return <code>-1</code>.
      </p>

      <p>
        A <strong>subgraph</strong> is a graph whose vertices and edges are
        subsets of the original graph. The <strong>weight</strong> of a subgraph
        is the sum of weights of its constituent edges.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/02/17/example1drawio.png"
        style={{ width: 263, height: 250 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, edges =
        [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]],
        src1 = 0, src2 = 1, dest = 5<strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> <br />
        The above figure represents the input graph. <br />
        The blue edges represent one of the subgraphs that yield the optimal
        answer. <br />
        Note that the subgraph [[1,0,3],[0,5,6]] also yields the optimal answer.
        It is not possible to get a subgraph with less weight satisfying all the
        constraints.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/02/17/example2-1drawio.png"
        style={{ width: 350, height: 51 }}
      />
      <pre>
        <strong>Input:</strong> n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2
        = 1, dest = 2 <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> <br />
        The above figure represents the input graph. <br />
        It can be seen that there does not exist any path from node 1 to node 2,
        hence there are no subgraphs satisfying all the constraints.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= edges.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= from<sub>i</sub>, to<sub>i</sub>, src1, src2, dest &lt;= n -
            1
          </code>
        </li>
        <li>
          <code>
            from<sub>i</sub> != to<sub>i</sub>
          </code>
        </li>
        <li>
          <code>src1</code>, <code>src2</code>, and <code>dest</code> are
          pairwise distinct.
        </li>
        <li>
          <code>
            1 &lt;= weight[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2093: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code> denoting the number of nodes of
        a <strong>weighted directed</strong> graph. The nodes are numbered from{" "}
        <code>0</code> to <code>n - 1</code>.
      </p>

      <p>
        You are also given a 2D integer array <code>edges</code> where{" "}
        <code>
          edges[i] = [from<sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]
        </code>{" "}
        denotes that there exists a <strong>directed</strong> edge from{" "}
        <code>
          from<sub>i</sub>
        </code>{" "}
        to{" "}
        <code>
          to<sub>i</sub>
        </code>{" "}
        with weight{" "}
        <code>
          weight<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Lastly, you are given three <strong>distinct</strong> integers{" "}
        <code>src1</code>, <code>src2</code>, and <code>dest</code> denoting
        three distinct nodes of the graph.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum weight</strong> of a subgraph of the graph such
          that it is <strong>possible</strong> to reach
        </em>{" "}
        <code>dest</code> <em>from both</em> <code>src1</code> <em>and</em>{" "}
        <code>src2</code> <em>via a set of edges of this subgraph</em>. In case
        such a subgraph does not exist, return <code>-1</code>.
      </p>

      <p>
        A <strong>subgraph</strong> is a graph whose vertices and edges are
        subsets of the original graph. The <strong>weight</strong> of a subgraph
        is the sum of weights of its constituent edges.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/02/17/example1drawio.png"
        style={{ width: 263, height: 250 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, edges =
        [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]],
        src1 = 0, src2 = 1, dest = 5 <br />
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> <br />
        The above figure represents the input graph. <br />
        The blue edges represent one of the subgraphs that yield the optimal
        answer.
        <br />
        Note that the subgraph [[1,0,3],[0,5,6]] also yields the optimal answer.
        It is not possible to get a subgraph with less weight satisfying all the
        constraints.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/02/17/example2-1drawio.png"
        style={{ width: 350, height: 51 }}
      />
      <pre>
        <strong>Input:</strong> n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2
        = 1, dest = 2 <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> <br />
        The above figure represents the input graph. <br />
        It can be seen that there does not exist any path from node 1 to node 2,
        hence there are no subgraphs satisfying all the constraints.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= edges.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= from<sub>i</sub>, to<sub>i</sub>, src1, src2, dest &lt;= n -
            1
          </code>
        </li>
        <li>
          <code>
            from<sub>i</sub> != to<sub>i</sub>
          </code>
        </li>
        <li>
          <code>src1</code>, <code>src2</code>, and <code>dest</code> are
          pairwise distinct.
        </li>
        <li>
          <code>
            1 &lt;= weight[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2290: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> 2D integer array{" "}
        <code>grid</code> of size <code>m x n</code>. Each cell has one of two
        values:
      </p>

      <ul>
        <li>
          <code>0</code> represents an <strong>empty</strong> cell,
        </li>
        <li>
          <code>1</code> represents an <strong>obstacle</strong> that may be
          removed.
        </li>
      </ul>

      <p>You can move up, down, left, or right from and to an empty cell.</p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of <strong>obstacles</strong> to{" "}
          <strong>remove</strong> so you can move from the upper left corner{" "}
        </em>
        <code>(0, 0)</code>
        <em> to the lower right corner </em>
        <code>(m - 1, n - 1)</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/04/06/example1drawio-1.png"
        style={{ width: 605, height: 246 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[0,1,1],[1,1,0],[1,1,0]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> We can remove the obstacles at (0, 1) and
        (0, 2) to create a path from (0, 0) to (2, 2). <br />
        It can be shown that we need to remove at least 2 obstacles, so we
        return 2. <br />
        Note that there may be other ways to remove 2 obstacles to create a
        path.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2022/04/06/example1drawio.png"
        style={{ width: 405, height: 246 }}
      />
      <pre>
        <strong>Input:</strong> grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]{" "}
        <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> We can move from (0, 0) to (2, 4) without
        removing any obstacles, so we return 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>
            1 &lt;= m, n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            2 &lt;= m * n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>grid[i][j]</code> is either <code>0</code> <strong>or</strong>{" "}
          <code>1</code>.
        </li>
        <li>
          <code>grid[0][0] == grid[m - 1][n - 1] == 0</code>
        </li>
      </ul>
    </div>
  ),
  2473: (
    <article role="main" class="blog-post">
      <p>
        You are given a positive integer <code>n</code> representing{" "}
        <code>n</code> cities numbered from <code>1</code> to <code>n</code>.
        You are also given a <strong>2D</strong> array <code>roads</code>, where{" "}
        <code>
          roads[i] = [a<sub>i</sub>, b<sub>i</sub>, cost<sub>i</sub>]
        </code>{" "}
        indicates that there is a <strong>bidirectional </strong>road between
        cities{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        with a cost of traveling equal to{" "}
        <code>
          cost<sub>i</sub>
        </code>
        .
      </p>

      <p>
        You can buy apples in <strong>any</strong> city you want, but some
        cities have different costs to buy apples. You are given the array{" "}
        <code>appleCost</code> where <code>appleCost[i]</code> is the cost of
        buying one apple from city <code>i</code>.
      </p>

      <p>
        You start at some city, traverse through various roads, and eventually
        buy <strong>exactly</strong> one apple from <strong>any</strong> city.
        After you buy that apple, you have to return back to the city you{" "}
        <strong>started</strong> at, but now the cost of all the roads will be{" "}
        <strong>multiplied</strong> by a given factor <code>k</code>.
      </p>

      <p>
        Given the integer <code>k</code>, return <em>an array </em>
        <code>answer</code>
        <em> of size </em>
        <code>n</code>
        <em> where </em>
        <code>answer[i]</code>
        <em>
          {" "}
          is the <strong>minimum</strong> total cost to buy an apple if you
          start at city{" "}
        </em>
        <code>i</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2400-2499/2473.Minimum%20Cost%20to%20Buy%20Apples/images/graph55.png"
          style={{ width: 241, height: 309 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> n = 4, roads =
        [[1,2,4],[2,3,2],[2,4,5],[3,4,1],[1,3,4]], appleCost = [56,42,102,301],
        k = 2 <br />
        <strong>Output:</strong> [54,42,48,51] <br />
        <strong>Explanation:</strong> The minimum cost for each starting city is
        the following: <br />
        - Starting at city 1: You take the path 1 -&gt; 2, buy an apple at city
        2, and finally take the path 2 -&gt; 1. The total cost is 4 + 42 + 4 * 2
        = 54. <br />
        - Starting at city 2: You directly buy an apple at city 2. The total
        cost is 42. <br />
        - Starting at city 3: You take the path 3 -&gt; 2, buy an apple at city
        2, and finally take the path 2 -&gt; 3. The total cost is 2 + 42 + 2 * 2
        = 48. <br />- Starting at city 4: You take the path 4 -&gt; 3 -&gt; 2
        then you buy at city 2, and finally take the path 2 -&gt; 3 -&gt; 4. The
        total cost is 1 + 2 + 42 + 1 * 2 + 2 * 2 = 51.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <p>
        <img
          alt=""
          src="https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2400-2499/2473.Minimum%20Cost%20to%20Buy%20Apples/images/graph4.png"
          style={{ width: 167, height: 309 }}
        />
      </p>
      <pre>
        <strong>Input:</strong> n = 3, roads = [[1,2,5],[2,3,1],[3,1,2]],
        appleCost = [2,3,1], k = 3 <br />
        <strong>Output:</strong> [2,3,1] <br />
        <strong>Explanation:</strong> It is always optimal to buy the apple in
        the starting city.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= roads.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= cost<sub>i</sub> &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>appleCost.length == n</code>
        </li>
        <li>
          <code>
            1 &lt;= appleCost[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= 100</code>
        </li>
        <li>There are no repeated edges.</li>
      </ul>
    </article>
  ),
  2577: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <code>m x n</code> matrix <code>grid</code> consisting
        of <b>non-negative</b> integers where <code>grid[row][col]</code>{" "}
        represents the <strong>minimum</strong> time required to be able to
        visit the cell <code>(row, col)</code>, which means you can visit the
        cell <code>(row, col)</code> only when the time you visit it is greater
        than or equal to <code>grid[row][col]</code>.
      </p>

      <p>
        You are standing in the <strong>top-left</strong> cell of the matrix in
        the{" "}
        <code>
          0<sup>th</sup>
        </code>{" "}
        second, and you must move to <strong>any</strong> adjacent cell in the
        four directions: up, down, left, and right. Each move you make takes 1
        second.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> time required in which you can visit the
          bottom-right cell of the matrix
        </em>
        . If you cannot visit the bottom-right cell, then return <code>-1</code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2023/02/14/yetgriddrawio-8.png"
        />
      </p>

      <pre>
        <strong>Input:</strong> grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]] <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> One of the paths that we can take is the
        following: <br />
        - at t = 0, we are on the cell (0,0). <br />
        - at t = 1, we move to the cell (0,1). It is possible because grid[0][1]
        &lt;= 1. <br />
        - at t = 2, we move to the cell (1,1). It is possible because grid[1][1]
        &lt;= 2. <br />
        - at t = 3, we move to the cell (1,2). It is possible because grid[1][2]
        &lt;= 3. <br />
        - at t = 4, we move to the cell (1,1). It is possible because grid[1][1]
        &lt;= 4. <br />
        - at t = 5, we move to the cell (1,2). It is possible because grid[1][2]
        &lt;= 5. <br />
        - at t = 6, we move to the cell (1,3). It is possible because grid[1][3]
        &lt;= 6. <br />
        - at t = 7, we move to the cell (2,3). It is possible because grid[2][3]
        &lt;= 7. <br />
        The final time is 7. It can be shown that it is the minimum time
        possible.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2023/02/14/yetgriddrawio-9.png"
          style={{ width: 151, height: 151 }}
        />
      </p>

      <pre>
        <strong>Input:</strong> grid = [[0,2,4],[3,2,1],[1,0,4]] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> There is no path from the top left to the
        bottom-right cell.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>m == grid.length</code>
        </li>
        <li>
          <code>n == grid[i].length</code>
        </li>
        <li>
          <code>2 &lt;= m, n &lt;= 1000</code>
        </li>
        <li>
          <code>
            4 &lt;= m * n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= grid[i][j] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>grid[0][0] == 0</code>
        </li>
      </ul>

      <p>&nbsp;</p>
    </div>
  ),
  2976: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two <strong>0-indexed</strong> strings <code>source</code>{" "}
        and <code>target</code>, both of length <code>n</code> and consisting of{" "}
        <strong>lowercase</strong> English letters. You are also given two{" "}
        <strong>0-indexed</strong> character arrays <code>original</code> and{" "}
        <code>changed</code>, and an integer array <code>cost</code>, where{" "}
        <code>cost[i]</code> represents the cost of changing the character{" "}
        <code>original[i]</code> to the character <code>changed[i]</code>.
      </p>

      <p>
        You start with the string <code>source</code>. In one operation, you can
        pick a character <code>x</code> from the string and change it to the
        character <code>y</code> at a cost of <code>z</code> <strong>if</strong>{" "}
        there exists <strong>any</strong> index <code>j</code> such that{" "}
        <code>cost[j] == z</code>, <code>original[j] == x</code>, and{" "}
        <code>changed[j] == y</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> cost to convert the string{" "}
        </em>
        <code>source</code>
        <em> to the string </em>
        <code>target</code>
        <em>
          {" "}
          using <strong>any</strong> number of operations. If it is impossible
          to convert
        </em>{" "}
        <code>source</code> <em>to</em> <code>target</code>, <em>return</em>{" "}
        <code>-1</code>.
      </p>

      <p>
        <strong>Note</strong> that there may exist indices <code>i</code>,{" "}
        <code>j</code> such that <code>original[j] == original[i]</code> and{" "}
        <code>changed[j] == changed[i]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> source = "abcd", target = "acbe", original =
        ["a","b","c","c","e","d"], changed = ["b","c","b","e","b","e"], cost =
        [2,5,5,1,2,20] <br />
        <strong>Output:</strong> 28 <br />
        <strong>Explanation:</strong> To convert the string "abcd" to string
        "acbe": <br />
        - Change value at index 1 from 'b' to 'c' at a cost of 5. <br />
        - Change value at index 2 from 'c' to 'e' at a cost of 1. <br />
        - Change value at index 2 from 'e' to 'b' at a cost of 2. <br />
        - Change value at index 3 from 'd' to 'e' at a cost of 20. <br />
        The total cost incurred is 5 + 1 + 2 + 20 = 28. <br />
        It can be shown that this is the minimum possible cost.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> source = "aaaa", target = "bbbb", original =
        ["a","c"], changed = ["c","b"], cost = [1,2] <br />
        <strong>Output:</strong> 12 <br />
        <strong>Explanation:</strong> To change the character 'a' to 'b' change
        the character 'a' to 'c' at a cost of 1, followed by changing the
        character 'c' to 'b' at a cost of 2, for a total cost of 1 + 2 = 3. To
        change all occurrences of 'a' to 'b', a total cost of 3 * 4 = 12 is
        incurred.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> source = "abcd", target = "abce", original =
        ["a"], changed = ["e"], cost = [10000] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> It is impossible to convert source to
        target because the value at index 3 cannot be changed from 'd' to 'e'.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= source.length == target.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>source</code>, <code>target</code> consist of lowercase English
          letters.
        </li>
        <li>
          <code>
            1 &lt;= cost.length == original.length == changed.length &lt;= 2000
          </code>
        </li>
        <li>
          <code>original[i]</code>, <code>changed[i]</code> are lowercase
          English letters.
        </li>
        <li>
          <code>
            1 &lt;= cost[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>
          <code>original[i] != changed[i]</code>
        </li>
      </ul>
    </div>
  ),
  2977: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two <strong>0-indexed</strong> strings <code>source</code>{" "}
        and <code>target</code>, both of length <code>n</code> and consisting of{" "}
        <strong>lowercase</strong> English characters. You are also given two{" "}
        <strong>0-indexed</strong> string arrays <code>original</code> and{" "}
        <code>changed</code>, and an integer array <code>cost</code>, where{" "}
        <code>cost[i]</code> represents the cost of converting the string{" "}
        <code>original[i]</code> to the string <code>changed[i]</code>.
      </p>

      <p>
        You start with the string <code>source</code>. In one operation, you can
        pick a <strong>substring</strong> <code>x</code> from the string, and
        change it to <code>y</code> at a cost of <code>z</code>{" "}
        <strong>if</strong> there exists <strong>any</strong> index{" "}
        <code>j</code> such that <code>cost[j] == z</code>,{" "}
        <code>original[j] == x</code>, and <code>changed[j] == y</code>. You are
        allowed to do <strong>any</strong> number of operations, but any pair of
        operations must satisfy <strong>either</strong> of these two conditions:
      </p>

      <ul>
        <li>
          The substrings picked in the operations are <code>source[a..b]</code>{" "}
          and <code>source[c..d]</code> with either <code>b &lt; c</code>{" "}
          <strong>or</strong> <code>d &lt; a</code>. In other words, the indices
          picked in both operations are <strong>disjoint</strong>.
        </li>
        <li>
          The substrings picked in the operations are <code>source[a..b]</code>{" "}
          and <code>source[c..d]</code> with <code>a == c</code>{" "}
          <strong>and</strong> <code>b == d</code>. In other words, the indices
          picked in both operations are <strong>identical</strong>.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> cost to convert the string{" "}
        </em>
        <code>source</code>
        <em> to the string </em>
        <code>target</code>
        <em>
          {" "}
          using <strong>any</strong> number of operations
        </em>
        . <em>If it is impossible to convert</em> <code>source</code>{" "}
        <em>to</em> <code>target</code>,<em> return</em> <code>-1</code>.
      </p>

      <p>
        <strong>Note</strong> that there may exist indices <code>i</code>,{" "}
        <code>j</code> such that <code>original[j] == original[i]</code> and{" "}
        <code>changed[j] == changed[i]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> source = "abcd", target = "acbe", original =
        ["a","b","c","c","e","d"], changed = ["b","c","b","e","b","e"], cost =
        [2,5,5,1,2,20] <br />
        <strong>Output:</strong> 28 <br />
        <strong>Explanation:</strong> To convert "abcd" to "acbe", do the
        following operations: <br />
        - Change substring source[1..1] from "b" to "c" at a cost of 5. <br />
        - Change substring source[2..2] from "c" to "e" at a cost of 1. <br />
        - Change substring source[2..2] from "e" to "b" at a cost of 2. <br />
        - Change substring source[3..3] from "d" to "e" at a cost of 20. <br />
        The total cost incurred is 5 + 1 + 2 + 20 = 28. <br />
        It can be shown that this is the minimum possible cost.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> source = "abcdefgh", target = "acdeeghh",
        original = ["bcd","fgh","thh"], changed = ["cde","thh","ghh"], cost =
        [1,3,5]
        <strong>Output:</strong> 9 <br />
        <strong>Explanation:</strong> To convert "abcdefgh" to "acdeeghh", do
        the following operations: <br />- Change substring source[1..3] from
        "bcd" to "cde" at a cost of 1. <br />
        - Change substring source[5..7] from "fgh" to "thh" at a cost of 3. We
        can do this operation because indices [5,7] are disjoint with indices
        picked in the first operation. <br />
        - Change substring source[5..7] from "thh" to "ghh" at a cost of 5. We
        can do this operation because indices [5,7] are disjoint with indices
        picked in the first operation, and identical with indices picked in the
        second operation. <br />
        The total cost incurred is 1 + 3 + 5 = 9. <br />
        It can be shown that this is the minimum possible cost.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> source = "abcdefgh", target = "addddddd",
        original = ["bcd","defgh"], changed = ["ddd","ddddd"], cost = [100,1578]{" "}
        <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> It is impossible to convert "abcdefgh" to
        "addddddd". <br />
        If you select substring source[1..3] as the first operation to change
        "abcdefgh" to "adddefgh", you cannot select substring source[3..7] as
        the second operation because it has a common index, 3, with the first
        operation. <br />
        If you select substring source[3..7] as the first operation to change
        "abcdefgh" to "abcddddd", you cannot select substring source[1..3] as
        the second operation because it has a common index, 3, with the first
        operation.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= source.length == target.length &lt;= 1000</code>
        </li>
        <li>
          <code>source</code>, <code>target</code> consist only of lowercase
          English characters.
        </li>
        <li>
          <code>
            1 &lt;= cost.length == original.length == changed.length &lt;= 100
          </code>
        </li>
        <li>
          <code>
            1 &lt;= original[i].length == changed[i].length &lt;= source.length
          </code>
        </li>
        <li>
          <code>original[i]</code>, <code>changed[i]</code> consist only of
          lowercase English characters.
        </li>
        <li>
          <code>original[i] != changed[i]</code>
        </li>
        <li>
          <code>
            1 &lt;= cost[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3112: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an undirected graph of <code>n</code> nodes. You are given a 2D
        array <code>edges</code>, where{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>, length<sub>i</sub>]
        </code>{" "}
        describes an edge between node{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and node{" "}
        <code>
          v<sub>i</sub>
        </code>{" "}
        with a traversal time of{" "}
        <code>
          length<sub>i</sub>
        </code>{" "}
        units.
      </p>

      <p>
        Additionally, you are given an array <code>disappear</code>, where{" "}
        <code>disappear[i]</code> denotes the time when the node <code>i</code>{" "}
        disappears from the graph and you won't be able to visit it.
      </p>

      <p>
        <strong>Note</strong>&nbsp;that the graph might be <em>disconnected</em>{" "}
        and might contain <em>multiple edges</em>.
      </p>

      <p>
        Return the array <code>answer</code>, with <code>answer[i]</code>{" "}
        denoting the <strong>minimum</strong> units of time required to reach
        node <code>i</code> from node 0. If node <code>i</code> is{" "}
        <strong>unreachable</strong> from node 0 then <code>answer[i]</code> is{" "}
        <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,1,5]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[0,-1,4]</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/08/11/output-onlinepngtools.png"
            style={{ width: 350, height: 210 }}
          />
        </p>
        <br />
        <p>
          We are starting our journey from node 0, and our goal is to find the
          minimum time required to reach each node before it disappears.
        </p>
        <br />
        <ul>
          <li>
            For node 0, we don't need any time as it is our starting point.
          </li>
          <li>
            For node 1, we need at least 2 units of time to traverse{" "}
            <code>edges[0]</code>. Unfortunately, it disappears at that moment,
            so we won't be able to visit it.
          </li>
          <li>
            For node 2, we need at least 4 units of time to traverse{" "}
            <code>edges[2]</code>.
          </li>
        </ul>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 3, edges = [[0,1,2],[1,2,1],[0,2,4]], disappear = [1,3,5]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[0,2,3]</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />
        <p>
          <img
            alt=""
            src="https://assets.leetcode.com/uploads/2024/08/11/output-onlinepngtools-1.png"
            style={{ width: 350, height: 210 }}
          />
        </p>
        <br />
        <p>
          We are starting our journey from node 0, and our goal is to find the
          minimum time required to reach each node before it disappears.
        </p>

        <ul>
          <li>
            For node 0, we don't need any time as it is the starting point.
          </li>
          <li>
            For node 1, we need at least 2 units of time to traverse{" "}
            <code>edges[0]</code>.
          </li>
          <li>
            For node 2, we need at least 3 units of time to traverse{" "}
            <code>edges[0]</code> and <code>edges[1]</code>.
          </li>
        </ul>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 2, edges = [[0,1,1]], disappear = [1,1]
          </span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">[0,-1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>Exactly when we reach node 1, it disappears.</p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= edges.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            edges[i] == [u<sub>i</sub>, v<sub>i</sub>, length<sub>i</sub>]
          </code>
        </li>
        <li>
          <code>
            0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            1 &lt;= length<sub>i</sub> &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>disappear.length == n</code>
        </li>
        <li>
          <code>
            1 &lt;= disappear[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3123: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an undirected weighted graph of <code>n</code> nodes
        numbered from 0 to <code>n - 1</code>. The graph consists of{" "}
        <code>m</code> edges represented by a 2D array <code>edges</code>, where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>, w<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        with weight{" "}
        <code>
          w<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Consider all the shortest paths from node 0 to node <code>n - 1</code>{" "}
        in the graph. You need to find a <strong>boolean</strong> array{" "}
        <code>answer</code> where <code>answer[i]</code> is <code>true</code> if
        the edge <code>edges[i]</code> is part of <strong>at least</strong> one
        shortest path. Otherwise, <code>answer[i]</code> is <code>false</code>.
      </p>

      <p>
        Return the array <code>answer</code>.
      </p>

      <p>
        <strong>Note</strong> that the graph may not be connected.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2024/03/05/graph35drawio-1.png"
        style={{ height: 129, width: 250 }}
      />
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 6, edges =
            [[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]
          </span>
        </p>
        <br />
        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">
            [true,true,true,false,true,true,true,false]
          </span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The following are <strong>all</strong> the shortest paths between
          nodes 0 and 5:
        </p>

        <ul>
          <li>
            The path <code>0 -&gt; 1 -&gt; 5</code>: The sum of weights is{" "}
            <code>4 + 1 = 5</code>.
          </li>
          <li>
            The path <code>0 -&gt; 2 -&gt; 3 -&gt; 5</code>: The sum of weights
            is <code>1 + 1 + 3 = 5</code>.
          </li>
          <li>
            The path <code>0 -&gt; 2 -&gt; 3 -&gt; 1 -&gt; 5</code>: The sum of
            weights is <code>1 + 1 + 2 + 1 = 5</code>.
          </li>
        </ul>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2024/03/05/graphhhh.png"
        style={{ width: 185, height: 136 }}
      />
      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 4, edges = [[2,0,1],[0,1,1],[0,3,4],[3,2,2]]
          </span>
        </p>
        <br />

        <p>
          <strong>Output:</strong>{" "}
          <span class="example-io">[true,false,false,true]</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          There is one shortest path between nodes 0 and 3, which is the path{" "}
          <code>0 -&gt; 2 -&gt; 3</code> with the sum of weights{" "}
          <code>1 + 2 = 3</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= n &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>m == edges.length</code>
        </li>
        <li>
          <code>
            1 &lt;= m &lt;= min(5 * 10<sup>4</sup>, n * (n - 1) / 2)
          </code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= w<sub>i</sub> &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>There are no repeated edges.</li>
      </ul>
    </div>
  ),
  252: (
    <div class="markdown-body div-width">
      <p>
        Given an array of meeting time intervals consisting of start and end
        times <code>[[s1,e1],[s2,e2],...]</code>
        (s<sub>i</sub> &lt; e<sub>i</sub>), determine if a person could attend
        all meetings.
      </p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        <b>Input:</b> <code>[[0,30],[5,10],[15,20]]</code> <br />
        <b>Output:</b> false
      </pre>

      <p>
        <b>Example 2:</b>
      </p>

      <pre>
        <b>Input:</b> [[7,10],[2,4]] <br />
        <b>Output:</b> true
      </pre>

      <p>
        <strong>NOTE:</strong>&nbsp;input types have been changed on April 15,
        2019. Please reset to default code definition to get new method
        signature.
      </p>
    </div>
  ),
  414: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, return{" "}
        <em>
          the <strong>third distinct maximum</strong> number in this array. If
          the third maximum does not exist, return the <strong>maximum</strong>{" "}
          number
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [3,2,1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> <br />
        The first distinct maximum is 3. <br />
        The second distinct maximum is 2. <br />
        The third distinct maximum is 1.
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,2] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        The first distinct maximum is 2. <br />
        The second distinct maximum is 1. <br />
        The third distinct maximum does not exist, so the maximum (2) is
        returned instead.
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [2,2,3,1] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> <br />
        The first distinct maximum is 3. <br />
        The second distinct maximum is 2 (both 2's are counted together since
        they have the same value). <br />
        The third distinct maximum is 1.
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Can you find an <code>O(n)</code> solution?
    </div>
  ),
  628: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>,{" "}
        <em>
          find three numbers whose product is maximum and return the maximum
          product
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,2,3] <br />
        <strong>Output:</strong> 6
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,2,3,4] <br />
        <strong>Output:</strong> 24
      </pre>
      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [-1,-2,-3] <br />
        <strong>Output:</strong> -6
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= nums.length &lt;=&nbsp;10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>-1000 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  747: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> where the largest
        integer is <strong>unique</strong>.
      </p>

      <p>
        Determine whether the largest element in the array is{" "}
        <strong>at least twice</strong> as much as every other number in the
        array. If it is, return{" "}
        <em>
          the <strong>index</strong> of the largest element, or return{" "}
        </em>
        <code>-1</code>
        <em> otherwise</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,6,1,0] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> 6 is the largest integer. <br />
        For every other number in the array x, 6 is at least twice as big as x.{" "}
        <br />
        The index of value 6 is 1, so we return 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> 4 is less than twice the value of 3, so we
        return -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 100</code>
        </li>
        <li>
          The largest element in <code>nums</code> is unique.
        </li>
      </ul>
    </div>
  ),
  757: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a 2D integer array <code>intervals</code> where{" "}
        <code>
          intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]
        </code>{" "}
        represents all the integers from{" "}
        <code>
          start<sub>i</sub>
        </code>{" "}
        to{" "}
        <code>
          end<sub>i</sub>
        </code>{" "}
        inclusively.
      </p>

      <p>
        A <strong>containing set</strong> is an array <code>nums</code> where
        each interval from <code>intervals</code> has{" "}
        <strong>at least two</strong> integers in <code>nums</code>.
      </p>

      <ul>
        <li>
          For example, if <code>intervals = [[1,3], [3,7], [8,9]]</code>, then{" "}
          <code>[1,2,4,7,8,9]</code> and <code>[2,3,4,8,9]</code> are{" "}
          <strong>containing sets</strong>.
        </li>
      </ul>

      <p>
        Return <em>the minimum possible size of a containing set</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,3],[3,7],[8,9]] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> let nums = [2, 3, 4, 8, 9]. <br />
        It can be shown that there cannot be any containing array of size 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,3],[1,4],[2,5],[3,5]] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> let nums = [2, 3, 4]. <br />
        It can be shown that there cannot be any containing array of size 2.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,2],[2,3],[2,4],[4,5]] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> let nums = [1, 2, 3, 4, 5]. <br />
        It can be shown that there cannot be any containing array of size 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= intervals.length &lt;= 3000</code>
        </li>
        <li>
          <code>intervals[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>8</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  791: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two strings <code>order</code> and <code>s</code>. All the
        characters of <code>order</code> are <strong>unique</strong> and were
        sorted in some custom order previously.
      </p>

      <p>
        Permute the characters of <code>s</code> so that they match the order
        that <code>order</code> was sorted. More specifically, if a character{" "}
        <code>x</code> occurs before a character <code>y</code> in{" "}
        <code>order</code>, then <code>x</code> should occur before{" "}
        <code>y</code> in the permuted string.
      </p>

      <p>
        Return <em>any permutation of </em>
        <code>s</code>
        <em> that satisfies this property</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io"> order = "cba", s = "abcd" </span>
        </p>
        <br />
        <p>
          <strong>Output: </strong> <span class="example-io"> "cbad" </span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong> <code>"a"</code>, <code>"b"</code>,{" "}
          <code>"c"</code> appear in order, so the order of <code>"a"</code>,{" "}
          <code>"b"</code>, <code>"c"</code> should be <code>"c"</code>,{" "}
          <code>"b"</code>, and <code>"a"</code>.
        </p>
        <br />

        <p>
          Since <code>"d"</code> does not appear in <code>order</code>, it can
          be at any position in the returned string. <code>"dcba"</code>,{" "}
          <code>"cdba"</code>, <code>"cbda"</code> are also valid outputs.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input: </strong>{" "}
          <span class="example-io"> order = "bcafg", s = "abcd" </span>
        </p>
        <br />

        <p>
          <strong>Output: </strong> <span class="example-io"> "bcad" </span>
        </p>
        <br />

        <p>
          <strong>Explanation: </strong> The characters <code>"b"</code>,{" "}
          <code>"c"</code>, and <code>"a"</code> from <code>order</code> dictate
          the order for the characters in <code>s</code>. The character{" "}
          <code>"d"</code> in <code>s</code> does not appear in{" "}
          <code>order</code>, so its position is flexible.
        </p>
        <br />

        <p>
          Following the order of appearance in <code>order</code>,{" "}
          <code>"b"</code>, <code>"c"</code>, and <code>"a"</code> from{" "}
          <code>s</code> should be arranged as <code>"b"</code>,{" "}
          <code>"c"</code>, <code>"a"</code>. <code>"d"</code> can be placed at
          any position since it's not in order. The output <code>"bcad"</code>{" "}
          correctly follows this rule. Other arrangements like{" "}
          <code>"dbca"</code> or <code>"bcda"</code> would also be valid, as
          long as <code>"b"</code>, <code>"c"</code>, <code>"a"</code> maintain
          their order.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= order.length &lt;= 26</code>
        </li>
        <li>
          <code>1 &lt;= s.length &lt;= 200</code>
        </li>
        <li>
          <code>order</code> and <code>s</code> consist of lowercase English
          letters.
        </li>
        <li>
          All the characters of <code>order</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  833: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> string <code>s</code> that
        you must perform <code>k</code> replacement operations on. The
        replacement operations are given as three <strong>0-indexed</strong>{" "}
        parallel arrays, <code>indices</code>, <code>sources</code>, and{" "}
        <code>targets</code>, all of length <code>k</code>.
      </p>

      <p>
        To complete the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        replacement operation:
      </p>

      <ul>
        <li>
          Check if the <strong>substring</strong> <code>sources[i]</code> occurs
          at index <code>indices[i]</code> in the{" "}
          <strong>original string</strong> <code>s</code>.
        </li>
        <li>
          If it does not occur, <strong>do nothing</strong>.
        </li>
        <li>
          Otherwise if it does occur, <strong>replace</strong> that substring
          with <code>targets[i]</code>.
        </li>
      </ul>

      <p>
        For example, if{" "}
        <code>
          s = "<u>ab</u>cd"
        </code>
        , <code>indices[i] = 0</code>, <code>sources[i] = "ab"</code>, and{" "}
        <code>targets[i] = "eee"</code>, then the result of this replacement
        will be{" "}
        <code>
          "<u>eee</u>cd"
        </code>
        .
      </p>

      <p>
        All replacement operations must occur <strong>simultaneously</strong>,
        meaning the replacement operations should not affect the indexing of
        each other. The testcases will be generated such that the replacements
        will <strong>not overlap</strong>.
      </p>

      <ul>
        <li>
          For example, a testcase with <code>s = "abc"</code>,{" "}
          <code>indices = [0, 1]</code>, and <code>sources = ["ab","bc"]</code>{" "}
          will not be generated because the <code>"ab"</code> and{" "}
          <code>"bc"</code> replacements overlap.
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>resulting string</strong> after performing all replacement
          operations on{" "}
        </em>
        <code>s</code>.
      </p>

      <p>
        A <strong>substring</strong> is a contiguous sequence of characters in a
        string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/06/12/833-ex1.png"
        style={{ width: 411, height: 251 }}
      />
      <pre>
        <strong>Input:</strong> s = "abcd", indices = [0, 2], sources = ["a",
        "cd"], targets = ["eee", "ffff"] <br />
        <strong>Output:</strong> "eeebffff" <br />
        <strong>Explanation:</strong> <br />
        "a" occurs at index 0 in s, so we replace it with "eee". <br />
        "cd" occurs at index 2 in s, so we replace it with "ffff".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/06/12/833-ex2-1.png"
        style={{ width: 411, height: 251 }}
      />
      <pre>
        <strong>Input:</strong> s = "abcd", indices = [0, 2], sources =
        ["ab","ec"], targets = ["eee","ffff"] <br />
        <strong>Output:</strong> "eeecd" <br />
        <strong>Explanation:</strong> <br />
        "ab" occurs at index 0 in s, so we replace it with "eee". <br />
        "ec" does not occur at index 2 in s, so we do nothing.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>k == indices.length == sources.length == targets.length</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= indexes[i] &lt; s.length</code>
        </li>
        <li>
          <code>1 &lt;= sources[i].length, targets[i].length &lt;= 50</code>
        </li>
        <li>
          <code>s</code> consists of only lowercase English letters.
        </li>
        <li>
          <code>sources[i]</code> and <code>targets[i]</code> consist of only
          lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  891: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>width</strong> of a sequence is the difference between the
        maximum and minimum elements in the sequence.
      </p>

      <p>
        Given an array of integers <code>nums</code>, return{" "}
        <em>
          the sum of the <strong>widths</strong> of all the non-empty{" "}
          <strong>subsequences</strong> of{" "}
        </em>
        <code>nums</code>. Since the answer may be very large, return it{" "}
        <strong>modulo</strong>{" "}
        <code>
          10<sup>9</sup> + 7
        </code>
        .
      </p>

      <p>
        A <strong>subsequence</strong> is a sequence that can be derived from an
        array by deleting some or no elements without changing the order of the
        remaining elements. For example, <code>[3,6,2,7]</code> is a subsequence
        of the array <code>[0,3,1,6,2,2,7]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1,3] <br />
        <strong>Output:</strong> 6 <br />
        Explanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3],
        [2,1,3]. <br />
        The corresponding widths are 0, 0, 0, 1, 1, 2, 2. <br />
        The sum of these widths is 6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2] <br />
        <strong>Output:</strong> 0
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  899: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> and an integer <code>k</code>. You
        can choose one of the first <code>k</code> letters of <code>s</code> and
        append it at the end of the string.
      </p>

      <p>
        Return{" "}
        <em>
          the lexicographically smallest string you could have after applying
          the mentioned step any number of moves
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "cba", k = 1<br />
        <strong>Output:</strong> "acb"
        <br />
        <strong>Explanation:</strong> <br />
        In the first move, we move the 1<sup>st</sup> character 'c' to the end,
        obtaining the string "bac".
        <br />
        In the second move, we move the 1<sup>st</sup> character 'b' to the end,
        obtaining the final result "acb".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "baaca", k = 3 <br />
        <strong>Output:</strong> "aaabc" <br />
        <strong>Explanation:</strong> <br />
        In the first move, we move the 1<sup>st</sup> character 'b' to the end,
        obtaining the string "aacab".
        <br />
        In the second move, we move the 3<sup>rd</sup> character 'c' to the end,
        obtaining the final result "aaabc".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= k &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>s</code> consist of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  910: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and an integer{" "}
        <code>k</code>.
      </p>

      <p>
        For each index <code>i</code> where{" "}
        <code>0 &lt;= i &lt; nums.length</code>, change <code>nums[i]</code> to
        be either <code>nums[i] + k</code> or <code>nums[i] - k</code>.
      </p>

      <p>
        The <strong>score</strong> of <code>nums</code> is the difference
        between the maximum and minimum elements in <code>nums</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum <strong>score</strong> of{" "}
        </em>
        <code>nums</code>
        <em> after changing the values at each index</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1], k = 0 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> The score is max(nums) - min(nums) = 1 - 1
        = 0.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,10], k = 2 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> Change nums to be [2, 8]. The score is
        max(nums) - min(nums) = 8 - 2 = 6.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,6], k = 3 <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> Change nums to be [4, 6, 3]. The score is
        max(nums) - min(nums) = 6 - 3 = 3.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  922: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of integers <code>nums</code>, half of the integers in{" "}
        <code>nums</code> are <strong>odd</strong>, and the other half are{" "}
        <strong>even</strong>.
      </p>

      <p>
        Sort the array so that whenever <code>nums[i]</code> is odd,{" "}
        <code>i</code> is <strong>odd</strong>, and whenever{" "}
        <code>nums[i]</code> is even, <code>i</code> is <strong>even</strong>.
      </p>

      <p>
        Return <em>any answer array that satisfies this condition</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,5,7] <br />
        <strong>Output:</strong> [4,5,2,7] <br />
        <strong>Explanation:</strong> [4,7,2,5], [2,5,4,7], [2,7,4,5] would also
        have been accepted.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,3] <br />
        <strong>Output:</strong> [2,3]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= nums.length &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>nums.length</code> is even.
        </li>
        <li>
          Half of the integers in <code>nums</code> are even.
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 1000</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong>Follow Up:</strong> Could you solve it in-place?
      </p>
    </div>
  ),
  1005: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> and an integer <code>k</code>,
        modify the array in the following way:
      </p>

      <ul>
        <li>
          choose an index <code>i</code> and replace <code>nums[i]</code> with{" "}
          <code>-nums[i]</code>.
        </li>
      </ul>

      <p>
        You should apply this process exactly <code>k</code> times. You may
        choose the same index <code>i</code> multiple times.
      </p>

      <p>
        Return{" "}
        <em>
          the largest possible sum of the array after modifying it in this way
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,3], k = 1 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> Choose index 1 and nums becomes [4,-2,3].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,-1,0,2], k = 3 <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> Choose indices (1, 2, 2) and nums becomes
        [3,1,0,2].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,-3,-1,5,-4], k = 2 <br />
        <strong>Output:</strong> 13 <br />
        <strong>Explanation:</strong> Choose indices (1, 4) and nums becomes
        [2,3,-1,5,4].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>-100 &lt;= nums[i] &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1029: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A company is planning to interview <code>2n</code> people. Given the
        array <code>costs</code> where{" "}
        <code>
          costs[i] = [aCost<sub>i</sub>, bCost<sub>i</sub>]
        </code>
        ,&nbsp;the cost of flying the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        person to city <code>a</code> is{" "}
        <code>
          aCost<sub>i</sub>
        </code>
        , and the cost of flying the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        person to city <code>b</code> is{" "}
        <code>
          bCost<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Return <em>the minimum cost to fly every person to a city</em> such that
        exactly <code>n</code> people arrive in each city.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> costs = [[10,20],[30,200],[400,50],[30,20]]{" "}
        <br />
        <strong>Output:</strong> 110
        <br />
        <strong>Explanation: </strong>
        <br />
        The first person goes to city A for a cost of 10.
        <br />
        The second person goes to city A for a cost of 30.
        <br />
        The third person goes to city B for a cost of 50.
        <br />
        The fourth person goes to city B for a cost of 20.
        <br />
        The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the
        people interviewing in each city.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> costs =
        [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]] <br />
        <strong>Output:</strong> 1859
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> costs =
        [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]{" "}
        <br />
        <strong>Output:</strong> 3086
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 * n == costs.length</code>
        </li>
        <li>
          <code>2 &lt;= costs.length &lt;= 100</code>
        </li>
        <li>
          <code>costs.length</code> is even.
        </li>
        <li>
          <code>
            1 &lt;= aCost<sub>i</sub>, bCost<sub>i</sub> &lt;= 1000
          </code>
        </li>
      </ul>
    </div>
  ),
  1133: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A company is planning to interview <code>2n</code> people. Given the
        array <code>costs</code> where{" "}
        <code>
          costs[i] = [aCost<sub>i</sub>, bCost<sub>i</sub>]
        </code>
        ,&nbsp;the cost of flying the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        person to city <code>a</code> is{" "}
        <code>
          aCost<sub>i</sub>
        </code>
        , and the cost of flying the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        person to city <code>b</code> is{" "}
        <code>
          bCost<sub>i</sub>
        </code>
        .
      </p>

      <p>
        Return <em>the minimum cost to fly every person to a city</em> such that
        exactly <code>n</code> people arrive in each city.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> costs = [[10,20],[30,200],[400,50],[30,20]]{" "}
        <br />
        <strong>Output:</strong> 110 <br />
        <strong>Explanation: </strong> <br />
        The first person goes to city A for a cost of 10. <br />
        The second person goes to city A for a cost of 30. <br />
        The third person goes to city B for a cost of 50. <br />
        The fourth person goes to city B for a cost of 20. <br />
        The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the
        people interviewing in each city.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> costs =
        [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]] <br />
        <strong>Output:</strong> 1859
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> costs =
        [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]{" "}
        <br />
        <strong>Output:</strong> 3086
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 * n == costs.length</code>
        </li>
        <li>
          <code>2 &lt;= costs.length &lt;= 100</code>
        </li>
        <li>
          <code>costs.length</code> is even.
        </li>
        <li>
          <code>
            1 &lt;= aCost<sub>i</sub>, bCost<sub>i</sub> &lt;= 1000
          </code>
        </li>
      </ul>
    </div>
  ),
  1196: (
    <article role="main" class="blog-post">
      <p>
        You have some apples and a basket that can carry up to <code>5000</code>{" "}
        units of weight.
      </p>

      <p>
        Given an integer array <code>weight</code> where <code>weight[i]</code>{" "}
        is the weight of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        apple, return{" "}
        <em>the maximum number of apples you can put in the basket</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> weight = [100,200,150,1000] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> All 4 apples can be carried by the basket
        since their sum of weights is 1450.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> weight = [900,950,800,1000,700,800] <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The sum of weights of the 6 apples exceeds
        5000 so we choose any 5 of them.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= weight.length &lt;= 10<sup>3</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= weight[i] &lt;= 10<sup>3</sup>
          </code>
        </li>
      </ul>
    </article>
  ),
  1200: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of <strong>distinct</strong> integers <code>arr</code>,
        find all pairs of elements with the minimum absolute difference of any
        two elements.
      </p>

      <p>
        Return a list of pairs in ascending order(with respect to pairs), each
        pair <code>[a, b]</code> follows
      </p>

      <ul>
        <li>
          <code>a, b</code> are from <code>arr</code>
        </li>
        <li>
          <code>a &lt; b</code>
        </li>
        <li>
          <code>b - a</code> equals to the minimum absolute difference of any
          two elements in <code>arr</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [4,2,1,3] <br />
        <strong>Output:</strong> [[1,2],[2,3],[3,4]] <br />
        <strong>Explanation: </strong>The minimum absolute difference is 1. List
        all pairs with difference equal to 1 in ascending order.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,3,6,10,15] <br />
        <strong>Output:</strong> [[1,3]]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [3,8,-10,23,19,-4,-14,27] <br />
        <strong>Output:</strong> [[-14,-10],[19,23],[23,27]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= arr.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>6</sup> &lt;= arr[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1329: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>matrix diagonal</strong> is a diagonal line of cells starting
        from some cell in either the topmost row or leftmost column and going in
        the bottom-right direction until reaching the matrix's end. For example,
        the <strong>matrix diagonal</strong> starting from{" "}
        <code>mat[2][0]</code>, where <code>mat</code> is a <code>6 x 3</code>{" "}
        matrix, includes cells <code>mat[2][0]</code>, <code>mat[3][1]</code>,
        and <code>mat[4][2]</code>.
      </p>
      <p>
        Given an <code>m x n</code> matrix <code>mat</code> of integers, sort
        each <strong>matrix diagonal</strong> in ascending order and return{" "}
        <em>the resulting matrix</em>.
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/01/21/1482_example_1_2.png"
        style={{ width: 500, height: 198 }}
      />
      <br />{" "}
      <pre>
        <strong>Input:</strong> mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
        <br /> <strong>Output:</strong> [[1,1,1,1],[1,2,2,2],[1,2,3,3]]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> mat =
        [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]{" "}
        <br />
        <strong>Output:</strong>{" "}
        [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>m == mat.length</code>
        </li>
        <li>
          <code>n == mat[i].length</code>
        </li>
        <li>
          <code>1 &lt;= m, n &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= mat[i][j] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  1433: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings: <code>s1</code> and <code>s2</code> with the
        same&nbsp;size, check if some&nbsp;permutation of string <code>s1</code>{" "}
        can break&nbsp;some&nbsp;permutation of string <code>s2</code> or
        vice-versa. In other words <code>s2</code> can break <code>s1</code>
        &nbsp;or vice-versa.
      </p>

      <p>
        A string <code>x</code>&nbsp;can break&nbsp;string <code>y</code>
        &nbsp;(both of size <code>n</code>) if <code>x[i] &gt;= y[i]</code>
        &nbsp;(in alphabetical order)&nbsp;for all <code>
          i
        </code>&nbsp;between <code>0</code> and <code>n-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "abc", s2 = "xya" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> "ayx" is a permutation of s2="xya" which
        can break to string "abc" which is a permutation of s1="abc".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "abe", s2 = "acd"
        <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> All permutations for s1="abe" are: "abe",
        "aeb", "bae", "bea", "eab" and "eba" and all permutation for s2="acd"
        are: "acd", "adc", "cad", "cda", "dac" and "dca". However, there is not
        any permutation from s1 which can break some permutation from s2 and
        vice-versa.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s1 = "leetcodee", s2 = "interview" <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>s1.length == n</code>
        </li>
        <li>
          <code>s2.length == n</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 10^5</code>
        </li>
        <li>All strings consist of lowercase English letters.</li>
      </ul>
    </div>
  ),
  1451: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a sentence&nbsp;<code>text</code> (A&nbsp;<em>sentence</em>
        &nbsp;is a string of space-separated words) in the following format:
      </p>

      <ul>
        <li>First letter is in upper case.</li>
        <li>
          Each word in <code>text</code> are separated by a single space.
        </li>
      </ul>

      <p>
        Your task is to rearrange the words in text such that&nbsp;all words are
        rearranged in an increasing order of their lengths. If two words have
        the same length, arrange them in their original order.
      </p>

      <p>Return the new text&nbsp;following the format shown above.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> text = "Leetcode is cool" <br />
        <strong>Output:</strong> "Is cool leetcode" <br />
        <strong>Explanation: </strong>There are 3 words, "Leetcode" of length 8,
        "is" of length 2 and "cool" of length 4. <br />
        Output is ordered by length and the new first word starts with capital
        letter.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> text = "Keep calm and code on" <br />
        <strong>Output:</strong> "On and keep calm code" <br />
        <strong>Explanation: </strong>Output is ordered as follows: <br />
        "On" 2 letters. <br />
        "and" 3 letters. <br />
        "keep" 4 letters in case of tie order by position in original text.{" "}
        <br />
        "calm" 4 letters. <br />
        "code" 4 letters.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> text = "To be or not to be" <br />
        <strong>Output:</strong> "To be or to be not"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>text</code> begins with a capital letter and then contains
          lowercase letters and single space between words.
        </li>
        <li>
          <code>1 &lt;= text.length &lt;= 10^5</code>
        </li>
      </ul>
    </div>
  ),
  1619: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>arr</code>, return{" "}
        <em>
          the mean of the remaining integers after removing the smallest{" "}
          <code>5%</code> and the largest <code>5%</code> of the elements.
        </em>
      </p>

      <p>
        Answers within{" "}
        <code>
          10<sup>-5</sup>
        </code>{" "}
        of the <strong>actual answer</strong> will be considered accepted.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]{" "}
        <br />
        <strong>Output:</strong> 2.00000 <br />
        <strong>Explanation:</strong> After erasing the minimum and the maximum
        values of this array, all elements are equal to 2, so the mean is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]{" "}
        <br />
        <strong>Output:</strong> 4.00000
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr =
        [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]{" "}
        <br />
        <strong>Output:</strong> 4.77778
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>20 &lt;= arr.length &lt;= 1000</code>
        </li>
        <li>
          <code>arr.length</code>
          <b> </b>
          <strong>is a multiple</strong> of <code>20</code>.
        </li>
        <li>
          <code>
            <font face="monospace">
              0 &lt;= arr[i] &lt;= 10<sup>5</sup>
            </font>
          </code>
        </li>
      </ul>
    </div>
  ),
  1710: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are assigned to put some amount of boxes onto{" "}
        <strong>one truck</strong>. You are given a 2D array{" "}
        <code>boxTypes</code>, where{" "}
        <code>
          boxTypes[i] = [numberOfBoxes<sub>i</sub>, numberOfUnitsPerBox
          <sub>i</sub>]
        </code>
        :
      </p>

      <ul>
        <li>
          <code>
            numberOfBoxes<sub>i</sub>
          </code>{" "}
          is the number of boxes of type <code>i</code>.
        </li>
        <li>
          <code>
            numberOfUnitsPerBox<sub>i</sub>
          </code>
          <sub> </sub>is the number of units in each box of the type{" "}
          <code>i</code>.
        </li>
      </ul>

      <p>
        You are also given an integer <code>truckSize</code>, which is the{" "}
        <strong>maximum</strong> number of <strong>boxes</strong> that can be
        put on the truck. You can choose any boxes to put on the truck as long
        as the number&nbsp;of boxes does not exceed <code>truckSize</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong> total number of <strong>units</strong>{" "}
          that can be put on the truck.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4{" "}
        <br />
        <strong>Output:</strong> 8 <br />
        <strong>Explanation:</strong> There are: <br />
        - 1 box of the first type that contains 3 units. <br />
        - 2 boxes of the second type that contain 2 units each. <br />
        - 3 boxes of the third type that contain 1 unit each. <br />
        You can take all the boxes of the first and second types, and one box of
        the third type. <br />
        The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize
        = 10 <br />
        <strong>Output:</strong> 91
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= boxTypes.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= numberOfBoxes<sub>i</sub>, numberOfUnitsPerBox<sub>i</sub>{" "}
            &lt;= 1000
          </code>
        </li>
        <li>
          <code>
            1 &lt;= truckSize &lt;= 10<sup>6</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1913: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>product difference</strong> between two pairs{" "}
        <code>(a, b)</code> and <code>(c, d)</code> is defined as{" "}
        <code>(a * b) - (c * d)</code>.
      </p>

      <ul>
        <li>
          For example, the product difference between <code>(5, 6)</code> and{" "}
          <code>(2, 7)</code> is <code>(5 * 6) - (2 * 7) = 16</code>.
        </li>
      </ul>

      <p>
        Given an integer array <code>nums</code>, choose four{" "}
        <strong>distinct</strong> indices <code>w</code>, <code>x</code>,{" "}
        <code>y</code>, and <code>z</code> such that the{" "}
        <strong>product difference</strong> between pairs{" "}
        <code>(nums[w], nums[x])</code> and <code>(nums[y], nums[z])</code> is{" "}
        <strong>maximized</strong>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>maximum</strong> such product difference
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,6,2,7,4] <br />
        <strong>Output:</strong> 34 <br />
        <strong>Explanation:</strong> We can choose indices 1 and 3 for the
        first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).
        <br /> The product difference is (6 * 7) - (2 * 4) = 34.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,5,9,7,4,8] <br />
        <strong>Output:</strong> 64 <br />
        <strong>Explanation:</strong> We can choose indices 3 and 6 for the
        first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).
        <br /> The product difference is (9 * 8) - (2 * 4) = 64.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            4 &lt;= nums.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2164: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code>. Rearrange the values of <code>nums</code> according
        to the following rules:
      </p>

      <ul>
        <li>
          Sort the values at <strong>odd indices</strong> of <code>nums</code>{" "}
          in <strong>non-increasing</strong> order.
          <ul>
            <li>
              For example, if{" "}
              <code>
                nums = [4,
                <strong>
                  <u>1</u>
                </strong>
                ,2,
                <u>
                  <strong>3</strong>
                </u>
                ]
              </code>{" "}
              before this step, it becomes{" "}
              <code>
                [4,
                <u>
                  <strong>3</strong>
                </u>
                ,2,
                <strong>
                  <u>1</u>
                </strong>
                ]
              </code>{" "}
              after. The values at odd indices <code>1</code> and <code>3</code>{" "}
              are sorted in non-increasing order.
            </li>
          </ul>
        </li>
        <li>
          Sort the values at <strong>even indices</strong> of <code>nums</code>{" "}
          in <strong>non-decreasing</strong> order.
          <ul>
            <li>
              For example, if{" "}
              <code>
                nums = [
                <u>
                  <strong>4</strong>
                </u>
                ,1,
                <u>
                  <strong>2</strong>
                </u>
                ,3]
              </code>{" "}
              before this step, it becomes{" "}
              <code>
                [
                <u>
                  <strong>2</strong>
                </u>
                ,1,
                <u>
                  <strong>4</strong>
                </u>
                ,3]
              </code>{" "}
              after. The values at even indices <code>0</code> and{" "}
              <code>2</code> are sorted in non-decreasing order.
            </li>
          </ul>
        </li>
      </ul>

      <p>
        Return <em>the array formed after rearranging the values of</em>{" "}
        <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,1,2,3]
        <br /> <strong>Output:</strong> [2,3,4,1]
        <br /> <strong>Explanation:</strong>
        <br /> First, we sort the values present at odd indices (1 and 3) in
        non-increasing order.
        <br /> So, nums changes from [4,
        <strong>
          <u>1</u>
        </strong>
        ,2,
        <strong>
          <u>3</u>
        </strong>
        ] to [4,
        <u>
          <strong>3</strong>
        </u>
        ,2,
        <strong>
          <u>1</u>
        </strong>
        ].
        <br /> Next, we sort the values present at even indices (0 and 2) in
        non-decreasing order.
        <br /> So, nums changes from [
        <u>
          <strong>4</strong>
        </u>
        ,1,
        <strong>
          <u>2</u>
        </strong>
        ,3] to [
        <u>
          <strong>2</strong>
        </u>
        ,3,
        <u>
          <strong>4</strong>
        </u>
        ,1].
        <br /> Thus, the array formed after rearranging the values is [2,3,4,1].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1]
        <br /> <strong>Output:</strong> [2,1] <br />
        <strong>Explanation:</strong> <br />
        <br /> Since there is exactly one odd index and one even index, no
        rearrangement of values takes place. <br />
        The resultant array formed is [2,1], which is the same as the initial
        array.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  57: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of non-overlapping intervals{" "}
        <code>intervals</code> where{" "}
        <code>
          intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]
        </code>{" "}
        represent the start and the end of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        interval and <code>intervals</code> is sorted in ascending order by{" "}
        <code>
          start<sub>i</sub>
        </code>
        . You are also given an interval <code>newInterval = [start, end]</code>{" "}
        that represents the start and end of another interval.
      </p>

      <p>
        Insert <code>newInterval</code> into <code>intervals</code> such that{" "}
        <code>intervals</code> is still sorted in ascending order by{" "}
        <code>
          start<sub>i</sub>
        </code>{" "}
        and <code>intervals</code> still does not have any overlapping intervals
        (merge overlapping intervals if necessary).
      </p>

      <p>
        Return <code>intervals</code>
        <em> after the insertion</em>.
      </p>

      <p>
        <strong>Note</strong> that you don't need to modify{" "}
        <code>intervals</code> in-place. You can make a new array and return it.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,3],[6,9]], newInterval = [2,5]{" "}
        <br />
        <strong>Output:</strong> [[1,5],[6,9]]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]],
        newInterval = [4,8] <br />
        <strong>Output:</strong> [[1,2],[3,10],[12,16]] <br />
        <strong>Explanation:</strong> Because the new interval [4,8] overlaps
        with [3,5],[6,7],[8,10].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            0 &lt;= intervals.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>intervals[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>intervals</code> is sorted by{" "}
          <code>
            start<sub>i</sub>
          </code>{" "}
          in <strong>ascending</strong> order.
        </li>
        <li>
          <code>newInterval.length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= start &lt;= end &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  66: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>large integer</strong> represented as an integer
        array <code>digits</code>, where each <code>digits[i]</code> is the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        digit of the integer. The digits are ordered from most significant to
        least significant in left-to-right order. The large integer does not
        contain any leading <code>0</code>'s.
      </p>

      <p>
        Increment the large integer by one and return{" "}
        <em>the resulting array of digits</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> digits = [1,2,3] <br />
        <strong>Output:</strong> [1,2,4] <br />
        <strong>Explanation:</strong> The array represents the integer 123.{" "}
        <br />
        Incrementing by one gives 123 + 1 = 124. <br />
        Thus, the result should be [1,2,4].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> digits = [4,3,2,1] <br />
        <strong>Output:</strong> [4,3,2,2] <br />
        <strong>Explanation:</strong> The array represents the integer 4321.{" "}
        <br />
        Incrementing by one gives 4321 + 1 = 4322. <br />
        Thus, the result should be [4,3,2,2].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> digits = [9] <br />
        <strong>Output:</strong> [1,0] <br />
        <strong>Explanation:</strong> The array represents the integer 9. <br />
        Incrementing by one gives 9 + 1 = 10. <br />
        Thus, the result should be [1,0].
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= digits.length &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= digits[i] &lt;= 9</code>
        </li>
        <li>
          <code>digits</code> does not contain any leading <code>0</code>'s.
        </li>
      </ul>
    </div>
  ),
  136: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <strong>non-empty</strong>&nbsp;array of integers{" "}
        <code>nums</code>, every element appears <em>twice</em> except for one.
        Find that single one.
      </p>

      <p>
        You must&nbsp;implement a solution with a linear runtime complexity and
        use&nbsp;only constant&nbsp;extra space.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [2,2,1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [4,1,2,1,2]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">4</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [1]</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          Each element in the array appears twice except for one element which
          appears only once.
        </li>
      </ul>
    </div>
  ),
  163: (
    <div class="markdown-body div-width">
      <p>
        Given a sorted integer array{" "}
        <strong>
          <em>nums</em>
        </strong>
        , where the range of elements are in the{" "}
        <strong>inclusive range</strong>
        <b>
          <strong> </strong>[<i>lower</i>, <i>upper</i>]
        </b>
        , return its missing ranges.
      </p>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input:</strong>{" "}
        <strong>
          <em>nums</em>
        </strong>{" "}
        = <code>[0, 1, 3, 50, 75]</code>,{" "}
        <strong>
          <i>lower</i>
        </strong>{" "}
        = 0 and{" "}
        <strong>
          <i>upper</i>
        </strong>{" "}
        = 99,
        <br />
        <strong>Output:</strong>{" "}
        <code>["2", "4-&gt;49", "51-&gt;74", "76-&gt;99"]</code>
      </pre>
    </div>
  ),
  228: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>sorted unique</strong> integer array{" "}
        <code>nums</code>.
      </p>

      <p>
        A <strong>range</strong> <code>[a,b]</code> is the set of all integers
        from <code>a</code> to <code>b</code> (inclusive).
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>smallest sorted</strong> list of ranges that{" "}
          <strong>cover all the numbers in the array exactly</strong>
        </em>
        . That is, each element of <code>nums</code> is covered by exactly one
        of the ranges, and there is no integer <code>x</code> such that{" "}
        <code>x</code> is in one of the ranges but not in <code>nums</code>.
      </p>

      <p>
        Each range <code>[a,b]</code> in the list should be output as:
      </p>

      <ul>
        <li>
          <code>"a-&gt;b"</code> if <code>a != b</code>
        </li>
        <li>
          <code>"a"</code> if <code>a == b</code>
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,1,2,4,5,7] <br />
        <strong>Output:</strong> ["0-&gt;2","4-&gt;5","7"] <br />
        <strong>Explanation:</strong> The ranges are: <br />
        [0,2] --&gt; "0-&gt;2" <br />
        [4,5] --&gt; "4-&gt;5" <br />
        [7,7] --&gt; "7"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [0,2,3,4,6,8,9] <br />
        <strong>Output:</strong> ["0","2-&gt;4","6","8-&gt;9"] <br />
        <strong>Explanation:</strong> The ranges are: <br />
        [0,0] --&gt; "0" <br />
        [2,4] --&gt; "2-&gt;4" <br />
        [6,6] --&gt; "6" <br />
        [8,9] --&gt; "8-&gt;9"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= nums.length &lt;= 20</code>
        </li>
        <li>
          <code>
            -2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1
          </code>
        </li>
        <li>
          All the values of <code>nums</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>nums</code> is sorted in ascending order.
        </li>
      </ul>
    </div>
  ),
  665: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> with <code>n</code> integers, your task
        is to check if it could become non-decreasing by modifying{" "}
        <strong>at most one element</strong>.
      </p>

      <p>
        We define an array is non-decreasing if{" "}
        <code>nums[i] &lt;= nums[i + 1]</code> holds for every <code>i</code> (
        <strong>0-based</strong>) such that (<code>0 &lt;= i &lt;= n - 2</code>
        ).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,3] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> You could modify the first 4 to 1 to get a
        non-decreasing array.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [4,2,1] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> You cannot get a non-decreasing array by
        modifying at most one element.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == nums.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            -10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  717: (
    <div class="elfjS" data-track-load="description_content">
      <p>We have two special characters:</p>

      <ul>
        <li>
          The first character can be represented by one bit <code>0</code>.
        </li>
        <li>
          The second character can be represented by two bits (<code>10</code>{" "}
          or <code>11</code>).
        </li>
      </ul>

      <p>
        Given a binary array <code>bits</code> that ends with <code>0</code>,
        return <code>true</code> if the last character must be a one-bit
        character.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> bits = [1,0,0] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> The only way to decode it is two-bit
        character and one-bit character. <br />
        So the last character is one-bit character.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> bits = [1,1,1,0] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The only way to decode it is two-bit
        character and two-bit character. <br />
        So the last character is not one-bit character.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= bits.length &lt;= 1000</code>
        </li>
        <li>
          <code>bits[i]</code> is either <code>0</code> or <code>1</code>.
        </li>
      </ul>
    </div>
  ),
  915: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code>, partition it into two
        (contiguous) subarrays <code>left</code> and <code>right</code> so that:
      </p>

      <ul>
        <li>
          Every element in <code>left</code> is less than or equal to every
          element in <code>right</code>.
        </li>
        <li>
          <code>left</code> and <code>right</code> are non-empty.
        </li>
        <li>
          <code>left</code> has the smallest possible size.
        </li>
      </ul>

      <p>
        Return <em>the length of </em>
        <code>left</code>
        <em> after such a partitioning</em>.
      </p>

      <p>Test cases are generated such that partitioning exists.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [5,0,3,8,6] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> left = [5,0,3], right = [8,6]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,0,6,12] <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> left = [1,1,1,0], right = [6,12]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            2 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>6</sup>
          </code>
        </li>
        <li>There is at least one valid answer for the given input.</li>
      </ul>
    </div>
  ),
  1295: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>nums</code> of integers, return how many of them
        contain an <strong>even number</strong> of digits.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [12,345,2,6,7896] <br />
        <strong>Output:</strong> 2 <br />
        <strong>
          Explanation: <br />
        </strong>
        12 contains 2 digits (even number of digits).&nbsp; <br />
        345 contains 3 digits (odd number of digits).&nbsp; <br />
        2 contains 1 digit (odd number of digits).&nbsp; <br />
        6 contains 1 digit (odd number of digits).&nbsp; <br />
        7896 contains 4 digits (even number of digits).&nbsp; <br />
        Therefore only 12 and 7896 contain an even number of digits.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [555,901,482,1771] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation: </strong> <br />
        Only 1771 contains an even number of digits.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 500</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1299: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array <code>arr</code>,&nbsp;replace every element in that
        array with the greatest element among the elements to its&nbsp;right,
        and replace the last element with <code>-1</code>.
      </p>

      <p>After doing so, return the array.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [17,18,5,4,6,1] <br />
        <strong>Output:</strong> [18,6,6,6,1,-1] <br />
        <strong>Explanation:</strong> <br />
        - index 0 --&gt; the greatest element to the right of index 0 is index 1
        (18). <br />
        - index 1 --&gt; the greatest element to the right of index 1 is index 4
        (6). <br />
        - index 2 --&gt; the greatest element to the right of index 2 is index 4
        (6). <br />
        - index 3 --&gt; the greatest element to the right of index 3 is index 4
        (6). <br />
        - index 4 --&gt; the greatest element to the right of index 4 is index 5
        (1). <br />- index 5 --&gt; there are no elements to the right of index
        5, so we put -1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> arr = [400] <br />
        <strong>Output:</strong> [-1] <br />
        <strong>Explanation:</strong> There are no elements to the right of
        index 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= arr.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= arr[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1437: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an binary array <code>nums</code> and an integer <code>k</code>,
        return <code>true</code>
        <em> if all </em>
        <code>1</code>
        <em>'s are at least </em>
        <code>k</code>
        <em> places away from each other, otherwise return </em>
        <code>false</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/04/15/sample_1_1791.png"
        style={{ width: 428, height: 181 }}
      />
      <pre>
        <strong>Input:</strong> nums = [1,0,0,0,1,0,0,1], k = 2 <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Each of the 1s are at least 2 places away
        from each other.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/04/15/sample_2_1791.png"
        style={{ width: 320, height: 173 }}
      />
      <pre>
        <strong>Input:</strong> nums = [1,0,0,1,0,1], k = 2 <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> The second 1 and third 1 are only one
        apart from each other.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= k &lt;= nums.length</code>
        </li>
        <li>
          <code>nums[i]</code> is <code>0</code> or <code>1</code>
        </li>
      </ul>
    </div>
  ),
  1450: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two integer arrays <code>startTime</code> and <code>endTime</code>{" "}
        and given an integer <code>queryTime</code>.
      </p>

      <p>
        The <code>ith</code> student started doing their homework at the time{" "}
        <code>startTime[i]</code> and finished it at time{" "}
        <code>endTime[i]</code>.
      </p>

      <p>
        Return <em>the number of students</em> doing their homework at time{" "}
        <code>queryTime</code>. More formally, return the number of students
        where <code>queryTime</code> lays in the interval{" "}
        <code>[startTime[i], endTime[i]]</code> inclusive.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> startTime = [1,2,3], endTime = [3,2,7],
        queryTime = 4 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> We have 3 students where: <br />
        The first student started doing homework at time 1 and finished at time
        3 and wasn't doing anything at time 4. <br />
        The second student started doing homework at time 2 and finished at time
        2 and also wasn't doing anything at time 4. <br />
        The third student started doing homework at time 3 and finished at time
        7 and was the only student doing homework at time 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> startTime = [4], endTime = [4], queryTime = 4{" "}
        <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> The only student was doing their homework
        at the queryTime.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>startTime.length == endTime.length</code>
        </li>
        <li>
          <code>1 &lt;= startTime.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= startTime[i] &lt;= endTime[i] &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= queryTime &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  1470: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the array <code>nums</code> consisting of <code>2n</code> elements
        in the form{" "}
        <code>
          [x<sub>1</sub>,x<sub>2</sub>,...,x<sub>n</sub>,y<sub>1</sub>,y
          <sub>2</sub>,...,y<sub>n</sub>]
        </code>
        .
      </p>

      <p>
        <em>Return the array in the form</em>{" "}
        <code>
          [x<sub>1</sub>,y<sub>1</sub>,x<sub>2</sub>,y<sub>2</sub>,...,x
          <sub>n</sub>,y<sub>n</sub>]
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,5,1,3,4,7], n = 3 <br />
        <strong>Output:</strong> [2,3,5,4,1,7] <br />
        <strong>Explanation:</strong> Since x<sub>1</sub>=2, x<sub>2</sub>=5, x
        <sub>3</sub>=1, y<sub>1</sub>=3, y<sub>2</sub>=4, y<sub>3</sub>=7 then
        the answer is [2,3,5,4,1,7].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,4,3,2,1], n = 4 <br />
        <strong>Output:</strong> [1,4,2,3,3,2,4,1]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,2], n = 2 <br />
        <strong>Output:</strong> [1,2,1,2]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 500</code>
        </li>
        <li>
          <code>nums.length == 2n</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 10^3</code>
        </li>
      </ul>
    </div>
  ),
  1662: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two string arrays <code>word1</code> and <code>word2</code>,
        return<em> </em>
        <code>true</code>
        <em>
          {" "}
          if the two arrays <strong>represent</strong> the same string, and{" "}
        </em>
        <code>false</code>
        <em> otherwise.</em>
      </p>

      <p>
        A string is <strong>represented</strong> by an array if the array
        elements concatenated <strong>in order</strong> forms the string.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = ["ab", "c"], word2 = ["a", "bc"] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> <br />
        word1 represents string "ab" + "c" -&gt; "abc" <br />
        word2 represents string "a" + "bc" -&gt; "abc" <br />
        The strings are the same, so return true.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = ["a", "cb"], word2 = ["ab", "c"] <br />
        <strong>Output:</strong> false
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> word1 = ["abc", "d", "defg"], word2 =
        ["abcddefg"] <br />
        <strong>Output:</strong> true
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= word1.length, word2.length &lt;= 10<sup>3</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= word1[i].length, word2[i].length &lt;= 10<sup>3</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= sum(word1[i].length), sum(word2[i].length) &lt;= 10
            <sup>3</sup>
          </code>
        </li>
        <li>
          <code>word1[i]</code> and <code>word2[i]</code> consist of lowercase
          letters.
        </li>
      </ul>
    </div>
  ),
  1848: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> <strong>(0-indexed)</strong>{" "}
        and two integers <code>target</code> and <code>start</code>, find an
        index <code>i</code> such that <code>nums[i] == target</code> and{" "}
        <code>abs(i - start)</code> is <strong>minimized</strong>. Note
        that&nbsp;<code>abs(x)</code>&nbsp;is the absolute value of{" "}
        <code>x</code>.
      </p>

      <p>
        Return <code>abs(i - start)</code>.
      </p>

      <p>
        It is <strong>guaranteed</strong> that <code>target</code> exists in{" "}
        <code>nums</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,2,3,4,5], target = 5, start = 3 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> nums[4] = 5 is the only value equal to
        target, so the answer is abs(4 - 3) = 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1], target = 1, start = 0 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> nums[0] = 1 is the only value equal to
        target, so the answer is abs(0 - 0) = 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start
        = 0<br />
        <strong>Output:</strong> 0<br />
        <strong>Explanation:</strong> Every value of nums is 1, but nums[0]
        minimizes abs(i - start), which is abs(0 - 0) = 0.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= start &lt; nums.length</code>
        </li>
        <li>
          <code>target</code> is in <code>nums</code>.
        </li>
      </ul>
    </div>
  ),
  2216: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code>. The array <code>nums</code> is{" "}
        <strong>beautiful</strong> if:
      </p>

      <ul>
        <li>
          <code>nums.length</code> is even.
        </li>
        <li>
          <code>nums[i] != nums[i + 1]</code> for all <code>i % 2 == 0</code>.
        </li>
      </ul>

      <p>Note that an empty array is considered beautiful.</p>

      <p>
        You can delete any number of elements from <code>nums</code>. When you
        delete an element, all the elements to the right of the deleted element
        will be <strong>shifted one unit to the left</strong> to fill the gap
        created and all the elements to the left of the deleted element will
        remain <strong>unchanged</strong>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of elements to delete from{" "}
        </em>
        <code>nums</code>
        <em> to make it </em>
        <em>beautiful.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,3,5] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> You can delete either <code>nums[0]</code>{" "}
        or <code>nums[1]</code> to make <code>nums</code> = [1,2,3,5] which is
        beautiful. It can be proven you need at least 1 deletion to make{" "}
        <code>nums</code> beautiful.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,2,3,3] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> You can delete <code>nums[0]</code> and{" "}
        <code>nums[5]</code> to make nums = [1,2,2,3] which is beautiful. It can
        be proven you need at least 2 deletions to make nums beautiful.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2644: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given two integer arrays <code>nums</code> and{" "}
        <code>divisors</code>.
      </p>

      <p>
        The <strong>divisibility score</strong> of <code>divisors[i]</code> is
        the number of indices <code>j</code> such that <code>nums[j]</code> is
        divisible by <code>divisors[i]</code>.
      </p>

      <p>
        Return the integer <code>divisors[i]</code> with the{" "}
        <strong>maximum</strong> divisibility score. If multiple integers have
        the maximum score, return the smallest one.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            nums = [2,9,15,50], divisors = [5,3,7,2]
          </span>
        </p>
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          The divisibility score of <code>divisors[0]</code> is 2 since{" "}
          <code>nums[2]</code> and <code>nums[3]</code> are divisible by 5.
        </p>

        <p>
          The divisibility score of <code>divisors[1]</code> is 2 since{" "}
          <code>nums[1]</code> and <code>nums[2]</code> are divisible by 3.
        </p>

        <p>
          The divisibility score of <code>divisors[2]</code> is 0 since none of
          the numbers in <code>nums</code> is divisible by 7.
        </p>

        <p>
          The divisibility score of <code>divisors[3]</code> is 2 since{" "}
          <code>nums[0]</code> and <code>nums[3]</code> are divisible by 2.
        </p>
        <br />

        <p>
          As <code>divisors[0]</code>,&nbsp;<code>divisors[1]</code>, and{" "}
          <code>divisors[3]</code> have the same divisibility score, we return
          the smaller one which is <code>divisors[3]</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [4,7,9,3,9], divisors = [5,2,3]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          The divisibility score of <code>divisors[0]</code> is 0 since none of
          numbers in <code>nums</code> is divisible by 5.
        </p>

        <p>
          The divisibility score of <code>divisors[1]</code> is 1 since only{" "}
          <code>nums[0]</code> is divisible by 2.
        </p>

        <p>
          The divisibility score of <code>divisors[2]</code> is 3 since{" "}
          <code>nums[2]</code>, <code>nums[3]</code> and <code>nums[4]</code>{" "}
          are divisible by 3.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            nums = [20,14,21,10], divisors = [10,16,20]
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">10</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          The divisibility score of <code>divisors[0]</code> is 2 since{" "}
          <code>nums[0]</code> and <code>nums[3]</code> are divisible by 10.
        </p>

        <p>
          The divisibility score of <code>divisors[1]</code> is 0 since none of
          the numbers in <code>nums</code> is divisible by 16.
        </p>

        <p>
          The divisibility score of <code>divisors[2]</code> is 1 since{" "}
          <code>nums[0]</code> is divisible by 20.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length, divisors.length &lt;= 1000</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i], divisors[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2672: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code> representing an array{" "}
        <code>colors</code> of length <code>n</code> where all elements are set
        to 0's meaning <strong>uncolored</strong>. You are also given a 2D
        integer array <code>queries</code> where{" "}
        <code>
          queries[i] = [index<sub>i</sub>, color<sub>i</sub>]
        </code>
        . For the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        <strong>query</strong>:
      </p>

      <ul>
        <li>
          Set{" "}
          <code>
            colors[index<sub>i</sub>]
          </code>{" "}
          to{" "}
          <code>
            color<sub>i</sub>
          </code>
          .
        </li>
        <li>
          Count adjacent pairs in <code>colors</code> set to the same color
          (regardless of{" "}
          <code>
            color<sub>i</sub>
          </code>
          ).
        </li>
      </ul>

      <p>
        Return an array <code>answer</code> of the same length as{" "}
        <code>queries</code> where <code>answer[i]</code> is the answer to the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        query.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]]
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">[0,1,1,0,2]</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <ul>
          <li>
            Initially array colors = [0,0,0,0], where 0 denotes uncolored
            elements of the array.
          </li>
          <li>
            After the 1<sup>st</sup> query colors = [2,0,0,0]. The count of
            adjacent pairs with the same color is 0.
          </li>
          <li>
            After the 2<sup>nd</sup> query colors = [2,2,0,0]. The count of
            adjacent pairs with the same color is 1.
          </li>
          <li>
            After the 3<sup>rd</sup> query colors = [2,2,0,1]. The count of
            adjacent pairs with the same color is 1.
          </li>
          <li>
            After the 4<sup>th</sup> query colors = [2,1,0,1]. The count of
            adjacent pairs with the same color is 0.
          </li>
          <li>
            After the 5<sup>th</sup> query colors = [2,1,1,1]. The count of
            adjacent pairs with the same color is 2.
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">n = 1, queries = [[0,100000]]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">[0]</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          After the 1<sup>st</sup> query colors = [100000]. The count of
          adjacent pairs with the same color is 0.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= queries.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>queries[i].length&nbsp;== 2</code>
        </li>
        <li>
          <code>
            0 &lt;= index<sub>i</sub>&nbsp;&lt;= n - 1
          </code>
        </li>
        <li>
          <code>
            1 &lt;=&nbsp; color<sub>i</sub>&nbsp;&lt;= 10<sup>5</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2855: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> array <code>nums</code> of
        length <code>n</code> containing <strong>distinct</strong> positive
        integers. Return{" "}
        <em>
          the <strong>minimum</strong> number of <strong>right shifts</strong>{" "}
          required to sort{" "}
        </em>
        <code>nums</code>
        <em> and </em>
        <code>-1</code>
        <em> if this is not possible.</em>
      </p>

      <p>
        A <strong>right shift</strong> is defined as shifting the element at
        index <code>i</code> to index <code>(i + 1) % n</code>, for all indices.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,4,5,1,2] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> <br />
        After the first right shift, nums = [2,3,4,5,1]. <br />
        After the second right shift, nums = [1,2,3,4,5]. <br />
        Now nums is sorted; therefore the answer is 2.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,3,5] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> nums is already sorted therefore, the
        answer is 0.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,1,4] <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> It's impossible to sort the array using
        right shifts.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
        <li>
          <code>nums</code> contains distinct integers.
        </li>
      </ul>
    </div>
  ),
  3065: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code>, and an integer <code>k</code>.
      </p>

      <p>
        In one operation, you can remove one occurrence of the smallest element
        of <code>nums</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of operations needed so that all
          elements of the array are greater than or equal to
        </em>{" "}
        <code>k</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,11,10,1,3], k = 10 <br />
        <strong>Output:</strong> 3<br />
        <strong>Explanation:</strong> After one operation, nums becomes equal to
        [2, 11, 10, 3]. <br />
        After two operations, nums becomes equal to [11, 10, 3]. <br />
        After three operations, nums becomes equal to [11, 10]. <br />
        At this stage, all the elements of nums are greater than or equal to 10
        so we can stop. <br />
        It can be shown that 3 is the minimum number of operations needed so
        that all elements of the array are greater than or equal to 10.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,4,9], k = 1 <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> All elements of the array are greater than
        or equal to 1 so we do not need to apply any operations on nums.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,2,4,9], k = 9 <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> only a single element of nums is greater
        than or equal to 9 so we need to apply the operations 4 times on nums.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          The input is generated such that there is at least one index{" "}
          <code>i</code> such that <code>nums[i] &gt;= k</code>.
        </li>
      </ul>
    </div>
  ),
  3105: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an array of integers <code>nums</code>. Return{" "}
        <em>
          the length of the <strong>longest</strong>{" "}
          <span
            data-keyword="subarray-nonempty"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:r27e:"
                >
                  <div>subarray</div>
                </div>
              </div>
            </div>
          </span>{" "}
          of{" "}
        </em>
        <code>nums</code>
        <em>
          {" "}
          which is either{" "}
          <strong>
            <span
              data-keyword="strictly-increasing-array"
              class=" cursor-pointer relative text-dark-blue-s text-sm"
            >
              <div
                class="popover-wrapper inline-block"
                data-headlessui-state=""
              >
                <div>
                  <div
                    aria-expanded="false"
                    data-headlessui-state=""
                    id="headlessui-popover-button-:r27g:"
                  >
                    <div>strictly increasing</div>
                  </div>
                </div>
              </div>
            </span>
          </strong>{" "}
          or{" "}
          <strong>
            <span
              data-keyword="strictly-decreasing-array"
              class=" cursor-pointer relative text-dark-blue-s text-sm"
            >
              <div
                class="popover-wrapper inline-block"
                data-headlessui-state=""
              >
                <div>
                  <div
                    aria-expanded="false"
                    data-headlessui-state=""
                    id="headlessui-popover-button-:r27i:"
                  >
                    <div>strictly decreasing</div>
                  </div>
                </div>
              </div>
            </span>
          </strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,4,3,3,2]</span>
        </p>
        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The strictly increasing subarrays of <code>nums</code> are{" "}
          <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[3]</code>
          , <code>[4]</code>, and <code>[1,4]</code>.
        </p>
        <br />

        <p>
          The strictly decreasing subarrays of <code>nums</code> are{" "}
          <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[3]</code>
          , <code>[4]</code>, <code>[3,2]</code>, and <code>[4,3]</code>.
        </p>
        <br />

        <p>
          Hence, we return <code>2</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [3,3,3,3]</span>
        </p>
        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The strictly increasing subarrays of <code>nums</code> are{" "}
          <code>[3]</code>, <code>[3]</code>, <code>[3]</code>, and{" "}
          <code>[3]</code>.
        </p>
        <br />

        <p>
          The strictly decreasing subarrays of <code>nums</code> are{" "}
          <code>[3]</code>, <code>[3]</code>, <code>[3]</code>, and{" "}
          <code>[3]</code>.
        </p>
        <br />

        <p>
          Hence, we return <code>1</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [3,2,1]</span>
        </p>
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>
        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>
          The strictly increasing subarrays of <code>nums</code> are{" "}
          <code>[3]</code>, <code>[2]</code>, and <code>[1]</code>.
        </p>
        <br />

        <p>
          The strictly decreasing subarrays of <code>nums</code> are{" "}
          <code>[3]</code>, <code>[2]</code>, <code>[1]</code>,{" "}
          <code>[3,2]</code>, <code>[2,1]</code>, and <code>[3,2,1]</code>.
        </p>
        <br />

        <p>
          Hence, we return <code>3</code>.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  3190: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>. In one operation, you
        can add or subtract 1 from <strong>any</strong> element of{" "}
        <code>nums</code>.
      </p>

      <p>
        Return the <strong>minimum</strong> number of operations to make all
        elements of <code>nums</code> divisible by 3.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,2,3,4]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>All array elements can be made divisible by 3 using 3 operations:</p>

        <ul>
          <li>Subtract 1 from 1.</li>
          <li>Add 1 to 2.</li>
          <li>Subtract 1 from 4.</li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">nums = [3,6,9]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 50</code>
        </li>
      </ul>
    </div>
  ),
  2165: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>num.</code> <strong>Rearrange</strong>{" "}
        the digits of <code>num</code> such that its value is{" "}
        <strong>minimized</strong> and it does not contain <strong>any</strong>{" "}
        leading zeros.
      </p>

      <p>
        Return <em>the rearranged number with minimal value</em>.
      </p>

      <p>
        Note that the sign of the number does not change after rearranging the
        digits.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = 310 <br />
        <strong>Output:</strong> 103 <br />
        <strong>Explanation:</strong> The possible arrangements for the digits
        of 310 are 013, 031, 103, 130, 301, 310.
        <br /> The arrangement with the smallest value that does not contain any
        leading zeros is 103.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num = -7605 <br />
        <strong>Output:</strong> -7650 <br />
        <strong>Explanation:</strong> Some possible arrangements for the digits
        of -7605 are -7650, -6705, -5076, -0567.
        <br /> The arrangement with the smallest value that does not contain any
        leading zeros is -7650.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            -10<sup>15</sup> &lt;= num &lt;= 10<sup>15</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  2784: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code>. We consider an array{" "}
        <strong>good </strong>if it is a permutation of an array{" "}
        <code>base[n]</code>.
      </p>

      <p>
        <code>base[n] = [1, 2, ..., n - 1, n, n] </code>(in other words, it is
        an array of length <code>n + 1</code> which contains <code>1</code> to{" "}
        <code>n - 1 </code>exactly once, plus two occurrences of <code>n</code>
        ). For example, <code>base[1] = [1, 1]</code> and
        <code> base[3] = [1, 2, 3, 3]</code>.
      </p>

      <p>
        Return <code>true</code>{" "}
        <em>if the given array is good, otherwise return</em>
        <em> </em>
        <code>false</code>.
      </p>

      <p>
        <strong>Note: </strong>A permutation of integers represents an
        arrangement of these numbers.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2, 1, 3] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Since the maximum element of the array is
        3, the only candidate n for which this array could be a permutation of
        base[n], is n = 3. However, base[3] has four elements but array nums has
        three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3].
        So the answer is false.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1, 3, 3, 2] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Since the maximum element of the array is
        3, the only candidate n for which this array could be a permutation of
        base[n], is n = 3. It can be seen that nums is a permutation of base[3]
        = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we
        reach base[3]). Therefore, the answer is true.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1, 1] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> Since the maximum element of the array is
        1, the only candidate n for which this array could be a permutation of
        base[n], is n = 1. It can be seen that nums is a permutation of base[1]
        = [1, 1]. Therefore, the answer is true.
      </pre>

      <p>
        <strong class="example">Example 4:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3, 4, 4, 1, 2, 1] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> Since the maximum element of the array is
        4, the only candidate n for which this array could be a permutation of
        base[n], is n = 4. However, base[4] has five elements but array nums has
        six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4,
        4]. So the answer is false.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= num[i] &lt;= 200</code>
        </li>
      </ul>
    </div>
  ),
  2785: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <strong>0-indexed</strong> string <code>s</code>,{" "}
        <strong>permute</strong> <code>s</code> to get a new string{" "}
        <code>t</code> such that:
      </p>

      <ul>
        <li>
          All consonants remain in their original places. More formally, if
          there is an index <code>i</code> with{" "}
          <code>0 &lt;= i &lt; s.length</code> such that <code>s[i]</code> is a
          consonant, then <code>t[i] = s[i]</code>.
        </li>
        <li>
          The vowels must be sorted in the <strong>nondecreasing</strong> order
          of their <strong>ASCII</strong> values. More formally, for pairs of
          indices <code>i</code>, <code>j</code> with{" "}
          <code>0 &lt;= i &lt; j &lt; s.length</code> such that{" "}
          <code>s[i]</code> and <code>s[j]</code> are vowels, then{" "}
          <code>t[i]</code> must not have a higher ASCII value than{" "}
          <code>t[j]</code>.
        </li>
      </ul>

      <p>
        Return <em>the resulting string</em>.
      </p>

      <p>
        The vowels are <code>'a'</code>, <code>'e'</code>, <code>'i'</code>,{" "}
        <code>'o'</code>, and <code>'u'</code>, and they can appear in lowercase
        or uppercase. Consonants comprise all letters that are not vowels.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "lEetcOde" <br />
        <strong>Output:</strong> "lEOtcede" <br />
        <strong>Explanation:</strong> 'E', 'O', and 'e' are the vowels in s;
        'l', 't', 'c', and 'd' are all consonants. The vowels are sorted
        according to their ASCII values, and the consonants remain in the same
        places.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "lYmpH" <br />
        <strong>Output:</strong> "lYmpH" <br />
        <strong>Explanation:</strong> There are no vowels in s (all characters
        in s are consonants), so we return "lYmpH".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists only of letters of the&nbsp;English
          alphabet&nbsp;in <strong>uppercase and lowercase</strong>.
        </li>
      </ul>
    </div>
  ),
  3024: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> integer array{" "}
        <code>nums</code> of size <code>3</code> which can form the sides of a
        triangle.
      </p>

      <ul>
        <li>
          A triangle is called <strong>equilateral</strong> if it has all sides
          of equal length.
        </li>
        <li>
          A triangle is called <strong>isosceles</strong> if it has exactly two
          sides of equal length.
        </li>
        <li>
          A triangle is called <strong>scalene</strong> if all its sides are of
          different lengths.
        </li>
      </ul>

      <p>
        Return <em>a string representing</em>{" "}
        <em>the type of triangle that can be formed </em>
        <em>or </em>
        <code>"none"</code>
        <em>
          {" "}
          if it <strong>cannot</strong> form a triangle.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,3,3] <br />
        <strong>Output:</strong> "equilateral" <br />
        <strong>Explanation:</strong> Since all the sides are of equal length,
        therefore, it will form an equilateral triangle.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [3,4,5] <br />
        <strong>Output:</strong> "scalene"
        <br />
        <strong>Explanation:</strong> <br />
        nums[0] + nums[1] = 3 + 4 = 7, which is greater than nums[2] = 5. <br />
        nums[0] + nums[2] = 3 + 5 = 8, which is greater than nums[1] = 4.
        <br />
        nums[1] + nums[2] = 4 + 5 = 9, which is greater than nums[0] = 3. <br />
        Since the sum of the two sides is greater than the third side for all
        three cases, therefore, it can form a triangle.
        <br /> As all the sides are of different lengths, it will form a scalene
        triangle.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>nums.length == 3</code>
        </li>
        <li>
          <code>1 &lt;= nums[i] &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  3107: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and a{" "}
        <strong>non-negative</strong> integer <code>k</code>. In one operation,
        you can increase or decrease any element by 1.
      </p>

      <p>
        Return the <strong>minimum</strong> number of operations needed to make
        the <strong>median</strong> of <code>nums</code> <em>equal</em> to{" "}
        <code>k</code>.
      </p>

      <p>
        The median of an array is defined as the middle element of the array
        when it is sorted in non-decreasing order. If there are two choices for
        a median, the larger of the two values is taken.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [2,5,6,8,5], k = 4</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          We can subtract one from <code>nums[1]</code> and <code>nums[4]</code>{" "}
          to obtain <code>[2, 4, 6, 8, 4]</code>. The median of the resulting
          array is equal to <code>k</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [2,5,6,8,5], k = 7</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          We can add one to <code>nums[1]</code> twice and add one to{" "}
          <code>nums[2]</code> once to obtain <code>[2, 7, 7, 8, 5]</code>.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">nums = [1,2,3,4,5,6], k = 4</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          The median of the array is already equal to <code>k</code>.
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= nums.length &lt;= 2 * 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  3111: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a 2D integer array <code>points</code>, where{" "}
        <code>
          points[i] = [x<sub>i</sub>, y<sub>i</sub>]
        </code>
        . You are also given an integer <code>w</code>. Your task is to{" "}
        <strong>cover</strong> <strong>all</strong> the given points with
        rectangles.
      </p>

      <p>
        Each rectangle has its lower end at some point{" "}
        <code>
          (x<sub>1</sub>, 0)
        </code>{" "}
        and its upper end at some point{" "}
        <code>
          (x<sub>2</sub>, y<sub>2</sub>)
        </code>
        , where{" "}
        <code>
          x<sub>1</sub> &lt;= x<sub>2</sub>
        </code>
        ,{" "}
        <code>
          y<sub>2</sub> &gt;= 0
        </code>
        , and the condition{" "}
        <code>
          x<sub>2</sub> - x<sub>1</sub> &lt;= w
        </code>{" "}
        <strong>must</strong> be satisfied for each rectangle.
      </p>

      <p>
        A point is considered covered by a rectangle if it lies within or on the
        boundary of the rectangle.
      </p>

      <p>
        Return an integer denoting the <strong>minimum</strong> number of
        rectangles needed so that each point is covered by{" "}
        <strong>at least one</strong> rectangle<em>.</em>
      </p>

      <p>
        <strong>Note:</strong> A point may be covered by more than one
        rectangle.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-33-05.png"
          style={{ width: 205, height: 300 }}
        />
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            points = [[2,1],[1,0],[1,4],[1,8],[3,5],[4,6]], w = 1
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>

        <p>
          <strong>Explanation: </strong>
        </p>

        <p>
          The image above shows one possible placement of rectangles to cover
          the points:
        </p>

        <ul>
          <li>
            A rectangle with a lower end at <code>(1, 0)</code> and its upper
            end at <code>(2, 8)</code>
          </li>
          <li>
            A rectangle with a lower end at <code>(3, 0)</code> and its upper
            end at <code>(4, 8)</code>
          </li>
        </ul>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-18-59-12.png"
          style={{ width: 260, height: 250 }}
        />
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]], w = 2
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>

        <p>
          <strong>Explanation: </strong>
        </p>

        <p>
          The image above shows one possible placement of rectangles to cover
          the points:
        </p>

        <ul>
          <li>
            A rectangle with a lower end at <code>(0, 0)</code> and its upper
            end at <code>(2, 2)</code>
          </li>
          <li>
            A rectangle with a lower end at <code>(3, 0)</code> and its upper
            end at <code>(5, 5)</code>
          </li>
          <li>
            A rectangle with a lower end at <code>(6, 0)</code> and its upper
            end at <code>(6, 6)</code>
          </li>
        </ul>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <p>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2024/03/04/screenshot-from-2024-03-04-20-24-03.png"
          style={{ height: 150, width: 127 }}
        />
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">points = [[2,3],[1,2]], w = 0</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>

        <p>
          <strong>Explanation: </strong>
        </p>

        <p>
          The image above shows one possible placement of rectangles to cover
          the points:
        </p>

        <ul>
          <li>
            A rectangle with a lower end at <code>(1, 0)</code> and its upper
            end at <code>(1, 2)</code>
          </li>
          <li>
            A rectangle with a lower end at <code>(2, 0)</code> and its upper
            end at <code>(2, 3)</code>
          </li>
        </ul>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= points.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>points[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= x<sub>i</sub> == points[i][0] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= y<sub>i</sub> == points[i][1] &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            0 &lt;= w &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          All pairs{" "}
          <code>
            (x<sub>i</sub>, y<sub>i</sub>)
          </code>{" "}
          are distinct.
        </li>
      </ul>
    </div>
  ),
  3169: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a positive integer <code>days</code> representing the
        total number of days an employee is available for work (starting from
        day 1). You are also given a 2D array <code>meetings</code> of size{" "}
        <code>n</code> where, <code>meetings[i] = [start_i, end_i]</code>{" "}
        represents the starting and ending days of meeting <code>i</code>{" "}
        (inclusive).
      </p>

      <p>
        Return the count of days when the employee is available for work but no
        meetings are scheduled.
      </p>

      <p>
        <strong>Note: </strong>The meetings may overlap.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">
            days = 10, meetings = [[5,7],[1,3],[9,10]]
          </span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">2</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          There is no meeting scheduled on the 4<sup>th</sup> and 8<sup>th</sup>{" "}
          days.
        </p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">days = 5, meetings = [[2,4],[1,3]]</span>
        </p>

        <p>
          <strong>Output:</strong> <span class="example-io">1</span>
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>
          There is no meeting scheduled on the 5<sup>th </sup>day.
        </p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">days = 6, meetings = [[1,6]]</span>
        </p>
        <p>
          <strong>Output:</strong> 0
        </p>

        <p>
          <strong>Explanation:</strong>
        </p>

        <p>Meetings are scheduled for all working days.</p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= days &lt;= 10<sup>9</sup>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= meetings.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>meetings[i].length == 2</code>
        </li>
        <li>
          <code>
            <font face="monospace">
              1 &lt;= meetings[i][0] &lt;= meetings[i][1] &lt;= days
            </font>
          </code>
        </li>
      </ul>
    </div>
  ),
  89: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        An <strong>n-bit gray code sequence</strong> is a sequence of{" "}
        <code>
          2<sup>n</sup>
        </code>{" "}
        integers where:
      </p>

      <ul>
        <li>
          Every integer is in the <strong>inclusive</strong> range{" "}
          <code>
            [0, 2<sup>n</sup> - 1]
          </code>
          ,
        </li>
        <li>
          The first integer is <code>0</code>,
        </li>
        <li>
          An integer appears <strong>no more than once</strong> in the sequence,
        </li>
        <li>
          The binary representation of every pair of <strong>adjacent</strong>{" "}
          integers differs by <strong>exactly one bit</strong>, and
        </li>
        <li>
          The binary representation of the <strong>first</strong> and{" "}
          <strong>last</strong> integers differs by{" "}
          <strong>exactly one bit</strong>.
        </li>
      </ul>

      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          any valid <strong>n-bit gray code sequence</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> [0,1,3,2] <br />
        <strong>Explanation:</strong> <br />
        The binary representation of [0,1,3,2] is [00,01,11,10]. <br />- 0
        <u>0</u> and 0<u>1</u> differ by one bit
        <br />- <u>0</u>1 and <u>1</u>1 differ by one bit
        <br />- 1<u>1</u> and 1<u>0</u> differ by one bit
        <br />- <u>1</u>0 and <u>0</u>0 differ by one bit
        <br />
        [0,2,3,1] is also a valid gray code sequence, whose binary
        representation is [00,10,11,01].
        <br />- <u>0</u>0 and <u>1</u>0 differ by one bit
        <br />- 1<u>0</u> and 1<u>1</u> differ by one bit
        <br />- <u>1</u>1 and <u>0</u>1 differ by one bit
        <br />- 0<u>1</u> and 0<u>0</u> differ by one bit
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> [0,1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 16</code>
        </li>
      </ul>
    </div>
  ),
  90: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an integer array <code>nums</code> that may contain duplicates,
        return <em>all possible</em>{" "}
        <span
          data-keyword="subset"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r35:"
              >
                <div>
                  <em>subsets</em>
                </div>
              </div>
            </div>
          </div>
        </span>
        <em> (the power set)</em>.
      </p>

      <p>
        The solution set <strong>must not</strong> contain duplicate subsets.
        Return the solution in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [1,2,2] <br />
        <strong>Output:</strong> [[],[1],[1,2],[1,2,2],[2],[2,2]]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> nums = [0] <br />
        <strong>Output:</strong> [[],[0]]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 10</code>
        </li>
        <li>
          <code>-10 &lt;= nums[i] &lt;= 10</code>
        </li>
      </ul>
    </div>
  ),
  93: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>valid IP address</strong> consists of exactly four integers
        separated by single dots. Each integer is between <code>0</code> and{" "}
        <code>255</code> (<strong>inclusive</strong>) and cannot have leading
        zeros.
      </p>

      <ul>
        <li>
          For example, <code>"0.1.2.201"</code> and <code>"192.168.1.1"</code>{" "}
          are <strong>valid</strong> IP addresses, but{" "}
          <code>"0.011.255.245"</code>, <code>"192.168.1.312"</code> and{" "}
          <code>"192.168@1.1"</code> are <strong>invalid</strong> IP addresses.
        </li>
      </ul>

      <p>
        Given a string <code>s</code> containing only digits, return{" "}
        <em>
          all possible valid IP addresses that can be formed by inserting dots
          into{" "}
        </em>
        <code>s</code>. You are <strong>not</strong> allowed to reorder or
        remove any digits in <code>s</code>. You may return the valid IP
        addresses in <strong>any</strong> order.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "25525511135" <br />
        <strong>Output:</strong> ["255.255.11.135","255.255.111.35"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "0000" <br />
        <strong>Output:</strong> ["0.0.0.0"]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "101023" <br />
        <strong>Output:</strong>{" "}
        ["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 20</code>
        </li>
        <li>
          <code>s</code> consists of digits only.
        </li>
      </ul>
    </div>
  ),
  126: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>transformation sequence</strong> from word{" "}
        <code>beginWord</code> to word <code>endWord</code> using a dictionary{" "}
        <code>wordList</code> is a sequence of words{" "}
        <code>
          beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s
          <sub>k</sub>
        </code>{" "}
        such that:
      </p>

      <ul>
        <li>Every adjacent pair of words differs by a single letter.</li>
        <li>
          Every{" "}
          <code>
            s<sub>i</sub>
          </code>{" "}
          for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note
          that <code>beginWord</code> does not need to be in{" "}
          <code>wordList</code>.
        </li>
        <li>
          <code>
            s<sub>k</sub> == endWord
          </code>
        </li>
      </ul>

      <p>
        Given two words, <code>beginWord</code> and <code>endWord</code>, and a
        dictionary <code>wordList</code>, return{" "}
        <em>
          all the <strong>shortest transformation sequences</strong> from
        </em>{" "}
        <code>beginWord</code> <em>to</em> <code>endWord</code>
        <em>
          , or an empty list if no such sequence exists. Each sequence should be
          returned as a list of the words{" "}
        </em>
        <code>
          [beginWord, s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub>]
        </code>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> beginWord = "hit", endWord = "cog", wordList =
        ["hot","dot","dog","lot","log","cog"] <br />
        <strong>Output:</strong>{" "}
        [["hit","hot","dot","dog","cog"],["hit","hot","lot","log","cog"]] <br />
        <strong>Explanation:</strong>&nbsp;There are 2 shortest transformation
        sequences:
        <br />
        "hit" -&gt; "hot" -&gt; "dot" -&gt; "dog" -&gt; "cog"
        <br />
        "hit" -&gt; "hot" -&gt; "lot" -&gt; "log" -&gt; "cog"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> beginWord = "hit", endWord = "cog", wordList =
        ["hot","dot","dog","lot","log"] <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> The endWord "cog" is not in wordList,
        therefore there is no valid transformation sequence.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= beginWord.length &lt;= 5</code>
        </li>
        <li>
          <code>endWord.length == beginWord.length</code>
        </li>
        <li>
          <code>1 &lt;= wordList.length &lt;= 500</code>
        </li>
        <li>
          <code>wordList[i].length == beginWord.length</code>
        </li>
        <li>
          <code>beginWord</code>, <code>endWord</code>, and{" "}
          <code>wordList[i]</code> consist of lowercase English letters.
        </li>
        <li>
          <code>beginWord != endWord</code>
        </li>
        <li>
          All the words in <code>wordList</code> are <strong>unique</strong>.
        </li>
        <li>
          The <strong>sum</strong> of all shortest transformation sequences does
          not exceed{" "}
          <code>
            10<sup>5</sup>
          </code>
          .
        </li>
      </ul>
    </div>
  ),
  131: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, partition <code>s</code> such that every{" "}
        <span
          data-keyword="substring-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rcn:"
              >
                <div>substring</div>
              </div>
            </div>
          </div>
        </span>{" "}
        of the partition is a{" "}
        <span
          data-keyword="palindrome-string"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:rcp:"
              >
                <div>
                  <strong>palindrome</strong>
                </div>
              </div>
            </div>
          </div>
        </span>
        . Return <em>all possible palindrome partitioning of </em>
        <code>s</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = "aab" <br />
        <strong>Output:</strong> [["a","a","b"],["aa","b"]]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> s = "a" <br />
        <strong>Output:</strong> [["a"]]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 16</code>
        </li>
        <li>
          <code>s</code> contains only lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  140: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> and a dictionary of strings{" "}
        <code>wordDict</code>, add spaces in <code>s</code> to construct a
        sentence where each word is a valid dictionary word. Return all such
        possible sentences in <strong>any order</strong>.
      </p>

      <p>
        <strong>Note</strong> that the same word in the dictionary may be reused
        multiple times in the segmentation.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "catsanddog", wordDict =
        ["cat","cats","and","sand","dog"] <br />
        <strong>Output:</strong> ["cats and dog","cat sand dog"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "pineapplepenapple", wordDict =
        ["apple","pen","applepen","pine","pineapple"] <br />
        <strong>Output:</strong> ["pine apple pen apple","pineapple pen
        apple","pine applepen apple"] <br />
        <strong>Explanation:</strong> Note that you are allowed to reuse a
        dictionary word.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "catsandog", wordDict =
        ["cats","dog","sand","and","cat"] <br />
        <strong>Output:</strong> []
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 20</code>
        </li>
        <li>
          <code>1 &lt;= wordDict.length &lt;= 1000</code>
        </li>
        <li>
          <code>1 &lt;= wordDict[i].length &lt;= 10</code>
        </li>
        <li>
          <code>s</code> and <code>wordDict[i]</code> consist of only lowercase
          English letters.
        </li>
        <li>
          All the strings of <code>wordDict</code> are <strong>unique</strong>.
        </li>
        <li>
          Input is generated in a way that the length of the answer doesn't
          exceed&nbsp;10<sup>5</sup>.
        </li>
      </ul>
    </div>
  ),
  216: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Find all valid combinations of <code>k</code> numbers that sum up to{" "}
        <code>n</code> such that the following conditions are true:
      </p>

      <ul>
        <li>
          Only numbers <code>1</code> through <code>9</code> are used.
        </li>
        <li>
          Each number is used <strong>at most once</strong>.
        </li>
      </ul>

      <p>
        Return <em>a list of all possible valid combinations</em>. The list must
        not contain the same combination twice, and the combinations may be
        returned in any order.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> k = 3, n = 7<br />
        <strong>Output:</strong> [[1,2,4]]
        <br />
        <strong>Explanation:</strong>
        <br />
        1 + 2 + 4 = 7<br />
        There are no other valid combinations.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> k = 3, n = 9<br />
        <strong>Output:</strong> [[1,2,6],[1,3,5],[2,3,4]] <br />
        <strong>Explanation:</strong>
        <br />
        1 + 2 + 6 = 9<br />
        1 + 3 + 5 = 9<br />
        2 + 3 + 4 = 9<br />
        There are no other valid combinations.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> k = 4, n = 1 <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> There are no valid combinations. <br />
        Using 4 different numbers in the range [1,9], the smallest sum we can{" "}
        <br />
        get is 1+2+3+4 = 10 and since 10 &gt; 1, there are no valid combination.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= k &lt;= 9</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 60</code>
        </li>
      </ul>
    </div>
  ),
  254: (
    <div class="markdown-body div-width">
      <p>Numbers can be regarded as product of its factors. For example,</p>

      <pre>8 = 2 x 2 x 2; = 2 x 4.</pre>

      <p>
        Write a function that takes an integer <i>n</i> and return all possible
        combinations of its factors.
      </p>

      <p>
        <b>Note:</b>
      </p>

      <ol>
        <li>
          You may assume that <i>n</i> is always positive.
        </li>
        <li>
          Factors should be greater than 1 and less than <i>n</i>.
        </li>
      </ol>

      <p>
        <b>Example&nbsp;1: </b>
      </p>

      <pre>
        <strong>Input:</strong> <code>1</code> <br />
        <strong>Output:</strong> []
      </pre>

      <p>
        <b>Example&nbsp;2: </b>
      </p>

      <pre>
        <strong>Input:</strong> <code>37</code> <br />
        <strong>Output:</strong>[]
      </pre>

      <p>
        <b>Example&nbsp;3: </b>
      </p>

      <pre>
        <strong>Input:</strong> <code>12</code> <br />
        <strong>Output:</strong>
        {`[
  [2, 6],
  [2, 2, 3],
  [3, 4]
]`}
      </pre>

      <p>
        <b>Example&nbsp;4: </b>
      </p>

      <pre>
        <strong>Input:</strong> <code>32</code> <br />
        <strong>Output:</strong>
        {`[
  [2, 16],
  [2, 2, 8],
  [2, 2, 2, 4],
  [2, 2, 2, 2, 2],
  [2, 4, 4],
  [4, 8]
]`}
      </pre>
    </div>
  ),
  257: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given the <code>root</code> of a binary tree, return{" "}
        <em>
          all root-to-leaf paths in <strong>any order</strong>
        </em>
        .
      </p>

      <p>
        A <strong>leaf</strong> is a node with no children.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg"
        style={{ width: 207, height: 293 }}
      />
      <pre>
        <strong>Input:</strong> root = [1,2,3,null,5] <br />
        <strong>Output:</strong> ["1-&gt;2-&gt;5","1-&gt;3"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> root = [1] <br />
        <strong>Output:</strong> ["1"]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 100]</code>.
        </li>
        <li>
          <code>-100 &lt;= Node.val &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  267: (
    <div class="markdown-body div-width">
      <p>
        Given a string <code>s</code>, return all the palindromic permutations
        (without duplicates) of it. Return an empty list if no palindromic
        permutation could be form.
      </p>

      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <code>"aabb"</code> <br />
        <strong>Output:</strong> <code>["abba", "baab"]</code>
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <code>"abc"</code> <br />
        <strong>Output:</strong> <code>[]</code>
      </pre>
    </div>
  ),
  301: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> that contains parentheses and letters,
        remove the minimum number of invalid parentheses to make the input
        string valid.
      </p>

      <p>
        Return{" "}
        <em>
          a list of <strong>unique strings</strong> that are valid with the
          minimum number of removals
        </em>
        . You may return the answer in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = {`"()())()"`} <br />
        <strong>Output:</strong> ["(())()","()()()"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = {`"(a)())()"`} <br />
        <strong>Output:</strong> ["(a())()","(a)()()"]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = {'")("'} <br />
        <strong>Output:</strong> [""]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 25</code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters and parentheses{" "}
          <code>'('</code> and <code>')'</code>.
        </li>
        <li>
          There will be at most <code>20</code> parentheses in <code>s</code>.
        </li>
      </ul>
    </div>
  ),
  473: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>matchsticks</code> where{" "}
        <code>matchsticks[i]</code> is the length of the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        matchstick. You want to use <strong>all the matchsticks</strong> to make
        one square. You <strong>should not break</strong> any stick, but you can
        link them up, and each matchstick must be used{" "}
        <strong>exactly one time</strong>.
      </p>

      <p>
        Return <code>true</code> if you can make this square and{" "}
        <code>false</code> otherwise.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/04/09/matchsticks1-grid.jpg"
        style={{ width: 253, height: 253 }}
      />
      <pre>
        <strong>Input:</strong> matchsticks = [1,1,2,2,2] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> You can form a square with length 2, one
        side of the square came two sticks with length 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> matchsticks = [3,3,3,3,4] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> You cannot find a way to form a square
        with all the matchsticks.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= matchsticks.length &lt;= 15</code>
        </li>
        <li>
          <code>
            1 &lt;= matchsticks[i] &lt;= 10<sup>8</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  526: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Suppose you have <code>n</code> integers labeled <code>1</code> through{" "}
        <code>n</code>. A permutation of those <code>n</code> integers{" "}
        <code>perm</code> (<strong>1-indexed</strong>) is considered a{" "}
        <strong>beautiful arrangement</strong> if for every <code>i</code> (
        <code>1 &lt;= i &lt;= n</code>), <strong>either</strong> of the
        following is true:
      </p>

      <ul>
        <li>
          <code>perm[i]</code> is divisible by <code>i</code>.
        </li>
        <li>
          <code>i</code> is divisible by <code>perm[i]</code>.
        </li>
      </ul>

      <p>
        Given an integer <code>n</code>, return{" "}
        <em>
          the <strong>number</strong> of the{" "}
          <strong>beautiful arrangements</strong> that you can construct
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2 <br />
        <strong>Output:</strong> 2 <br />
        <b>Explanation:</b> <br />
        The first beautiful arrangement is [1,2]: <br />
        - perm[1] = 1 is divisible by i = 1 <br />
        - perm[2] = 2 is divisible by i = 2 <br />
        The second beautiful arrangement is [2,1]: <br />
        - perm[1] = 2 is divisible by i = 1 <br />- i = 2 is divisible by
        perm[2] = 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 15</code>
        </li>
      </ul>
    </div>
  ),
  494: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>nums</code> and an integer{" "}
        <code>target</code>.
      </p>

      <p>
        You want to build an <strong>expression</strong> out of nums by adding
        one of the symbols <code>'+'</code> and <code>'-'</code> before each
        integer in nums and then concatenate all the integers.
      </p>

      <ul>
        <li>
          For example, if <code>nums = [2, 1]</code>, you can add a{" "}
          <code>'+'</code> before <code>2</code> and a <code>'-'</code> before{" "}
          <code>1</code> and concatenate them to build the expression{" "}
          <code>"+2-1"</code>.
        </li>
      </ul>

      <p>
        Return the number of different <strong>expressions</strong> that you can
        build, which evaluates to <code>target</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,1,1,1,1], target = 3 <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> There are 5 ways to assign symbols to make
        the sum of nums be target 3. <br />
        {`-1 + 1 + 1 + 1 + 1 = 3
    +1 - 1 + 1 + 1 + 1 = 3
    +1 + 1 - 1 + 1 + 1 = 3
    +1 + 1 + 1 - 1 + 1 = 3
    +1 + 1 + 1 + 1 - 1 = 3`}
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1], target = 1 <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 20</code>
        </li>
        <li>
          <code>0 &lt;= nums[i] &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= sum(nums[i]) &lt;= 1000</code>
        </li>
        <li>
          <code>-1000 &lt;= target &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  784: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, you&nbsp;can transform every letter
        individually to be lowercase or uppercase to create another string.
      </p>

      <p>
        Return <em>a list of all possible strings we could create</em>. Return
        the output in <strong>any order</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "a1b2" <br />
        <strong>Output:</strong> ["a1b2","a1B2","A1b2","A1B2"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "3z4" <br />
        <strong>Output:</strong> ["3z4","3Z4"]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 12</code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters, uppercase
          English letters, and digits.
        </li>
      </ul>
    </div>
  ),
  797: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a directed acyclic graph (<strong>DAG</strong>) of <code>n</code>{" "}
        nodes labeled from <code>0</code> to <code>n - 1</code>, find all
        possible paths from node <code>0</code> to node <code>n - 1</code> and
        return them in <strong>any order</strong>.
      </p>

      <p>
        The graph is given as follows: <code>graph[i]</code> is a list of all
        nodes you can visit from node <code>i</code> (i.e., there is a directed
        edge from node <code>i</code> to node <code>graph[i][j]</code>).
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg"
        style={{ width: 242, height: 242 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[1,2],[3],[3],[]] <br />
        <strong>Output:</strong> [[0,1,3],[0,2,3]] <br />
        <strong>Explanation:</strong> There are two paths: 0 -&gt; 1 -&gt; 3 and
        0 -&gt; 2 -&gt; 3.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg"
        style={{ width: 423, height: 301 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[4,3,1],[3,2,4],[3],[4],[]] <br />
        <strong>Output:</strong> [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == graph.length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 15</code>
        </li>
        <li>
          <code>0 &lt;= graph[i][j] &lt; n</code>
        </li>
        <li>
          <code>graph[i][j] != i</code> (i.e., there will be no self-loops).
        </li>
        <li>
          All the elements of <code>graph[i]</code> are <strong>unique</strong>.
        </li>
        <li>
          The input graph is <strong>guaranteed</strong> to be a{" "}
          <strong>DAG</strong>.
        </li>
      </ul>
    </div>
  ),
  988: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given the <code>root</code> of a binary tree where each node has
        a value in the range <code>[0, 25]</code> representing the letters{" "}
        <code>'a'</code> to <code>'z'</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>lexicographically smallest</strong> string that starts at
          a leaf of this tree and ends at the root
        </em>
        .
      </p>

      <p>
        As a reminder, any shorter prefix of a string is{" "}
        <strong>lexicographically smaller</strong>.
      </p>

      <ul>
        <li>
          For example, <code>"ab"</code> is lexicographically smaller than{" "}
          <code>"aba"</code>.
        </li>
      </ul>

      <p>A leaf of a node is a node that has no children.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/01/30/tree1.png"
        style={{ width: 534, height: 358 }}
      />
      <pre>
        <strong>Input:</strong> root = [0,1,2,3,4,3,4] <br />
        <strong>Output:</strong> "dba"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/01/30/tree2.png"
        style={{ width: 534, height: 358 }}
      />
      <pre>
        <strong>Input:</strong> root = [25,1,3,1,3,0,2] <br />
        <strong>Output:</strong> "adz"
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/02/01/tree3.png"
        style={{ height: 490, width: 468 }}
      />
      <pre>
        <strong>Input:</strong> root = [2,2,1,null,1,0,null,0] <br />
        <strong>Output:</strong> "abc"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the tree is in the range <code>[1, 8500]</code>
          .
        </li>
        <li>
          <code>0 &lt;= Node.val &lt;= 25</code>
        </li>
      </ul>
    </div>
  ),
  996: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        An array is <strong>squareful</strong> if the sum of every pair of
        adjacent elements is a <strong>perfect square</strong>.
      </p>

      <p>
        Given an integer array nums, return{" "}
        <em>the number of permutations of </em>
        <code>nums</code>
        <em>
          {" "}
          that are <strong>squareful</strong>
        </em>
        .
      </p>

      <p>
        Two permutations <code>perm1</code> and <code>perm2</code> are different
        if there is some index <code>i</code> such that{" "}
        <code>perm1[i] != perm2[i]</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [1,17,8] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> [1,8,17] and [17,8,1] are the valid
        permutations.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> nums = [2,2,2] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= nums.length &lt;= 12</code>
        </li>
        <li>
          <code>
            0 &lt;= nums[i] &lt;= 10<sup>9</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  1415: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A <strong>happy string</strong> is a string that:
      </p>

      <ul>
        <li>
          consists only of letters of the set <code>['a', 'b', 'c']</code>.
        </li>
        <li>
          <code>s[i] != s[i + 1]</code> for all values of <code>i</code> from{" "}
          <code>1</code> to <code>s.length - 1</code> (string is 1-indexed).
        </li>
      </ul>

      <p>
        For example, strings <strong>"abc", "ac", "b"</strong> and{" "}
        <strong>"abcbabcbcb"</strong> are all happy strings and strings{" "}
        <strong>"aa", "baa"</strong> and <strong>"ababbc"</strong> are not happy
        strings.
      </p>

      <p>
        Given two integers <code>n</code> and <code>k</code>, consider a list of
        all happy strings of length <code>n</code> sorted in lexicographical
        order.
      </p>

      <p>
        Return <em>the kth string</em> of this list or return an{" "}
        <strong>empty string</strong> if there are less than <code>k</code>{" "}
        happy strings of length <code>n</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1, k = 3 <br />
        <strong>Output:</strong> "c"
        <br />
        <strong>Explanation:</strong> The list ["a", "b", "c"] contains all
        happy strings of length 1. The third string is "c".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 1, k = 4 <br />
        <strong>Output:</strong> ""
        <br />
        <strong>Explanation:</strong> There are only 3 happy strings of length
        1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, k = 9 <br />
        <strong>Output:</strong> "cab" <br />
        <strong>Explanation:</strong> There are 12 different happy string of
        length 3 ["aba", "abc", "aca", "acb", "bab", "bac", "bca", "bcb", "cab",
        "cac", "cba", "cbc"]. You will find the 9<sup>th</sup> string = "cab"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 10</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= 100</code>
        </li>
      </ul>
    </div>
  ),
  2014: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> of length <code>n</code>, and an
        integer <code>k</code>. You are tasked to find the{" "}
        <strong>longest subsequence repeated</strong> <code>k</code> times in
        string <code>s</code>.
      </p>

      <p>
        A <strong>subsequence</strong> is a string that can be derived from
        another string by deleting some or no characters without changing the
        order of the remaining characters.
      </p>

      <p>
        A subsequence <code>seq</code> is <strong>repeated</strong>{" "}
        <code>k</code> times in the string <code>s</code> if{" "}
        <code>seq * k</code> is a subsequence of <code>s</code>, where{" "}
        <code>seq * k</code> represents a string constructed by concatenating{" "}
        <code>seq</code> <code>k</code> times.
      </p>

      <ul>
        <li>
          For example, <code>"bba"</code> is repeated <code>2</code> times in
          the string <code>"bababcba"</code>, because the string{" "}
          <code>"bbabba"</code>, constructed by concatenating <code>"bba"</code>{" "}
          <code>2</code> times, is a subsequence of the string{" "}
          <code>
            "
            <strong>
              <u>b</u>
            </strong>
            a
            <strong>
              <u>bab</u>
            </strong>
            c
            <strong>
              <u>ba</u>
            </strong>
            "
          </code>
          .
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>longest subsequence repeated</strong>{" "}
        </em>
        <code>k</code>
        <em> times in string </em>
        <code>s</code>
        <em>
          . If multiple such subsequences are found, return the{" "}
          <strong>lexicographically largest</strong> one. If there is no such
          subsequence, return an <strong>empty</strong> string
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt="example 1"
        src="https://assets.leetcode.com/uploads/2021/08/30/longest-subsequence-repeat-k-times.png"
        style={{ width: 457, height: 99 }}
      />
      <pre>
        <strong>Input:</strong> s = "letsleetcode", k = 2 <br />
        <strong>Output:</strong> "let" <br />
        <strong>Explanation:</strong> There are two longest subsequences
        repeated 2 times: "let" and "ete". <br />
        "let" is the lexicographically largest one.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "bb", k = 2 <br />
        <strong>Output:</strong> "b" <br />
        <strong>Explanation:</strong> The longest subsequence repeated 2 times
        is "b".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "ab", k = 2 <br />
        <strong>Output:</strong> "" <br />
        <strong>Explanation:</strong> There is no subsequence repeated 2 times.
        Empty string is returned.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == s.length</code>
        </li>
        <li>
          <code>2 &lt;= n, k &lt;= 2000</code>
        </li>
        <li>
          <code>2 &lt;= n &lt; k * 8</code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  2305: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer array <code>cookies</code>, where{" "}
        <code>cookies[i]</code> denotes the number of cookies in the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        bag. You are also given an integer <code>k</code> that denotes the
        number of children to distribute <strong>all</strong> the bags of
        cookies to. All the cookies in the same bag must go to the same child
        and cannot be split up.
      </p>

      <p>
        The <strong>unfairness</strong> of a distribution is defined as the{" "}
        <strong>maximum</strong> <strong>total</strong> cookies obtained by a
        single child in the distribution.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> unfairness of all distributions
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> cookies = [8,15,10,20,8], k = 2 <br />
        <strong>Output:</strong> 31 <br />
        <strong>Explanation:</strong> One optimal distribution is [8,15,8] and
        [10,20] <br />- The 1<sup>st</sup> child receives [8,15,8] which has a
        total of 8 + 15 + 8 = 31 cookies. <br />- The 2<sup>nd</sup> child
        receives [10,20] which has a total of 10 + 20 = 30 cookies.
        <br />
        The unfairness of the distribution is max(31,30) = 31.
        <br />
        It can be shown that there is no distribution with an unfairness less
        than 31.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> cookies = [6,1,3,2,2,4,1,2], k = 3<br />
        <strong>Output:</strong> 7<br />
        <strong>Explanation:</strong> One optimal distribution is [6,1],
        [3,2,2], and [4,1,2]
        <br />- The 1<sup>st</sup> child receives [6,1] which has a total of 6 +
        1 = 7 cookies.
        <br />- The 2<sup>nd</sup> child receives [3,2,2] which has a total of 3
        + 2 + 2 = 7 cookies.
        <br />- The 3<sup>rd</sup> child receives [4,1,2] which has a total of 4
        + 1 + 2 = 7 cookies.
        <br />
        The unfairness of the distribution is max(7,7,7) = 7.
        <br />
        It can be shown that there is no distribution with an unfairness less
        than 7.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= cookies.length &lt;= 8</code>
        </li>
        <li>
          <code>
            1 &lt;= cookies[i] &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>2 &lt;= k &lt;= cookies.length</code>
        </li>
      </ul>
    </div>
  ),
  2664: (
    <article role="main" class="blog-post">
      <p>
        Given two positive integers <code>m</code> and <code>n</code> which are
        the height and width of a <strong>0-indexed</strong> 2D-array{" "}
        <code>board</code>, a pair of positive integers <code>(r, c)</code>{" "}
        which is the starting position of the knight on the board.
      </p>

      <p>
        Your task is to find an order of movements for the knight, in a manner
        that every cell of the&nbsp;<code>board</code> gets visited{" "}
        <strong>exactly</strong> once (the starting cell is considered visited
        and you <strong>shouldn't</strong> visit it again).
      </p>

      <p>
        Return <em>the array</em> <code>board</code>{" "}
        <em>
          in which the cells' values show the order of visiting the cell
          starting from 0 (the initial place of the knight).
        </em>
      </p>

      <p>
        Note that a <strong>knight</strong> can <strong>move</strong> from cell{" "}
        <code>(r1, c1)</code> to cell <code>(r2, c2)</code> if{" "}
        <code>0 &lt;= r2 &lt;= m - 1</code> and{" "}
        <code>0 &lt;= c2 &lt;= n - 1</code> and{" "}
        <code>min(abs(r1 - r2), abs(c1 - c2)) = 1</code> and{" "}
        <code>max(abs(r1 - r2), abs(c1 - c2)) = 2</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong>Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> m = 1, n = 1, r = 0, c = 0 <br />
        <strong>Output:</strong> [[0]] <br />
        <strong>Explanation:</strong> There is only 1 cell and the knight is
        initially on it so there is only a 0 inside the 1x1 grid.
      </pre>

      <p>
        <strong>Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> m = 3, n = 4, r = 0, c = 0 <br />
        <strong>Output:</strong> [[0,3,6,9],[11,8,1,4],[2,5,10,7]] <br />
        <strong>Explanation:</strong> By the following order of movements we can
        visit the entire board. <br />
        (0,0)-&gt;(1,2)-&gt;(2,0)-&gt;(0,1)-&gt;(1,3)-&gt;(2,1)-&gt;(0,2)-&gt;(2,3)-&gt;(1,1)-&gt;(0,3)-&gt;(2,2)-&gt;(1,0)
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= m,&nbsp;n &lt;= 5</code>
        </li>
        <li>
          <code>0 &lt;= r &lt;= m - 1</code>
        </li>
        <li>
          <code>0 &lt;= c &lt;= n - 1</code>
        </li>
        <li>
          The inputs will be generated such that there exists at least
          one&nbsp;possible order of movements with the given condition
        </li>
      </ul>
    </article>
  ),
  6: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The string <code>"PAYPALISHIRING"</code> is written in a zigzag pattern
        on a given number of rows like this: (you may want to display this
        pattern in a fixed font for better legibility)
      </p>

      <pre>
        {`P   A   H   N
A P L S I I G
Y   I   R`}
      </pre>

      <p>
        And then read line by line: <code>"PAHNAPLSIIGYIR"</code>
      </p>

      <p>
        Write the code that will take a string and make this conversion given a
        number of rows:
      </p>

      <pre>string convert(string s, int numRows);</pre>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "PAYPALISHIRING", numRows = 3 <br />
        <strong>Output:</strong> "PAHNAPLSIIGYIR"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "PAYPALISHIRING", numRows = 4 <br />
        <strong>Output:</strong> "PINALSIGYAHRPI" <br />
        <strong>Explanation:</strong>
        {`P     I    N
A   L S  I G
Y A   H R
P     I`}
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "A", numRows = 1 <br />
        <strong>Output:</strong> "A"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>s</code> consists of English letters (lower-case and
          upper-case), <code>','</code> and <code>'.'</code>.
        </li>
        <li>
          <code>1 &lt;= numRows &lt;= 1000</code>
        </li>
      </ul>
    </div>
  ),
  8: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Implement the <code>myAtoi(string s)</code> function, which converts a
        string to a 32-bit signed integer.
      </p>

      <p>
        The algorithm for <code>myAtoi(string s)</code> is as follows:
      </p>

      <ul>
        <li>
          <strong>Whitespace</strong>: Ignore any leading whitespace (
          <code>" "</code>).
        </li>
        <li>
          <strong>Signedness</strong>: Determine the sign by checking if the
          next character is <code>'-'</code> or <code>'+'</code>, assuming
          positivity if neither present.
        </li>
        <li>
          <strong>Conversion</strong>: Read the integer by skipping leading
          zeros&nbsp;until a non-digit character is encountered or the end of
          the string is reached. If no digits were read, then the result is 0.
        </li>
        <li>
          <strong>Rounding</strong>: If the integer is out of the 32-bit signed
          integer range{" "}
          <code>
            [-2<sup>31</sup>, 2<sup>31</sup> - 1]
          </code>
          , then round the integer to remain in the range. Specifically,
          integers less than{" "}
          <code>
            -2<sup>31</sup>
          </code>{" "}
          should be rounded to{" "}
          <code>
            -2<sup>31</sup>
          </code>
          , and integers greater than{" "}
          <code>
            2<sup>31</sup> - 1
          </code>{" "}
          should be rounded to{" "}
          <code>
            2<sup>31</sup> - 1
          </code>
          .
        </li>
      </ul>

      <p>Return the integer as the final result.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "42"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">42</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <pre>
          {`The underlined characters are what is read in and the caret is the current reader position. 
  Step 1: "42" (no characters read because there is no leading whitespace)
           ^
  Step 2: "42" (no characters read because there is neither a '-' nor '+')
           ^
  Step 3: "<u>42</u>" ("42" is read in)
             ^`}
        </pre>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = " -042"</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">-42</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <pre>
          {`Step 1: "<u>   </u>-042" (leading whitespace is read and ignored)
              ^
  Step 2: "   <u>-</u>042" ('-' is read, so the result should be negative)
               ^
  Step 3: "   -<u>042</u>" ("042" is read in, leading zeros ignored in the result)
                 ^`}
        </pre>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "1337c0d3"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">1337</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <pre>
          {`Step 1: "1337c0d3" (no characters read because there is no leading whitespace)
           ^
  Step 2: "1337c0d3" (no characters read because there is neither a '-' nor '+')
           ^
  Step 3: "<u>1337</u>c0d3" ("1337" is read in; reading stops because the next character is a non-digit)
               ^`}
        </pre>
      </div>

      <p>
        <strong class="example">Example 4:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "0-1"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <pre>
          {`Step 1: "0-1" (no characters read because there is no leading whitespace)
           ^
  Step 2: "0-1" (no characters read because there is neither a '-' nor '+')
           ^
  Step 3: "<u>0</u>-1" ("0" is read in; reading stops because the next character is a non-digit)
            ^`}
        </pre>
      </div>

      <p>
        <strong class="example">Example 5:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "words and 987"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">0</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <p>Reading stops at the first non-digit character 'w'.</p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= s.length &lt;= 200</code>
        </li>
        <li>
          <code>s</code> consists of English letters (lower-case and
          upper-case), digits (<code>0-9</code>), <code>' '</code>,{" "}
          <code>'+'</code>, <code>'-'</code>, and <code>'.'</code>.
        </li>
      </ul>
    </div>
  ),
  14: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Write a function to find the longest common prefix string amongst an
        array of strings.
      </p>

      <p>
        If there is no common prefix, return an empty string <code>""</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> strs = ["flower","flow","flight"] <br />
        <strong>Output:</strong> "fl"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> strs = ["dog","racecar","car"] <br />
        <strong>Output:</strong> "" <br />
        <strong>Explanation:</strong> There is no common prefix among the input
        strings.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= strs.length &lt;= 200</code>
        </li>
        <li>
          <code>0 &lt;= strs[i].length &lt;= 200</code>
        </li>
        <li>
          <code>strs[i]</code> consists of only lowercase English letters if it
          is non-empty.
        </li>
      </ul>
    </div>
  ),
  38: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        The <strong>count-and-say</strong> sequence is a sequence of digit
        strings defined by the recursive formula:
      </p>
      <ul>
        <li>
          <code>countAndSay(1) = "1"</code>
        </li>
        <li>
          <code>countAndSay(n)</code> is the run-length encoding of{" "}
          <code>countAndSay(n - 1)</code>.
        </li>
      </ul>
      <p>
        <a
          href="http://en.wikipedia.org/wiki/Run-length_encoding"
          target="_blank"
          rel="noreferrer"
        >
          Run-length encoding
        </a>{" "}
        (RLE) is a string compression method that works by replacing consecutive
        identical characters (repeated 2 or more times) with the concatenation
        of the character and the number marking the count of the characters
        (length of the run). For example, to compress the string{" "}
        <code>"3322251"</code> we replace <code>"33"</code> with{" "}
        <code>"23"</code>, replace <code>"222"</code> with <code>"32"</code>,
        replace <code>"5"</code> with <code>"15"</code> and replace{" "}
        <code>"1"</code> with <code>"11"</code>. Thus the compressed string
        becomes <code>"23321511"</code>.
      </p>
      <p>
        Given a positive integer <code>n</code>, return <em>the </em>
        <code>
          n<sup>th</sup>
        </code>
        <em>
          {" "}
          element of the <strong>count-and-say</strong> sequence
        </em>
        .
      </p>
      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 4</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"1211"</span>
        </p>
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <pre>
          {`countAndSay(1) = "1"
    countAndSay(2) = RLE of "1" = "11"
    countAndSay(3) = RLE of "11" = "21"
    countAndSay(4) = RLE of "21" = "1211"`}
        </pre>
      </div>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">n = 1</span>
        </p>
        <br />

        <p>
          <strong>Output:</strong> <span class="example-io">"1"</span>
        </p>
        <br />

        <p>
          <strong>Explanation:</strong>
        </p>
        <br />

        <p>This is the base case.</p>
      </div>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>
      <ul>
        <li>
          <code>1 &lt;= n &lt;= 30</code>
        </li>
      </ul>
      <p>&nbsp;</p>
      <strong>Follow up:</strong> Could you solve it iteratively?
    </div>
  ),
  58: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> consisting of words and spaces, return{" "}
        <em>
          the length of the <strong>last</strong> word in the string.
        </em>
      </p>

      <p>
        A <strong>word</strong> is a maximal{" "}
        <span
          data-keyword="substring-nonempty"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r2tu:"
              >
                <div>substring</div>
              </div>
            </div>
          </div>
        </span>{" "}
        consisting of non-space characters only.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "Hello World" <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The last word is "World" with length 5.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = " fly me to the moon " <br />
        <strong>Output:</strong> 4 <br />
        <strong>Explanation:</strong> The last word is "moon" with length 4.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "luffy is still joyboy" <br />
        <strong>Output:</strong> 6 <br />
        <strong>Explanation:</strong> The last word is "joyboy" with length 6.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of only English letters and spaces{" "}
          <code>' '</code>.
        </li>
        <li>
          There will be at least one word in <code>s</code>.
        </li>
      </ul>
    </div>
  ),
  65: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, return whether <code>s</code> is a{" "}
        <strong>valid number</strong>.<br />
        For example, all the following are valid numbers:{" "}
        <code>
          "2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90E3", "3e+7",
          "+6e-1", "53.5e93", "-123.456e789"
        </code>
        , while the following are not valid numbers:{" "}
        <code>"abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"</code>
        .
      </p>

      <p>
        Formally, a&nbsp;<strong>valid number</strong> is defined using one of
        the following definitions:
      </p>

      <ul>
        <li>
          An <strong>integer number</strong> followed by an{" "}
          <strong>optional exponent</strong>.
        </li>
        <li>
          A <strong>decimal number</strong> followed by an{" "}
          <strong>optional exponent</strong>.
        </li>
      </ul>

      <p>
        An <strong>integer number</strong> is defined with an{" "}
        <strong>optional sign</strong> <code>'-'</code> or <code>'+'</code>{" "}
        followed by <strong>digits</strong>.
      </p>

      <p>
        A <strong>decimal number</strong> is defined with an{" "}
        <strong>optional sign</strong> <code>'-'</code> or <code>'+'</code>{" "}
        followed by one of the following definitions:
      </p>

      <ul>
        <li>
          <strong>Digits</strong> followed by a <strong>dot</strong>{" "}
          <code>'.'</code>.
        </li>
        <li>
          <strong>Digits</strong> followed by a <strong>dot</strong>{" "}
          <code>'.'</code> followed by <strong>digits</strong>.
        </li>
        <li>
          A <strong>dot</strong> <code>'.'</code> followed by{" "}
          <strong>digits</strong>.
        </li>
      </ul>

      <p>
        An <strong>exponent</strong> is defined with an{" "}
        <strong>exponent notation</strong> <code>'e'</code> or <code>'E'</code>{" "}
        followed by an <strong>integer number</strong>.
      </p>

      <p>
        The <strong>digits</strong> are defined as one or more digits.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "0"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">true</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "e"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">false</span>
        </p>
      </div>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "."</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">false</span>
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 20</code>
        </li>
        <li>
          <code>s</code> consists of only English letters (both uppercase and
          lowercase), digits (<code>0-9</code>), plus <code>'+'</code>, minus{" "}
          <code>'-'</code>, or dot <code>'.'</code>.
        </li>
      </ul>
    </div>
  ),
  171: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>columnTitle</code> that represents the column title
        as appears in an Excel sheet, return{" "}
        <em>its corresponding column number</em>.
      </p>

      <p>For example:</p>

      <pre>
        {`A -&gt; 1
    B -&gt; 2
    C -&gt; 3
    ...
    Z -&gt; 26
    AA -&gt; 27
    AB -&gt; 28 
    ...`}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> columnTitle = "A" <br />
        <strong>Output:</strong> 1
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> columnTitle = "AB" <br />
        <strong>Output:</strong> 28
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> columnTitle = "ZY" <br />
        <strong>Output:</strong> 701
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= columnTitle.length &lt;= 7</code>
        </li>
        <li>
          <code>columnTitle</code> consists only of uppercase English letters.
        </li>
        <li>
          <code>columnTitle</code> is in the range <code>["A", "FXSHRXW"]</code>
          .
        </li>
      </ul>
    </div>
  ),
  243: (
    <div class="markdown-body div-width">
      <p>
        Given a list of words and two words <em>word1</em> and <em>word2</em>,
        return the shortest distance between these two words in the list.
      </p>
      <p>
        <strong>Example:</strong>
        <br />
        Assume that words ={" "}
        <code>["practice", "makes", "perfect", "coding", "makes"]</code>.
      </p>{" "}
      <br />
      <pre>
        <b>Input:</b> <em>word1</em> = <code>“coding”</code>, <em>word2</em> ={" "}
        <code>“practice”</code>
        <br />
        <b>Output:</b> 3
      </pre>
      <pre>
        <b>Input:</b> <em>word1</em> = <code>"makes"</code>, <em>word2</em> ={" "}
        <code>"coding"</code>
        <br />
        <b>Output:</b> 1
      </pre>
      <p>
        <strong>Note:</strong>
        <br />
        You may assume that <em>word1</em> <strong>does not equal to</strong>{" "}
        <em>word2</em>, and
        <em>word1</em> and <em>word2</em> are both in the list.
      </p>
    </div>
  ),
  244: (
    <div class="markdown-body div-width">
      <p>
        Design a class which receives a list of words in the constructor, and
        implements a method that takes two words <em>word1</em> and{" "}
        <em>word2</em> and return the shortest distance between these two words
        in the list. Your method will be called <em>repeatedly</em> many times
        with different parameters.&nbsp;
      </p>

      <p>
        <strong>Example:</strong>
        <br />
        Assume that words ={" "}
        <code>["practice", "makes", "perfect", "coding", "makes"]</code>.
      </p>

      <pre>
        <b>Input:</b> <em>word1</em> = <code>“coding”</code>, <em>word2</em> ={" "}
        <code>“practice”</code> <br />
        <b>Output:</b> 3
      </pre>

      <pre>
        <b>Input:</b> <em>word1</em> = <code>"makes"</code>, <em>word2</em> ={" "}
        <code>"coding"</code> <br />
        <b>Output:</b> 1
      </pre>

      <p>
        <strong>Note:</strong>
        <br />
        You may assume that <em>word1</em> <strong>does not equal to</strong>{" "}
        <em>word2</em>, and
        <em>word1</em> and <em>word2</em> are both in the list.
      </p>
    </div>
  ),
  245: (
    <div class="markdown-body div-width">
      <p>
        Given a list of words and two words <em>word1</em> and <em>word2</em>,
        return the shortest distance between these two words in the list.
      </p>

      <p>
        <em>word1</em> and <em>word2</em> may be the same and they represent two
        individual words in the list.
      </p>

      <p>
        <strong>Example:</strong>
        <br />
        Assume that words ={" "}
        <code>["practice", "makes", "perfect", "coding", "makes"]</code>.
      </p>

      <pre>
        <b>Input:</b> <em>word1</em> = <code>“makes”</code>, <em>word2</em> ={" "}
        <code>“coding”</code> <br />
        <b>Output:</b> 1
      </pre>

      <pre>
        <b>Input:</b> <em>word1</em> = <code>"makes"</code>, <em>word2</em> ={" "}
        <code>"makes"</code> <br />
        <b>Output:</b> 3
      </pre>

      <p>
        <strong>Note:</strong>
        <br />
        You may assume <em>word1</em> and <em>word2</em> are both in the list.
      </p>
    </div>
  ),
  246: (
    <div class="markdown-body div-width">
      <p>
        A strobogrammatic number is a number that looks the same when rotated
        180 degrees (looked at upside down).
      </p>

      <p>
        Write a function to determine if a number is strobogrammatic. The number
        is represented as a string.
      </p>

      <p>
        <b>Example 1:</b>
      </p>

      <pre>
        <b>Input:</b> "69" <br />
        <b>Output:</b> true
      </pre>

      <p>
        <b>Example 2:</b>
      </p>

      <pre>
        <b>Input:</b> "88" <br />
        <b>Output:</b> true
      </pre>

      <p>
        <b>Example 3:</b>
      </p>

      <pre>
        <b>Input:</b> "962" <br />
        <b>Output:</b> false
      </pre>
    </div>
  ),
  248: (
    <div class="markdown-body div-width">
      <p>
        A strobogrammatic number is a number that looks the same when rotated
        180 degrees (looked at upside down).
      </p>

      <p>
        Write a function to count the total strobogrammatic numbers that exist
        in the range of low &lt;= num &lt;= high.
      </p>

      <p>
        <b>Example:</b>
      </p>

      <pre>
        <b>Input:</b> low = "50", high = "100" <br />
        <b>Output:</b> 3 <br />
        <strong>Explanation: </strong>69, 88, and 96 are three strobogrammatic
        numbers.
      </pre>

      <p>
        <strong>Note:</strong>
        <br />
        Because the range might be a large number, the <em>low</em> and{" "}
        <em>high</em> numbers are represented as string.
      </p>
    </div>
  ),
  293: (
    <div class="markdown-body div-width">
      <p>
        You are playing the following Flip Game with your friend: Given a string
        that contains only these two characters: <code>+</code> and{" "}
        <code>-</code>, you and your friend take turns to flip two{" "}
        <b>consecutive</b> <code>"++"</code> into <code>"--"</code>. The game
        ends when a person can no longer make a move and therefore the other
        person will be the winner.
      </p>

      <p>
        Write a function to compute all possible states of the string after one
        valid move.
      </p>

      <p>
        <strong>Example:</strong>
      </p>

      <pre>
        <strong>Input:</strong> <code>s = "++++"</code> <br />
        <strong>Output:</strong>
        {`[
  "--++",
  "+--+",
  "++--"
]`}
      </pre>

      <p>
        <strong>Note: </strong>If there is no valid move, return an empty list{" "}
        <code>[]</code>.
      </p>
    </div>
  ),
  415: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two non-negative integers, <code>num1</code> and <code>num2</code>{" "}
        represented as string, return <em>the sum of</em> <code>num1</code>{" "}
        <em>and</em> <code>num2</code> <em>as a string</em>.
      </p>

      <p>
        You must solve the problem without using any built-in library for
        handling large integers (such as <code>BigInteger</code>). You must also
        not convert the inputs to integers directly.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num1 = "11", num2 = "123" <br />
        <strong>Output:</strong> "134"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num1 = "456", num2 = "77" <br />
        <strong>Output:</strong> "533"
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> num1 = "0", num2 = "0" <br />
        <strong>Output:</strong> "0"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= num1.length, num2.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>num1</code> and <code>num2</code> consist of only digits.
        </li>
        <li>
          <code>num1</code> and <code>num2</code> don't have any leading zeros
          except for the zero itself.
        </li>
      </ul>
    </div>
  ),
  434: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, return{" "}
        <em>the number of segments in the string</em>.
      </p>

      <p>
        A <strong>segment</strong> is defined to be a contiguous sequence of{" "}
        <strong>non-space characters</strong>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "Hello, my name is John" <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The five segments are ["Hello,", "my",
        "name", "is", "John"]
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "Hello" <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>0 &lt;= s.length &lt;= 300</code>
        </li>
        <li>
          <code>s</code> consists of lowercase and uppercase English letters,
          digits, or one of the following characters{" "}
          <code>"!@#$%^&amp;*()_+-=',.:"</code>.
        </li>
        <li>
          The only space character in <code>s</code> is <code>' '</code>.
        </li>
      </ul>
    </div>
  ),
  468: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>queryIP</code>, return <code>"IPv4"</code> if IP is
        a valid IPv4 address, <code>"IPv6"</code> if IP is a valid IPv6 address
        or <code>"Neither"</code> if IP is not a correct IP of any type.
      </p>

      <p>
        <strong>A valid IPv4</strong> address is an IP in the form{" "}
        <code>
          "x<sub>1</sub>.x<sub>2</sub>.x<sub>3</sub>.x<sub>4</sub>"
        </code>{" "}
        where{" "}
        <code>
          0 &lt;= x<sub>i</sub> &lt;= 255
        </code>{" "}
        and{" "}
        <code>
          x<sub>i</sub>
        </code>{" "}
        <strong>cannot contain</strong> leading zeros. For example,{" "}
        <code>"192.168.1.1"</code> and <code>"192.168.1.0"</code> are valid IPv4
        addresses while <code>"192.168.01.1"</code>, <code>"192.168.1.00"</code>
        , and <code>"192.168@1.1"</code> are invalid IPv4 addresses.
      </p>

      <p>
        <strong>A valid IPv6</strong> address is an IP in the form{" "}
        <code>
          "x<sub>1</sub>:x<sub>2</sub>:x<sub>3</sub>:x<sub>4</sub>:x<sub>5</sub>
          :x<sub>6</sub>:x<sub>7</sub>:x<sub>8</sub>"
        </code>{" "}
        where:
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= x<sub>i</sub>.length &lt;= 4
          </code>
        </li>
        <li>
          <code>
            x<sub>i</sub>
          </code>{" "}
          is a <strong>hexadecimal string</strong> which may contain digits,
          lowercase English letter (<code>'a'</code> to <code>'f'</code>) and
          upper-case English letters (<code>'A'</code> to <code>'F'</code>).
        </li>
        <li>
          Leading zeros are allowed in{" "}
          <code>
            x<sub>i</sub>
          </code>
          .
        </li>
      </ul>

      <p>
        For example, "<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334"</code> and
        "<code>2001:db8:85a3:0:0:8A2E:0370:7334"</code> are valid IPv6
        addresses, while "<code>2001:0db8:85a3::8A2E:037j:7334"</code> and "
        <code>02001:0db8:85a3:0000:0000:8a2e:0370:7334"</code> are invalid IPv6
        addresses.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queryIP = "172.16.254.1" <br />
        <strong>Output:</strong> "IPv4" <br />
        <strong>Explanation:</strong> This is a valid IPv4 address, return
        "IPv4".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queryIP = "2001:0db8:85a3:0:0:8A2E:0370:7334"{" "}
        <br />
        <strong>Output:</strong> "IPv6" <br />
        <strong>Explanation:</strong> This is a valid IPv6 address, return
        "IPv6".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> queryIP = "256.256.256.256" <br />
        <strong>Output:</strong> "Neither" <br />
        <strong>Explanation:</strong> This is neither a IPv4 address nor a IPv6
        address.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>queryIP</code> consists only of English letters, digits and the
          characters <code>'.'</code> and <code>':'</code>.
        </li>
      </ul>
    </div>
  ),
  482: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a license key represented as a string <code>s</code> that
        consists of only alphanumeric characters and dashes. The string is
        separated into <code>n + 1</code> groups by <code>n</code> dashes. You
        are also given an integer <code>k</code>.
      </p>

      <p>
        We want to reformat the string <code>s</code> such that each group
        contains exactly <code>k</code> characters, except for the first group,
        which could be shorter than <code>k</code> but still must contain at
        least one character. Furthermore, there must be a dash inserted between
        two groups, and you should convert all lowercase letters to uppercase.
      </p>

      <p>
        Return <em>the reformatted license key</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "5F3Z-2e-9-w", k = 4 <br />
        <strong>Output:</strong> "5F3Z-2E9W" <br />
        <strong>Explanation:</strong> The string s has been split into two
        parts, each part has 4 characters. <br />
        Note that the two extra dashes are not needed and can be removed.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "2-5g-3-J", k = 2 <br />
        <strong>Output:</strong> "2-5G-3J" <br />
        <strong>Explanation:</strong> The string s has been split into three
        parts, each part has 2 characters except the first part as it could be
        shorter as mentioned above.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of English letters, digits, and dashes{" "}
          <code>'-'</code>.
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
      </ul>
    </div>
  ),
  520: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        We define the usage of capitals in a word to be right when one of the
        following cases holds:
      </p>

      <ul>
        <li>
          All letters in this word are capitals, like <code>"USA"</code>.
        </li>
        <li>
          All letters in this word are not capitals, like{" "}
          <code>"leetcode"</code>.
        </li>
        <li>
          Only the first letter in this word is capital, like{" "}
          <code>"Google"</code>.
        </li>
      </ul>

      <p>
        Given a string <code>word</code>, return <code>true</code> if the usage
        of capitals in it is right.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> word = "USA" <br />
        <strong>Output:</strong> true
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> word = "FlaG" <br />
        <strong>Output:</strong> false
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= word.length &lt;= 100</code>
        </li>
        <li>
          <code>word</code> consists of lowercase and uppercase English letters.
        </li>
      </ul>
    </div>
  ),
  521: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>a</code> and <code>b</code>, return{" "}
        <em>
          the length of the <strong>longest uncommon subsequence</strong>{" "}
          between{" "}
        </em>
        <code>a</code> <em>and</em> <code>b</code>.{" "}
        <em>If no such uncommon subsequence exists, return</em> <code>-1</code>
        <em>.</em>
      </p>

      <p>
        An <strong>uncommon subsequence</strong> between two strings is a string
        that is a{" "}
        <strong>
          <span
            data-keyword="subsequence-string"
            class=" cursor-pointer relative text-dark-blue-s text-sm"
          >
            <div class="popover-wrapper inline-block" data-headlessui-state="">
              <div>
                <div
                  aria-expanded="false"
                  data-headlessui-state=""
                  id="headlessui-popover-button-:rrj:"
                >
                  <div>subsequence</div>
                </div>
              </div>
            </div>
          </span>{" "}
          of exactly one of them
        </strong>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = "aba", b = "cdc" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> One longest uncommon subsequence is "aba"
        because "aba" is a subsequence of "aba" but not "cdc".
        <br /> Note that "cdc" is also a longest uncommon subsequence.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = "aaa", b = "bbb" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong>&nbsp;The longest uncommon subsequences are
        "aaa" and "bbb".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> a = "aaa", b = "aaa" <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong>&nbsp;Every subsequence of string a is also
        a subsequence of string b. Similarly, every subsequence of string b is
        also a subsequence of string a. So the answer would be <code>-1</code>.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= a.length, b.length &lt;= 100</code>
        </li>
        <li>
          <code>a</code> and <code>b</code> consist of lower-case English
          letters.
        </li>
      </ul>
    </div>
  ),
  680: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, return <code>true</code> <em>if the </em>
        <code>s</code>
        <em>
          {" "}
          can be palindrome after deleting <strong>at most one</strong>{" "}
          character from it
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "aba" <br />
        <strong>Output:</strong> true
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abca" <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> You could delete the character 'c'.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abc" <br />
        <strong>Output:</strong> false
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  709: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code>, return{" "}
        <em>
          the string after replacing every uppercase letter with the same
          lowercase letter
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "Hello" <br />
        <strong>Output:</strong> "hello"
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "here" <br />
        <strong>Output:</strong> "here"
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "LOVELY" <br />
        <strong>Output:</strong> "lovely"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code> consists of printable ASCII characters.
        </li>
      </ul>
    </div>
  ),
  1078: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given two strings <code>first</code> and <code>second</code>, consider
        occurrences in some text of the form <code>"first second third"</code>,
        where <code>second</code> comes immediately after <code>first</code>,
        and <code>third</code> comes immediately after <code>second</code>.
      </p>

      <p>
        Return <em>an array of all the words</em> <code>third</code>{" "}
        <em>for each occurrence of</em> <code>"first second third"</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <pre>
        <strong>Input:</strong> text = "alice is a good girl she is a good
        student", first = "a", second = "good" <br />
        <strong>Output:</strong> ["girl","student"]
      </pre>
      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <pre>
        <strong>Input:</strong> text = "we will we will rock you", first = "we",
        second = "will" <br />
        <strong>Output:</strong> ["we","rock"]
      </pre>
      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= text.length &lt;= 1000</code>
        </li>
        <li>
          <code>text</code> consists of lowercase English letters and spaces.
        </li>
        <li>
          All the words in <code>text</code> are separated by{" "}
          <strong>a single space</strong>.
        </li>
        <li>
          <code>1 &lt;= first.length, second.length &lt;= 10</code>
        </li>
        <li>
          <code>first</code> and <code>second</code> consist of lowercase
          English letters.
        </li>
        <li>
          <code>text</code> will not have any leading or trailing spaces.
        </li>
      </ul>
    </div>
  ),
  1309: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> formed by digits and{" "}
        <code>'#'</code>. We want to map <code>s</code> to English lowercase
        characters as follows:
      </p>

      <ul>
        <li>
          Characters (<code>'a'</code> to <code>'i'</code>) are represented by (
          <code>'1'</code> to <code>'9'</code>) respectively.
        </li>
        <li>
          Characters (<code>'j'</code> to <code>'z'</code>) are represented by (
          <code>'10#'</code> to <code>'26#'</code>) respectively.
        </li>
      </ul>

      <p>
        Return <em>the string formed after mapping</em>.
      </p>

      <p>
        The test cases are generated so that a unique mapping will always exist.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "10#11#12" <br />
        <strong>Output:</strong> "jkab" <br />
        <strong>Explanation:</strong> "j" -&gt; "10#" , "k" -&gt; "11#" , "a"
        -&gt; "1" , "b" -&gt; "2".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "1326#" <br />
        <strong>Output:</strong> "acz"
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 1000</code>
        </li>
        <li>
          <code>s</code> consists of digits and the <code>'#'</code> letter.
        </li>
        <li>
          <code>s</code> will be a valid string such that mapping is always
          possible.
        </li>
      </ul>
    </div>
  ),
  1614: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a <strong>valid parentheses string</strong> <code>s</code>, return
        the <strong>nesting depth</strong> of<em> </em>
        <code>s</code>. The nesting depth is the <strong>maximum</strong> number
        of nested parentheses.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "(1+(2*3)+((8)/4))+1"</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>Digit 8 is inside of 3 nested parentheses in the string.</p>
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "(1)+((2))+(((3)))"</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>{" "}
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <p>Digit 3 is inside of 3 nested parentheses in the string.</p>
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "()(())((()()))"</span>
        </p>{" "}
        <p>
          <strong>Output:</strong> <span class="example-io">3</span>
        </p>
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code> consists of digits <code>0-9</code> and characters{" "}
          <code>'+'</code>, <code>'-'</code>, <code>'*'</code>, <code>'/'</code>
          , <code>'('</code>, and <code>')'</code>.
        </li>
        <li>
          It is guaranteed that parentheses expression <code>s</code> is a VPS.
        </li>
      </ul>
    </div>
  ),
  2381: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> of lowercase English letters and a
        2D integer array <code>shifts</code> where{" "}
        <code>
          shifts[i] = [start<sub>i</sub>, end<sub>i</sub>, direction<sub>i</sub>
          ]
        </code>
        . For every <code>i</code>, <strong>shift</strong> the characters in{" "}
        <code>s</code> from the index{" "}
        <code>
          start<sub>i</sub>
        </code>{" "}
        to the index{" "}
        <code>
          end<sub>i</sub>
        </code>{" "}
        (<strong>inclusive</strong>) forward if{" "}
        <code>
          direction<sub>i</sub> = 1
        </code>
        , or shift the characters backward if{" "}
        <code>
          direction<sub>i</sub> = 0
        </code>
        .
      </p>

      <p>
        Shifting a character <strong>forward</strong> means replacing it with
        the <strong>next</strong> letter in the alphabet (wrapping around so
        that <code>'z'</code> becomes <code>'a'</code>). Similarly, shifting a
        character <strong>backward</strong> means replacing it with the{" "}
        <strong>previous</strong> letter in the alphabet (wrapping around so
        that <code>'a'</code> becomes <code>'z'</code>).
      </p>

      <p>
        Return <em>the final string after all such shifts to </em>
        <code>s</code>
        <em> are applied</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abc", shifts = [[0,1,0],[1,2,1],[0,2,1]]{" "}
        <br />
        <strong>Output:</strong> "ace" <br />
        <strong>Explanation:</strong> Firstly, shift the characters from index 0
        to index 1 backward. Now s = "zac". <br />
        Secondly, shift the characters from index 1 to index 2 forward. Now s =
        "zbd". <br />
        Finally, shift the characters from index 0 to index 2 forward. Now s =
        "ace".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "dztz", shifts = [[0,0,0],[1,1,1]] <br />
        <strong>Output:</strong> "catz" <br />
        <strong>Explanation:</strong> Firstly, shift the characters from index 0
        to index 0 backward. Now s = "cztz". <br />
        Finally, shift the characters from index 1 to index 1 forward. Now s =
        "catz".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length, shifts.length &lt;= 5 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>shifts[i].length == 3</code>
        </li>
        <li>
          <code>
            0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt; s.length
          </code>
        </li>
        <li>
          <code>
            0 &lt;= direction<sub>i</sub> &lt;= 1
          </code>
        </li>
        <li>
          <code>s</code> consists of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  2414: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        An <strong>alphabetical continuous string</strong> is a string
        consisting of consecutive letters in the alphabet. In other words, it is
        any substring of the string <code>"abcdefghijklmnopqrstuvwxyz"</code>.
      </p>

      <ul>
        <li>
          For example, <code>"abc"</code> is an alphabetical continuous string,
          while <code>"acb"</code> and <code>"za"</code> are not.
        </li>
      </ul>

      <p>
        Given a string <code>s</code> consisting of lowercase letters only,
        return the{" "}
        <em>
          length of the <strong>longest</strong> alphabetical continuous
          substring.
        </em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abacaba" <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> There are 4 distinct continuous
        substrings: "a", "b", "c" and "ab". <br />
        "ab" is the longest continuous substring.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> s = "abcde" <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> "abcde" is the longest continuous
        substring.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists of only English lowercase letters.
        </li>
      </ul>
    </div>
  ),
  2515: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a <strong>0-indexed</strong> <strong>circular</strong>{" "}
        string array <code>words</code> and a string <code>target</code>. A{" "}
        <strong>circular array</strong> means that the array's end connects to
        the array's beginning.
      </p>

      <ul>
        <li>
          Formally, the next element of <code>words[i]</code> is{" "}
          <code>words[(i + 1) % n]</code> and the previous element of{" "}
          <code>words[i]</code> is <code>words[(i - 1 + n) % n]</code>, where{" "}
          <code>n</code> is the length of <code>words</code>.
        </li>
      </ul>

      <p>
        Starting from <code>startIndex</code>, you can move to either the next
        word or the previous word with <code>1</code> step at a time.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>shortest</strong> distance needed to reach the string
        </em>{" "}
        <code>target</code>. If the string <code>target</code> does not exist in{" "}
        <code>words</code>, return <code>-1</code>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["hello","i","am","leetcode","hello"],
        target = "hello", startIndex = 1 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> We start from index 1 and can reach
        "hello" by <br />
        - moving 3 units to the right to reach index 4.
        <br />
        - moving 2 units to the left to reach index 4.
        <br />
        - moving 4 units to the right to reach index 0.
        <br />
        - moving 1 unit to the left to reach index 0.
        <br />
        The shortest distance to reach "hello" is 1.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["a","b","leetcode"], target =
        "leetcode", startIndex = 0 <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> We start from index 0 and can reach
        "leetcode" by <br />
        - moving 2 units to the right to reach index 3. <br />
        - moving 1 unit to the left to reach index 3. <br />
        The shortest distance to reach "leetcode" is 1.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["i","eat","leetcode"], target = "ate",
        startIndex = 0 <br />
        <strong>Output:</strong> -1 <br />
        <strong>Explanation:</strong> Since "ate" does not exist in{" "}
        <code>words</code>, we return -1.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= words.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 100</code>
        </li>
        <li>
          <code>words[i]</code> and <code>target</code> consist of only
          lowercase English letters.
        </li>
        <li>
          <code>0 &lt;= startIndex &lt; words.length</code>
        </li>
      </ul>
    </div>
  ),
  2788: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an array of strings <code>words</code> and a character{" "}
        <code>separator</code>, <strong>split</strong> each string in{" "}
        <code>words</code> by <code>separator</code>.
      </p>

      <p>
        Return{" "}
        <em>
          an array of strings containing the new strings formed after the
          splits, <strong>excluding empty strings</strong>.
        </em>
      </p>

      <p>
        <strong>Notes</strong>
      </p>

      <ul>
        <li>
          <code>separator</code> is used to determine where the split should
          occur, but it is not included as part of the resulting strings.
        </li>
        <li>A split may result in more than two strings.</li>
        <li>
          The resulting strings must maintain the same order as they were
          initially given.
        </li>
      </ul>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["one.two.three","four.five","six"],
        separator = "." <br />
        <strong>Output:</strong> ["one","two","three","four","five","six"]{" "}
        <br />
        <strong>Explanation: </strong>In this example we split as follows:{" "}
        <br />
        "one.two.three" splits into "one", "two", "three" <br />
        "four.five" splits into "four", "five" <br />
        "six" splits into "six" <br />
        Hence, the resulting array is ["one","two","three","four","five","six"].
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["$easy$","$problem$"], separator = "$"{" "}
        <br />
        <strong>Output:</strong> ["easy","problem"] <br />
        <strong>Explanation:</strong> In this example we split as follows:{" "}
        <br />
        "$easy$" splits into "easy" (excluding empty strings) <br />
        "$problem$" splits into "problem" (excluding empty strings) <br />
        Hence, the resulting array is ["easy","problem"].
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> words = ["|||"], separator = "|" <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> In this example the resulting split of
        "|||" will contain only empty strings, so we return an empty array [].{" "}
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= words.length &lt;= 100</code>
        </li>
        <li>
          <code>1 &lt;= words[i].length &lt;= 20</code>
        </li>
        <li>
          characters in <code>words[i]</code> are either lowercase English
          letters or characters from the string <code>".,|$#@"</code> (excluding
          the quotes)
        </li>
        <li>
          <code>separator</code> is a character from the string{" "}
          <code>".,|$#@"</code> (excluding the quotes)
        </li>
      </ul>
    </div>
  ),
  2833: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>moves</code> of length <code>n</code>{" "}
        consisting only of characters <code>'L'</code>, <code>'R'</code>, and{" "}
        <code>'_'</code>. The string represents your movement on a number line
        starting from the origin <code>0</code>.
      </p>

      <p>
        In the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        move, you can choose one of the following directions:
      </p>

      <ul>
        <li>
          move to the left if <code>moves[i] = 'L'</code> or{" "}
          <code>moves[i] = '_'</code>
        </li>
        <li>
          move to the right if <code>moves[i] = 'R'</code> or{" "}
          <code>moves[i] = '_'</code>
        </li>
      </ul>

      <p>
        Return{" "}
        <em>
          the <strong>distance from the origin</strong> of the{" "}
          <strong>furthest</strong> point you can get to after{" "}
        </em>
        <code>n</code>
        <em> moves</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> moves = "L_RL__R" <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The furthest point we can reach from the
        origin 0 is point -3 through the following sequence of moves "LLRLLLR".
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> moves = "_R__LL_" <br />
        <strong>Output:</strong> 5 <br />
        <strong>Explanation:</strong> The furthest point we can reach from the
        origin 0 is point -5 through the following sequence of moves "LRLLLLL".
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> moves = "_______" <br />
        <strong>Output:</strong> 7 <br />
        <strong>Explanation:</strong> The furthest point we can reach from the
        origin 0 is point 7 through the following sequence of moves "RRRRRRR".
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= moves.length == n &lt;= 50</code>
        </li>
        <li>
          <code>moves</code> consists only of characters <code>'L'</code>,{" "}
          <code>'R'</code> and <code>'_'</code>.
        </li>
      </ul>
    </div>
  ),
  3170: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code>. It may contain any number of{" "}
        <code>'*'</code> characters. Your task is to remove all <code>'*'</code>{" "}
        characters.
      </p>

      <p>
        While there is a <code>'*'</code>, do the following operation:
      </p>

      <ul>
        <li>
          Delete the leftmost <code>'*'</code> and the <strong>smallest</strong>{" "}
          non-<code>'*'</code> character to its <em>left</em>. If there are
          several smallest characters, you can delete any of them.
        </li>
      </ul>

      <p>
        Return the{" "}
        <span
          data-keyword="lexicographically-smaller-string"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r15i:"
              >
                <div>lexicographically smallest</div>
              </div>
            </div>
          </div>
        </span>{" "}
        resulting string after removing all <code>'*'</code> characters.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "aaba*"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"aab"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          We should delete one of the <code>'a'</code> characters with{" "}
          <code>'*'</code>. If we choose <code>s[3]</code>, <code>s</code>{" "}
          becomes the lexicographically smallest.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "abc"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"abc"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          There is no <code>'*'</code> in the string.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= s.length &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists only of lowercase English letters and{" "}
          <code>'*'</code>.
        </li>
        <li>
          The input is generated such that it is possible to delete all{" "}
          <code>'*'</code> characters.
        </li>
      </ul>
    </div>
  ),
  3174: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code>.
      </p>

      <p>
        Your task is to remove <strong>all</strong> digits by doing this
        operation repeatedly:
      </p>

      <ul>
        <li>
          Delete the <em>first</em> digit and the <strong>closest</strong>{" "}
          <b>non-digit</b> character to its <em>left</em>.
        </li>
      </ul>

      <p>Return the resulting string after removing all digits.</p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "abc"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"abc"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>There is no digit in the string.</p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "cb34"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">""</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          First, we apply the operation on <code>s[2]</code>, and <code>s</code>{" "}
          becomes <code>"c4"</code>.
        </p>{" "}
        <br />
        <p>
          Then we apply the operation on <code>s[1]</code>, and <code>s</code>{" "}
          becomes <code>""</code>.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code> consists only of lowercase English letters and digits.
        </li>
        <li>
          The input is generated such that it is possible to delete all digits.
        </li>
      </ul>
    </div>
  ),
  3210: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given a string <code>s</code> and an integer <code>k</code>.
        Encrypt the string using the following algorithm:
      </p>

      <ul>
        <li>
          For each character <code>c</code> in <code>s</code>, replace{" "}
          <code>c</code> with the{" "}
          <code>
            k<sup>th</sup>
          </code>{" "}
          character after <code>c</code> in the string (in a cyclic manner).
        </li>
      </ul>

      <p>
        Return the <em>encrypted string</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "dart", k = 3</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"tdar"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>
        <ul>
          <li>
            For <code>i = 0</code>, the 3<sup>rd</sup> character after{" "}
            <code>'d'</code> is <code>'t'</code>.
          </li>
          <li>
            For <code>i = 1</code>, the 3<sup>rd</sup> character after{" "}
            <code>'a'</code> is <code>'d'</code>.
          </li>
          <li>
            For <code>i = 2</code>, the 3<sup>rd</sup> character after{" "}
            <code>'r'</code> is <code>'a'</code>.
          </li>
          <li>
            For <code>i = 3</code>, the 3<sup>rd</sup> character after{" "}
            <code>'t'</code> is <code>'r'</code>.
          </li>
        </ul>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong>{" "}
          <span class="example-io">s = "aaa", k = 1</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"aaa"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          As all the characters are the same, the encrypted string will also be
          the same.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>
            1 &lt;= k &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>s</code> consists only of lowercase English letters.
        </li>
      </ul>
    </div>
  ),
  3216: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a string <code>s</code> containing only digits, return the{" "}
        <span
          data-keyword="lexicographically-smaller-string"
          class=" cursor-pointer relative text-dark-blue-s text-sm"
        >
          <div class="popover-wrapper inline-block" data-headlessui-state="">
            <div>
              <div
                aria-expanded="false"
                data-headlessui-state=""
                id="headlessui-popover-button-:r187:"
              >
                <div>lexicographically smallest string</div>
              </div>
            </div>
          </div>
        </span>{" "}
        that can be obtained after swapping <strong>adjacent</strong> digits in{" "}
        <code>s</code> with the same <strong>parity</strong> at most{" "}
        <strong>once</strong>.
      </p>

      <p>
        Digits have the same parity if both are odd or both are even. For
        example, 5 and 9, as well as 2 and 4, have the same parity, while 6 and
        9 do not.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "45320"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"43520"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation: </strong>
        </p>{" "}
        <br />
        <p>
          <code>s[1] == '5'</code> and <code>s[2] == '3'</code> both have the
          same parity, and swapping them results in the lexicographically
          smallest string.
        </p>
      </div>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <div class="example-block">
        <p>
          <strong>Input:</strong> <span class="example-io">s = "001"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Output:</strong> <span class="example-io">"001"</span>
        </p>{" "}
        <br />
        <p>
          <strong>Explanation:</strong>
        </p>{" "}
        <br />
        <p>
          There is no need to perform a swap because <code>s</code> is already
          the lexicographically smallest.
        </p>
      </div>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= s.length &lt;= 100</code>
        </li>
        <li>
          <code>s</code> consists only of digits.
        </li>
      </ul>
    </div>
  ),
  133: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given a reference of a node in a{" "}
        <strong>
          <a
            href="https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph"
            target="_blank"
            rel="noreferrer"
          >
            connected
          </a>
        </strong>{" "}
        undirected graph.
      </p>

      <p>
        Return a{" "}
        <a
          href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy"
          target="_blank"
          rel="noreferrer"
        >
          <strong>deep copy</strong>
        </a>{" "}
        (clone) of the graph.
      </p>

      <p>
        Each node in the graph contains a value (<code>int</code>) and a list (
        <code>List[Node]</code>) of its neighbors.
      </p>

      <pre>
        {`class Node {
        public int val;
        public List&lt;Node&gt; neighbors;
    }`}
      </pre>

      <p>&nbsp;</p>

      <p>
        <strong>Test case format:</strong>
      </p>

      <p>
        For simplicity, each node's value is the same as the node's index
        (1-indexed). For example, the first node with <code>val == 1</code>, the
        second node with <code>val == 2</code>, and so on. The graph is
        represented in the test case using an adjacency list.
      </p>

      <p>
        <b>An adjacency list</b> is a collection of unordered <b>lists</b> used
        to represent a finite graph. Each list describes the set of neighbors of
        a node in the graph.
      </p>

      <p>
        The given node will always be the first node with <code>val = 1</code>.
        You must return the <strong>copy of the given node</strong> as a
        reference to the cloned graph.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png"
        style={{ width: 454, height: 500 }}
      />
      <pre>
        <strong>Input:</strong> adjList = [[2,4],[1,3],[2,4],[1,3]]
        <br />
        <strong>Output:</strong> [[2,4],[1,3],[2,4],[1,3]]
        <br />
        <strong>Explanation:</strong> There are 4 nodes in the graph.
        <br />
        1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val
        = 4).
        <br />
        2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val
        = 3).
        <br />
        3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val
        = 4).
        <br />
        4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val
        = 3).
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/01/07/graph.png"
        style={{ width: 163, height: 148 }}
      />
      <pre>
        <strong>Input:</strong> adjList = [[]] <br />
        <strong>Output:</strong> [[]] <br />
        <strong>Explanation:</strong> Note that the input contains one empty
        list. The graph consists of only one node with val = 1 and it does not
        have any neighbors.
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> adjList = [] <br />
        <strong>Output:</strong> [] <br />
        <strong>Explanation:</strong> This an empty graph, it does not have any
        nodes.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          The number of nodes in the graph is in the range <code>[0, 100]</code>
          .
        </li>
        <li>
          <code>1 &lt;= Node.val &lt;= 100</code>
        </li>
        <li>
          <code>Node.val</code> is unique for each node.
        </li>
        <li>There are no repeated edges and no self-loops in the graph.</li>
        <li>
          The Graph is connected and all nodes can be visited starting from the
          given node.
        </li>
      </ul>
    </div>
  ),
  310: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        A tree is an undirected graph in which any two vertices are connected
        by&nbsp;<i>exactly</i>&nbsp;one path. In other words, any connected
        graph without simple cycles is a tree.
      </p>

      <p>
        Given a tree of <code>n</code> nodes&nbsp;labelled from <code>0</code>{" "}
        to <code>n - 1</code>, and an array of&nbsp;<code>n - 1</code>&nbsp;
        <code>edges</code> where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that there is an undirected edge between the two nodes&nbsp;
        <code>
          a<sub>i</sub>
        </code>{" "}
        and&nbsp;
        <code>
          b<sub>i</sub>
        </code>{" "}
        in the tree,&nbsp;you can choose any node of the tree as the root. When
        you select a node <code>x</code> as the root, the result tree has height{" "}
        <code>h</code>. Among all possible rooted trees, those with minimum
        height (i.e. <code>min(h)</code>)&nbsp; are called{" "}
        <strong>minimum height trees</strong> (MHTs).
      </p>

      <p>
        Return{" "}
        <em>
          a list of all <strong>MHTs'</strong> root labels
        </em>
        .&nbsp;You can return the answer in <strong>any order</strong>.
      </p>

      <p>
        The <strong>height</strong> of a rooted tree is the number of edges on
        the longest downward path between the root and a leaf.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/01/e1.jpg"
        style={{ width: 800, height: 213 }}
      />
      <pre>
        <strong>Input:</strong> n = 4, edges = [[1,0],[1,2],[1,3]] <br />
        <strong>Output:</strong> [1] <br />
        <strong>Explanation:</strong> As shown, the height of the tree is 1 when
        the root is the node with label 1 which is the only MHT.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/09/01/e2.jpg"
        style={{ width: 800, height: 321 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]{" "}
        <br />
        <strong>Output:</strong> [3,4]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 2 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          All the pairs{" "}
          <code>
            (a<sub>i</sub>, b<sub>i</sub>)
          </code>{" "}
          are distinct.
        </li>
        <li>
          The given input is <strong>guaranteed</strong> to be a tree and there
          will be <strong>no repeated</strong> edges.
        </li>
      </ul>
    </div>
  ),
  765: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There are <code>n</code> couples sitting in <code>2n</code> seats
        arranged in a row and want to hold hands.
      </p>

      <p>
        The people and seats are represented by an integer array{" "}
        <code>row</code> where <code>row[i]</code> is the ID of the person
        sitting in the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        seat. The couples are numbered in order, the first couple being{" "}
        <code>(0, 1)</code>, the second couple being <code>(2, 3)</code>, and so
        on with the last couple being <code>(2n - 2, 2n - 1)</code>.
      </p>

      <p>
        Return{" "}
        <em>
          the minimum number of swaps so that every couple is sitting side by
          side
        </em>
        . A swap consists of choosing any two people, then they stand up and
        switch seats.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> row = [0,2,1,3] <br />
        <strong>Output:</strong> 1 <br />
        <strong>Explanation:</strong> We only need to swap the second (row[1])
        and third (row[2]) person.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> row = [3,2,0,1] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> All couples are already seated side by
        side.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2n == row.length</code>
        </li>
        <li>
          <code>2 &lt;= n &lt;= 30</code>
        </li>
        <li>
          <code>n</code> is even.
        </li>
        <li>
          <code>0 &lt;= row[i] &lt; 2n</code>
        </li>
        <li>
          All the elements of <code>row</code> are <strong>unique</strong>.
        </li>
      </ul>
    </div>
  ),
  785: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an <strong>undirected</strong> graph with <code>n</code> nodes,
        where each node is numbered between <code>0</code> and{" "}
        <code>n - 1</code>. You are given a 2D array <code>graph</code>, where{" "}
        <code>graph[u]</code> is an array of nodes that node <code>u</code> is
        adjacent to. More formally, for each <code>v</code> in{" "}
        <code>graph[u]</code>, there is an undirected edge between node{" "}
        <code>u</code> and node <code>v</code>. The graph has the following
        properties:
      </p>

      <ul>
        <li>
          There are no self-edges (<code>graph[u]</code> does not contain{" "}
          <code>u</code>).
        </li>
        <li>
          There are no parallel edges (<code>graph[u]</code> does not contain
          duplicate values).
        </li>
        <li>
          If <code>v</code> is in <code>graph[u]</code>, then <code>u</code> is
          in <code>graph[v]</code> (the graph is undirected).
        </li>
        <li>
          The graph may not be connected, meaning there may be two nodes{" "}
          <code>u</code> and <code>v</code> such that there is no path between
          them.
        </li>
      </ul>

      <p>
        A graph is <strong>bipartite</strong> if the nodes can be partitioned
        into two independent sets <code>A</code> and <code>B</code> such that{" "}
        <strong>every</strong> edge in the graph connects a node in set{" "}
        <code>A</code> and a node in set <code>B</code>.
      </p>

      <p>
        Return <code>true</code>
        <em>
          {" "}
          if and only if it is <strong>bipartite</strong>
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg"
        style={{ width: 222, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[1,2,3],[0,2],[0,1,3],[0,2]] <br />
        <strong>Output:</strong> false <br />
        <strong>Explanation:</strong> There is no way to partition the nodes
        into two independent sets such that every edge connects a node in one
        and a node in the other.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg"
        style={{ width: 222, height: 222 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[1,3],[0,2],[1,3],[0,2]] <br />
        <strong>Output:</strong> true <br />
        <strong>Explanation:</strong> We can partition the nodes into two sets:{" "}
        {(0, 2)} and {(1, 3)}.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>graph.length == n</code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>0 &lt;= graph[u].length &lt; n</code>
        </li>
        <li>
          <code>0 &lt;= graph[u][i] &lt;= n - 1</code>
        </li>
        <li>
          <code>graph[u]</code>&nbsp;does not contain&nbsp;<code>u</code>.
        </li>
        <li>
          All the values of <code>graph[u]</code> are <strong>unique</strong>.
        </li>
        <li>
          If <code>graph[u]</code> contains <code>v</code>, then{" "}
          <code>graph[v]</code> contains <code>u</code>.
        </li>
      </ul>
    </div>
  ),
  802: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is a directed graph of <code>n</code> nodes with each node labeled
        from <code>0</code> to <code>n - 1</code>. The graph is represented by a{" "}
        <strong>0-indexed</strong> 2D integer array <code>graph</code> where{" "}
        <code>graph[i]</code> is an integer array of nodes adjacent to node{" "}
        <code>i</code>, meaning there is an edge from node <code>i</code> to
        each node in <code>graph[i]</code>.
      </p>

      <p>
        A node is a <strong>terminal node</strong> if there are no outgoing
        edges. A node is a <strong>safe node</strong> if every possible path
        starting from that node leads to a <strong>terminal node</strong> (or
        another safe node).
      </p>

      <p>
        Return{" "}
        <em>
          an array containing all the <strong>safe nodes</strong> of the graph
        </em>
        . The answer should be sorted in <strong>ascending</strong> order.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt="Illustration of graph"
        src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png"
        style={{ height: 171, width: 600 }}
      />
      <pre>
        <strong>Input:</strong> graph = [[1,2],[2,3],[5],[0],[5],[],[]] <br />
        <strong>Output:</strong> [2,4,5,6] <br />
        <strong>Explanation:</strong> The given graph is shown above. <br />
        Nodes 5 and 6 are terminal nodes as there are no outgoing edges from
        either of them. <br />
        Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or
        6.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]] <br />
        <strong>Output:</strong> [4] <br />
        <strong>Explanation:</strong> <br />
        Only node 4 is a terminal node, and every path starting at node 4 leads
        to node 4.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>n == graph.length</code>
        </li>
        <li>
          <code>
            1 &lt;= n &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>0 &lt;= graph[i].length &lt;= n</code>
        </li>
        <li>
          <code>0 &lt;= graph[i][j] &lt;= n - 1</code>
        </li>
        <li>
          <code>graph[i]</code> is sorted in a strictly increasing order.
        </li>
        <li>The graph may contain self-loops.</li>
        <li>
          The number of edges in the graph will be in the range{" "}
          <code>
            [1, 4 * 10<sup>4</sup>]
          </code>
          .
        </li>
      </ul>
    </div>
  ),
  834: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an undirected connected tree with <code>n</code> nodes labeled
        from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> edges.
      </p>

      <p>
        You are given the integer <code>n</code> and the array{" "}
        <code>edges</code> where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between nodes{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>{" "}
        in the tree.
      </p>

      <p>
        Return an array <code>answer</code> of length <code>n</code> where{" "}
        <code>answer[i]</code> is the sum of the distances between the{" "}
        <code>
          i<sup>th</sup>
        </code>{" "}
        node in the tree and all other nodes.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist1.jpg"
        style={{ width: 304, height: 224 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]{" "}
        <br />
        <strong>Output:</strong> [8,12,6,10,10,10] <br />
        <strong>Explanation:</strong> The tree is shown above. <br />
        We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) +
        dist(0,5) <br />
        equals 1 + 1 + 2 + 2 + 2 = 8.
        <br />
        Hence, answer[0] = 8, and so on.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist2.jpg"
        style={{ width: 64, height: 65 }}
      />
      <pre>
        <strong>Input:</strong> n = 1, edges = [] <br />
        <strong>Output:</strong> [0]
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist3.jpg"
        style={{ width: 144, height: 145 }}
      />
      <pre>
        <strong>Input:</strong> n = 2, edges = [[1,0]] <br />
        <strong>Output:</strong> [1,1]
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            1 &lt;= n &lt;= 3 * 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n
          </code>
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>The given input represents a valid tree.</li>
      </ul>
    </div>
  ),
  997: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        In a town, there are <code>n</code> people labeled from <code>1</code>{" "}
        to <code>n</code>. There is a rumor that one of these people is secretly
        the town judge.
      </p>

      <p>If the town judge exists, then:</p>

      <ul>
        <li>The town judge trusts nobody.</li>
        <li>Everybody (except for the town judge) trusts the town judge.</li>
        <li>
          There is exactly one person that satisfies properties{" "}
          <strong>1</strong> and <strong>2</strong>.
        </li>
      </ul>

      <p>
        You are given an array <code>trust</code> where{" "}
        <code>
          trust[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        representing that the person labeled{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        trusts the person labeled{" "}
        <code>
          b<sub>i</sub>
        </code>
        . If a trust relationship does not exist in <code>trust</code> array,
        then such a trust relationship does not exist.
      </p>

      <p>
        Return{" "}
        <em>
          the label of the town judge if the town judge exists and can be
          identified, or return{" "}
        </em>
        <code>-1</code>
        <em> otherwise</em>.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 2, trust = [[1,2]] <br />
        <strong>Output:</strong> 2
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, trust = [[1,3],[2,3]] <br />
        <strong>Output:</strong> 3
      </pre>

      <p>
        <strong class="example">Example 3:</strong>
      </p>

      <pre>
        <strong>Input:</strong> n = 3, trust = [[1,3],[2,3],[3,1]] <br />
        <strong>Output:</strong> -1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>
            0 &lt;= trust.length &lt;= 10<sup>4</sup>
          </code>
        </li>
        <li>
          <code>trust[i].length == 2</code>
        </li>
        <li>
          All the pairs of <code>trust</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>
            a<sub>i</sub> != b<sub>i</sub>
          </code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n
          </code>
        </li>
      </ul>
    </div>
  ),
  1298: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You have <code>n</code> boxes labeled from <code>0</code> to{" "}
        <code>n - 1</code>. You are given four arrays: <code>status</code>,{" "}
        <code>candies</code>, <code>keys</code>, and <code>containedBoxes</code>{" "}
        where:
      </p>

      <ul>
        <li>
          <code>status[i]</code> is <code>1</code> if the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          box is open and <code>0</code> if the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          box is closed,
        </li>
        <li>
          <code>candies[i]</code> is the number of candies in the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          box,
        </li>
        <li>
          <code>keys[i]</code> is a list of the labels of the boxes you can open
          after opening the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          box.
        </li>
        <li>
          <code>containedBoxes[i]</code> is a list of the boxes you found inside
          the{" "}
          <code>
            i<sup>th</sup>
          </code>{" "}
          box.
        </li>
      </ul>

      <p>
        You are given an integer array <code>initialBoxes</code> that contains
        the labels of the boxes you initially have. You can take all the candies
        in <strong>any open box</strong> and you can use the keys in it to open
        new boxes and you also can use the boxes you find in it.
      </p>

      <p>
        Return{" "}
        <em>
          the maximum number of candies you can get following the rules above
        </em>
        .
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>

      <pre>
        <strong>Input:</strong> status = [1,0,1,0], candies = [7,5,4,100], keys
        = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]{" "}
        <br />
        <strong>Output:</strong> 16 <br />
        <strong>Explanation:</strong> You will be initially given box 0. You
        will find 7 candies in it and boxes 1 and 2. <br />
        Box 1 is closed and you do not have a key for it so you will open box 2.
        You will find 4 candies and a key to box 1 in box 2. <br />
        In box 1, you will find 5 candies and box 3 but you will not find a key
        to box 3 so box 3 will remain closed.
        <br />
        Total number of candies collected = 7 + 4 + 5 = 16 candy.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1],
        keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes =
        [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]
        <br />
        <strong>Output:</strong> 6<br />
        <strong>Explanation:</strong> You have initially box 0. Opening it you
        can find boxes 1,2,3,4 and 5 and their keys.
        <br />
        The total number of candies will be 6.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            n == status.length == candies.length == keys.length ==
            containedBoxes.length
          </code>
        </li>
        <li>
          <code>1 &lt;= n &lt;= 1000</code>
        </li>
        <li>
          <code>status[i]</code> is either <code>0</code> or <code>1</code>.
        </li>
        <li>
          <code>1 &lt;= candies[i] &lt;= 1000</code>
        </li>
        <li>
          <code>0 &lt;= keys[i].length &lt;= n</code>
        </li>
        <li>
          <code>0 &lt;= keys[i][j] &lt; n</code>
        </li>
        <li>
          All values of <code>keys[i]</code> are <strong>unique</strong>.
        </li>
        <li>
          <code>0 &lt;= containedBoxes[i].length &lt;= n</code>
        </li>
        <li>
          <code>0 &lt;= containedBoxes[i][j] &lt; n</code>
        </li>
        <li>
          All values of <code>containedBoxes[i]</code> are unique.
        </li>
        <li>Each box is contained in one box at most.</li>
        <li>
          <code>0 &lt;= initialBoxes.length &lt;= n</code>
        </li>
        <li>
          <code>0 &lt;= initialBoxes[i] &lt; n</code>
        </li>
      </ul>
    </div>
  ),
  1377: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        Given an undirected tree consisting of <code>n</code> vertices numbered
        from <code>1</code> to <code>n</code>. A frog starts jumping from{" "}
        <strong>vertex 1</strong>. In one second, the frog jumps from its
        current vertex to another <strong>unvisited</strong> vertex if they are
        directly connected. The frog can not jump back to a visited vertex. In
        case the frog can jump to several vertices, it jumps randomly to one of
        them with the same probability. Otherwise, when the frog can not jump to
        any unvisited vertex, it jumps forever on the same vertex.
      </p>

      <p>
        The edges of the undirected tree are given in the array{" "}
        <code>edges</code>, where{" "}
        <code>
          edges[i] = [a<sub>i</sub>, b<sub>i</sub>]
        </code>{" "}
        means that exists an edge connecting the vertices{" "}
        <code>
          a<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          b<sub>i</sub>
        </code>
        .
      </p>

      <p>
        <em>
          Return the probability that after <code>t</code> seconds the frog is
          on the vertex <code>target</code>.{" "}
        </em>
        Answers within{" "}
        <code>
          10<sup>-5</sup>
        </code>{" "}
        of the actual answer will be accepted.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/12/21/frog1.jpg"
        style={{ width: 338, height: 304 }}
      />
      <pre>
        <strong>Input:</strong> n = 7, edges =
        [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4 <br />
        <strong>Output:</strong> 0.16666666666666666 <br />
        <strong>Explanation:</strong> The figure above shows the given graph.
        The frog starts at vertex 1, jumping with 1/3 probability to the vertex
        2 after <strong>second 1</strong> and then jumping with 1/2 probability
        to vertex 4 after <strong>second 2</strong>. Thus the probability for
        the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 =
        0.16666666666666666.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <strong>
        <img
          alt=""
          src="https://assets.leetcode.com/uploads/2021/12/21/frog2.jpg"
          style={{ width: 304, height: 304 }}
        />
      </strong>

      <pre>
        <strong>Input:</strong> n = 7, edges =
        [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7 <br />
        <strong>Output:</strong> 0.3333333333333333 <br />
        <strong>Explanation: </strong>The figure above shows the given graph.
        The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333
        probability to the vertex 7 after <strong>second 1</strong>.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 100</code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>1 &lt;= t &lt;= 50</code>
        </li>
        <li>
          <code>1 &lt;= target &lt;= n</code>
        </li>
      </ul>
    </div>
  ),
  1494: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an integer <code>n</code>, which indicates that there are{" "}
        <code>n</code> courses labeled from <code>1</code> to <code>n</code>.
        You are also given an array <code>relations</code> where{" "}
        <code>
          relations[i] = [prevCourse<sub>i</sub>, nextCourse<sub>i</sub>]
        </code>
        , representing a prerequisite relationship between course{" "}
        <code>
          prevCourse<sub>i</sub>
        </code>{" "}
        and course{" "}
        <code>
          nextCourse<sub>i</sub>
        </code>
        : course{" "}
        <code>
          prevCourse<sub>i</sub>
        </code>{" "}
        has to be taken before course{" "}
        <code>
          nextCourse<sub>i</sub>
        </code>
        . Also, you are given the integer <code>k</code>.
      </p>

      <p>
        In one semester, you can take <strong>at most</strong> <code>k</code>{" "}
        courses as long as you have taken all the prerequisites in the{" "}
        <strong>previous</strong> semesters for the courses you are taking.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> number of semesters needed to take all
          courses
        </em>
        . The testcases will be generated such that it is possible to take every
        course.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_1.png"
        style={{ width: 269, height: 147 }}
      />
      <pre>
        <strong>Input:</strong> n = 4, relations = [[2,1],[3,1],[1,4]], k = 2{" "}
        <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> The figure above represents the given
        graph. <br />
        In the first semester, you can take courses 2 and 3.
        <br />
        In the second semester, you can take course 1.
        <br />
        In the third semester, you can take course 4.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_2.png"
        style={{ width: 271, height: 211 }}
      />
      <pre>
        <strong>Input:</strong> n = 5, relations = [[2,1],[3,1],[4,1],[1,5]], k
        = 2<br />
        <strong>Output:</strong> 4<br />
        <strong>Explanation:</strong> The figure above represents the given
        graph.
        <br />
        In the first semester, you can only take courses 2 and 3 since you
        cannot take more than two per semester.
        <br />
        In the second semester, you can take course 4.
        <br />
        In the third semester, you can take course 1.
        <br />
        In the fourth semester, you can take course 5.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>1 &lt;= n &lt;= 15</code>
        </li>
        <li>
          <code>1 &lt;= k &lt;= n</code>
        </li>
        <li>
          <code>0 &lt;= relations.length &lt;= n * (n-1) / 2</code>
        </li>
        <li>
          <code>relations[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= prevCourse<sub>i</sub>, nextCourse<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            prevCourse<sub>i</sub> != nextCourse<sub>i</sub>
          </code>
        </li>
        <li>
          All the pairs{" "}
          <code>
            [prevCourse<sub>i</sub>, nextCourse<sub>i</sub>]
          </code>{" "}
          are <strong>unique</strong>.
        </li>
        <li>The given graph is a directed acyclic graph.</li>
      </ul>
    </div>
  ),
  1761: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        You are given an undirected graph. You are given an integer{" "}
        <code>n</code> which is the number of nodes in the graph and an array{" "}
        <code>edges</code>, where each{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        indicates that there is an undirected edge between{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>
        .
      </p>

      <p>
        A <strong>connected trio</strong> is a set of <strong>three</strong>{" "}
        nodes where there is an edge between <b>every</b> pair of them.
      </p>

      <p>
        The <strong>degree of a connected trio</strong> is the number of edges
        where one endpoint is in the trio, and the other is not.
      </p>

      <p>
        Return{" "}
        <em>
          the <strong>minimum</strong> degree of a connected trio in the graph,
          or
        </em>{" "}
        <code>-1</code> <em>if the graph has no connected trios.</em>
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/26/trios1.png"
        style={{ width: 388, height: 164 }}
      />
      <pre>
        <strong>Input:</strong> n = 6, edges =
        [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]] <br />
        <strong>Output:</strong> 3 <br />
        <strong>Explanation:</strong> There is exactly one trio, which is
        [1,2,3]. The edges that form its degree are bolded in the figure above.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/01/26/trios2.png"
        style={{ width: 388, height: 164 }}
      />
      <pre>
        <strong>Input:</strong> n = 7, edges =
        [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]] <br />
        <strong>Output:</strong> 0 <br />
        <strong>Explanation:</strong> There are exactly three trios: <br />
        {`1)`} [1,4,3] with degree 0. <br />
        {`2)`} [2,5,6] with degree 2. <br />
        {`3)`} [5,6,7] with degree 2.
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>2 &lt;= n &lt;= 400</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>1 &lt;= edges.length &lt;= n * (n-1) / 2</code>
        </li>
        <li>
          <code>
            1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            u<sub>i </sub>!= v<sub>i</sub>
          </code>
        </li>
        <li>There are no repeated edges.</li>
      </ul>
    </div>
  ),
  1791: (
    <div class="elfjS" data-track-load="description_content">
      <p>
        There is an undirected <strong>star</strong> graph consisting of{" "}
        <code>n</code> nodes labeled from <code>1</code> to <code>n</code>. A
        star graph is a graph where there is one <strong>center</strong> node
        and <strong>exactly</strong> <code>n - 1</code> edges that connect the
        center node with every other node.
      </p>

      <p>
        You are given a 2D integer array <code>edges</code> where each{" "}
        <code>
          edges[i] = [u<sub>i</sub>, v<sub>i</sub>]
        </code>{" "}
        indicates that there is an edge between the nodes{" "}
        <code>
          u<sub>i</sub>
        </code>{" "}
        and{" "}
        <code>
          v<sub>i</sub>
        </code>
        . Return the center of the given star graph.
      </p>

      <p>&nbsp;</p>
      <p>
        <strong class="example">Example 1:</strong>
      </p>
      <img
        alt=""
        src="https://assets.leetcode.com/uploads/2021/02/24/star_graph.png"
        style={{ width: 331, height: 321 }}
      />
      <pre>
        <strong>Input:</strong> edges = [[1,2],[2,3],[4,2]] <br />
        <strong>Output:</strong> 2 <br />
        <strong>Explanation:</strong> As shown in the figure above, node 2 is
        connected to every other node, so 2 is the center.
      </pre>

      <p>
        <strong class="example">Example 2:</strong>
      </p>

      <pre>
        <strong>Input:</strong> edges = [[1,2],[5,1],[1,3],[1,4]] <br />
        <strong>Output:</strong> 1
      </pre>

      <p>&nbsp;</p>
      <p>
        <strong>Constraints:</strong>
      </p>

      <ul>
        <li>
          <code>
            3 &lt;= n &lt;= 10<sup>5</sup>
          </code>
        </li>
        <li>
          <code>edges.length == n - 1</code>
        </li>
        <li>
          <code>edges[i].length == 2</code>
        </li>
        <li>
          <code>
            1 &lt;= u<sub>i,</sub> v<sub>i</sub> &lt;= n
          </code>
        </li>
        <li>
          <code>
            u<sub>i</sub> != v<sub>i</sub>
          </code>
        </li>
        <li>
          The given <code>edges</code> represent a valid star graph.
        </li>
      </ul>
    </div>
  ),
};

export default QUESTIONS;
